
Oxygen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f84  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08007124  08007124  00017124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007258  08007258  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08007258  08007258  00017258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007260  08007260  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007260  08007260  00017260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007264  08007264  00017264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08007268  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  2000005c  080072c4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003dc  080072c4  000203dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012b09  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025eb  00000000  00000000  00032bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001148  00000000  00000000  000351c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000db4  00000000  00000000  00036310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002c20  00000000  00000000  000370c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015cd1  00000000  00000000  00039ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a1f6a  00000000  00000000  0004f9b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f4c  00000000  00000000  000f1920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  000f686c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800710c 	.word	0x0800710c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	0800710c 	.word	0x0800710c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <I2C_send>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void I2C_send(uint8_t data, uint8_t flags)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af02      	add	r7, sp, #8
 8000582:	4603      	mov	r3, r0
 8000584:	460a      	mov	r2, r1
 8000586:	71fb      	strb	r3, [r7, #7]
 8000588:	4613      	mov	r3, r2
 800058a:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef res;
	    for(;;) {                                                                     // бесконечный цикл
	        res = HAL_I2C_IsDeviceReady(&hi2c1, LCD_ADDR, 1, HAL_MAX_DELAY);          // проверяем, готово ли устройство по адресу lcd_addr для связи
 800058c:	f04f 33ff 	mov.w	r3, #4294967295
 8000590:	2201      	movs	r2, #1
 8000592:	214e      	movs	r1, #78	; 0x4e
 8000594:	4820      	ldr	r0, [pc, #128]	; (8000618 <I2C_send+0x9c>)
 8000596:	f002 fbeb 	bl	8002d70 <HAL_I2C_IsDeviceReady>
 800059a:	4603      	mov	r3, r0
 800059c:	73fb      	strb	r3, [r7, #15]
	        if(res == HAL_OK) break;                                                  // если да, то выходим из бесконечного цикла
 800059e:	7bfb      	ldrb	r3, [r7, #15]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d000      	beq.n	80005a6 <I2C_send+0x2a>
	        res = HAL_I2C_IsDeviceReady(&hi2c1, LCD_ADDR, 1, HAL_MAX_DELAY);          // проверяем, готово ли устройство по адресу lcd_addr для связи
 80005a4:	e7f2      	b.n	800058c <I2C_send+0x10>
	        if(res == HAL_OK) break;                                                  // если да, то выходим из бесконечного цикла
 80005a6:	bf00      	nop
	    }

	uint8_t up = data & 0xF0;                 // операция �? с 1111 0000, приводит к обнулению последних бит с 0 по 3, остаются биты с 4 по 7
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	f023 030f 	bic.w	r3, r3, #15
 80005ae:	73bb      	strb	r3, [r7, #14]
	uint8_t lo = (data << 4) & 0xF0;          // тоже самое, но data сдвигается на 4 бита влево, т.е. в этой
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	011b      	lsls	r3, r3, #4
 80005b4:	737b      	strb	r3, [r7, #13]
	                                           // переменной остаются  биты с 0 по 3
	uint8_t data_arr[4];
	data_arr[0] = up|flags|BACKLIGHT|PIN_EN;  // 4-7 биты содержат информацию, биты 0-3 конфигурируют работу
 80005b6:	7bba      	ldrb	r2, [r7, #14]
 80005b8:	79bb      	ldrb	r3, [r7, #6]
 80005ba:	4313      	orrs	r3, r2
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	f043 030c 	orr.w	r3, r3, #12
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	723b      	strb	r3, [r7, #8]
	data_arr[1] = up|flags|BACKLIGHT;         // ублирование сигнала, на выводе Е в этот раз 0
 80005c6:	7bba      	ldrb	r2, [r7, #14]
 80005c8:	79bb      	ldrb	r3, [r7, #6]
 80005ca:	4313      	orrs	r3, r2
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	f043 0308 	orr.w	r3, r3, #8
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	727b      	strb	r3, [r7, #9]
	data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 80005d6:	7b7a      	ldrb	r2, [r7, #13]
 80005d8:	79bb      	ldrb	r3, [r7, #6]
 80005da:	4313      	orrs	r3, r2
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	f043 030c 	orr.w	r3, r3, #12
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	72bb      	strb	r3, [r7, #10]
	data_arr[3] = lo|flags|BACKLIGHT;
 80005e6:	7b7a      	ldrb	r2, [r7, #13]
 80005e8:	79bb      	ldrb	r3, [r7, #6]
 80005ea:	4313      	orrs	r3, r2
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	f043 0308 	orr.w	r3, r3, #8
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 80005f6:	f107 0208 	add.w	r2, r7, #8
 80005fa:	f04f 33ff 	mov.w	r3, #4294967295
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2304      	movs	r3, #4
 8000602:	214e      	movs	r1, #78	; 0x4e
 8000604:	4804      	ldr	r0, [pc, #16]	; (8000618 <I2C_send+0x9c>)
 8000606:	f002 fab5 	bl	8002b74 <HAL_I2C_Master_Transmit>
	HAL_Delay(LCD_DELAY_MS);
 800060a:	2005      	movs	r0, #5
 800060c:	f001 f9ea 	bl	80019e4 <HAL_Delay>
}
 8000610:	bf00      	nop
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	200000c0 	.word	0x200000c0

0800061c <LCD_SendString>:


void LCD_SendString(char *str)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]

	while(*str) {                                   // пока строчка не закончится
 8000624:	e008      	b.n	8000638 <LCD_SendString+0x1c>
		I2C_send((uint8_t)(*str), 1);               // передача первого символа строки
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2101      	movs	r1, #1
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ffa5 	bl	800057c <I2C_send>
        str++;                                      // сдвиг строки налево на 1 символ
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	3301      	adds	r3, #1
 8000636:	607b      	str	r3, [r7, #4]
	while(*str) {                                   // пока строчка не закончится
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d1f2      	bne.n	8000626 <LCD_SendString+0xa>
    }
}
 8000640:	bf00      	nop
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b5b0      	push	{r4, r5, r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000652:	f001 f955 	bl	8001900 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000656:	f000 fadb 	bl	8000c10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065a:	f000 fddf 	bl	800121c <MX_GPIO_Init>
  MX_I2C1_Init();
 800065e:	f000 fb95 	bl	8000d8c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000662:	f000 fdb1 	bl	80011c8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000666:	f000 fc19 	bl	8000e9c <MX_TIM1_Init>
  MX_RTC_Init();
 800066a:	f000 fbbd 	bl	8000de8 <MX_RTC_Init>
  MX_ADC1_Init();
 800066e:	f000 fb3b 	bl	8000ce8 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000672:	f000 fcb5 	bl	8000fe0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000676:	f000 fd31 	bl	80010dc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  I2C_send(0b00110000,0);   // 8ми битный интерфейс
 800067a:	2100      	movs	r1, #0
 800067c:	2030      	movs	r0, #48	; 0x30
 800067e:	f7ff ff7d 	bl	800057c <I2C_send>
   I2C_send(0b00000010,0);   // установка курсора в начале строки
 8000682:	2100      	movs	r1, #0
 8000684:	2002      	movs	r0, #2
 8000686:	f7ff ff79 	bl	800057c <I2C_send>
   I2C_send(0b00001100,0);   // нормальный режим работы
 800068a:	2100      	movs	r1, #0
 800068c:	200c      	movs	r0, #12
 800068e:	f7ff ff75 	bl	800057c <I2C_send>
   I2C_send(0b00000001,0);   // очистка дисплея
 8000692:	2100      	movs	r1, #0
 8000694:	2001      	movs	r0, #1
 8000696:	f7ff ff71 	bl	800057c <I2C_send>
   //  LCD_SendString("  Hello ");
   //  I2C_send(0b11000000,0);   // переход на 2 строку

   //  I2C_send(0b10010100,0);   // переход на 3 строку

     I2C_send(0b11010100,0);   // переход на 4 строку
 800069a:	2100      	movs	r1, #0
 800069c:	20d4      	movs	r0, #212	; 0xd4
 800069e:	f7ff ff6d 	bl	800057c <I2C_send>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)==0)&&(flag==0)){
 80006a2:	2110      	movs	r1, #16
 80006a4:	48ad      	ldr	r0, [pc, #692]	; (800095c <main+0x310>)
 80006a6:	f002 f8cb 	bl	8002840 <HAL_GPIO_ReadPin>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d11c      	bne.n	80006ea <main+0x9e>
 80006b0:	4bab      	ldr	r3, [pc, #684]	; (8000960 <main+0x314>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d118      	bne.n	80006ea <main+0x9e>
		  regim++;
 80006b8:	4baa      	ldr	r3, [pc, #680]	; (8000964 <main+0x318>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	3301      	adds	r3, #1
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	4ba8      	ldr	r3, [pc, #672]	; (8000964 <main+0x318>)
 80006c2:	701a      	strb	r2, [r3, #0]
		  flag=1;
 80006c4:	4ba6      	ldr	r3, [pc, #664]	; (8000960 <main+0x314>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	701a      	strb	r2, [r3, #0]
		  arm=0;
 80006ca:	4ba7      	ldr	r3, [pc, #668]	; (8000968 <main+0x31c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	701a      	strb	r2, [r3, #0]
		  run=0;
 80006d0:	4ba6      	ldr	r3, [pc, #664]	; (800096c <main+0x320>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(150);
 80006d6:	2096      	movs	r0, #150	; 0x96
 80006d8:	f001 f984 	bl	80019e4 <HAL_Delay>
		  if(regim>3){regim=1;}
 80006dc:	4ba1      	ldr	r3, [pc, #644]	; (8000964 <main+0x318>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b03      	cmp	r3, #3
 80006e2:	d902      	bls.n	80006ea <main+0x9e>
 80006e4:	4b9f      	ldr	r3, [pc, #636]	; (8000964 <main+0x318>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	701a      	strb	r2, [r3, #0]
         }


	  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)==1)&&(flag==1)){
 80006ea:	2110      	movs	r1, #16
 80006ec:	489b      	ldr	r0, [pc, #620]	; (800095c <main+0x310>)
 80006ee:	f002 f8a7 	bl	8002840 <HAL_GPIO_ReadPin>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d109      	bne.n	800070c <main+0xc0>
 80006f8:	4b99      	ldr	r3, [pc, #612]	; (8000960 <main+0x314>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d105      	bne.n	800070c <main+0xc0>

		  flag=0;
 8000700:	4b97      	ldr	r3, [pc, #604]	; (8000960 <main+0x314>)
 8000702:	2200      	movs	r2, #0
 8000704:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(150);
 8000706:	2096      	movs	r0, #150	; 0x96
 8000708:	f001 f96c 	bl	80019e4 <HAL_Delay>

	  }

	  sprintf(time_buffer," %04d-%02d-%02d  %02d:%02d:%02d",year, month, date,hour, minute, second);
 800070c:	4b98      	ldr	r3, [pc, #608]	; (8000970 <main+0x324>)
 800070e:	881b      	ldrh	r3, [r3, #0]
 8000710:	461c      	mov	r4, r3
 8000712:	4b98      	ldr	r3, [pc, #608]	; (8000974 <main+0x328>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	461d      	mov	r5, r3
 8000718:	4b97      	ldr	r3, [pc, #604]	; (8000978 <main+0x32c>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	461a      	mov	r2, r3
 800071e:	4b97      	ldr	r3, [pc, #604]	; (800097c <main+0x330>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	4619      	mov	r1, r3
 8000724:	4b96      	ldr	r3, [pc, #600]	; (8000980 <main+0x334>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	4618      	mov	r0, r3
 800072a:	4b96      	ldr	r3, [pc, #600]	; (8000984 <main+0x338>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	9303      	str	r3, [sp, #12]
 8000730:	9002      	str	r0, [sp, #8]
 8000732:	9101      	str	r1, [sp, #4]
 8000734:	9200      	str	r2, [sp, #0]
 8000736:	462b      	mov	r3, r5
 8000738:	4622      	mov	r2, r4
 800073a:	4993      	ldr	r1, [pc, #588]	; (8000988 <main+0x33c>)
 800073c:	4893      	ldr	r0, [pc, #588]	; (800098c <main+0x340>)
 800073e:	f006 f841 	bl	80067c4 <siprintf>
	  	  		//I2C_send(0b00000001,0);   // очистка дисплея
	  	  	    I2C_send(0b11010100,0);   // переход на 4 строку
 8000742:	2100      	movs	r1, #0
 8000744:	20d4      	movs	r0, #212	; 0xd4
 8000746:	f7ff ff19 	bl	800057c <I2C_send>
	  	  		LCD_SendString(time_buffer);
 800074a:	4890      	ldr	r0, [pc, #576]	; (800098c <main+0x340>)
 800074c:	f7ff ff66 	bl	800061c <LCD_SendString>




	  if(regim==1){
 8000750:	4b84      	ldr	r3, [pc, #528]	; (8000964 <main+0x318>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b01      	cmp	r3, #1
 8000756:	f040 8155 	bne.w	8000a04 <main+0x3b8>
		  I2C_send(0b10000000,0);   // переход на 1 строку
 800075a:	2100      	movs	r1, #0
 800075c:	2080      	movs	r0, #128	; 0x80
 800075e:	f7ff ff0d 	bl	800057c <I2C_send>
		  LCD_SendString("RUN MODE-           ");
 8000762:	488b      	ldr	r0, [pc, #556]	; (8000990 <main+0x344>)
 8000764:	f7ff ff5a 	bl	800061c <LCD_SendString>
		  I2C_send(0b11000000,0);   // переход на 2 строку
 8000768:	2100      	movs	r1, #0
 800076a:	20c0      	movs	r0, #192	; 0xc0
 800076c:	f7ff ff06 	bl	800057c <I2C_send>
		  sprintf(info_buffer,"Turns=%04d      ",turns);
 8000770:	4b88      	ldr	r3, [pc, #544]	; (8000994 <main+0x348>)
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	461a      	mov	r2, r3
 8000776:	4988      	ldr	r1, [pc, #544]	; (8000998 <main+0x34c>)
 8000778:	4888      	ldr	r0, [pc, #544]	; (800099c <main+0x350>)
 800077a:	f006 f823 	bl	80067c4 <siprintf>
		  LCD_SendString(info_buffer);
 800077e:	4887      	ldr	r0, [pc, #540]	; (800099c <main+0x350>)
 8000780:	f7ff ff4c 	bl	800061c <LCD_SendString>
		  FORVARD;
 8000784:	2200      	movs	r2, #0
 8000786:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800078a:	4885      	ldr	r0, [pc, #532]	; (80009a0 <main+0x354>)
 800078c:	f002 f870 	bl	8002870 <HAL_GPIO_WritePin>
		  I2C_send(0b10010100,0);   // переход на 3 строку
 8000790:	2100      	movs	r1, #0
 8000792:	2094      	movs	r0, #148	; 0x94
 8000794:	f7ff fef2 	bl	800057c <I2C_send>
		  sprintf(info_buffer,"Speed=%04d RPM     ",speed);
 8000798:	4b82      	ldr	r3, [pc, #520]	; (80009a4 <main+0x358>)
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	461a      	mov	r2, r3
 800079e:	4982      	ldr	r1, [pc, #520]	; (80009a8 <main+0x35c>)
 80007a0:	487e      	ldr	r0, [pc, #504]	; (800099c <main+0x350>)
 80007a2:	f006 f80f 	bl	80067c4 <siprintf>
		  		  LCD_SendString(info_buffer);
 80007a6:	487d      	ldr	r0, [pc, #500]	; (800099c <main+0x350>)
 80007a8:	f7ff ff38 	bl	800061c <LCD_SendString>



		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==1)&&(arm==0)&&(run==0)){
 80007ac:	2108      	movs	r1, #8
 80007ae:	486b      	ldr	r0, [pc, #428]	; (800095c <main+0x310>)
 80007b0:	f002 f846 	bl	8002840 <HAL_GPIO_ReadPin>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d119      	bne.n	80007ee <main+0x1a2>
 80007ba:	4b6b      	ldr	r3, [pc, #428]	; (8000968 <main+0x31c>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d115      	bne.n	80007ee <main+0x1a2>
 80007c2:	4b6a      	ldr	r3, [pc, #424]	; (800096c <main+0x320>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d111      	bne.n	80007ee <main+0x1a2>
			  HAL_Delay(50);
 80007ca:	2032      	movs	r0, #50	; 0x32
 80007cc:	f001 f90a 	bl	80019e4 <HAL_Delay>
			  I2C_send(0b10000000,0);   // переход на 1 строку
 80007d0:	2100      	movs	r1, #0
 80007d2:	2080      	movs	r0, #128	; 0x80
 80007d4:	f7ff fed2 	bl	800057c <I2C_send>
			  		  LCD_SendString("RUN MODE- READY...  ");
 80007d8:	4874      	ldr	r0, [pc, #464]	; (80009ac <main+0x360>)
 80007da:	f7ff ff1f 	bl	800061c <LCD_SendString>
			  		 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80007de:	2100      	movs	r1, #0
 80007e0:	4873      	ldr	r0, [pc, #460]	; (80009b0 <main+0x364>)
 80007e2:	f003 fed1 	bl	8004588 <HAL_TIM_PWM_Stop>
			  		 HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80007e6:	2100      	movs	r1, #0
 80007e8:	4871      	ldr	r0, [pc, #452]	; (80009b0 <main+0x364>)
 80007ea:	f004 ff81 	bl	80056f0 <HAL_TIMEx_PWMN_Stop>
		  }

		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==0)&&(arm==0)&&(run==0)){
 80007ee:	2108      	movs	r1, #8
 80007f0:	485a      	ldr	r0, [pc, #360]	; (800095c <main+0x310>)
 80007f2:	f002 f825 	bl	8002840 <HAL_GPIO_ReadPin>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d10d      	bne.n	8000818 <main+0x1cc>
 80007fc:	4b5a      	ldr	r3, [pc, #360]	; (8000968 <main+0x31c>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d109      	bne.n	8000818 <main+0x1cc>
 8000804:	4b59      	ldr	r3, [pc, #356]	; (800096c <main+0x320>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d105      	bne.n	8000818 <main+0x1cc>
                 arm=1;
 800080c:	4b56      	ldr	r3, [pc, #344]	; (8000968 <main+0x31c>)
 800080e:	2201      	movs	r2, #1
 8000810:	701a      	strb	r2, [r3, #0]
					  HAL_Delay(150); }
 8000812:	2096      	movs	r0, #150	; 0x96
 8000814:	f001 f8e6 	bl	80019e4 <HAL_Delay>

		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==1)&&(arm==1)&&(run==0)){
 8000818:	2108      	movs	r1, #8
 800081a:	4850      	ldr	r0, [pc, #320]	; (800095c <main+0x310>)
 800081c:	f002 f810 	bl	8002840 <HAL_GPIO_ReadPin>
 8000820:	4603      	mov	r3, r0
 8000822:	2b01      	cmp	r3, #1
 8000824:	d114      	bne.n	8000850 <main+0x204>
 8000826:	4b50      	ldr	r3, [pc, #320]	; (8000968 <main+0x31c>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d110      	bne.n	8000850 <main+0x204>
 800082e:	4b4f      	ldr	r3, [pc, #316]	; (800096c <main+0x320>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d10c      	bne.n	8000850 <main+0x204>
		 			  HAL_Delay(50);
 8000836:	2032      	movs	r0, #50	; 0x32
 8000838:	f001 f8d4 	bl	80019e4 <HAL_Delay>
		 			  run=1;
 800083c:	4b4b      	ldr	r3, [pc, #300]	; (800096c <main+0x320>)
 800083e:	2201      	movs	r2, #1
 8000840:	701a      	strb	r2, [r3, #0]
		 			  I2C_send(0b10000000,0);   // переход на 1 строку
 8000842:	2100      	movs	r1, #0
 8000844:	2080      	movs	r0, #128	; 0x80
 8000846:	f7ff fe99 	bl	800057c <I2C_send>
		 			  		  LCD_SendString("RUN MODE- RUNING    ");
 800084a:	485a      	ldr	r0, [pc, #360]	; (80009b4 <main+0x368>)
 800084c:	f7ff fee6 	bl	800061c <LCD_SendString>

                }


		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==1)&&(arm==1)&&(run==1)){
 8000850:	2108      	movs	r1, #8
 8000852:	4842      	ldr	r0, [pc, #264]	; (800095c <main+0x310>)
 8000854:	f001 fff4 	bl	8002840 <HAL_GPIO_ReadPin>
 8000858:	4603      	mov	r3, r0
 800085a:	2b01      	cmp	r3, #1
 800085c:	d169      	bne.n	8000932 <main+0x2e6>
 800085e:	4b42      	ldr	r3, [pc, #264]	; (8000968 <main+0x31c>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b01      	cmp	r3, #1
 8000864:	d165      	bne.n	8000932 <main+0x2e6>
 8000866:	4b41      	ldr	r3, [pc, #260]	; (800096c <main+0x320>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b01      	cmp	r3, #1
 800086c:	d161      	bne.n	8000932 <main+0x2e6>

		 		                      I2C_send(0b10000000,0);   // переход на 1 строку
 800086e:	2100      	movs	r1, #0
 8000870:	2080      	movs	r0, #128	; 0x80
 8000872:	f7ff fe83 	bl	800057c <I2C_send>
		 		                      LCD_SendString("RUN MODE- RUNING    ");
 8000876:	484f      	ldr	r0, [pc, #316]	; (80009b4 <main+0x368>)
 8000878:	f7ff fed0 	bl	800061c <LCD_SendString>

		 		                     HAL_ADC_Start(&hadc1); // запускаем преобразование сигнала АЦП
 800087c:	484e      	ldr	r0, [pc, #312]	; (80009b8 <main+0x36c>)
 800087e:	f001 f919 	bl	8001ab4 <HAL_ADC_Start>
		 		                     HAL_ADC_PollForConversion(&hadc1, 100); // ожидаем окончания преобразования
 8000882:	2164      	movs	r1, #100	; 0x64
 8000884:	484c      	ldr	r0, [pc, #304]	; (80009b8 <main+0x36c>)
 8000886:	f001 f9fc 	bl	8001c82 <HAL_ADC_PollForConversion>
		 		                     adc = HAL_ADC_GetValue(&hadc1); // читаем полученное значение в переменную adc
 800088a:	484b      	ldr	r0, [pc, #300]	; (80009b8 <main+0x36c>)
 800088c:	f001 fa84 	bl	8001d98 <HAL_ADC_GetValue>
 8000890:	4603      	mov	r3, r0
 8000892:	b29a      	uxth	r2, r3
 8000894:	4b49      	ldr	r3, [pc, #292]	; (80009bc <main+0x370>)
 8000896:	801a      	strh	r2, [r3, #0]
		 		                     HAL_ADC_Stop(&hadc1); // останавливаем АЦП (не обязательно)
 8000898:	4847      	ldr	r0, [pc, #284]	; (80009b8 <main+0x36c>)
 800089a:	f001 f9bf 	bl	8001c1c <HAL_ADC_Stop>
		 		                     speed=adc-230;
 800089e:	4b47      	ldr	r3, [pc, #284]	; (80009bc <main+0x370>)
 80008a0:	881b      	ldrh	r3, [r3, #0]
 80008a2:	3be6      	subs	r3, #230	; 0xe6
 80008a4:	b29a      	uxth	r2, r3
 80008a6:	4b3f      	ldr	r3, [pc, #252]	; (80009a4 <main+0x358>)
 80008a8:	801a      	strh	r2, [r3, #0]
		 		                     if(speed<=80){
 80008aa:	4b3e      	ldr	r3, [pc, #248]	; (80009a4 <main+0x358>)
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	2b50      	cmp	r3, #80	; 0x50
 80008b0:	d807      	bhi.n	80008c2 <main+0x276>

		 		                    	 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80008b2:	2100      	movs	r1, #0
 80008b4:	483e      	ldr	r0, [pc, #248]	; (80009b0 <main+0x364>)
 80008b6:	f003 fe67 	bl	8004588 <HAL_TIM_PWM_Stop>
		 		                         HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80008ba:	2100      	movs	r1, #0
 80008bc:	483c      	ldr	r0, [pc, #240]	; (80009b0 <main+0x364>)
 80008be:	f004 ff17 	bl	80056f0 <HAL_TIMEx_PWMN_Stop>
		 		                     }
		 		                    if(speed>85){
 80008c2:	4b38      	ldr	r3, [pc, #224]	; (80009a4 <main+0x358>)
 80008c4:	881b      	ldrh	r3, [r3, #0]
 80008c6:	2b55      	cmp	r3, #85	; 0x55
 80008c8:	d933      	bls.n	8000932 <main+0x2e6>
		 		                    	 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80008ca:	2100      	movs	r1, #0
 80008cc:	4838      	ldr	r0, [pc, #224]	; (80009b0 <main+0x364>)
 80008ce:	f003 fdab 	bl	8004428 <HAL_TIM_PWM_Start>
		 		                    	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80008d2:	2100      	movs	r1, #0
 80008d4:	4836      	ldr	r0, [pc, #216]	; (80009b0 <main+0x364>)
 80008d6:	f004 fe5f 	bl	8005598 <HAL_TIMEx_PWMN_Start>
		 		                    TIM1->ARR = 64204-24*speed  ;
 80008da:	4b32      	ldr	r3, [pc, #200]	; (80009a4 <main+0x358>)
 80008dc:	881b      	ldrh	r3, [r3, #0]
 80008de:	461a      	mov	r2, r3
 80008e0:	4613      	mov	r3, r2
 80008e2:	0092      	lsls	r2, r2, #2
 80008e4:	1a9b      	subs	r3, r3, r2
 80008e6:	00db      	lsls	r3, r3, #3
 80008e8:	f503 437a 	add.w	r3, r3, #64000	; 0xfa00
 80008ec:	33cc      	adds	r3, #204	; 0xcc
 80008ee:	4a34      	ldr	r2, [pc, #208]	; (80009c0 <main+0x374>)
 80008f0:	62d3      	str	r3, [r2, #44]	; 0x2c
		 		                    TIM1->CCR1=  (64204-24*speed) /2 ;
 80008f2:	4b2c      	ldr	r3, [pc, #176]	; (80009a4 <main+0x358>)
 80008f4:	881b      	ldrh	r3, [r3, #0]
 80008f6:	461a      	mov	r2, r3
 80008f8:	4613      	mov	r3, r2
 80008fa:	0092      	lsls	r2, r2, #2
 80008fc:	1a9b      	subs	r3, r3, r2
 80008fe:	00db      	lsls	r3, r3, #3
 8000900:	f503 437a 	add.w	r3, r3, #64000	; 0xfa00
 8000904:	33cc      	adds	r3, #204	; 0xcc
 8000906:	0fda      	lsrs	r2, r3, #31
 8000908:	4413      	add	r3, r2
 800090a:	105b      	asrs	r3, r3, #1
 800090c:	461a      	mov	r2, r3
 800090e:	4b2c      	ldr	r3, [pc, #176]	; (80009c0 <main+0x374>)
 8000910:	635a      	str	r2, [r3, #52]	; 0x34
		 		                    TIM1->CCR2=   (64204-24*speed) /2 ;
 8000912:	4b24      	ldr	r3, [pc, #144]	; (80009a4 <main+0x358>)
 8000914:	881b      	ldrh	r3, [r3, #0]
 8000916:	461a      	mov	r2, r3
 8000918:	4613      	mov	r3, r2
 800091a:	0092      	lsls	r2, r2, #2
 800091c:	1a9b      	subs	r3, r3, r2
 800091e:	00db      	lsls	r3, r3, #3
 8000920:	f503 437a 	add.w	r3, r3, #64000	; 0xfa00
 8000924:	33cc      	adds	r3, #204	; 0xcc
 8000926:	0fda      	lsrs	r2, r3, #31
 8000928:	4413      	add	r3, r2
 800092a:	105b      	asrs	r3, r3, #1
 800092c:	461a      	mov	r2, r3
 800092e:	4b24      	ldr	r3, [pc, #144]	; (80009c0 <main+0x374>)
 8000930:	639a      	str	r2, [r3, #56]	; 0x38
		 		                    }
		 		 					}


		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==0)&&(arm==1)&&(run==1)){
 8000932:	2108      	movs	r1, #8
 8000934:	4809      	ldr	r0, [pc, #36]	; (800095c <main+0x310>)
 8000936:	f001 ff83 	bl	8002840 <HAL_GPIO_ReadPin>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d149      	bne.n	80009d4 <main+0x388>
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <main+0x31c>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b01      	cmp	r3, #1
 8000946:	d145      	bne.n	80009d4 <main+0x388>
 8000948:	4b08      	ldr	r3, [pc, #32]	; (800096c <main+0x320>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d141      	bne.n	80009d4 <main+0x388>
		                       arm=0;
 8000950:	4b05      	ldr	r3, [pc, #20]	; (8000968 <main+0x31c>)
 8000952:	2200      	movs	r2, #0
 8000954:	701a      	strb	r2, [r3, #0]
		                       I2C_send(0b10000000,0);   // переход на 1 строку
 8000956:	2100      	movs	r1, #0
 8000958:	2080      	movs	r0, #128	; 0x80
 800095a:	e033      	b.n	80009c4 <main+0x378>
 800095c:	40020400 	.word	0x40020400
 8000960:	2000027f 	.word	0x2000027f
 8000964:	20000280 	.word	0x20000280
 8000968:	20000284 	.word	0x20000284
 800096c:	20000285 	.word	0x20000285
 8000970:	20000278 	.word	0x20000278
 8000974:	2000027a 	.word	0x2000027a
 8000978:	2000027b 	.word	0x2000027b
 800097c:	2000027c 	.word	0x2000027c
 8000980:	2000027d 	.word	0x2000027d
 8000984:	2000027e 	.word	0x2000027e
 8000988:	08007124 	.word	0x08007124
 800098c:	20000250 	.word	0x20000250
 8000990:	08007144 	.word	0x08007144
 8000994:	20000282 	.word	0x20000282
 8000998:	0800715c 	.word	0x0800715c
 800099c:	20000264 	.word	0x20000264
 80009a0:	40020000 	.word	0x40020000
 80009a4:	20000286 	.word	0x20000286
 80009a8:	08007170 	.word	0x08007170
 80009ac:	08007184 	.word	0x08007184
 80009b0:	20000134 	.word	0x20000134
 80009b4:	0800719c 	.word	0x0800719c
 80009b8:	20000078 	.word	0x20000078
 80009bc:	20000288 	.word	0x20000288
 80009c0:	40010000 	.word	0x40010000
 80009c4:	f7ff fdda 	bl	800057c <I2C_send>
		                        LCD_SendString("RUN MODE- RUNING    ");
 80009c8:	4883      	ldr	r0, [pc, #524]	; (8000bd8 <main+0x58c>)
 80009ca:	f7ff fe27 	bl	800061c <LCD_SendString>
		 					  HAL_Delay(150); }
 80009ce:	2096      	movs	r0, #150	; 0x96
 80009d0:	f001 f808 	bl	80019e4 <HAL_Delay>

		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==1)&&(arm==0)&&(run==1)){
 80009d4:	2108      	movs	r1, #8
 80009d6:	4881      	ldr	r0, [pc, #516]	; (8000bdc <main+0x590>)
 80009d8:	f001 ff32 	bl	8002840 <HAL_GPIO_ReadPin>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d110      	bne.n	8000a04 <main+0x3b8>
 80009e2:	4b7f      	ldr	r3, [pc, #508]	; (8000be0 <main+0x594>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d10c      	bne.n	8000a04 <main+0x3b8>
 80009ea:	4b7e      	ldr	r3, [pc, #504]	; (8000be4 <main+0x598>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d108      	bne.n	8000a04 <main+0x3b8>
				                       arm=0;
 80009f2:	4b7b      	ldr	r3, [pc, #492]	; (8000be0 <main+0x594>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	701a      	strb	r2, [r3, #0]
				                       run=0;
 80009f8:	4b7a      	ldr	r3, [pc, #488]	; (8000be4 <main+0x598>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]
				 					  HAL_Delay(150); }
 80009fe:	2096      	movs	r0, #150	; 0x96
 8000a00:	f000 fff0 	bl	80019e4 <HAL_Delay>

	  }

	  if(regim==2){
 8000a04:	4b78      	ldr	r3, [pc, #480]	; (8000be8 <main+0x59c>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b02      	cmp	r3, #2
 8000a0a:	f040 80d7 	bne.w	8000bbc <main+0x570>
	 		  I2C_send(0b10000000,0);   // переход на 1 строку
 8000a0e:	2100      	movs	r1, #0
 8000a10:	2080      	movs	r0, #128	; 0x80
 8000a12:	f7ff fdb3 	bl	800057c <I2C_send>
	 		  LCD_SendString("REVERS MODE         ");
 8000a16:	4875      	ldr	r0, [pc, #468]	; (8000bec <main+0x5a0>)
 8000a18:	f7ff fe00 	bl	800061c <LCD_SendString>
	 		  REVERS;
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a22:	4873      	ldr	r0, [pc, #460]	; (8000bf0 <main+0x5a4>)
 8000a24:	f001 ff24 	bl	8002870 <HAL_GPIO_WritePin>
	/////////////////////////////////////REVERS/////////////////////////////////////////////
	 		 if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==1)&&(arm==0)&&(run==0)){
 8000a28:	2108      	movs	r1, #8
 8000a2a:	486c      	ldr	r0, [pc, #432]	; (8000bdc <main+0x590>)
 8000a2c:	f001 ff08 	bl	8002840 <HAL_GPIO_ReadPin>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d119      	bne.n	8000a6a <main+0x41e>
 8000a36:	4b6a      	ldr	r3, [pc, #424]	; (8000be0 <main+0x594>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d115      	bne.n	8000a6a <main+0x41e>
 8000a3e:	4b69      	ldr	r3, [pc, #420]	; (8000be4 <main+0x598>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d111      	bne.n	8000a6a <main+0x41e>
	 		 			  HAL_Delay(50);
 8000a46:	2032      	movs	r0, #50	; 0x32
 8000a48:	f000 ffcc 	bl	80019e4 <HAL_Delay>
	 		 			  I2C_send(0b10000000,0);   // переход на 1 строку
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	2080      	movs	r0, #128	; 0x80
 8000a50:	f7ff fd94 	bl	800057c <I2C_send>
	 		 			  		  LCD_SendString("REVERS MODE- READY...  ");
 8000a54:	4867      	ldr	r0, [pc, #412]	; (8000bf4 <main+0x5a8>)
 8000a56:	f7ff fde1 	bl	800061c <LCD_SendString>
	 		 			  		 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4866      	ldr	r0, [pc, #408]	; (8000bf8 <main+0x5ac>)
 8000a5e:	f003 fd93 	bl	8004588 <HAL_TIM_PWM_Stop>
	 		 			  		 HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8000a62:	2100      	movs	r1, #0
 8000a64:	4864      	ldr	r0, [pc, #400]	; (8000bf8 <main+0x5ac>)
 8000a66:	f004 fe43 	bl	80056f0 <HAL_TIMEx_PWMN_Stop>
	 		 		  }

	 		 		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==0)&&(arm==0)&&(run==0)){
 8000a6a:	2108      	movs	r1, #8
 8000a6c:	485b      	ldr	r0, [pc, #364]	; (8000bdc <main+0x590>)
 8000a6e:	f001 fee7 	bl	8002840 <HAL_GPIO_ReadPin>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d10d      	bne.n	8000a94 <main+0x448>
 8000a78:	4b59      	ldr	r3, [pc, #356]	; (8000be0 <main+0x594>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d109      	bne.n	8000a94 <main+0x448>
 8000a80:	4b58      	ldr	r3, [pc, #352]	; (8000be4 <main+0x598>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d105      	bne.n	8000a94 <main+0x448>
	 		                       arm=1;
 8000a88:	4b55      	ldr	r3, [pc, #340]	; (8000be0 <main+0x594>)
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	701a      	strb	r2, [r3, #0]
	 		 					  HAL_Delay(150); }
 8000a8e:	2096      	movs	r0, #150	; 0x96
 8000a90:	f000 ffa8 	bl	80019e4 <HAL_Delay>

	 		 		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==1)&&(arm==1)&&(run==0)){
 8000a94:	2108      	movs	r1, #8
 8000a96:	4851      	ldr	r0, [pc, #324]	; (8000bdc <main+0x590>)
 8000a98:	f001 fed2 	bl	8002840 <HAL_GPIO_ReadPin>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d125      	bne.n	8000aee <main+0x4a2>
 8000aa2:	4b4f      	ldr	r3, [pc, #316]	; (8000be0 <main+0x594>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d121      	bne.n	8000aee <main+0x4a2>
 8000aaa:	4b4e      	ldr	r3, [pc, #312]	; (8000be4 <main+0x598>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d11d      	bne.n	8000aee <main+0x4a2>
	 		 		 			  HAL_Delay(50);
 8000ab2:	2032      	movs	r0, #50	; 0x32
 8000ab4:	f000 ff96 	bl	80019e4 <HAL_Delay>
	 		 		 			  run=1;
 8000ab8:	4b4a      	ldr	r3, [pc, #296]	; (8000be4 <main+0x598>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	701a      	strb	r2, [r3, #0]
	 		 		 			  I2C_send(0b10000000,0);   // переход на 1 строку
 8000abe:	2100      	movs	r1, #0
 8000ac0:	2080      	movs	r0, #128	; 0x80
 8000ac2:	f7ff fd5b 	bl	800057c <I2C_send>
	 		 		 			  		  LCD_SendString("REVERS MODE- RUNING    ");
 8000ac6:	484d      	ldr	r0, [pc, #308]	; (8000bfc <main+0x5b0>)
 8000ac8:	f7ff fda8 	bl	800061c <LCD_SendString>

	 		 		 			  	  HAL_ADC_Start(&hadc1); // запускаем преобразование сигнала АЦП
 8000acc:	484c      	ldr	r0, [pc, #304]	; (8000c00 <main+0x5b4>)
 8000ace:	f000 fff1 	bl	8001ab4 <HAL_ADC_Start>
	 		 		 			      HAL_ADC_PollForConversion(&hadc1, 100); // ожидаем окончания преобразования
 8000ad2:	2164      	movs	r1, #100	; 0x64
 8000ad4:	484a      	ldr	r0, [pc, #296]	; (8000c00 <main+0x5b4>)
 8000ad6:	f001 f8d4 	bl	8001c82 <HAL_ADC_PollForConversion>
	 		 		 			      adc = HAL_ADC_GetValue(&hadc1); // читаем полученное значение в переменную adc
 8000ada:	4849      	ldr	r0, [pc, #292]	; (8000c00 <main+0x5b4>)
 8000adc:	f001 f95c 	bl	8001d98 <HAL_ADC_GetValue>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	b29a      	uxth	r2, r3
 8000ae4:	4b47      	ldr	r3, [pc, #284]	; (8000c04 <main+0x5b8>)
 8000ae6:	801a      	strh	r2, [r3, #0]
	 		 		 			      HAL_ADC_Stop(&hadc1); // останавливаем АЦП (не обязательно)
 8000ae8:	4845      	ldr	r0, [pc, #276]	; (8000c00 <main+0x5b4>)
 8000aea:	f001 f897 	bl	8001c1c <HAL_ADC_Stop>

	 		                      }


	 		 		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==1)&&(arm==1)&&(run==1)){
 8000aee:	2108      	movs	r1, #8
 8000af0:	483a      	ldr	r0, [pc, #232]	; (8000bdc <main+0x590>)
 8000af2:	f001 fea5 	bl	8002840 <HAL_GPIO_ReadPin>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d12b      	bne.n	8000b54 <main+0x508>
 8000afc:	4b38      	ldr	r3, [pc, #224]	; (8000be0 <main+0x594>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d127      	bne.n	8000b54 <main+0x508>
 8000b04:	4b37      	ldr	r3, [pc, #220]	; (8000be4 <main+0x598>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d123      	bne.n	8000b54 <main+0x508>

	 		 		 		                      I2C_send(0b10000000,0);   // переход на 1 строку
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	2080      	movs	r0, #128	; 0x80
 8000b10:	f7ff fd34 	bl	800057c <I2C_send>
	 		 		 		                      LCD_SendString("REVERS MODE- RUNING    ");
 8000b14:	4839      	ldr	r0, [pc, #228]	; (8000bfc <main+0x5b0>)
 8000b16:	f7ff fd81 	bl	800061c <LCD_SendString>
	 		 		 		                       HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4836      	ldr	r0, [pc, #216]	; (8000bf8 <main+0x5ac>)
 8000b1e:	f003 fc83 	bl	8004428 <HAL_TIM_PWM_Start>
	 		 		 		                       HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000b22:	2100      	movs	r1, #0
 8000b24:	4834      	ldr	r0, [pc, #208]	; (8000bf8 <main+0x5ac>)
 8000b26:	f004 fd37 	bl	8005598 <HAL_TIMEx_PWMN_Start>

	 		 		 		                    HAL_ADC_Start(&hadc1); // запускаем преобразование сигнала АЦП
 8000b2a:	4835      	ldr	r0, [pc, #212]	; (8000c00 <main+0x5b4>)
 8000b2c:	f000 ffc2 	bl	8001ab4 <HAL_ADC_Start>
	 		 		 		                    HAL_ADC_PollForConversion(&hadc1, 100); // ожидаем окончания преобразования
 8000b30:	2164      	movs	r1, #100	; 0x64
 8000b32:	4833      	ldr	r0, [pc, #204]	; (8000c00 <main+0x5b4>)
 8000b34:	f001 f8a5 	bl	8001c82 <HAL_ADC_PollForConversion>
	 		 		 		                    adc = HAL_ADC_GetValue(&hadc1); // читаем полученное значение в переменную adc
 8000b38:	4831      	ldr	r0, [pc, #196]	; (8000c00 <main+0x5b4>)
 8000b3a:	f001 f92d 	bl	8001d98 <HAL_ADC_GetValue>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	4b30      	ldr	r3, [pc, #192]	; (8000c04 <main+0x5b8>)
 8000b44:	801a      	strh	r2, [r3, #0]
	 		 		 		                     HAL_ADC_Stop(&hadc1); // останавливаем АЦП (не обязательно)
 8000b46:	482e      	ldr	r0, [pc, #184]	; (8000c00 <main+0x5b4>)
 8000b48:	f001 f868 	bl	8001c1c <HAL_ADC_Stop>
	 		 		 		                     speed=adc;
 8000b4c:	4b2d      	ldr	r3, [pc, #180]	; (8000c04 <main+0x5b8>)
 8000b4e:	881a      	ldrh	r2, [r3, #0]
 8000b50:	4b2d      	ldr	r3, [pc, #180]	; (8000c08 <main+0x5bc>)
 8000b52:	801a      	strh	r2, [r3, #0]
	 		 		 		 					}


	 		 		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==0)&&(arm==1)&&(run==1)){
 8000b54:	2108      	movs	r1, #8
 8000b56:	4821      	ldr	r0, [pc, #132]	; (8000bdc <main+0x590>)
 8000b58:	f001 fe72 	bl	8002840 <HAL_GPIO_ReadPin>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d114      	bne.n	8000b8c <main+0x540>
 8000b62:	4b1f      	ldr	r3, [pc, #124]	; (8000be0 <main+0x594>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d110      	bne.n	8000b8c <main+0x540>
 8000b6a:	4b1e      	ldr	r3, [pc, #120]	; (8000be4 <main+0x598>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d10c      	bne.n	8000b8c <main+0x540>
	 		 		                       arm=0;
 8000b72:	4b1b      	ldr	r3, [pc, #108]	; (8000be0 <main+0x594>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	701a      	strb	r2, [r3, #0]
	 		 		                       I2C_send(0b10000000,0);   // переход на 1 строку
 8000b78:	2100      	movs	r1, #0
 8000b7a:	2080      	movs	r0, #128	; 0x80
 8000b7c:	f7ff fcfe 	bl	800057c <I2C_send>
	 		 		                        LCD_SendString("REVERS MODE- RUNING    ");
 8000b80:	481e      	ldr	r0, [pc, #120]	; (8000bfc <main+0x5b0>)
 8000b82:	f7ff fd4b 	bl	800061c <LCD_SendString>
	 		 		 					  HAL_Delay(150); }
 8000b86:	2096      	movs	r0, #150	; 0x96
 8000b88:	f000 ff2c 	bl	80019e4 <HAL_Delay>

	 		 		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==1)&&(arm==0)&&(run==1)){
 8000b8c:	2108      	movs	r1, #8
 8000b8e:	4813      	ldr	r0, [pc, #76]	; (8000bdc <main+0x590>)
 8000b90:	f001 fe56 	bl	8002840 <HAL_GPIO_ReadPin>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d110      	bne.n	8000bbc <main+0x570>
 8000b9a:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <main+0x594>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d10c      	bne.n	8000bbc <main+0x570>
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <main+0x598>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d108      	bne.n	8000bbc <main+0x570>
	 		 				                       arm=0;
 8000baa:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <main+0x594>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]
	 		 				                       run=0;
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <main+0x598>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	701a      	strb	r2, [r3, #0]
	 		 				 					  HAL_Delay(150); }
 8000bb6:	2096      	movs	r0, #150	; 0x96
 8000bb8:	f000 ff14 	bl	80019e4 <HAL_Delay>


	 	  }

	  if(regim==3){
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <main+0x59c>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b03      	cmp	r3, #3
 8000bc2:	f47f ad6e 	bne.w	80006a2 <main+0x56>
		 		  I2C_send(0b10000000,0);   // переход на 1 строку
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	2080      	movs	r0, #128	; 0x80
 8000bca:	f7ff fcd7 	bl	800057c <I2C_send>
		 		  LCD_SendString("SETUP MODE     ");
 8000bce:	480f      	ldr	r0, [pc, #60]	; (8000c0c <main+0x5c0>)
 8000bd0:	f7ff fd24 	bl	800061c <LCD_SendString>
	  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)==0)&&(flag==0)){
 8000bd4:	e565      	b.n	80006a2 <main+0x56>
 8000bd6:	bf00      	nop
 8000bd8:	0800719c 	.word	0x0800719c
 8000bdc:	40020400 	.word	0x40020400
 8000be0:	20000284 	.word	0x20000284
 8000be4:	20000285 	.word	0x20000285
 8000be8:	20000280 	.word	0x20000280
 8000bec:	080071b4 	.word	0x080071b4
 8000bf0:	40020000 	.word	0x40020000
 8000bf4:	080071cc 	.word	0x080071cc
 8000bf8:	20000134 	.word	0x20000134
 8000bfc:	080071e4 	.word	0x080071e4
 8000c00:	20000078 	.word	0x20000078
 8000c04:	20000288 	.word	0x20000288
 8000c08:	20000286 	.word	0x20000286
 8000c0c:	080071fc 	.word	0x080071fc

08000c10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b094      	sub	sp, #80	; 0x50
 8000c14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c16:	f107 0320 	add.w	r3, r7, #32
 8000c1a:	2230      	movs	r2, #48	; 0x30
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f005 fdf0 	bl	8006804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c24:	f107 030c 	add.w	r3, r7, #12
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c34:	2300      	movs	r3, #0
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	4b29      	ldr	r3, [pc, #164]	; (8000ce0 <SystemClock_Config+0xd0>)
 8000c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3c:	4a28      	ldr	r2, [pc, #160]	; (8000ce0 <SystemClock_Config+0xd0>)
 8000c3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c42:	6413      	str	r3, [r2, #64]	; 0x40
 8000c44:	4b26      	ldr	r3, [pc, #152]	; (8000ce0 <SystemClock_Config+0xd0>)
 8000c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c50:	2300      	movs	r3, #0
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	4b23      	ldr	r3, [pc, #140]	; (8000ce4 <SystemClock_Config+0xd4>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <SystemClock_Config+0xd4>)
 8000c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c62:	6013      	str	r3, [r2, #0]
 8000c64:	4b1f      	ldr	r3, [pc, #124]	; (8000ce4 <SystemClock_Config+0xd4>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000c70:	230a      	movs	r3, #10
 8000c72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c74:	2301      	movs	r3, #1
 8000c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c78:	2310      	movs	r3, #16
 8000c7a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c80:	2302      	movs	r3, #2
 8000c82:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c84:	2300      	movs	r3, #0
 8000c86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c88:	2308      	movs	r3, #8
 8000c8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000c8c:	2354      	movs	r3, #84	; 0x54
 8000c8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c90:	2302      	movs	r3, #2
 8000c92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c94:	2304      	movs	r3, #4
 8000c96:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c98:	f107 0320 	add.w	r3, r7, #32
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f002 fb9f 	bl	80033e0 <HAL_RCC_OscConfig>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000ca8:	f000 fb40 	bl	800132c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cac:	230f      	movs	r3, #15
 8000cae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cbc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cc2:	f107 030c 	add.w	r3, r7, #12
 8000cc6:	2102      	movs	r1, #2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f002 fe01 	bl	80038d0 <HAL_RCC_ClockConfig>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000cd4:	f000 fb2a 	bl	800132c <Error_Handler>
  }
}
 8000cd8:	bf00      	nop
 8000cda:	3750      	adds	r7, #80	; 0x50
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40007000 	.word	0x40007000

08000ce8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cee:	463b      	mov	r3, r7
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000cfa:	4b21      	ldr	r3, [pc, #132]	; (8000d80 <MX_ADC1_Init+0x98>)
 8000cfc:	4a21      	ldr	r2, [pc, #132]	; (8000d84 <MX_ADC1_Init+0x9c>)
 8000cfe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d00:	4b1f      	ldr	r3, [pc, #124]	; (8000d80 <MX_ADC1_Init+0x98>)
 8000d02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d06:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d08:	4b1d      	ldr	r3, [pc, #116]	; (8000d80 <MX_ADC1_Init+0x98>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d0e:	4b1c      	ldr	r3, [pc, #112]	; (8000d80 <MX_ADC1_Init+0x98>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d14:	4b1a      	ldr	r3, [pc, #104]	; (8000d80 <MX_ADC1_Init+0x98>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d1a:	4b19      	ldr	r3, [pc, #100]	; (8000d80 <MX_ADC1_Init+0x98>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d22:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <MX_ADC1_Init+0x98>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d28:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <MX_ADC1_Init+0x98>)
 8000d2a:	4a17      	ldr	r2, [pc, #92]	; (8000d88 <MX_ADC1_Init+0xa0>)
 8000d2c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d2e:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <MX_ADC1_Init+0x98>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <MX_ADC1_Init+0x98>)
 8000d36:	2201      	movs	r2, #1
 8000d38:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d3a:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <MX_ADC1_Init+0x98>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d42:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <MX_ADC1_Init+0x98>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d48:	480d      	ldr	r0, [pc, #52]	; (8000d80 <MX_ADC1_Init+0x98>)
 8000d4a:	f000 fe6f 	bl	8001a2c <HAL_ADC_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000d54:	f000 faea 	bl	800132c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000d58:	2306      	movs	r3, #6
 8000d5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000d60:	2301      	movs	r3, #1
 8000d62:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d64:	463b      	mov	r3, r7
 8000d66:	4619      	mov	r1, r3
 8000d68:	4805      	ldr	r0, [pc, #20]	; (8000d80 <MX_ADC1_Init+0x98>)
 8000d6a:	f001 f823 	bl	8001db4 <HAL_ADC_ConfigChannel>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000d74:	f000 fada 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d78:	bf00      	nop
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000078 	.word	0x20000078
 8000d84:	40012000 	.word	0x40012000
 8000d88:	0f000001 	.word	0x0f000001

08000d8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d90:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <MX_I2C1_Init+0x50>)
 8000d92:	4a13      	ldr	r2, [pc, #76]	; (8000de0 <MX_I2C1_Init+0x54>)
 8000d94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d96:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <MX_I2C1_Init+0x50>)
 8000d98:	4a12      	ldr	r2, [pc, #72]	; (8000de4 <MX_I2C1_Init+0x58>)
 8000d9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <MX_I2C1_Init+0x50>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <MX_I2C1_Init+0x50>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <MX_I2C1_Init+0x50>)
 8000daa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000db0:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <MX_I2C1_Init+0x50>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <MX_I2C1_Init+0x50>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dbc:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <MX_I2C1_Init+0x50>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <MX_I2C1_Init+0x50>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dc8:	4804      	ldr	r0, [pc, #16]	; (8000ddc <MX_I2C1_Init+0x50>)
 8000dca:	f001 fd8f 	bl	80028ec <HAL_I2C_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000dd4:	f000 faaa 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	200000c0 	.word	0x200000c0
 8000de0:	40005400 	.word	0x40005400
 8000de4:	000186a0 	.word	0x000186a0

08000de8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e00:	4b24      	ldr	r3, [pc, #144]	; (8000e94 <MX_RTC_Init+0xac>)
 8000e02:	4a25      	ldr	r2, [pc, #148]	; (8000e98 <MX_RTC_Init+0xb0>)
 8000e04:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e06:	4b23      	ldr	r3, [pc, #140]	; (8000e94 <MX_RTC_Init+0xac>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e0c:	4b21      	ldr	r3, [pc, #132]	; (8000e94 <MX_RTC_Init+0xac>)
 8000e0e:	227f      	movs	r2, #127	; 0x7f
 8000e10:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e12:	4b20      	ldr	r3, [pc, #128]	; (8000e94 <MX_RTC_Init+0xac>)
 8000e14:	22ff      	movs	r2, #255	; 0xff
 8000e16:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e18:	4b1e      	ldr	r3, [pc, #120]	; (8000e94 <MX_RTC_Init+0xac>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e1e:	4b1d      	ldr	r3, [pc, #116]	; (8000e94 <MX_RTC_Init+0xac>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e24:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <MX_RTC_Init+0xac>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e2a:	481a      	ldr	r0, [pc, #104]	; (8000e94 <MX_RTC_Init+0xac>)
 8000e2c:	f003 f81e 	bl	8003e6c <HAL_RTC_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000e36:	f000 fa79 	bl	800132c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	2201      	movs	r2, #1
 8000e52:	4619      	mov	r1, r3
 8000e54:	480f      	ldr	r0, [pc, #60]	; (8000e94 <MX_RTC_Init+0xac>)
 8000e56:	f003 f87f 	bl	8003f58 <HAL_RTC_SetTime>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000e60:	f000 fa64 	bl	800132c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000e64:	2301      	movs	r3, #1
 8000e66:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;
 8000e68:	2304      	movs	r3, #4
 8000e6a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000e74:	463b      	mov	r3, r7
 8000e76:	2201      	movs	r2, #1
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4806      	ldr	r0, [pc, #24]	; (8000e94 <MX_RTC_Init+0xac>)
 8000e7c:	f003 f906 	bl	800408c <HAL_RTC_SetDate>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000e86:	f000 fa51 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e8a:	bf00      	nop
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000114 	.word	0x20000114
 8000e98:	40002800 	.word	0x40002800

08000e9c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b096      	sub	sp, #88	; 0x58
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ea2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
 8000ec8:	611a      	str	r2, [r3, #16]
 8000eca:	615a      	str	r2, [r3, #20]
 8000ecc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	2220      	movs	r2, #32
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f005 fc95 	bl	8006804 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000eda:	4b3f      	ldr	r3, [pc, #252]	; (8000fd8 <MX_TIM1_Init+0x13c>)
 8000edc:	4a3f      	ldr	r2, [pc, #252]	; (8000fdc <MX_TIM1_Init+0x140>)
 8000ede:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2;
 8000ee0:	4b3d      	ldr	r3, [pc, #244]	; (8000fd8 <MX_TIM1_Init+0x13c>)
 8000ee2:	2202      	movs	r2, #2
 8000ee4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee6:	4b3c      	ldr	r3, [pc, #240]	; (8000fd8 <MX_TIM1_Init+0x13c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 15000;
 8000eec:	4b3a      	ldr	r3, [pc, #232]	; (8000fd8 <MX_TIM1_Init+0x13c>)
 8000eee:	f643 2298 	movw	r2, #15000	; 0x3a98
 8000ef2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef4:	4b38      	ldr	r3, [pc, #224]	; (8000fd8 <MX_TIM1_Init+0x13c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000efa:	4b37      	ldr	r3, [pc, #220]	; (8000fd8 <MX_TIM1_Init+0x13c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f00:	4b35      	ldr	r3, [pc, #212]	; (8000fd8 <MX_TIM1_Init+0x13c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f06:	4834      	ldr	r0, [pc, #208]	; (8000fd8 <MX_TIM1_Init+0x13c>)
 8000f08:	f003 f9e5 	bl	80042d6 <HAL_TIM_Base_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000f12:	f000 fa0b 	bl	800132c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f1a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f1c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f20:	4619      	mov	r1, r3
 8000f22:	482d      	ldr	r0, [pc, #180]	; (8000fd8 <MX_TIM1_Init+0x13c>)
 8000f24:	f003 fe54 	bl	8004bd0 <HAL_TIM_ConfigClockSource>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000f2e:	f000 f9fd 	bl	800132c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f32:	4829      	ldr	r0, [pc, #164]	; (8000fd8 <MX_TIM1_Init+0x13c>)
 8000f34:	f003 fa1e 	bl	8004374 <HAL_TIM_PWM_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000f3e:	f000 f9f5 	bl	800132c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f42:	2300      	movs	r3, #0
 8000f44:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f4a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4821      	ldr	r0, [pc, #132]	; (8000fd8 <MX_TIM1_Init+0x13c>)
 8000f52:	f004 fc2b 	bl	80057ac <HAL_TIMEx_MasterConfigSynchronization>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000f5c:	f000 f9e6 	bl	800132c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f60:	2360      	movs	r3, #96	; 0x60
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 7500;
 8000f64:	f641 534c 	movw	r3, #7500	; 0x1d4c
 8000f68:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f72:	2300      	movs	r3, #0
 8000f74:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f76:	2300      	movs	r3, #0
 8000f78:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f82:	2200      	movs	r2, #0
 8000f84:	4619      	mov	r1, r3
 8000f86:	4814      	ldr	r0, [pc, #80]	; (8000fd8 <MX_TIM1_Init+0x13c>)
 8000f88:	f003 fd60 	bl	8004a4c <HAL_TIM_PWM_ConfigChannel>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000f92:	f000 f9cb 	bl	800132c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f96:	2300      	movs	r3, #0
 8000f98:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000faa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4807      	ldr	r0, [pc, #28]	; (8000fd8 <MX_TIM1_Init+0x13c>)
 8000fba:	f004 fc65 	bl	8005888 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000fc4:	f000 f9b2 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000fc8:	4803      	ldr	r0, [pc, #12]	; (8000fd8 <MX_TIM1_Init+0x13c>)
 8000fca:	f000 fb0f 	bl	80015ec <HAL_TIM_MspPostInit>

}
 8000fce:	bf00      	nop
 8000fd0:	3758      	adds	r7, #88	; 0x58
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000134 	.word	0x20000134
 8000fdc:	40010000 	.word	0x40010000

08000fe0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	; 0x28
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fe6:	f107 0318 	add.w	r3, r7, #24
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff4:	f107 0310 	add.w	r3, r7, #16
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ffe:	463b      	mov	r3, r7
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800100a:	4b33      	ldr	r3, [pc, #204]	; (80010d8 <MX_TIM2_Init+0xf8>)
 800100c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001010:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001012:	4b31      	ldr	r3, [pc, #196]	; (80010d8 <MX_TIM2_Init+0xf8>)
 8001014:	2200      	movs	r2, #0
 8001016:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001018:	4b2f      	ldr	r3, [pc, #188]	; (80010d8 <MX_TIM2_Init+0xf8>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800101e:	4b2e      	ldr	r3, [pc, #184]	; (80010d8 <MX_TIM2_Init+0xf8>)
 8001020:	f04f 32ff 	mov.w	r2, #4294967295
 8001024:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001026:	4b2c      	ldr	r3, [pc, #176]	; (80010d8 <MX_TIM2_Init+0xf8>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800102c:	4b2a      	ldr	r3, [pc, #168]	; (80010d8 <MX_TIM2_Init+0xf8>)
 800102e:	2200      	movs	r2, #0
 8001030:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001032:	4829      	ldr	r0, [pc, #164]	; (80010d8 <MX_TIM2_Init+0xf8>)
 8001034:	f003 f94f 	bl	80042d6 <HAL_TIM_Base_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800103e:	f000 f975 	bl	800132c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001042:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001046:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001048:	f107 0318 	add.w	r3, r7, #24
 800104c:	4619      	mov	r1, r3
 800104e:	4822      	ldr	r0, [pc, #136]	; (80010d8 <MX_TIM2_Init+0xf8>)
 8001050:	f003 fdbe 	bl	8004bd0 <HAL_TIM_ConfigClockSource>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800105a:	f000 f967 	bl	800132c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800105e:	481e      	ldr	r0, [pc, #120]	; (80010d8 <MX_TIM2_Init+0xf8>)
 8001060:	f003 faf6 	bl	8004650 <HAL_TIM_IC_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800106a:	f000 f95f 	bl	800132c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001076:	f107 0310 	add.w	r3, r7, #16
 800107a:	4619      	mov	r1, r3
 800107c:	4816      	ldr	r0, [pc, #88]	; (80010d8 <MX_TIM2_Init+0xf8>)
 800107e:	f004 fb95 	bl	80057ac <HAL_TIMEx_MasterConfigSynchronization>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001088:	f000 f950 	bl	800132c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800108c:	2300      	movs	r3, #0
 800108e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001090:	2301      	movs	r3, #1
 8001092:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001094:	2300      	movs	r3, #0
 8001096:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800109c:	463b      	mov	r3, r7
 800109e:	2200      	movs	r2, #0
 80010a0:	4619      	mov	r1, r3
 80010a2:	480d      	ldr	r0, [pc, #52]	; (80010d8 <MX_TIM2_Init+0xf8>)
 80010a4:	f003 fc35 	bl	8004912 <HAL_TIM_IC_ConfigChannel>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80010ae:	f000 f93d 	bl	800132c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80010b2:	2302      	movs	r3, #2
 80010b4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80010b6:	2302      	movs	r3, #2
 80010b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80010ba:	463b      	mov	r3, r7
 80010bc:	2204      	movs	r2, #4
 80010be:	4619      	mov	r1, r3
 80010c0:	4805      	ldr	r0, [pc, #20]	; (80010d8 <MX_TIM2_Init+0xf8>)
 80010c2:	f003 fc26 	bl	8004912 <HAL_TIM_IC_ConfigChannel>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80010cc:	f000 f92e 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	3728      	adds	r7, #40	; 0x28
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	2000017c 	.word	0x2000017c

080010dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08e      	sub	sp, #56	; 0x38
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f0:	f107 0320 	add.w	r3, r7, #32
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
 8001108:	615a      	str	r2, [r3, #20]
 800110a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800110c:	4b2c      	ldr	r3, [pc, #176]	; (80011c0 <MX_TIM3_Init+0xe4>)
 800110e:	4a2d      	ldr	r2, [pc, #180]	; (80011c4 <MX_TIM3_Init+0xe8>)
 8001110:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001112:	4b2b      	ldr	r3, [pc, #172]	; (80011c0 <MX_TIM3_Init+0xe4>)
 8001114:	2200      	movs	r2, #0
 8001116:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001118:	4b29      	ldr	r3, [pc, #164]	; (80011c0 <MX_TIM3_Init+0xe4>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800111e:	4b28      	ldr	r3, [pc, #160]	; (80011c0 <MX_TIM3_Init+0xe4>)
 8001120:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001124:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001126:	4b26      	ldr	r3, [pc, #152]	; (80011c0 <MX_TIM3_Init+0xe4>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800112c:	4b24      	ldr	r3, [pc, #144]	; (80011c0 <MX_TIM3_Init+0xe4>)
 800112e:	2200      	movs	r2, #0
 8001130:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001132:	4823      	ldr	r0, [pc, #140]	; (80011c0 <MX_TIM3_Init+0xe4>)
 8001134:	f003 f8cf 	bl	80042d6 <HAL_TIM_Base_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800113e:	f000 f8f5 	bl	800132c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001142:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001146:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001148:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800114c:	4619      	mov	r1, r3
 800114e:	481c      	ldr	r0, [pc, #112]	; (80011c0 <MX_TIM3_Init+0xe4>)
 8001150:	f003 fd3e 	bl	8004bd0 <HAL_TIM_ConfigClockSource>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800115a:	f000 f8e7 	bl	800132c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800115e:	4818      	ldr	r0, [pc, #96]	; (80011c0 <MX_TIM3_Init+0xe4>)
 8001160:	f003 f908 	bl	8004374 <HAL_TIM_PWM_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800116a:	f000 f8df 	bl	800132c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116e:	2300      	movs	r3, #0
 8001170:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001172:	2300      	movs	r3, #0
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001176:	f107 0320 	add.w	r3, r7, #32
 800117a:	4619      	mov	r1, r3
 800117c:	4810      	ldr	r0, [pc, #64]	; (80011c0 <MX_TIM3_Init+0xe4>)
 800117e:	f004 fb15 	bl	80057ac <HAL_TIMEx_MasterConfigSynchronization>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001188:	f000 f8d0 	bl	800132c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800118c:	2360      	movs	r3, #96	; 0x60
 800118e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	2204      	movs	r2, #4
 80011a0:	4619      	mov	r1, r3
 80011a2:	4807      	ldr	r0, [pc, #28]	; (80011c0 <MX_TIM3_Init+0xe4>)
 80011a4:	f003 fc52 	bl	8004a4c <HAL_TIM_PWM_ConfigChannel>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80011ae:	f000 f8bd 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011b2:	4803      	ldr	r0, [pc, #12]	; (80011c0 <MX_TIM3_Init+0xe4>)
 80011b4:	f000 fa1a 	bl	80015ec <HAL_TIM_MspPostInit>

}
 80011b8:	bf00      	nop
 80011ba:	3738      	adds	r7, #56	; 0x38
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	200001c4 	.word	0x200001c4
 80011c4:	40000400 	.word	0x40000400

080011c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_USART1_UART_Init+0x4c>)
 80011ce:	4a12      	ldr	r2, [pc, #72]	; (8001218 <MX_USART1_UART_Init+0x50>)
 80011d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <MX_USART1_UART_Init+0x4c>)
 80011d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <MX_USART1_UART_Init+0x4c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <MX_USART1_UART_Init+0x4c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <MX_USART1_UART_Init+0x4c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011ec:	4b09      	ldr	r3, [pc, #36]	; (8001214 <MX_USART1_UART_Init+0x4c>)
 80011ee:	220c      	movs	r2, #12
 80011f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f2:	4b08      	ldr	r3, [pc, #32]	; (8001214 <MX_USART1_UART_Init+0x4c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <MX_USART1_UART_Init+0x4c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011fe:	4805      	ldr	r0, [pc, #20]	; (8001214 <MX_USART1_UART_Init+0x4c>)
 8001200:	f004 fbcd 	bl	800599e <HAL_UART_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800120a:	f000 f88f 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	2000020c 	.word	0x2000020c
 8001218:	40011000 	.word	0x40011000

0800121c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001222:	f107 030c 	add.w	r3, r7, #12
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	4b3a      	ldr	r3, [pc, #232]	; (8001320 <MX_GPIO_Init+0x104>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a39      	ldr	r2, [pc, #228]	; (8001320 <MX_GPIO_Init+0x104>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b37      	ldr	r3, [pc, #220]	; (8001320 <MX_GPIO_Init+0x104>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	4b33      	ldr	r3, [pc, #204]	; (8001320 <MX_GPIO_Init+0x104>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a32      	ldr	r2, [pc, #200]	; (8001320 <MX_GPIO_Init+0x104>)
 8001258:	f043 0302 	orr.w	r3, r3, #2
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b30      	ldr	r3, [pc, #192]	; (8001320 <MX_GPIO_Init+0x104>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZ_Pin|DIRECTION_2_Pin, GPIO_PIN_RESET);
 800126a:	2200      	movs	r2, #0
 800126c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001270:	482c      	ldr	r0, [pc, #176]	; (8001324 <MX_GPIO_Init+0x108>)
 8001272:	f001 fafd 	bl	8002870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STOP_2_Pin|STOP_DRIVER_Pin|DIRECTION_Pin, GPIO_PIN_RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 800127c:	482a      	ldr	r0, [pc, #168]	; (8001328 <MX_GPIO_Init+0x10c>)
 800127e:	f001 faf7 	bl	8002870 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUZZ_Pin DIRECTION_2_Pin */
  GPIO_InitStruct.Pin = BUZZ_Pin|DIRECTION_2_Pin;
 8001282:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001286:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001288:	2301      	movs	r3, #1
 800128a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001290:	2300      	movs	r3, #0
 8001292:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001294:	f107 030c 	add.w	r3, r7, #12
 8001298:	4619      	mov	r1, r3
 800129a:	4822      	ldr	r0, [pc, #136]	; (8001324 <MX_GPIO_Init+0x108>)
 800129c:	f001 f94c 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pins : STOP_2_Pin STOP_DRIVER_Pin DIRECTION_Pin */
  GPIO_InitStruct.Pin = STOP_2_Pin|STOP_DRIVER_Pin|DIRECTION_Pin;
 80012a0:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 80012a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a6:	2301      	movs	r3, #1
 80012a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b2:	f107 030c 	add.w	r3, r7, #12
 80012b6:	4619      	mov	r1, r3
 80012b8:	481b      	ldr	r0, [pc, #108]	; (8001328 <MX_GPIO_Init+0x10c>)
 80012ba:	f001 f93d 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIRECT_BUTTON_Pin */
  GPIO_InitStruct.Pin = DIRECT_BUTTON_Pin;
 80012be:	2308      	movs	r3, #8
 80012c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DIRECT_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80012ca:	f107 030c 	add.w	r3, r7, #12
 80012ce:	4619      	mov	r1, r3
 80012d0:	4814      	ldr	r0, [pc, #80]	; (8001324 <MX_GPIO_Init+0x108>)
 80012d2:	f001 f931 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pin : MODE_BUT_Pin */
  GPIO_InitStruct.Pin = MODE_BUT_Pin;
 80012d6:	2310      	movs	r3, #16
 80012d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012de:	2301      	movs	r3, #1
 80012e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MODE_BUT_GPIO_Port, &GPIO_InitStruct);
 80012e2:	f107 030c 	add.w	r3, r7, #12
 80012e6:	4619      	mov	r1, r3
 80012e8:	480e      	ldr	r0, [pc, #56]	; (8001324 <MX_GPIO_Init+0x108>)
 80012ea:	f001 f925 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pin : Counter_Pin */
  GPIO_InitStruct.Pin = Counter_Pin;
 80012ee:	2320      	movs	r3, #32
 80012f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Counter_GPIO_Port, &GPIO_InitStruct);
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	4619      	mov	r1, r3
 8001302:	4808      	ldr	r0, [pc, #32]	; (8001324 <MX_GPIO_Init+0x108>)
 8001304:	f001 f918 	bl	8002538 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001308:	2200      	movs	r2, #0
 800130a:	2100      	movs	r1, #0
 800130c:	2017      	movs	r0, #23
 800130e:	f001 f84a 	bl	80023a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001312:	2017      	movs	r0, #23
 8001314:	f001 f863 	bl	80023de <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001318:	bf00      	nop
 800131a:	3720      	adds	r7, #32
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40023800 	.word	0x40023800
 8001324:	40020400 	.word	0x40020400
 8001328:	40020000 	.word	0x40020000

0800132c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001330:	b672      	cpsid	i
}
 8001332:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001334:	e7fe      	b.n	8001334 <Error_Handler+0x8>
	...

08001338 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	4b10      	ldr	r3, [pc, #64]	; (8001384 <HAL_MspInit+0x4c>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001346:	4a0f      	ldr	r2, [pc, #60]	; (8001384 <HAL_MspInit+0x4c>)
 8001348:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800134c:	6453      	str	r3, [r2, #68]	; 0x44
 800134e:	4b0d      	ldr	r3, [pc, #52]	; (8001384 <HAL_MspInit+0x4c>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	603b      	str	r3, [r7, #0]
 800135e:	4b09      	ldr	r3, [pc, #36]	; (8001384 <HAL_MspInit+0x4c>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	4a08      	ldr	r2, [pc, #32]	; (8001384 <HAL_MspInit+0x4c>)
 8001364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001368:	6413      	str	r3, [r2, #64]	; 0x40
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <HAL_MspInit+0x4c>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001372:	603b      	str	r3, [r7, #0]
 8001374:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	40023800 	.word	0x40023800

08001388 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	; 0x28
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a17      	ldr	r2, [pc, #92]	; (8001404 <HAL_ADC_MspInit+0x7c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d127      	bne.n	80013fa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
 80013ae:	4b16      	ldr	r3, [pc, #88]	; (8001408 <HAL_ADC_MspInit+0x80>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	4a15      	ldr	r2, [pc, #84]	; (8001408 <HAL_ADC_MspInit+0x80>)
 80013b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ba:	4b13      	ldr	r3, [pc, #76]	; (8001408 <HAL_ADC_MspInit+0x80>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <HAL_ADC_MspInit+0x80>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a0e      	ldr	r2, [pc, #56]	; (8001408 <HAL_ADC_MspInit+0x80>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <HAL_ADC_MspInit+0x80>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = INP_1_Pin|INP_2_Pin|SPEED_Pin|Pedal_Pin;
 80013e2:	2378      	movs	r3, #120	; 0x78
 80013e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013e6:	2303      	movs	r3, #3
 80013e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4619      	mov	r1, r3
 80013f4:	4805      	ldr	r0, [pc, #20]	; (800140c <HAL_ADC_MspInit+0x84>)
 80013f6:	f001 f89f 	bl	8002538 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013fa:	bf00      	nop
 80013fc:	3728      	adds	r7, #40	; 0x28
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40012000 	.word	0x40012000
 8001408:	40023800 	.word	0x40023800
 800140c:	40020000 	.word	0x40020000

08001410 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	; 0x28
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a19      	ldr	r2, [pc, #100]	; (8001494 <HAL_I2C_MspInit+0x84>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d12b      	bne.n	800148a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	4b18      	ldr	r3, [pc, #96]	; (8001498 <HAL_I2C_MspInit+0x88>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a17      	ldr	r2, [pc, #92]	; (8001498 <HAL_I2C_MspInit+0x88>)
 800143c:	f043 0302 	orr.w	r3, r3, #2
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <HAL_I2C_MspInit+0x88>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800144e:	23c0      	movs	r3, #192	; 0xc0
 8001450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001452:	2312      	movs	r3, #18
 8001454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145a:	2303      	movs	r3, #3
 800145c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800145e:	2304      	movs	r3, #4
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	4619      	mov	r1, r3
 8001468:	480c      	ldr	r0, [pc, #48]	; (800149c <HAL_I2C_MspInit+0x8c>)
 800146a:	f001 f865 	bl	8002538 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <HAL_I2C_MspInit+0x88>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	4a08      	ldr	r2, [pc, #32]	; (8001498 <HAL_I2C_MspInit+0x88>)
 8001478:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800147c:	6413      	str	r3, [r2, #64]	; 0x40
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <HAL_I2C_MspInit+0x88>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800148a:	bf00      	nop
 800148c:	3728      	adds	r7, #40	; 0x28
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40005400 	.word	0x40005400
 8001498:	40023800 	.word	0x40023800
 800149c:	40020400 	.word	0x40020400

080014a0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b088      	sub	sp, #32
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014a8:	f107 030c 	add.w	r3, r7, #12
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a0c      	ldr	r2, [pc, #48]	; (80014f0 <HAL_RTC_MspInit+0x50>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d111      	bne.n	80014e6 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80014c2:	2302      	movs	r3, #2
 80014c4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80014c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ca:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014cc:	f107 030c 	add.w	r3, r7, #12
 80014d0:	4618      	mov	r0, r3
 80014d2:	f002 fbdd 	bl	8003c90 <HAL_RCCEx_PeriphCLKConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80014dc:	f7ff ff26 	bl	800132c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80014e0:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <HAL_RTC_MspInit+0x54>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80014e6:	bf00      	nop
 80014e8:	3720      	adds	r7, #32
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40002800 	.word	0x40002800
 80014f4:	42470e3c 	.word	0x42470e3c

080014f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08c      	sub	sp, #48	; 0x30
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 031c 	add.w	r3, r7, #28
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a31      	ldr	r2, [pc, #196]	; (80015dc <HAL_TIM_Base_MspInit+0xe4>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d10e      	bne.n	8001538 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	61bb      	str	r3, [r7, #24]
 800151e:	4b30      	ldr	r3, [pc, #192]	; (80015e0 <HAL_TIM_Base_MspInit+0xe8>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	4a2f      	ldr	r2, [pc, #188]	; (80015e0 <HAL_TIM_Base_MspInit+0xe8>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6453      	str	r3, [r2, #68]	; 0x44
 800152a:	4b2d      	ldr	r3, [pc, #180]	; (80015e0 <HAL_TIM_Base_MspInit+0xe8>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	61bb      	str	r3, [r7, #24]
 8001534:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001536:	e04c      	b.n	80015d2 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM2)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001540:	d134      	bne.n	80015ac <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
 8001546:	4b26      	ldr	r3, [pc, #152]	; (80015e0 <HAL_TIM_Base_MspInit+0xe8>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	4a25      	ldr	r2, [pc, #148]	; (80015e0 <HAL_TIM_Base_MspInit+0xe8>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6413      	str	r3, [r2, #64]	; 0x40
 8001552:	4b23      	ldr	r3, [pc, #140]	; (80015e0 <HAL_TIM_Base_MspInit+0xe8>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	4b1f      	ldr	r3, [pc, #124]	; (80015e0 <HAL_TIM_Base_MspInit+0xe8>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	4a1e      	ldr	r2, [pc, #120]	; (80015e0 <HAL_TIM_Base_MspInit+0xe8>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
 800156e:	4b1c      	ldr	r3, [pc, #112]	; (80015e0 <HAL_TIM_Base_MspInit+0xe8>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Counter_2_Pin;
 800157a:	2301      	movs	r3, #1
 800157c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800158a:	2301      	movs	r3, #1
 800158c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Counter_2_GPIO_Port, &GPIO_InitStruct);
 800158e:	f107 031c 	add.w	r3, r7, #28
 8001592:	4619      	mov	r1, r3
 8001594:	4813      	ldr	r0, [pc, #76]	; (80015e4 <HAL_TIM_Base_MspInit+0xec>)
 8001596:	f000 ffcf 	bl	8002538 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	2100      	movs	r1, #0
 800159e:	201c      	movs	r0, #28
 80015a0:	f000 ff01 	bl	80023a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015a4:	201c      	movs	r0, #28
 80015a6:	f000 ff1a 	bl	80023de <HAL_NVIC_EnableIRQ>
}
 80015aa:	e012      	b.n	80015d2 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM3)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a0d      	ldr	r2, [pc, #52]	; (80015e8 <HAL_TIM_Base_MspInit+0xf0>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d10d      	bne.n	80015d2 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <HAL_TIM_Base_MspInit+0xe8>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	4a08      	ldr	r2, [pc, #32]	; (80015e0 <HAL_TIM_Base_MspInit+0xe8>)
 80015c0:	f043 0302 	orr.w	r3, r3, #2
 80015c4:	6413      	str	r3, [r2, #64]	; 0x40
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <HAL_TIM_Base_MspInit+0xe8>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
}
 80015d2:	bf00      	nop
 80015d4:	3730      	adds	r7, #48	; 0x30
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40010000 	.word	0x40010000
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40020000 	.word	0x40020000
 80015e8:	40000400 	.word	0x40000400

080015ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08a      	sub	sp, #40	; 0x28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a34      	ldr	r2, [pc, #208]	; (80016dc <HAL_TIM_MspPostInit+0xf0>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d13e      	bne.n	800168c <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	4b33      	ldr	r3, [pc, #204]	; (80016e0 <HAL_TIM_MspPostInit+0xf4>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a32      	ldr	r2, [pc, #200]	; (80016e0 <HAL_TIM_MspPostInit+0xf4>)
 8001618:	f043 0302 	orr.w	r3, r3, #2
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4b30      	ldr	r3, [pc, #192]	; (80016e0 <HAL_TIM_MspPostInit+0xf4>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	4b2c      	ldr	r3, [pc, #176]	; (80016e0 <HAL_TIM_MspPostInit+0xf4>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	4a2b      	ldr	r2, [pc, #172]	; (80016e0 <HAL_TIM_MspPostInit+0xf4>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6313      	str	r3, [r2, #48]	; 0x30
 800163a:	4b29      	ldr	r3, [pc, #164]	; (80016e0 <HAL_TIM_MspPostInit+0xf4>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB13     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001646:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800164a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164c:	2302      	movs	r3, #2
 800164e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2300      	movs	r3, #0
 8001656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001658:	2301      	movs	r3, #1
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	4619      	mov	r1, r3
 8001662:	4820      	ldr	r0, [pc, #128]	; (80016e4 <HAL_TIM_MspPostInit+0xf8>)
 8001664:	f000 ff68 	bl	8002538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001668:	f44f 7380 	mov.w	r3, #256	; 0x100
 800166c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166e:	2302      	movs	r3, #2
 8001670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001676:	2300      	movs	r3, #0
 8001678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800167a:	2301      	movs	r3, #1
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	4619      	mov	r1, r3
 8001684:	4818      	ldr	r0, [pc, #96]	; (80016e8 <HAL_TIM_MspPostInit+0xfc>)
 8001686:	f000 ff57 	bl	8002538 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800168a:	e022      	b.n	80016d2 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM3)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a16      	ldr	r2, [pc, #88]	; (80016ec <HAL_TIM_MspPostInit+0x100>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d11d      	bne.n	80016d2 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <HAL_TIM_MspPostInit+0xf4>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a10      	ldr	r2, [pc, #64]	; (80016e0 <HAL_TIM_MspPostInit+0xf4>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <HAL_TIM_MspPostInit+0xf4>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016b2:	2380      	movs	r3, #128	; 0x80
 80016b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b6:	2302      	movs	r3, #2
 80016b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2300      	movs	r3, #0
 80016c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016c2:	2302      	movs	r3, #2
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c6:	f107 0314 	add.w	r3, r7, #20
 80016ca:	4619      	mov	r1, r3
 80016cc:	4806      	ldr	r0, [pc, #24]	; (80016e8 <HAL_TIM_MspPostInit+0xfc>)
 80016ce:	f000 ff33 	bl	8002538 <HAL_GPIO_Init>
}
 80016d2:	bf00      	nop
 80016d4:	3728      	adds	r7, #40	; 0x28
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40010000 	.word	0x40010000
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40020400 	.word	0x40020400
 80016e8:	40020000 	.word	0x40020000
 80016ec:	40000400 	.word	0x40000400

080016f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08a      	sub	sp, #40	; 0x28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a1d      	ldr	r2, [pc, #116]	; (8001784 <HAL_UART_MspInit+0x94>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d134      	bne.n	800177c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
 8001716:	4b1c      	ldr	r3, [pc, #112]	; (8001788 <HAL_UART_MspInit+0x98>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171a:	4a1b      	ldr	r2, [pc, #108]	; (8001788 <HAL_UART_MspInit+0x98>)
 800171c:	f043 0310 	orr.w	r3, r3, #16
 8001720:	6453      	str	r3, [r2, #68]	; 0x44
 8001722:	4b19      	ldr	r3, [pc, #100]	; (8001788 <HAL_UART_MspInit+0x98>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001726:	f003 0310 	and.w	r3, r3, #16
 800172a:	613b      	str	r3, [r7, #16]
 800172c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	4b15      	ldr	r3, [pc, #84]	; (8001788 <HAL_UART_MspInit+0x98>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a14      	ldr	r2, [pc, #80]	; (8001788 <HAL_UART_MspInit+0x98>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b12      	ldr	r3, [pc, #72]	; (8001788 <HAL_UART_MspInit+0x98>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800174a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800174e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001750:	2302      	movs	r3, #2
 8001752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001758:	2303      	movs	r3, #3
 800175a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800175c:	2307      	movs	r3, #7
 800175e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	4619      	mov	r1, r3
 8001766:	4809      	ldr	r0, [pc, #36]	; (800178c <HAL_UART_MspInit+0x9c>)
 8001768:	f000 fee6 	bl	8002538 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800176c:	2200      	movs	r2, #0
 800176e:	2100      	movs	r1, #0
 8001770:	2025      	movs	r0, #37	; 0x25
 8001772:	f000 fe18 	bl	80023a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001776:	2025      	movs	r0, #37	; 0x25
 8001778:	f000 fe31 	bl	80023de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800177c:	bf00      	nop
 800177e:	3728      	adds	r7, #40	; 0x28
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40011000 	.word	0x40011000
 8001788:	40023800 	.word	0x40023800
 800178c:	40020000 	.word	0x40020000

08001790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001794:	e7fe      	b.n	8001794 <NMI_Handler+0x4>

08001796 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800179a:	e7fe      	b.n	800179a <HardFault_Handler+0x4>

0800179c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <MemManage_Handler+0x4>

080017a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017a6:	e7fe      	b.n	80017a6 <BusFault_Handler+0x4>

080017a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017ac:	e7fe      	b.n	80017ac <UsageFault_Handler+0x4>

080017ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017dc:	f000 f8e2 	bl	80019a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Counter_Pin);
 80017e8:	2020      	movs	r0, #32
 80017ea:	f001 f85b 	bl	80028a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
	...

080017f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017f8:	4802      	ldr	r0, [pc, #8]	; (8001804 <TIM2_IRQHandler+0x10>)
 80017fa:	f002 ff82 	bl	8004702 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	2000017c 	.word	0x2000017c

08001808 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800180c:	4802      	ldr	r0, [pc, #8]	; (8001818 <USART1_IRQHandler+0x10>)
 800180e:	f004 f913 	bl	8005a38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	2000020c 	.word	0x2000020c

0800181c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001824:	4a14      	ldr	r2, [pc, #80]	; (8001878 <_sbrk+0x5c>)
 8001826:	4b15      	ldr	r3, [pc, #84]	; (800187c <_sbrk+0x60>)
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001830:	4b13      	ldr	r3, [pc, #76]	; (8001880 <_sbrk+0x64>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d102      	bne.n	800183e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <_sbrk+0x64>)
 800183a:	4a12      	ldr	r2, [pc, #72]	; (8001884 <_sbrk+0x68>)
 800183c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <_sbrk+0x64>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	429a      	cmp	r2, r3
 800184a:	d207      	bcs.n	800185c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800184c:	f004 ffe2 	bl	8006814 <__errno>
 8001850:	4603      	mov	r3, r0
 8001852:	220c      	movs	r2, #12
 8001854:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001856:	f04f 33ff 	mov.w	r3, #4294967295
 800185a:	e009      	b.n	8001870 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800185c:	4b08      	ldr	r3, [pc, #32]	; (8001880 <_sbrk+0x64>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001862:	4b07      	ldr	r3, [pc, #28]	; (8001880 <_sbrk+0x64>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	4a05      	ldr	r2, [pc, #20]	; (8001880 <_sbrk+0x64>)
 800186c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800186e:	68fb      	ldr	r3, [r7, #12]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20010000 	.word	0x20010000
 800187c:	00000400 	.word	0x00000400
 8001880:	2000028c 	.word	0x2000028c
 8001884:	200003e0 	.word	0x200003e0

08001888 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <SystemInit+0x20>)
 800188e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001892:	4a05      	ldr	r2, [pc, #20]	; (80018a8 <SystemInit+0x20>)
 8001894:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001898:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018b0:	480d      	ldr	r0, [pc, #52]	; (80018e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018b2:	490e      	ldr	r1, [pc, #56]	; (80018ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018b4:	4a0e      	ldr	r2, [pc, #56]	; (80018f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018b8:	e002      	b.n	80018c0 <LoopCopyDataInit>

080018ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018be:	3304      	adds	r3, #4

080018c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c4:	d3f9      	bcc.n	80018ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018c6:	4a0b      	ldr	r2, [pc, #44]	; (80018f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018c8:	4c0b      	ldr	r4, [pc, #44]	; (80018f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018cc:	e001      	b.n	80018d2 <LoopFillZerobss>

080018ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d0:	3204      	adds	r2, #4

080018d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d4:	d3fb      	bcc.n	80018ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018d6:	f7ff ffd7 	bl	8001888 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018da:	f004 ffa1 	bl	8006820 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018de:	f7fe feb5 	bl	800064c <main>
  bx  lr    
 80018e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018e4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80018e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018ec:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80018f0:	08007268 	.word	0x08007268
  ldr r2, =_sbss
 80018f4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80018f8:	200003dc 	.word	0x200003dc

080018fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018fc:	e7fe      	b.n	80018fc <ADC_IRQHandler>
	...

08001900 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001904:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <HAL_Init+0x40>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a0d      	ldr	r2, [pc, #52]	; (8001940 <HAL_Init+0x40>)
 800190a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800190e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001910:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <HAL_Init+0x40>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a0a      	ldr	r2, [pc, #40]	; (8001940 <HAL_Init+0x40>)
 8001916:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800191a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <HAL_Init+0x40>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a07      	ldr	r2, [pc, #28]	; (8001940 <HAL_Init+0x40>)
 8001922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001926:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001928:	2003      	movs	r0, #3
 800192a:	f000 fd31 	bl	8002390 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800192e:	200f      	movs	r0, #15
 8001930:	f000 f808 	bl	8001944 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001934:	f7ff fd00 	bl	8001338 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40023c00 	.word	0x40023c00

08001944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800194c:	4b12      	ldr	r3, [pc, #72]	; (8001998 <HAL_InitTick+0x54>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4b12      	ldr	r3, [pc, #72]	; (800199c <HAL_InitTick+0x58>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	4619      	mov	r1, r3
 8001956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800195a:	fbb3 f3f1 	udiv	r3, r3, r1
 800195e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001962:	4618      	mov	r0, r3
 8001964:	f000 fd49 	bl	80023fa <HAL_SYSTICK_Config>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e00e      	b.n	8001990 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b0f      	cmp	r3, #15
 8001976:	d80a      	bhi.n	800198e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001978:	2200      	movs	r2, #0
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	f04f 30ff 	mov.w	r0, #4294967295
 8001980:	f000 fd11 	bl	80023a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001984:	4a06      	ldr	r2, [pc, #24]	; (80019a0 <HAL_InitTick+0x5c>)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800198a:	2300      	movs	r3, #0
 800198c:	e000      	b.n	8001990 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
}
 8001990:	4618      	mov	r0, r3
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000000 	.word	0x20000000
 800199c:	20000008 	.word	0x20000008
 80019a0:	20000004 	.word	0x20000004

080019a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019a8:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <HAL_IncTick+0x20>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	461a      	mov	r2, r3
 80019ae:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <HAL_IncTick+0x24>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4413      	add	r3, r2
 80019b4:	4a04      	ldr	r2, [pc, #16]	; (80019c8 <HAL_IncTick+0x24>)
 80019b6:	6013      	str	r3, [r2, #0]
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	20000008 	.word	0x20000008
 80019c8:	20000290 	.word	0x20000290

080019cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return uwTick;
 80019d0:	4b03      	ldr	r3, [pc, #12]	; (80019e0 <HAL_GetTick+0x14>)
 80019d2:	681b      	ldr	r3, [r3, #0]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	20000290 	.word	0x20000290

080019e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019ec:	f7ff ffee 	bl	80019cc <HAL_GetTick>
 80019f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019fc:	d005      	beq.n	8001a0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019fe:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <HAL_Delay+0x44>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	461a      	mov	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	4413      	add	r3, r2
 8001a08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a0a:	bf00      	nop
 8001a0c:	f7ff ffde 	bl	80019cc <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d8f7      	bhi.n	8001a0c <HAL_Delay+0x28>
  {
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	bf00      	nop
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000008 	.word	0x20000008

08001a2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a34:	2300      	movs	r3, #0
 8001a36:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e033      	b.n	8001aaa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d109      	bne.n	8001a5e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff fc9c 	bl	8001388 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	f003 0310 	and.w	r3, r3, #16
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d118      	bne.n	8001a9c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a72:	f023 0302 	bic.w	r3, r3, #2
 8001a76:	f043 0202 	orr.w	r2, r3, #2
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 faba 	bl	8001ff8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	f023 0303 	bic.w	r3, r3, #3
 8001a92:	f043 0201 	orr.w	r2, r3, #1
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	641a      	str	r2, [r3, #64]	; 0x40
 8001a9a:	e001      	b.n	8001aa0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d101      	bne.n	8001ace <HAL_ADC_Start+0x1a>
 8001aca:	2302      	movs	r3, #2
 8001acc:	e097      	b.n	8001bfe <HAL_ADC_Start+0x14a>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d018      	beq.n	8001b16 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	689a      	ldr	r2, [r3, #8]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f042 0201 	orr.w	r2, r2, #1
 8001af2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001af4:	4b45      	ldr	r3, [pc, #276]	; (8001c0c <HAL_ADC_Start+0x158>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a45      	ldr	r2, [pc, #276]	; (8001c10 <HAL_ADC_Start+0x15c>)
 8001afa:	fba2 2303 	umull	r2, r3, r2, r3
 8001afe:	0c9a      	lsrs	r2, r3, #18
 8001b00:	4613      	mov	r3, r2
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	4413      	add	r3, r2
 8001b06:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b08:	e002      	b.n	8001b10 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1f9      	bne.n	8001b0a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d15f      	bne.n	8001be4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b2c:	f023 0301 	bic.w	r3, r3, #1
 8001b30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d007      	beq.n	8001b56 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b4e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b62:	d106      	bne.n	8001b72 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b68:	f023 0206 	bic.w	r2, r3, #6
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	645a      	str	r2, [r3, #68]	; 0x44
 8001b70:	e002      	b.n	8001b78 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b80:	4b24      	ldr	r3, [pc, #144]	; (8001c14 <HAL_ADC_Start+0x160>)
 8001b82:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b8c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f003 031f 	and.w	r3, r3, #31
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d10f      	bne.n	8001bba <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d129      	bne.n	8001bfc <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	e020      	b.n	8001bfc <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a16      	ldr	r2, [pc, #88]	; (8001c18 <HAL_ADC_Start+0x164>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d11b      	bne.n	8001bfc <HAL_ADC_Start+0x148>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d114      	bne.n	8001bfc <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001be0:	609a      	str	r2, [r3, #8]
 8001be2:	e00b      	b.n	8001bfc <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	f043 0210 	orr.w	r2, r3, #16
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf4:	f043 0201 	orr.w	r2, r3, #1
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	20000000 	.word	0x20000000
 8001c10:	431bde83 	.word	0x431bde83
 8001c14:	40012300 	.word	0x40012300
 8001c18:	40012000 	.word	0x40012000

08001c1c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d101      	bne.n	8001c32 <HAL_ADC_Stop+0x16>
 8001c2e:	2302      	movs	r3, #2
 8001c30:	e021      	b.n	8001c76 <HAL_ADC_Stop+0x5a>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f022 0201 	bic.w	r2, r2, #1
 8001c48:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d109      	bne.n	8001c6c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c60:	f023 0301 	bic.w	r3, r3, #1
 8001c64:	f043 0201 	orr.w	r2, r3, #1
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b084      	sub	sp, #16
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
 8001c8a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c9e:	d113      	bne.n	8001cc8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001caa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cae:	d10b      	bne.n	8001cc8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb4:	f043 0220 	orr.w	r2, r3, #32
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e063      	b.n	8001d90 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001cc8:	f7ff fe80 	bl	80019cc <HAL_GetTick>
 8001ccc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001cce:	e021      	b.n	8001d14 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd6:	d01d      	beq.n	8001d14 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d007      	beq.n	8001cee <HAL_ADC_PollForConversion+0x6c>
 8001cde:	f7ff fe75 	bl	80019cc <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d212      	bcs.n	8001d14 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d00b      	beq.n	8001d14 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d00:	f043 0204 	orr.w	r2, r3, #4
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e03d      	b.n	8001d90 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d1d6      	bne.n	8001cd0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f06f 0212 	mvn.w	r2, #18
 8001d2a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d30:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d123      	bne.n	8001d8e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d11f      	bne.n	8001d8e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d54:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d006      	beq.n	8001d6a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d111      	bne.n	8001d8e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d105      	bne.n	8001d8e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	f043 0201 	orr.w	r2, r3, #1
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d101      	bne.n	8001dd0 <HAL_ADC_ConfigChannel+0x1c>
 8001dcc:	2302      	movs	r3, #2
 8001dce:	e105      	b.n	8001fdc <HAL_ADC_ConfigChannel+0x228>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b09      	cmp	r3, #9
 8001dde:	d925      	bls.n	8001e2c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68d9      	ldr	r1, [r3, #12]
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	461a      	mov	r2, r3
 8001dee:	4613      	mov	r3, r2
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	4413      	add	r3, r2
 8001df4:	3b1e      	subs	r3, #30
 8001df6:	2207      	movs	r2, #7
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43da      	mvns	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	400a      	ands	r2, r1
 8001e04:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68d9      	ldr	r1, [r3, #12]
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	4618      	mov	r0, r3
 8001e18:	4603      	mov	r3, r0
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	4403      	add	r3, r0
 8001e1e:	3b1e      	subs	r3, #30
 8001e20:	409a      	lsls	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	e022      	b.n	8001e72 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6919      	ldr	r1, [r3, #16]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	4413      	add	r3, r2
 8001e40:	2207      	movs	r2, #7
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43da      	mvns	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	400a      	ands	r2, r1
 8001e4e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6919      	ldr	r1, [r3, #16]
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	4618      	mov	r0, r3
 8001e62:	4603      	mov	r3, r0
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	4403      	add	r3, r0
 8001e68:	409a      	lsls	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b06      	cmp	r3, #6
 8001e78:	d824      	bhi.n	8001ec4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	4613      	mov	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	3b05      	subs	r3, #5
 8001e8c:	221f      	movs	r2, #31
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43da      	mvns	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	400a      	ands	r2, r1
 8001e9a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	3b05      	subs	r3, #5
 8001eb6:	fa00 f203 	lsl.w	r2, r0, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ec2:	e04c      	b.n	8001f5e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b0c      	cmp	r3, #12
 8001eca:	d824      	bhi.n	8001f16 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	3b23      	subs	r3, #35	; 0x23
 8001ede:	221f      	movs	r2, #31
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43da      	mvns	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	400a      	ands	r2, r1
 8001eec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	4618      	mov	r0, r3
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	4613      	mov	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	3b23      	subs	r3, #35	; 0x23
 8001f08:	fa00 f203 	lsl.w	r2, r0, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	631a      	str	r2, [r3, #48]	; 0x30
 8001f14:	e023      	b.n	8001f5e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	4613      	mov	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	3b41      	subs	r3, #65	; 0x41
 8001f28:	221f      	movs	r2, #31
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43da      	mvns	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	400a      	ands	r2, r1
 8001f36:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	4618      	mov	r0, r3
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	3b41      	subs	r3, #65	; 0x41
 8001f52:	fa00 f203 	lsl.w	r2, r0, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f5e:	4b22      	ldr	r3, [pc, #136]	; (8001fe8 <HAL_ADC_ConfigChannel+0x234>)
 8001f60:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a21      	ldr	r2, [pc, #132]	; (8001fec <HAL_ADC_ConfigChannel+0x238>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d109      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x1cc>
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b12      	cmp	r3, #18
 8001f72:	d105      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a19      	ldr	r2, [pc, #100]	; (8001fec <HAL_ADC_ConfigChannel+0x238>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d123      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x21e>
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2b10      	cmp	r3, #16
 8001f90:	d003      	beq.n	8001f9a <HAL_ADC_ConfigChannel+0x1e6>
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2b11      	cmp	r3, #17
 8001f98:	d11b      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2b10      	cmp	r3, #16
 8001fac:	d111      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fae:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <HAL_ADC_ConfigChannel+0x23c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a10      	ldr	r2, [pc, #64]	; (8001ff4 <HAL_ADC_ConfigChannel+0x240>)
 8001fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb8:	0c9a      	lsrs	r2, r3, #18
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fc4:	e002      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f9      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	40012300 	.word	0x40012300
 8001fec:	40012000 	.word	0x40012000
 8001ff0:	20000000 	.word	0x20000000
 8001ff4:	431bde83 	.word	0x431bde83

08001ff8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002000:	4b79      	ldr	r3, [pc, #484]	; (80021e8 <ADC_Init+0x1f0>)
 8002002:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	431a      	orrs	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800202c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6859      	ldr	r1, [r3, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	021a      	lsls	r2, r3, #8
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	430a      	orrs	r2, r1
 8002040:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002050:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6859      	ldr	r1, [r3, #4]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	430a      	orrs	r2, r1
 8002062:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	689a      	ldr	r2, [r3, #8]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002072:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6899      	ldr	r1, [r3, #8]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68da      	ldr	r2, [r3, #12]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	430a      	orrs	r2, r1
 8002084:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208a:	4a58      	ldr	r2, [pc, #352]	; (80021ec <ADC_Init+0x1f4>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d022      	beq.n	80020d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800209e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6899      	ldr	r1, [r3, #8]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6899      	ldr	r1, [r3, #8]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	e00f      	b.n	80020f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 0202 	bic.w	r2, r2, #2
 8002104:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6899      	ldr	r1, [r3, #8]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	7e1b      	ldrb	r3, [r3, #24]
 8002110:	005a      	lsls	r2, r3, #1
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	430a      	orrs	r2, r1
 8002118:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d01b      	beq.n	800215c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002132:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002142:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6859      	ldr	r1, [r3, #4]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214e:	3b01      	subs	r3, #1
 8002150:	035a      	lsls	r2, r3, #13
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	e007      	b.n	800216c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	685a      	ldr	r2, [r3, #4]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800216a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800217a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	3b01      	subs	r3, #1
 8002188:	051a      	lsls	r2, r3, #20
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	430a      	orrs	r2, r1
 8002190:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6899      	ldr	r1, [r3, #8]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021ae:	025a      	lsls	r2, r3, #9
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6899      	ldr	r1, [r3, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	029a      	lsls	r2, r3, #10
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	609a      	str	r2, [r3, #8]
}
 80021dc:	bf00      	nop
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	40012300 	.word	0x40012300
 80021ec:	0f000001 	.word	0x0f000001

080021f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002200:	4b0c      	ldr	r3, [pc, #48]	; (8002234 <__NVIC_SetPriorityGrouping+0x44>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800220c:	4013      	ands	r3, r2
 800220e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002218:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800221c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002220:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002222:	4a04      	ldr	r2, [pc, #16]	; (8002234 <__NVIC_SetPriorityGrouping+0x44>)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	60d3      	str	r3, [r2, #12]
}
 8002228:	bf00      	nop
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800223c:	4b04      	ldr	r3, [pc, #16]	; (8002250 <__NVIC_GetPriorityGrouping+0x18>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	0a1b      	lsrs	r3, r3, #8
 8002242:	f003 0307 	and.w	r3, r3, #7
}
 8002246:	4618      	mov	r0, r3
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	e000ed00 	.word	0xe000ed00

08002254 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800225e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002262:	2b00      	cmp	r3, #0
 8002264:	db0b      	blt.n	800227e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	f003 021f 	and.w	r2, r3, #31
 800226c:	4907      	ldr	r1, [pc, #28]	; (800228c <__NVIC_EnableIRQ+0x38>)
 800226e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002272:	095b      	lsrs	r3, r3, #5
 8002274:	2001      	movs	r0, #1
 8002276:	fa00 f202 	lsl.w	r2, r0, r2
 800227a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	e000e100 	.word	0xe000e100

08002290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	6039      	str	r1, [r7, #0]
 800229a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800229c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	db0a      	blt.n	80022ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	490c      	ldr	r1, [pc, #48]	; (80022dc <__NVIC_SetPriority+0x4c>)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	0112      	lsls	r2, r2, #4
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	440b      	add	r3, r1
 80022b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022b8:	e00a      	b.n	80022d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	4908      	ldr	r1, [pc, #32]	; (80022e0 <__NVIC_SetPriority+0x50>)
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	3b04      	subs	r3, #4
 80022c8:	0112      	lsls	r2, r2, #4
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	440b      	add	r3, r1
 80022ce:	761a      	strb	r2, [r3, #24]
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	e000e100 	.word	0xe000e100
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b089      	sub	sp, #36	; 0x24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f1c3 0307 	rsb	r3, r3, #7
 80022fe:	2b04      	cmp	r3, #4
 8002300:	bf28      	it	cs
 8002302:	2304      	movcs	r3, #4
 8002304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3304      	adds	r3, #4
 800230a:	2b06      	cmp	r3, #6
 800230c:	d902      	bls.n	8002314 <NVIC_EncodePriority+0x30>
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3b03      	subs	r3, #3
 8002312:	e000      	b.n	8002316 <NVIC_EncodePriority+0x32>
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002318:	f04f 32ff 	mov.w	r2, #4294967295
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43da      	mvns	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	401a      	ands	r2, r3
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800232c:	f04f 31ff 	mov.w	r1, #4294967295
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	fa01 f303 	lsl.w	r3, r1, r3
 8002336:	43d9      	mvns	r1, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800233c:	4313      	orrs	r3, r2
         );
}
 800233e:	4618      	mov	r0, r3
 8002340:	3724      	adds	r7, #36	; 0x24
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
	...

0800234c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3b01      	subs	r3, #1
 8002358:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800235c:	d301      	bcc.n	8002362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800235e:	2301      	movs	r3, #1
 8002360:	e00f      	b.n	8002382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002362:	4a0a      	ldr	r2, [pc, #40]	; (800238c <SysTick_Config+0x40>)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3b01      	subs	r3, #1
 8002368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800236a:	210f      	movs	r1, #15
 800236c:	f04f 30ff 	mov.w	r0, #4294967295
 8002370:	f7ff ff8e 	bl	8002290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002374:	4b05      	ldr	r3, [pc, #20]	; (800238c <SysTick_Config+0x40>)
 8002376:	2200      	movs	r2, #0
 8002378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800237a:	4b04      	ldr	r3, [pc, #16]	; (800238c <SysTick_Config+0x40>)
 800237c:	2207      	movs	r2, #7
 800237e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	e000e010 	.word	0xe000e010

08002390 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7ff ff29 	bl	80021f0 <__NVIC_SetPriorityGrouping>
}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b086      	sub	sp, #24
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	4603      	mov	r3, r0
 80023ae:	60b9      	str	r1, [r7, #8]
 80023b0:	607a      	str	r2, [r7, #4]
 80023b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023b8:	f7ff ff3e 	bl	8002238 <__NVIC_GetPriorityGrouping>
 80023bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	68b9      	ldr	r1, [r7, #8]
 80023c2:	6978      	ldr	r0, [r7, #20]
 80023c4:	f7ff ff8e 	bl	80022e4 <NVIC_EncodePriority>
 80023c8:	4602      	mov	r2, r0
 80023ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ce:	4611      	mov	r1, r2
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff ff5d 	bl	8002290 <__NVIC_SetPriority>
}
 80023d6:	bf00      	nop
 80023d8:	3718      	adds	r7, #24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b082      	sub	sp, #8
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	4603      	mov	r3, r0
 80023e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff ff31 	bl	8002254 <__NVIC_EnableIRQ>
}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b082      	sub	sp, #8
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7ff ffa2 	bl	800234c <SysTick_Config>
 8002408:	4603      	mov	r3, r0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b084      	sub	sp, #16
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002420:	f7ff fad4 	bl	80019cc <HAL_GetTick>
 8002424:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d008      	beq.n	8002444 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2280      	movs	r2, #128	; 0x80
 8002436:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e052      	b.n	80024ea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0216 	bic.w	r2, r2, #22
 8002452:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	695a      	ldr	r2, [r3, #20]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002462:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002468:	2b00      	cmp	r3, #0
 800246a:	d103      	bne.n	8002474 <HAL_DMA_Abort+0x62>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002470:	2b00      	cmp	r3, #0
 8002472:	d007      	beq.n	8002484 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0208 	bic.w	r2, r2, #8
 8002482:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0201 	bic.w	r2, r2, #1
 8002492:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002494:	e013      	b.n	80024be <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002496:	f7ff fa99 	bl	80019cc <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b05      	cmp	r3, #5
 80024a2:	d90c      	bls.n	80024be <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2220      	movs	r2, #32
 80024a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2203      	movs	r2, #3
 80024ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e015      	b.n	80024ea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1e4      	bne.n	8002496 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d0:	223f      	movs	r2, #63	; 0x3f
 80024d2:	409a      	lsls	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d004      	beq.n	8002510 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2280      	movs	r2, #128	; 0x80
 800250a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e00c      	b.n	800252a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2205      	movs	r2, #5
 8002514:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 0201 	bic.w	r2, r2, #1
 8002526:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
	...

08002538 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002538:	b480      	push	{r7}
 800253a:	b089      	sub	sp, #36	; 0x24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002542:	2300      	movs	r3, #0
 8002544:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002546:	2300      	movs	r3, #0
 8002548:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800254a:	2300      	movs	r3, #0
 800254c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
 8002552:	e159      	b.n	8002808 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002554:	2201      	movs	r2, #1
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	4013      	ands	r3, r2
 8002566:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	429a      	cmp	r2, r3
 800256e:	f040 8148 	bne.w	8002802 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	2b01      	cmp	r3, #1
 800257c:	d005      	beq.n	800258a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002586:	2b02      	cmp	r3, #2
 8002588:	d130      	bne.n	80025ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	2203      	movs	r2, #3
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43db      	mvns	r3, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4013      	ands	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025c0:	2201      	movs	r2, #1
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4013      	ands	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	091b      	lsrs	r3, r3, #4
 80025d6:	f003 0201 	and.w	r2, r3, #1
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 0303 	and.w	r3, r3, #3
 80025f4:	2b03      	cmp	r3, #3
 80025f6:	d017      	beq.n	8002628 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	2203      	movs	r2, #3
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4013      	ands	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d123      	bne.n	800267c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	08da      	lsrs	r2, r3, #3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3208      	adds	r2, #8
 800263c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002640:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	220f      	movs	r2, #15
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4013      	ands	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	691a      	ldr	r2, [r3, #16]
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	08da      	lsrs	r2, r3, #3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	3208      	adds	r2, #8
 8002676:	69b9      	ldr	r1, [r7, #24]
 8002678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	2203      	movs	r2, #3
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4013      	ands	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 0203 	and.w	r2, r3, #3
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 80a2 	beq.w	8002802 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	4b57      	ldr	r3, [pc, #348]	; (8002820 <HAL_GPIO_Init+0x2e8>)
 80026c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c6:	4a56      	ldr	r2, [pc, #344]	; (8002820 <HAL_GPIO_Init+0x2e8>)
 80026c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026cc:	6453      	str	r3, [r2, #68]	; 0x44
 80026ce:	4b54      	ldr	r3, [pc, #336]	; (8002820 <HAL_GPIO_Init+0x2e8>)
 80026d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026da:	4a52      	ldr	r2, [pc, #328]	; (8002824 <HAL_GPIO_Init+0x2ec>)
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	089b      	lsrs	r3, r3, #2
 80026e0:	3302      	adds	r3, #2
 80026e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	220f      	movs	r2, #15
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43db      	mvns	r3, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4013      	ands	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a49      	ldr	r2, [pc, #292]	; (8002828 <HAL_GPIO_Init+0x2f0>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d019      	beq.n	800273a <HAL_GPIO_Init+0x202>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a48      	ldr	r2, [pc, #288]	; (800282c <HAL_GPIO_Init+0x2f4>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d013      	beq.n	8002736 <HAL_GPIO_Init+0x1fe>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a47      	ldr	r2, [pc, #284]	; (8002830 <HAL_GPIO_Init+0x2f8>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d00d      	beq.n	8002732 <HAL_GPIO_Init+0x1fa>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a46      	ldr	r2, [pc, #280]	; (8002834 <HAL_GPIO_Init+0x2fc>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d007      	beq.n	800272e <HAL_GPIO_Init+0x1f6>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a45      	ldr	r2, [pc, #276]	; (8002838 <HAL_GPIO_Init+0x300>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d101      	bne.n	800272a <HAL_GPIO_Init+0x1f2>
 8002726:	2304      	movs	r3, #4
 8002728:	e008      	b.n	800273c <HAL_GPIO_Init+0x204>
 800272a:	2307      	movs	r3, #7
 800272c:	e006      	b.n	800273c <HAL_GPIO_Init+0x204>
 800272e:	2303      	movs	r3, #3
 8002730:	e004      	b.n	800273c <HAL_GPIO_Init+0x204>
 8002732:	2302      	movs	r3, #2
 8002734:	e002      	b.n	800273c <HAL_GPIO_Init+0x204>
 8002736:	2301      	movs	r3, #1
 8002738:	e000      	b.n	800273c <HAL_GPIO_Init+0x204>
 800273a:	2300      	movs	r3, #0
 800273c:	69fa      	ldr	r2, [r7, #28]
 800273e:	f002 0203 	and.w	r2, r2, #3
 8002742:	0092      	lsls	r2, r2, #2
 8002744:	4093      	lsls	r3, r2
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800274c:	4935      	ldr	r1, [pc, #212]	; (8002824 <HAL_GPIO_Init+0x2ec>)
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	089b      	lsrs	r3, r3, #2
 8002752:	3302      	adds	r3, #2
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800275a:	4b38      	ldr	r3, [pc, #224]	; (800283c <HAL_GPIO_Init+0x304>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	43db      	mvns	r3, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4013      	ands	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	4313      	orrs	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800277e:	4a2f      	ldr	r2, [pc, #188]	; (800283c <HAL_GPIO_Init+0x304>)
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002784:	4b2d      	ldr	r3, [pc, #180]	; (800283c <HAL_GPIO_Init+0x304>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	43db      	mvns	r3, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4013      	ands	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027a8:	4a24      	ldr	r2, [pc, #144]	; (800283c <HAL_GPIO_Init+0x304>)
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027ae:	4b23      	ldr	r3, [pc, #140]	; (800283c <HAL_GPIO_Init+0x304>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	43db      	mvns	r3, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4013      	ands	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027d2:	4a1a      	ldr	r2, [pc, #104]	; (800283c <HAL_GPIO_Init+0x304>)
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027d8:	4b18      	ldr	r3, [pc, #96]	; (800283c <HAL_GPIO_Init+0x304>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	43db      	mvns	r3, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4013      	ands	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027fc:	4a0f      	ldr	r2, [pc, #60]	; (800283c <HAL_GPIO_Init+0x304>)
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	3301      	adds	r3, #1
 8002806:	61fb      	str	r3, [r7, #28]
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	2b0f      	cmp	r3, #15
 800280c:	f67f aea2 	bls.w	8002554 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002810:	bf00      	nop
 8002812:	bf00      	nop
 8002814:	3724      	adds	r7, #36	; 0x24
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40023800 	.word	0x40023800
 8002824:	40013800 	.word	0x40013800
 8002828:	40020000 	.word	0x40020000
 800282c:	40020400 	.word	0x40020400
 8002830:	40020800 	.word	0x40020800
 8002834:	40020c00 	.word	0x40020c00
 8002838:	40021000 	.word	0x40021000
 800283c:	40013c00 	.word	0x40013c00

08002840 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691a      	ldr	r2, [r3, #16]
 8002850:	887b      	ldrh	r3, [r7, #2]
 8002852:	4013      	ands	r3, r2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d002      	beq.n	800285e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002858:	2301      	movs	r3, #1
 800285a:	73fb      	strb	r3, [r7, #15]
 800285c:	e001      	b.n	8002862 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800285e:	2300      	movs	r3, #0
 8002860:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002862:	7bfb      	ldrb	r3, [r7, #15]
}
 8002864:	4618      	mov	r0, r3
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	460b      	mov	r3, r1
 800287a:	807b      	strh	r3, [r7, #2]
 800287c:	4613      	mov	r3, r2
 800287e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002880:	787b      	ldrb	r3, [r7, #1]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002886:	887a      	ldrh	r2, [r7, #2]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800288c:	e003      	b.n	8002896 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800288e:	887b      	ldrh	r3, [r7, #2]
 8002890:	041a      	lsls	r2, r3, #16
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	619a      	str	r2, [r3, #24]
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
	...

080028a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80028ae:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028b0:	695a      	ldr	r2, [r3, #20]
 80028b2:	88fb      	ldrh	r3, [r7, #6]
 80028b4:	4013      	ands	r3, r2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d006      	beq.n	80028c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028ba:	4a05      	ldr	r2, [pc, #20]	; (80028d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028bc:	88fb      	ldrh	r3, [r7, #6]
 80028be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028c0:	88fb      	ldrh	r3, [r7, #6]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 f806 	bl	80028d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80028c8:	bf00      	nop
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40013c00 	.word	0x40013c00

080028d4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
	...

080028ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e12b      	b.n	8002b56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d106      	bne.n	8002918 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7fe fd7c 	bl	8001410 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2224      	movs	r2, #36	; 0x24
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0201 	bic.w	r2, r2, #1
 800292e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800293e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800294e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002950:	f001 f976 	bl	8003c40 <HAL_RCC_GetPCLK1Freq>
 8002954:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	4a81      	ldr	r2, [pc, #516]	; (8002b60 <HAL_I2C_Init+0x274>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d807      	bhi.n	8002970 <HAL_I2C_Init+0x84>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	4a80      	ldr	r2, [pc, #512]	; (8002b64 <HAL_I2C_Init+0x278>)
 8002964:	4293      	cmp	r3, r2
 8002966:	bf94      	ite	ls
 8002968:	2301      	movls	r3, #1
 800296a:	2300      	movhi	r3, #0
 800296c:	b2db      	uxtb	r3, r3
 800296e:	e006      	b.n	800297e <HAL_I2C_Init+0x92>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	4a7d      	ldr	r2, [pc, #500]	; (8002b68 <HAL_I2C_Init+0x27c>)
 8002974:	4293      	cmp	r3, r2
 8002976:	bf94      	ite	ls
 8002978:	2301      	movls	r3, #1
 800297a:	2300      	movhi	r3, #0
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e0e7      	b.n	8002b56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	4a78      	ldr	r2, [pc, #480]	; (8002b6c <HAL_I2C_Init+0x280>)
 800298a:	fba2 2303 	umull	r2, r3, r2, r3
 800298e:	0c9b      	lsrs	r3, r3, #18
 8002990:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68ba      	ldr	r2, [r7, #8]
 80029a2:	430a      	orrs	r2, r1
 80029a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	4a6a      	ldr	r2, [pc, #424]	; (8002b60 <HAL_I2C_Init+0x274>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d802      	bhi.n	80029c0 <HAL_I2C_Init+0xd4>
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	3301      	adds	r3, #1
 80029be:	e009      	b.n	80029d4 <HAL_I2C_Init+0xe8>
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029c6:	fb02 f303 	mul.w	r3, r2, r3
 80029ca:	4a69      	ldr	r2, [pc, #420]	; (8002b70 <HAL_I2C_Init+0x284>)
 80029cc:	fba2 2303 	umull	r2, r3, r2, r3
 80029d0:	099b      	lsrs	r3, r3, #6
 80029d2:	3301      	adds	r3, #1
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6812      	ldr	r2, [r2, #0]
 80029d8:	430b      	orrs	r3, r1
 80029da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	495c      	ldr	r1, [pc, #368]	; (8002b60 <HAL_I2C_Init+0x274>)
 80029f0:	428b      	cmp	r3, r1
 80029f2:	d819      	bhi.n	8002a28 <HAL_I2C_Init+0x13c>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	1e59      	subs	r1, r3, #1
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a02:	1c59      	adds	r1, r3, #1
 8002a04:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a08:	400b      	ands	r3, r1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00a      	beq.n	8002a24 <HAL_I2C_Init+0x138>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	1e59      	subs	r1, r3, #1
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a22:	e051      	b.n	8002ac8 <HAL_I2C_Init+0x1dc>
 8002a24:	2304      	movs	r3, #4
 8002a26:	e04f      	b.n	8002ac8 <HAL_I2C_Init+0x1dc>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d111      	bne.n	8002a54 <HAL_I2C_Init+0x168>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	1e58      	subs	r0, r3, #1
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6859      	ldr	r1, [r3, #4]
 8002a38:	460b      	mov	r3, r1
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	440b      	add	r3, r1
 8002a3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a42:	3301      	adds	r3, #1
 8002a44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	bf0c      	ite	eq
 8002a4c:	2301      	moveq	r3, #1
 8002a4e:	2300      	movne	r3, #0
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	e012      	b.n	8002a7a <HAL_I2C_Init+0x18e>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	1e58      	subs	r0, r3, #1
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6859      	ldr	r1, [r3, #4]
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	0099      	lsls	r1, r3, #2
 8002a64:	440b      	add	r3, r1
 8002a66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	bf0c      	ite	eq
 8002a74:	2301      	moveq	r3, #1
 8002a76:	2300      	movne	r3, #0
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <HAL_I2C_Init+0x196>
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e022      	b.n	8002ac8 <HAL_I2C_Init+0x1dc>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10e      	bne.n	8002aa8 <HAL_I2C_Init+0x1bc>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	1e58      	subs	r0, r3, #1
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6859      	ldr	r1, [r3, #4]
 8002a92:	460b      	mov	r3, r1
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	440b      	add	r3, r1
 8002a98:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aa6:	e00f      	b.n	8002ac8 <HAL_I2C_Init+0x1dc>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	1e58      	subs	r0, r3, #1
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6859      	ldr	r1, [r3, #4]
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	0099      	lsls	r1, r3, #2
 8002ab8:	440b      	add	r3, r1
 8002aba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002abe:	3301      	adds	r3, #1
 8002ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ac8:	6879      	ldr	r1, [r7, #4]
 8002aca:	6809      	ldr	r1, [r1, #0]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69da      	ldr	r2, [r3, #28]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002af6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	6911      	ldr	r1, [r2, #16]
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	68d2      	ldr	r2, [r2, #12]
 8002b02:	4311      	orrs	r1, r2
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	6812      	ldr	r2, [r2, #0]
 8002b08:	430b      	orrs	r3, r1
 8002b0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	695a      	ldr	r2, [r3, #20]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0201 	orr.w	r2, r2, #1
 8002b36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2220      	movs	r2, #32
 8002b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	000186a0 	.word	0x000186a0
 8002b64:	001e847f 	.word	0x001e847f
 8002b68:	003d08ff 	.word	0x003d08ff
 8002b6c:	431bde83 	.word	0x431bde83
 8002b70:	10624dd3 	.word	0x10624dd3

08002b74 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b088      	sub	sp, #32
 8002b78:	af02      	add	r7, sp, #8
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	607a      	str	r2, [r7, #4]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	460b      	mov	r3, r1
 8002b82:	817b      	strh	r3, [r7, #10]
 8002b84:	4613      	mov	r3, r2
 8002b86:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b88:	f7fe ff20 	bl	80019cc <HAL_GetTick>
 8002b8c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b20      	cmp	r3, #32
 8002b98:	f040 80e0 	bne.w	8002d5c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	2319      	movs	r3, #25
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	4970      	ldr	r1, [pc, #448]	; (8002d68 <HAL_I2C_Master_Transmit+0x1f4>)
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 fa92 	bl	80030d0 <I2C_WaitOnFlagUntilTimeout>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	e0d3      	b.n	8002d5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d101      	bne.n	8002bc4 <HAL_I2C_Master_Transmit+0x50>
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	e0cc      	b.n	8002d5e <HAL_I2C_Master_Transmit+0x1ea>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d007      	beq.n	8002bea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f042 0201 	orr.w	r2, r2, #1
 8002be8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bf8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2221      	movs	r2, #33	; 0x21
 8002bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2210      	movs	r2, #16
 8002c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	893a      	ldrh	r2, [r7, #8]
 8002c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	4a50      	ldr	r2, [pc, #320]	; (8002d6c <HAL_I2C_Master_Transmit+0x1f8>)
 8002c2a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c2c:	8979      	ldrh	r1, [r7, #10]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	6a3a      	ldr	r2, [r7, #32]
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 f9ca 	bl	8002fcc <I2C_MasterRequestWrite>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e08d      	b.n	8002d5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c42:	2300      	movs	r3, #0
 8002c44:	613b      	str	r3, [r7, #16]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	613b      	str	r3, [r7, #16]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	613b      	str	r3, [r7, #16]
 8002c56:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c58:	e066      	b.n	8002d28 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	6a39      	ldr	r1, [r7, #32]
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 fb0c 	bl	800327c <I2C_WaitOnTXEFlagUntilTimeout>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00d      	beq.n	8002c86 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d107      	bne.n	8002c82 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e06b      	b.n	8002d5e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	781a      	ldrb	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	1c5a      	adds	r2, r3, #1
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	d11b      	bne.n	8002cfc <HAL_I2C_Master_Transmit+0x188>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d017      	beq.n	8002cfc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd0:	781a      	ldrb	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	6a39      	ldr	r1, [r7, #32]
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f000 fafc 	bl	80032fe <I2C_WaitOnBTFFlagUntilTimeout>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00d      	beq.n	8002d28 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	2b04      	cmp	r3, #4
 8002d12:	d107      	bne.n	8002d24 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d22:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e01a      	b.n	8002d5e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d194      	bne.n	8002c5a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2220      	movs	r2, #32
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	e000      	b.n	8002d5e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d5c:	2302      	movs	r3, #2
  }
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	00100002 	.word	0x00100002
 8002d6c:	ffff0000 	.word	0xffff0000

08002d70 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b08a      	sub	sp, #40	; 0x28
 8002d74:	af02      	add	r7, sp, #8
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	607a      	str	r2, [r7, #4]
 8002d7a:	603b      	str	r3, [r7, #0]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002d80:	f7fe fe24 	bl	80019cc <HAL_GetTick>
 8002d84:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b20      	cmp	r3, #32
 8002d94:	f040 8111 	bne.w	8002fba <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	2319      	movs	r3, #25
 8002d9e:	2201      	movs	r2, #1
 8002da0:	4988      	ldr	r1, [pc, #544]	; (8002fc4 <HAL_I2C_IsDeviceReady+0x254>)
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 f994 	bl	80030d0 <I2C_WaitOnFlagUntilTimeout>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002dae:	2302      	movs	r3, #2
 8002db0:	e104      	b.n	8002fbc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d101      	bne.n	8002dc0 <HAL_I2C_IsDeviceReady+0x50>
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	e0fd      	b.n	8002fbc <HAL_I2C_IsDeviceReady+0x24c>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d007      	beq.n	8002de6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f042 0201 	orr.w	r2, r2, #1
 8002de4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002df4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2224      	movs	r2, #36	; 0x24
 8002dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4a70      	ldr	r2, [pc, #448]	; (8002fc8 <HAL_I2C_IsDeviceReady+0x258>)
 8002e08:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e18:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 f952 	bl	80030d0 <I2C_WaitOnFlagUntilTimeout>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00d      	beq.n	8002e4e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e40:	d103      	bne.n	8002e4a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e48:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e0b6      	b.n	8002fbc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e4e:	897b      	ldrh	r3, [r7, #10]
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	461a      	mov	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e5c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002e5e:	f7fe fdb5 	bl	80019cc <HAL_GetTick>
 8002e62:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	bf0c      	ite	eq
 8002e72:	2301      	moveq	r3, #1
 8002e74:	2300      	movne	r3, #0
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e88:	bf0c      	ite	eq
 8002e8a:	2301      	moveq	r3, #1
 8002e8c:	2300      	movne	r3, #0
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002e92:	e025      	b.n	8002ee0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e94:	f7fe fd9a 	bl	80019cc <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d302      	bcc.n	8002eaa <HAL_I2C_IsDeviceReady+0x13a>
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d103      	bne.n	8002eb2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	22a0      	movs	r2, #160	; 0xa0
 8002eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	bf0c      	ite	eq
 8002ec0:	2301      	moveq	r3, #1
 8002ec2:	2300      	movne	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ed6:	bf0c      	ite	eq
 8002ed8:	2301      	moveq	r3, #1
 8002eda:	2300      	movne	r3, #0
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2ba0      	cmp	r3, #160	; 0xa0
 8002eea:	d005      	beq.n	8002ef8 <HAL_I2C_IsDeviceReady+0x188>
 8002eec:	7dfb      	ldrb	r3, [r7, #23]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d102      	bne.n	8002ef8 <HAL_I2C_IsDeviceReady+0x188>
 8002ef2:	7dbb      	ldrb	r3, [r7, #22]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0cd      	beq.n	8002e94 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2220      	movs	r2, #32
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d129      	bne.n	8002f62 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f1c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f1e:	2300      	movs	r3, #0
 8002f20:	613b      	str	r3, [r7, #16]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	613b      	str	r3, [r7, #16]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	613b      	str	r3, [r7, #16]
 8002f32:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	2319      	movs	r3, #25
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	4921      	ldr	r1, [pc, #132]	; (8002fc4 <HAL_I2C_IsDeviceReady+0x254>)
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 f8c6 	bl	80030d0 <I2C_WaitOnFlagUntilTimeout>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e036      	b.n	8002fbc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2220      	movs	r2, #32
 8002f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	e02c      	b.n	8002fbc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f70:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f7a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	2319      	movs	r3, #25
 8002f82:	2201      	movs	r2, #1
 8002f84:	490f      	ldr	r1, [pc, #60]	; (8002fc4 <HAL_I2C_IsDeviceReady+0x254>)
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 f8a2 	bl	80030d0 <I2C_WaitOnFlagUntilTimeout>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e012      	b.n	8002fbc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	f4ff af32 	bcc.w	8002e0a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2220      	movs	r2, #32
 8002faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002fba:	2302      	movs	r3, #2
  }
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3720      	adds	r7, #32
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	00100002 	.word	0x00100002
 8002fc8:	ffff0000 	.word	0xffff0000

08002fcc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b088      	sub	sp, #32
 8002fd0:	af02      	add	r7, sp, #8
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	607a      	str	r2, [r7, #4]
 8002fd6:	603b      	str	r3, [r7, #0]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	2b08      	cmp	r3, #8
 8002fe6:	d006      	beq.n	8002ff6 <I2C_MasterRequestWrite+0x2a>
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d003      	beq.n	8002ff6 <I2C_MasterRequestWrite+0x2a>
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ff4:	d108      	bne.n	8003008 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	e00b      	b.n	8003020 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300c:	2b12      	cmp	r3, #18
 800300e:	d107      	bne.n	8003020 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800301e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 f84f 	bl	80030d0 <I2C_WaitOnFlagUntilTimeout>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00d      	beq.n	8003054 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003046:	d103      	bne.n	8003050 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800304e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e035      	b.n	80030c0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800305c:	d108      	bne.n	8003070 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800305e:	897b      	ldrh	r3, [r7, #10]
 8003060:	b2db      	uxtb	r3, r3
 8003062:	461a      	mov	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800306c:	611a      	str	r2, [r3, #16]
 800306e:	e01b      	b.n	80030a8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003070:	897b      	ldrh	r3, [r7, #10]
 8003072:	11db      	asrs	r3, r3, #7
 8003074:	b2db      	uxtb	r3, r3
 8003076:	f003 0306 	and.w	r3, r3, #6
 800307a:	b2db      	uxtb	r3, r3
 800307c:	f063 030f 	orn	r3, r3, #15
 8003080:	b2da      	uxtb	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	490e      	ldr	r1, [pc, #56]	; (80030c8 <I2C_MasterRequestWrite+0xfc>)
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 f875 	bl	800317e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e010      	b.n	80030c0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800309e:	897b      	ldrh	r3, [r7, #10]
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	4907      	ldr	r1, [pc, #28]	; (80030cc <I2C_MasterRequestWrite+0x100>)
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 f865 	bl	800317e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3718      	adds	r7, #24
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	00010008 	.word	0x00010008
 80030cc:	00010002 	.word	0x00010002

080030d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	603b      	str	r3, [r7, #0]
 80030dc:	4613      	mov	r3, r2
 80030de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030e0:	e025      	b.n	800312e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e8:	d021      	beq.n	800312e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ea:	f7fe fc6f 	bl	80019cc <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d302      	bcc.n	8003100 <I2C_WaitOnFlagUntilTimeout+0x30>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d116      	bne.n	800312e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2220      	movs	r2, #32
 800310a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	f043 0220 	orr.w	r2, r3, #32
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e023      	b.n	8003176 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	0c1b      	lsrs	r3, r3, #16
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b01      	cmp	r3, #1
 8003136:	d10d      	bne.n	8003154 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	43da      	mvns	r2, r3
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	4013      	ands	r3, r2
 8003144:	b29b      	uxth	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	bf0c      	ite	eq
 800314a:	2301      	moveq	r3, #1
 800314c:	2300      	movne	r3, #0
 800314e:	b2db      	uxtb	r3, r3
 8003150:	461a      	mov	r2, r3
 8003152:	e00c      	b.n	800316e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	43da      	mvns	r2, r3
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	4013      	ands	r3, r2
 8003160:	b29b      	uxth	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	bf0c      	ite	eq
 8003166:	2301      	moveq	r3, #1
 8003168:	2300      	movne	r3, #0
 800316a:	b2db      	uxtb	r3, r3
 800316c:	461a      	mov	r2, r3
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	429a      	cmp	r2, r3
 8003172:	d0b6      	beq.n	80030e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b084      	sub	sp, #16
 8003182:	af00      	add	r7, sp, #0
 8003184:	60f8      	str	r0, [r7, #12]
 8003186:	60b9      	str	r1, [r7, #8]
 8003188:	607a      	str	r2, [r7, #4]
 800318a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800318c:	e051      	b.n	8003232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800319c:	d123      	bne.n	80031e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2220      	movs	r2, #32
 80031c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	f043 0204 	orr.w	r2, r3, #4
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e046      	b.n	8003274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ec:	d021      	beq.n	8003232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ee:	f7fe fbed 	bl	80019cc <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d302      	bcc.n	8003204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d116      	bne.n	8003232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2220      	movs	r2, #32
 800320e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	f043 0220 	orr.w	r2, r3, #32
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e020      	b.n	8003274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	0c1b      	lsrs	r3, r3, #16
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b01      	cmp	r3, #1
 800323a:	d10c      	bne.n	8003256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	43da      	mvns	r2, r3
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	4013      	ands	r3, r2
 8003248:	b29b      	uxth	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	bf14      	ite	ne
 800324e:	2301      	movne	r3, #1
 8003250:	2300      	moveq	r3, #0
 8003252:	b2db      	uxtb	r3, r3
 8003254:	e00b      	b.n	800326e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	43da      	mvns	r2, r3
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	4013      	ands	r3, r2
 8003262:	b29b      	uxth	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	bf14      	ite	ne
 8003268:	2301      	movne	r3, #1
 800326a:	2300      	moveq	r3, #0
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d18d      	bne.n	800318e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3710      	adds	r7, #16
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003288:	e02d      	b.n	80032e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f000 f878 	bl	8003380 <I2C_IsAcknowledgeFailed>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e02d      	b.n	80032f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a0:	d021      	beq.n	80032e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a2:	f7fe fb93 	bl	80019cc <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d302      	bcc.n	80032b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d116      	bne.n	80032e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2220      	movs	r2, #32
 80032c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	f043 0220 	orr.w	r2, r3, #32
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e007      	b.n	80032f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f0:	2b80      	cmp	r3, #128	; 0x80
 80032f2:	d1ca      	bne.n	800328a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b084      	sub	sp, #16
 8003302:	af00      	add	r7, sp, #0
 8003304:	60f8      	str	r0, [r7, #12]
 8003306:	60b9      	str	r1, [r7, #8]
 8003308:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800330a:	e02d      	b.n	8003368 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 f837 	bl	8003380 <I2C_IsAcknowledgeFailed>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e02d      	b.n	8003378 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003322:	d021      	beq.n	8003368 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003324:	f7fe fb52 	bl	80019cc <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	68ba      	ldr	r2, [r7, #8]
 8003330:	429a      	cmp	r2, r3
 8003332:	d302      	bcc.n	800333a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d116      	bne.n	8003368 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2220      	movs	r2, #32
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003354:	f043 0220 	orr.w	r2, r3, #32
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e007      	b.n	8003378 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	f003 0304 	and.w	r3, r3, #4
 8003372:	2b04      	cmp	r3, #4
 8003374:	d1ca      	bne.n	800330c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003396:	d11b      	bne.n	80033d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033bc:	f043 0204 	orr.w	r2, r3, #4
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e000      	b.n	80033d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
	...

080033e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e267      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d075      	beq.n	80034ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033fe:	4b88      	ldr	r3, [pc, #544]	; (8003620 <HAL_RCC_OscConfig+0x240>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 030c 	and.w	r3, r3, #12
 8003406:	2b04      	cmp	r3, #4
 8003408:	d00c      	beq.n	8003424 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800340a:	4b85      	ldr	r3, [pc, #532]	; (8003620 <HAL_RCC_OscConfig+0x240>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003412:	2b08      	cmp	r3, #8
 8003414:	d112      	bne.n	800343c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003416:	4b82      	ldr	r3, [pc, #520]	; (8003620 <HAL_RCC_OscConfig+0x240>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800341e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003422:	d10b      	bne.n	800343c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003424:	4b7e      	ldr	r3, [pc, #504]	; (8003620 <HAL_RCC_OscConfig+0x240>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d05b      	beq.n	80034e8 <HAL_RCC_OscConfig+0x108>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d157      	bne.n	80034e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e242      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003444:	d106      	bne.n	8003454 <HAL_RCC_OscConfig+0x74>
 8003446:	4b76      	ldr	r3, [pc, #472]	; (8003620 <HAL_RCC_OscConfig+0x240>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a75      	ldr	r2, [pc, #468]	; (8003620 <HAL_RCC_OscConfig+0x240>)
 800344c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003450:	6013      	str	r3, [r2, #0]
 8003452:	e01d      	b.n	8003490 <HAL_RCC_OscConfig+0xb0>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800345c:	d10c      	bne.n	8003478 <HAL_RCC_OscConfig+0x98>
 800345e:	4b70      	ldr	r3, [pc, #448]	; (8003620 <HAL_RCC_OscConfig+0x240>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a6f      	ldr	r2, [pc, #444]	; (8003620 <HAL_RCC_OscConfig+0x240>)
 8003464:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003468:	6013      	str	r3, [r2, #0]
 800346a:	4b6d      	ldr	r3, [pc, #436]	; (8003620 <HAL_RCC_OscConfig+0x240>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a6c      	ldr	r2, [pc, #432]	; (8003620 <HAL_RCC_OscConfig+0x240>)
 8003470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003474:	6013      	str	r3, [r2, #0]
 8003476:	e00b      	b.n	8003490 <HAL_RCC_OscConfig+0xb0>
 8003478:	4b69      	ldr	r3, [pc, #420]	; (8003620 <HAL_RCC_OscConfig+0x240>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a68      	ldr	r2, [pc, #416]	; (8003620 <HAL_RCC_OscConfig+0x240>)
 800347e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003482:	6013      	str	r3, [r2, #0]
 8003484:	4b66      	ldr	r3, [pc, #408]	; (8003620 <HAL_RCC_OscConfig+0x240>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a65      	ldr	r2, [pc, #404]	; (8003620 <HAL_RCC_OscConfig+0x240>)
 800348a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800348e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d013      	beq.n	80034c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003498:	f7fe fa98 	bl	80019cc <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034a0:	f7fe fa94 	bl	80019cc <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b64      	cmp	r3, #100	; 0x64
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e207      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b2:	4b5b      	ldr	r3, [pc, #364]	; (8003620 <HAL_RCC_OscConfig+0x240>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0f0      	beq.n	80034a0 <HAL_RCC_OscConfig+0xc0>
 80034be:	e014      	b.n	80034ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c0:	f7fe fa84 	bl	80019cc <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034c8:	f7fe fa80 	bl	80019cc <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b64      	cmp	r3, #100	; 0x64
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e1f3      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034da:	4b51      	ldr	r3, [pc, #324]	; (8003620 <HAL_RCC_OscConfig+0x240>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f0      	bne.n	80034c8 <HAL_RCC_OscConfig+0xe8>
 80034e6:	e000      	b.n	80034ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d063      	beq.n	80035be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034f6:	4b4a      	ldr	r3, [pc, #296]	; (8003620 <HAL_RCC_OscConfig+0x240>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f003 030c 	and.w	r3, r3, #12
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00b      	beq.n	800351a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003502:	4b47      	ldr	r3, [pc, #284]	; (8003620 <HAL_RCC_OscConfig+0x240>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800350a:	2b08      	cmp	r3, #8
 800350c:	d11c      	bne.n	8003548 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800350e:	4b44      	ldr	r3, [pc, #272]	; (8003620 <HAL_RCC_OscConfig+0x240>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d116      	bne.n	8003548 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800351a:	4b41      	ldr	r3, [pc, #260]	; (8003620 <HAL_RCC_OscConfig+0x240>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d005      	beq.n	8003532 <HAL_RCC_OscConfig+0x152>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d001      	beq.n	8003532 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e1c7      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003532:	4b3b      	ldr	r3, [pc, #236]	; (8003620 <HAL_RCC_OscConfig+0x240>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	4937      	ldr	r1, [pc, #220]	; (8003620 <HAL_RCC_OscConfig+0x240>)
 8003542:	4313      	orrs	r3, r2
 8003544:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003546:	e03a      	b.n	80035be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d020      	beq.n	8003592 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003550:	4b34      	ldr	r3, [pc, #208]	; (8003624 <HAL_RCC_OscConfig+0x244>)
 8003552:	2201      	movs	r2, #1
 8003554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003556:	f7fe fa39 	bl	80019cc <HAL_GetTick>
 800355a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800355c:	e008      	b.n	8003570 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800355e:	f7fe fa35 	bl	80019cc <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e1a8      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003570:	4b2b      	ldr	r3, [pc, #172]	; (8003620 <HAL_RCC_OscConfig+0x240>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0f0      	beq.n	800355e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800357c:	4b28      	ldr	r3, [pc, #160]	; (8003620 <HAL_RCC_OscConfig+0x240>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	4925      	ldr	r1, [pc, #148]	; (8003620 <HAL_RCC_OscConfig+0x240>)
 800358c:	4313      	orrs	r3, r2
 800358e:	600b      	str	r3, [r1, #0]
 8003590:	e015      	b.n	80035be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003592:	4b24      	ldr	r3, [pc, #144]	; (8003624 <HAL_RCC_OscConfig+0x244>)
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003598:	f7fe fa18 	bl	80019cc <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035a0:	f7fe fa14 	bl	80019cc <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e187      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035b2:	4b1b      	ldr	r3, [pc, #108]	; (8003620 <HAL_RCC_OscConfig+0x240>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f0      	bne.n	80035a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0308 	and.w	r3, r3, #8
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d036      	beq.n	8003638 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d016      	beq.n	8003600 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035d2:	4b15      	ldr	r3, [pc, #84]	; (8003628 <HAL_RCC_OscConfig+0x248>)
 80035d4:	2201      	movs	r2, #1
 80035d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d8:	f7fe f9f8 	bl	80019cc <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035e0:	f7fe f9f4 	bl	80019cc <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e167      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035f2:	4b0b      	ldr	r3, [pc, #44]	; (8003620 <HAL_RCC_OscConfig+0x240>)
 80035f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d0f0      	beq.n	80035e0 <HAL_RCC_OscConfig+0x200>
 80035fe:	e01b      	b.n	8003638 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003600:	4b09      	ldr	r3, [pc, #36]	; (8003628 <HAL_RCC_OscConfig+0x248>)
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003606:	f7fe f9e1 	bl	80019cc <HAL_GetTick>
 800360a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800360c:	e00e      	b.n	800362c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800360e:	f7fe f9dd 	bl	80019cc <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d907      	bls.n	800362c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e150      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
 8003620:	40023800 	.word	0x40023800
 8003624:	42470000 	.word	0x42470000
 8003628:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800362c:	4b88      	ldr	r3, [pc, #544]	; (8003850 <HAL_RCC_OscConfig+0x470>)
 800362e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1ea      	bne.n	800360e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 8097 	beq.w	8003774 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003646:	2300      	movs	r3, #0
 8003648:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800364a:	4b81      	ldr	r3, [pc, #516]	; (8003850 <HAL_RCC_OscConfig+0x470>)
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10f      	bne.n	8003676 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003656:	2300      	movs	r3, #0
 8003658:	60bb      	str	r3, [r7, #8]
 800365a:	4b7d      	ldr	r3, [pc, #500]	; (8003850 <HAL_RCC_OscConfig+0x470>)
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	4a7c      	ldr	r2, [pc, #496]	; (8003850 <HAL_RCC_OscConfig+0x470>)
 8003660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003664:	6413      	str	r3, [r2, #64]	; 0x40
 8003666:	4b7a      	ldr	r3, [pc, #488]	; (8003850 <HAL_RCC_OscConfig+0x470>)
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800366e:	60bb      	str	r3, [r7, #8]
 8003670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003672:	2301      	movs	r3, #1
 8003674:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003676:	4b77      	ldr	r3, [pc, #476]	; (8003854 <HAL_RCC_OscConfig+0x474>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367e:	2b00      	cmp	r3, #0
 8003680:	d118      	bne.n	80036b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003682:	4b74      	ldr	r3, [pc, #464]	; (8003854 <HAL_RCC_OscConfig+0x474>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a73      	ldr	r2, [pc, #460]	; (8003854 <HAL_RCC_OscConfig+0x474>)
 8003688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800368c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800368e:	f7fe f99d 	bl	80019cc <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003694:	e008      	b.n	80036a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003696:	f7fe f999 	bl	80019cc <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e10c      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a8:	4b6a      	ldr	r3, [pc, #424]	; (8003854 <HAL_RCC_OscConfig+0x474>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d0f0      	beq.n	8003696 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d106      	bne.n	80036ca <HAL_RCC_OscConfig+0x2ea>
 80036bc:	4b64      	ldr	r3, [pc, #400]	; (8003850 <HAL_RCC_OscConfig+0x470>)
 80036be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c0:	4a63      	ldr	r2, [pc, #396]	; (8003850 <HAL_RCC_OscConfig+0x470>)
 80036c2:	f043 0301 	orr.w	r3, r3, #1
 80036c6:	6713      	str	r3, [r2, #112]	; 0x70
 80036c8:	e01c      	b.n	8003704 <HAL_RCC_OscConfig+0x324>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	2b05      	cmp	r3, #5
 80036d0:	d10c      	bne.n	80036ec <HAL_RCC_OscConfig+0x30c>
 80036d2:	4b5f      	ldr	r3, [pc, #380]	; (8003850 <HAL_RCC_OscConfig+0x470>)
 80036d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d6:	4a5e      	ldr	r2, [pc, #376]	; (8003850 <HAL_RCC_OscConfig+0x470>)
 80036d8:	f043 0304 	orr.w	r3, r3, #4
 80036dc:	6713      	str	r3, [r2, #112]	; 0x70
 80036de:	4b5c      	ldr	r3, [pc, #368]	; (8003850 <HAL_RCC_OscConfig+0x470>)
 80036e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e2:	4a5b      	ldr	r2, [pc, #364]	; (8003850 <HAL_RCC_OscConfig+0x470>)
 80036e4:	f043 0301 	orr.w	r3, r3, #1
 80036e8:	6713      	str	r3, [r2, #112]	; 0x70
 80036ea:	e00b      	b.n	8003704 <HAL_RCC_OscConfig+0x324>
 80036ec:	4b58      	ldr	r3, [pc, #352]	; (8003850 <HAL_RCC_OscConfig+0x470>)
 80036ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f0:	4a57      	ldr	r2, [pc, #348]	; (8003850 <HAL_RCC_OscConfig+0x470>)
 80036f2:	f023 0301 	bic.w	r3, r3, #1
 80036f6:	6713      	str	r3, [r2, #112]	; 0x70
 80036f8:	4b55      	ldr	r3, [pc, #340]	; (8003850 <HAL_RCC_OscConfig+0x470>)
 80036fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fc:	4a54      	ldr	r2, [pc, #336]	; (8003850 <HAL_RCC_OscConfig+0x470>)
 80036fe:	f023 0304 	bic.w	r3, r3, #4
 8003702:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d015      	beq.n	8003738 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800370c:	f7fe f95e 	bl	80019cc <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003712:	e00a      	b.n	800372a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003714:	f7fe f95a 	bl	80019cc <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003722:	4293      	cmp	r3, r2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e0cb      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800372a:	4b49      	ldr	r3, [pc, #292]	; (8003850 <HAL_RCC_OscConfig+0x470>)
 800372c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0ee      	beq.n	8003714 <HAL_RCC_OscConfig+0x334>
 8003736:	e014      	b.n	8003762 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003738:	f7fe f948 	bl	80019cc <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800373e:	e00a      	b.n	8003756 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003740:	f7fe f944 	bl	80019cc <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	f241 3288 	movw	r2, #5000	; 0x1388
 800374e:	4293      	cmp	r3, r2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e0b5      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003756:	4b3e      	ldr	r3, [pc, #248]	; (8003850 <HAL_RCC_OscConfig+0x470>)
 8003758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1ee      	bne.n	8003740 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003762:	7dfb      	ldrb	r3, [r7, #23]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d105      	bne.n	8003774 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003768:	4b39      	ldr	r3, [pc, #228]	; (8003850 <HAL_RCC_OscConfig+0x470>)
 800376a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376c:	4a38      	ldr	r2, [pc, #224]	; (8003850 <HAL_RCC_OscConfig+0x470>)
 800376e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003772:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 80a1 	beq.w	80038c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800377e:	4b34      	ldr	r3, [pc, #208]	; (8003850 <HAL_RCC_OscConfig+0x470>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 030c 	and.w	r3, r3, #12
 8003786:	2b08      	cmp	r3, #8
 8003788:	d05c      	beq.n	8003844 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	2b02      	cmp	r3, #2
 8003790:	d141      	bne.n	8003816 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003792:	4b31      	ldr	r3, [pc, #196]	; (8003858 <HAL_RCC_OscConfig+0x478>)
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003798:	f7fe f918 	bl	80019cc <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037a0:	f7fe f914 	bl	80019cc <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e087      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037b2:	4b27      	ldr	r3, [pc, #156]	; (8003850 <HAL_RCC_OscConfig+0x470>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1f0      	bne.n	80037a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69da      	ldr	r2, [r3, #28]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	431a      	orrs	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	019b      	lsls	r3, r3, #6
 80037ce:	431a      	orrs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d4:	085b      	lsrs	r3, r3, #1
 80037d6:	3b01      	subs	r3, #1
 80037d8:	041b      	lsls	r3, r3, #16
 80037da:	431a      	orrs	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e0:	061b      	lsls	r3, r3, #24
 80037e2:	491b      	ldr	r1, [pc, #108]	; (8003850 <HAL_RCC_OscConfig+0x470>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037e8:	4b1b      	ldr	r3, [pc, #108]	; (8003858 <HAL_RCC_OscConfig+0x478>)
 80037ea:	2201      	movs	r2, #1
 80037ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ee:	f7fe f8ed 	bl	80019cc <HAL_GetTick>
 80037f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f4:	e008      	b.n	8003808 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037f6:	f7fe f8e9 	bl	80019cc <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e05c      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003808:	4b11      	ldr	r3, [pc, #68]	; (8003850 <HAL_RCC_OscConfig+0x470>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0f0      	beq.n	80037f6 <HAL_RCC_OscConfig+0x416>
 8003814:	e054      	b.n	80038c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003816:	4b10      	ldr	r3, [pc, #64]	; (8003858 <HAL_RCC_OscConfig+0x478>)
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381c:	f7fe f8d6 	bl	80019cc <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003824:	f7fe f8d2 	bl	80019cc <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e045      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003836:	4b06      	ldr	r3, [pc, #24]	; (8003850 <HAL_RCC_OscConfig+0x470>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1f0      	bne.n	8003824 <HAL_RCC_OscConfig+0x444>
 8003842:	e03d      	b.n	80038c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d107      	bne.n	800385c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e038      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
 8003850:	40023800 	.word	0x40023800
 8003854:	40007000 	.word	0x40007000
 8003858:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800385c:	4b1b      	ldr	r3, [pc, #108]	; (80038cc <HAL_RCC_OscConfig+0x4ec>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d028      	beq.n	80038bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003874:	429a      	cmp	r2, r3
 8003876:	d121      	bne.n	80038bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003882:	429a      	cmp	r2, r3
 8003884:	d11a      	bne.n	80038bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800388c:	4013      	ands	r3, r2
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003892:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003894:	4293      	cmp	r3, r2
 8003896:	d111      	bne.n	80038bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a2:	085b      	lsrs	r3, r3, #1
 80038a4:	3b01      	subs	r3, #1
 80038a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d107      	bne.n	80038bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d001      	beq.n	80038c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e000      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3718      	adds	r7, #24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	40023800 	.word	0x40023800

080038d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d101      	bne.n	80038e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e0cc      	b.n	8003a7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038e4:	4b68      	ldr	r3, [pc, #416]	; (8003a88 <HAL_RCC_ClockConfig+0x1b8>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d90c      	bls.n	800390c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038f2:	4b65      	ldr	r3, [pc, #404]	; (8003a88 <HAL_RCC_ClockConfig+0x1b8>)
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	b2d2      	uxtb	r2, r2
 80038f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038fa:	4b63      	ldr	r3, [pc, #396]	; (8003a88 <HAL_RCC_ClockConfig+0x1b8>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0307 	and.w	r3, r3, #7
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	429a      	cmp	r2, r3
 8003906:	d001      	beq.n	800390c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e0b8      	b.n	8003a7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d020      	beq.n	800395a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	2b00      	cmp	r3, #0
 8003922:	d005      	beq.n	8003930 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003924:	4b59      	ldr	r3, [pc, #356]	; (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	4a58      	ldr	r2, [pc, #352]	; (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 800392a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800392e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0308 	and.w	r3, r3, #8
 8003938:	2b00      	cmp	r3, #0
 800393a:	d005      	beq.n	8003948 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800393c:	4b53      	ldr	r3, [pc, #332]	; (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	4a52      	ldr	r2, [pc, #328]	; (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 8003942:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003946:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003948:	4b50      	ldr	r3, [pc, #320]	; (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	494d      	ldr	r1, [pc, #308]	; (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 8003956:	4313      	orrs	r3, r2
 8003958:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d044      	beq.n	80039f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d107      	bne.n	800397e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800396e:	4b47      	ldr	r3, [pc, #284]	; (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d119      	bne.n	80039ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e07f      	b.n	8003a7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b02      	cmp	r3, #2
 8003984:	d003      	beq.n	800398e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800398a:	2b03      	cmp	r3, #3
 800398c:	d107      	bne.n	800399e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800398e:	4b3f      	ldr	r3, [pc, #252]	; (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d109      	bne.n	80039ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e06f      	b.n	8003a7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800399e:	4b3b      	ldr	r3, [pc, #236]	; (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e067      	b.n	8003a7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ae:	4b37      	ldr	r3, [pc, #220]	; (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f023 0203 	bic.w	r2, r3, #3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	4934      	ldr	r1, [pc, #208]	; (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039c0:	f7fe f804 	bl	80019cc <HAL_GetTick>
 80039c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c6:	e00a      	b.n	80039de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039c8:	f7fe f800 	bl	80019cc <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e04f      	b.n	8003a7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039de:	4b2b      	ldr	r3, [pc, #172]	; (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 020c 	and.w	r2, r3, #12
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d1eb      	bne.n	80039c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039f0:	4b25      	ldr	r3, [pc, #148]	; (8003a88 <HAL_RCC_ClockConfig+0x1b8>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0307 	and.w	r3, r3, #7
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d20c      	bcs.n	8003a18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039fe:	4b22      	ldr	r3, [pc, #136]	; (8003a88 <HAL_RCC_ClockConfig+0x1b8>)
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a06:	4b20      	ldr	r3, [pc, #128]	; (8003a88 <HAL_RCC_ClockConfig+0x1b8>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d001      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e032      	b.n	8003a7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d008      	beq.n	8003a36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a24:	4b19      	ldr	r3, [pc, #100]	; (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	4916      	ldr	r1, [pc, #88]	; (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0308 	and.w	r3, r3, #8
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d009      	beq.n	8003a56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a42:	4b12      	ldr	r3, [pc, #72]	; (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	490e      	ldr	r1, [pc, #56]	; (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a56:	f000 f821 	bl	8003a9c <HAL_RCC_GetSysClockFreq>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	4b0b      	ldr	r3, [pc, #44]	; (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	091b      	lsrs	r3, r3, #4
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	490a      	ldr	r1, [pc, #40]	; (8003a90 <HAL_RCC_ClockConfig+0x1c0>)
 8003a68:	5ccb      	ldrb	r3, [r1, r3]
 8003a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a6e:	4a09      	ldr	r2, [pc, #36]	; (8003a94 <HAL_RCC_ClockConfig+0x1c4>)
 8003a70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a72:	4b09      	ldr	r3, [pc, #36]	; (8003a98 <HAL_RCC_ClockConfig+0x1c8>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7fd ff64 	bl	8001944 <HAL_InitTick>

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	40023c00 	.word	0x40023c00
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	0800720c 	.word	0x0800720c
 8003a94:	20000000 	.word	0x20000000
 8003a98:	20000004 	.word	0x20000004

08003a9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aa0:	b090      	sub	sp, #64	; 0x40
 8003aa2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	637b      	str	r3, [r7, #52]	; 0x34
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003aac:	2300      	movs	r3, #0
 8003aae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ab4:	4b59      	ldr	r3, [pc, #356]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f003 030c 	and.w	r3, r3, #12
 8003abc:	2b08      	cmp	r3, #8
 8003abe:	d00d      	beq.n	8003adc <HAL_RCC_GetSysClockFreq+0x40>
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	f200 80a1 	bhi.w	8003c08 <HAL_RCC_GetSysClockFreq+0x16c>
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d002      	beq.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x34>
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	d003      	beq.n	8003ad6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003ace:	e09b      	b.n	8003c08 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ad0:	4b53      	ldr	r3, [pc, #332]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ad2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003ad4:	e09b      	b.n	8003c0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ad6:	4b53      	ldr	r3, [pc, #332]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ad8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ada:	e098      	b.n	8003c0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003adc:	4b4f      	ldr	r3, [pc, #316]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ae4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ae6:	4b4d      	ldr	r3, [pc, #308]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d028      	beq.n	8003b44 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003af2:	4b4a      	ldr	r3, [pc, #296]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x180>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	099b      	lsrs	r3, r3, #6
 8003af8:	2200      	movs	r2, #0
 8003afa:	623b      	str	r3, [r7, #32]
 8003afc:	627a      	str	r2, [r7, #36]	; 0x24
 8003afe:	6a3b      	ldr	r3, [r7, #32]
 8003b00:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b04:	2100      	movs	r1, #0
 8003b06:	4b47      	ldr	r3, [pc, #284]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b08:	fb03 f201 	mul.w	r2, r3, r1
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	fb00 f303 	mul.w	r3, r0, r3
 8003b12:	4413      	add	r3, r2
 8003b14:	4a43      	ldr	r2, [pc, #268]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b16:	fba0 1202 	umull	r1, r2, r0, r2
 8003b1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b1c:	460a      	mov	r2, r1
 8003b1e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003b20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b22:	4413      	add	r3, r2
 8003b24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b28:	2200      	movs	r2, #0
 8003b2a:	61bb      	str	r3, [r7, #24]
 8003b2c:	61fa      	str	r2, [r7, #28]
 8003b2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b32:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b36:	f7fc fba3 	bl	8000280 <__aeabi_uldivmod>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	4613      	mov	r3, r2
 8003b40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b42:	e053      	b.n	8003bec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b44:	4b35      	ldr	r3, [pc, #212]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x180>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	099b      	lsrs	r3, r3, #6
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	613b      	str	r3, [r7, #16]
 8003b4e:	617a      	str	r2, [r7, #20]
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b56:	f04f 0b00 	mov.w	fp, #0
 8003b5a:	4652      	mov	r2, sl
 8003b5c:	465b      	mov	r3, fp
 8003b5e:	f04f 0000 	mov.w	r0, #0
 8003b62:	f04f 0100 	mov.w	r1, #0
 8003b66:	0159      	lsls	r1, r3, #5
 8003b68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b6c:	0150      	lsls	r0, r2, #5
 8003b6e:	4602      	mov	r2, r0
 8003b70:	460b      	mov	r3, r1
 8003b72:	ebb2 080a 	subs.w	r8, r2, sl
 8003b76:	eb63 090b 	sbc.w	r9, r3, fp
 8003b7a:	f04f 0200 	mov.w	r2, #0
 8003b7e:	f04f 0300 	mov.w	r3, #0
 8003b82:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b86:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b8a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b8e:	ebb2 0408 	subs.w	r4, r2, r8
 8003b92:	eb63 0509 	sbc.w	r5, r3, r9
 8003b96:	f04f 0200 	mov.w	r2, #0
 8003b9a:	f04f 0300 	mov.w	r3, #0
 8003b9e:	00eb      	lsls	r3, r5, #3
 8003ba0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ba4:	00e2      	lsls	r2, r4, #3
 8003ba6:	4614      	mov	r4, r2
 8003ba8:	461d      	mov	r5, r3
 8003baa:	eb14 030a 	adds.w	r3, r4, sl
 8003bae:	603b      	str	r3, [r7, #0]
 8003bb0:	eb45 030b 	adc.w	r3, r5, fp
 8003bb4:	607b      	str	r3, [r7, #4]
 8003bb6:	f04f 0200 	mov.w	r2, #0
 8003bba:	f04f 0300 	mov.w	r3, #0
 8003bbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bc2:	4629      	mov	r1, r5
 8003bc4:	028b      	lsls	r3, r1, #10
 8003bc6:	4621      	mov	r1, r4
 8003bc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bcc:	4621      	mov	r1, r4
 8003bce:	028a      	lsls	r2, r1, #10
 8003bd0:	4610      	mov	r0, r2
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	60bb      	str	r3, [r7, #8]
 8003bda:	60fa      	str	r2, [r7, #12]
 8003bdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003be0:	f7fc fb4e 	bl	8000280 <__aeabi_uldivmod>
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	4613      	mov	r3, r2
 8003bea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bec:	4b0b      	ldr	r3, [pc, #44]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x180>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	0c1b      	lsrs	r3, r3, #16
 8003bf2:	f003 0303 	and.w	r3, r3, #3
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003bfc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c04:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c06:	e002      	b.n	8003c0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c08:	4b05      	ldr	r3, [pc, #20]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c0a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3740      	adds	r7, #64	; 0x40
 8003c14:	46bd      	mov	sp, r7
 8003c16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c1a:	bf00      	nop
 8003c1c:	40023800 	.word	0x40023800
 8003c20:	00f42400 	.word	0x00f42400
 8003c24:	017d7840 	.word	0x017d7840

08003c28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c2c:	4b03      	ldr	r3, [pc, #12]	; (8003c3c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	20000000 	.word	0x20000000

08003c40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c44:	f7ff fff0 	bl	8003c28 <HAL_RCC_GetHCLKFreq>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	4b05      	ldr	r3, [pc, #20]	; (8003c60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	0a9b      	lsrs	r3, r3, #10
 8003c50:	f003 0307 	and.w	r3, r3, #7
 8003c54:	4903      	ldr	r1, [pc, #12]	; (8003c64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c56:	5ccb      	ldrb	r3, [r1, r3]
 8003c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	40023800 	.word	0x40023800
 8003c64:	0800721c 	.word	0x0800721c

08003c68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c6c:	f7ff ffdc 	bl	8003c28 <HAL_RCC_GetHCLKFreq>
 8003c70:	4602      	mov	r2, r0
 8003c72:	4b05      	ldr	r3, [pc, #20]	; (8003c88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	0b5b      	lsrs	r3, r3, #13
 8003c78:	f003 0307 	and.w	r3, r3, #7
 8003c7c:	4903      	ldr	r1, [pc, #12]	; (8003c8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c7e:	5ccb      	ldrb	r3, [r1, r3]
 8003c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	40023800 	.word	0x40023800
 8003c8c:	0800721c 	.word	0x0800721c

08003c90 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d105      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d035      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003cb8:	4b67      	ldr	r3, [pc, #412]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cbe:	f7fd fe85 	bl	80019cc <HAL_GetTick>
 8003cc2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cc4:	e008      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003cc6:	f7fd fe81 	bl	80019cc <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e0ba      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cd8:	4b60      	ldr	r3, [pc, #384]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1f0      	bne.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	019a      	lsls	r2, r3, #6
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	071b      	lsls	r3, r3, #28
 8003cf0:	495a      	ldr	r1, [pc, #360]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003cf8:	4b57      	ldr	r3, [pc, #348]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cfe:	f7fd fe65 	bl	80019cc <HAL_GetTick>
 8003d02:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d04:	e008      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d06:	f7fd fe61 	bl	80019cc <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e09a      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d18:	4b50      	ldr	r3, [pc, #320]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0f0      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 8083 	beq.w	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d32:	2300      	movs	r3, #0
 8003d34:	60fb      	str	r3, [r7, #12]
 8003d36:	4b49      	ldr	r3, [pc, #292]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	4a48      	ldr	r2, [pc, #288]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d40:	6413      	str	r3, [r2, #64]	; 0x40
 8003d42:	4b46      	ldr	r3, [pc, #280]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003d4e:	4b44      	ldr	r3, [pc, #272]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a43      	ldr	r2, [pc, #268]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d58:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d5a:	f7fd fe37 	bl	80019cc <HAL_GetTick>
 8003d5e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d60:	e008      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003d62:	f7fd fe33 	bl	80019cc <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e06c      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d74:	4b3a      	ldr	r3, [pc, #232]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d0f0      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d80:	4b36      	ldr	r3, [pc, #216]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d88:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d02f      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d028      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d9e:	4b2f      	ldr	r3, [pc, #188]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003da6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003da8:	4b2e      	ldr	r3, [pc, #184]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003daa:	2201      	movs	r2, #1
 8003dac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003dae:	4b2d      	ldr	r3, [pc, #180]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003db4:	4a29      	ldr	r2, [pc, #164]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003dba:	4b28      	ldr	r3, [pc, #160]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d114      	bne.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003dc6:	f7fd fe01 	bl	80019cc <HAL_GetTick>
 8003dca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dcc:	e00a      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dce:	f7fd fdfd 	bl	80019cc <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e034      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de4:	4b1d      	ldr	r3, [pc, #116]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0ee      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dfc:	d10d      	bne.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003dfe:	4b17      	ldr	r3, [pc, #92]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003e0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e12:	4912      	ldr	r1, [pc, #72]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	608b      	str	r3, [r1, #8]
 8003e18:	e005      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003e1a:	4b10      	ldr	r3, [pc, #64]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	4a0f      	ldr	r2, [pc, #60]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e20:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e24:	6093      	str	r3, [r2, #8]
 8003e26:	4b0d      	ldr	r3, [pc, #52]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e28:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e32:	490a      	ldr	r1, [pc, #40]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0308 	and.w	r3, r3, #8
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d003      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	7c1a      	ldrb	r2, [r3, #16]
 8003e48:	4b07      	ldr	r3, [pc, #28]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003e4a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3718      	adds	r7, #24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	42470068 	.word	0x42470068
 8003e5c:	40023800 	.word	0x40023800
 8003e60:	40007000 	.word	0x40007000
 8003e64:	42470e40 	.word	0x42470e40
 8003e68:	424711e0 	.word	0x424711e0

08003e6c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e066      	b.n	8003f50 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	7f5b      	ldrb	r3, [r3, #29]
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d105      	bne.n	8003e98 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7fd fb04 	bl	80014a0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	22ca      	movs	r2, #202	; 0xca
 8003ea4:	625a      	str	r2, [r3, #36]	; 0x24
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2253      	movs	r2, #83	; 0x53
 8003eac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f998 	bl	80041e4 <RTC_EnterInitMode>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003eb8:	7bfb      	ldrb	r3, [r7, #15]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d12c      	bne.n	8003f18 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	6812      	ldr	r2, [r2, #0]
 8003ec8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003ecc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ed0:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6899      	ldr	r1, [r3, #8]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	431a      	orrs	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	68d2      	ldr	r2, [r2, #12]
 8003ef8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6919      	ldr	r1, [r3, #16]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	041a      	lsls	r2, r3, #16
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f99f 	bl	8004252 <RTC_ExitInitMode>
 8003f14:	4603      	mov	r3, r0
 8003f16:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003f18:	7bfb      	ldrb	r3, [r7, #15]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d113      	bne.n	8003f46 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f2c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	699a      	ldr	r2, [r3, #24]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	22ff      	movs	r2, #255	; 0xff
 8003f4c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003f58:	b590      	push	{r4, r7, lr}
 8003f5a:	b087      	sub	sp, #28
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	7f1b      	ldrb	r3, [r3, #28]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d101      	bne.n	8003f74 <HAL_RTC_SetTime+0x1c>
 8003f70:	2302      	movs	r3, #2
 8003f72:	e087      	b.n	8004084 <HAL_RTC_SetTime+0x12c>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2201      	movs	r2, #1
 8003f78:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2202      	movs	r2, #2
 8003f7e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d126      	bne.n	8003fd4 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d102      	bne.n	8003f9a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	2200      	movs	r2, #0
 8003f98:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f000 f97c 	bl	800429c <RTC_ByteToBcd2>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	785b      	ldrb	r3, [r3, #1]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f000 f975 	bl	800429c <RTC_ByteToBcd2>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003fb6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	789b      	ldrb	r3, [r3, #2]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 f96d 	bl	800429c <RTC_ByteToBcd2>
 8003fc2:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003fc4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	78db      	ldrb	r3, [r3, #3]
 8003fcc:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	617b      	str	r3, [r7, #20]
 8003fd2:	e018      	b.n	8004006 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d102      	bne.n	8003fe8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	785b      	ldrb	r3, [r3, #1]
 8003ff2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003ff4:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003ffa:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	78db      	ldrb	r3, [r3, #3]
 8004000:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004002:	4313      	orrs	r3, r2
 8004004:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	22ca      	movs	r2, #202	; 0xca
 800400c:	625a      	str	r2, [r3, #36]	; 0x24
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2253      	movs	r2, #83	; 0x53
 8004014:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f000 f8e4 	bl	80041e4 <RTC_EnterInitMode>
 800401c:	4603      	mov	r3, r0
 800401e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004020:	7cfb      	ldrb	r3, [r7, #19]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d120      	bne.n	8004068 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004030:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004034:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004044:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6899      	ldr	r1, [r3, #8]
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	68da      	ldr	r2, [r3, #12]
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	431a      	orrs	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f000 f8f7 	bl	8004252 <RTC_ExitInitMode>
 8004064:	4603      	mov	r3, r0
 8004066:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004068:	7cfb      	ldrb	r3, [r7, #19]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d102      	bne.n	8004074 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2201      	movs	r2, #1
 8004072:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	22ff      	movs	r2, #255	; 0xff
 800407a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	771a      	strb	r2, [r3, #28]

  return status;
 8004082:	7cfb      	ldrb	r3, [r7, #19]
}
 8004084:	4618      	mov	r0, r3
 8004086:	371c      	adds	r7, #28
 8004088:	46bd      	mov	sp, r7
 800408a:	bd90      	pop	{r4, r7, pc}

0800408c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800408c:	b590      	push	{r4, r7, lr}
 800408e:	b087      	sub	sp, #28
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004098:	2300      	movs	r3, #0
 800409a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	7f1b      	ldrb	r3, [r3, #28]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d101      	bne.n	80040a8 <HAL_RTC_SetDate+0x1c>
 80040a4:	2302      	movs	r3, #2
 80040a6:	e071      	b.n	800418c <HAL_RTC_SetDate+0x100>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2201      	movs	r2, #1
 80040ac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2202      	movs	r2, #2
 80040b2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10e      	bne.n	80040d8 <HAL_RTC_SetDate+0x4c>
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	785b      	ldrb	r3, [r3, #1]
 80040be:	f003 0310 	and.w	r3, r3, #16
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d008      	beq.n	80040d8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	785b      	ldrb	r3, [r3, #1]
 80040ca:	f023 0310 	bic.w	r3, r3, #16
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	330a      	adds	r3, #10
 80040d2:	b2da      	uxtb	r2, r3
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d11c      	bne.n	8004118 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	78db      	ldrb	r3, [r3, #3]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 f8da 	bl	800429c <RTC_ByteToBcd2>
 80040e8:	4603      	mov	r3, r0
 80040ea:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	785b      	ldrb	r3, [r3, #1]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f000 f8d3 	bl	800429c <RTC_ByteToBcd2>
 80040f6:	4603      	mov	r3, r0
 80040f8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80040fa:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	789b      	ldrb	r3, [r3, #2]
 8004100:	4618      	mov	r0, r3
 8004102:	f000 f8cb 	bl	800429c <RTC_ByteToBcd2>
 8004106:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004108:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004112:	4313      	orrs	r3, r2
 8004114:	617b      	str	r3, [r7, #20]
 8004116:	e00e      	b.n	8004136 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	78db      	ldrb	r3, [r3, #3]
 800411c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	785b      	ldrb	r3, [r3, #1]
 8004122:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004124:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800412a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004132:	4313      	orrs	r3, r2
 8004134:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	22ca      	movs	r2, #202	; 0xca
 800413c:	625a      	str	r2, [r3, #36]	; 0x24
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2253      	movs	r2, #83	; 0x53
 8004144:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f000 f84c 	bl	80041e4 <RTC_EnterInitMode>
 800414c:	4603      	mov	r3, r0
 800414e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004150:	7cfb      	ldrb	r3, [r7, #19]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10c      	bne.n	8004170 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004160:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004164:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f000 f873 	bl	8004252 <RTC_ExitInitMode>
 800416c:	4603      	mov	r3, r0
 800416e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004170:	7cfb      	ldrb	r3, [r7, #19]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d102      	bne.n	800417c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2201      	movs	r2, #1
 800417a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	22ff      	movs	r2, #255	; 0xff
 8004182:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	771a      	strb	r2, [r3, #28]

  return status;
 800418a:	7cfb      	ldrb	r3, [r7, #19]
}
 800418c:	4618      	mov	r0, r3
 800418e:	371c      	adds	r7, #28
 8004190:	46bd      	mov	sp, r7
 8004192:	bd90      	pop	{r4, r7, pc}

08004194 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800419c:	2300      	movs	r3, #0
 800419e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68da      	ldr	r2, [r3, #12]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80041ae:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041b0:	f7fd fc0c 	bl	80019cc <HAL_GetTick>
 80041b4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80041b6:	e009      	b.n	80041cc <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80041b8:	f7fd fc08 	bl	80019cc <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041c6:	d901      	bls.n	80041cc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e007      	b.n	80041dc <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	f003 0320 	and.w	r3, r3, #32
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d0ee      	beq.n	80041b8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041ec:	2300      	movs	r3, #0
 80041ee:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d122      	bne.n	8004248 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68da      	ldr	r2, [r3, #12]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004210:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004212:	f7fd fbdb 	bl	80019cc <HAL_GetTick>
 8004216:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004218:	e00c      	b.n	8004234 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800421a:	f7fd fbd7 	bl	80019cc <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004228:	d904      	bls.n	8004234 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2204      	movs	r2, #4
 800422e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423e:	2b00      	cmp	r3, #0
 8004240:	d102      	bne.n	8004248 <RTC_EnterInitMode+0x64>
 8004242:	7bfb      	ldrb	r3, [r7, #15]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d1e8      	bne.n	800421a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004248:	7bfb      	ldrb	r3, [r7, #15]
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b084      	sub	sp, #16
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800425a:	2300      	movs	r3, #0
 800425c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68da      	ldr	r2, [r3, #12]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800426c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f003 0320 	and.w	r3, r3, #32
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10a      	bne.n	8004292 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f7ff ff89 	bl	8004194 <HAL_RTC_WaitForSynchro>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d004      	beq.n	8004292 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2204      	movs	r2, #4
 800428c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004292:	7bfb      	ldrb	r3, [r7, #15]
}
 8004294:	4618      	mov	r0, r3
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	4603      	mov	r3, r0
 80042a4:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80042a6:	2300      	movs	r3, #0
 80042a8:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80042aa:	e005      	b.n	80042b8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80042ac:	7bfb      	ldrb	r3, [r7, #15]
 80042ae:	3301      	adds	r3, #1
 80042b0:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80042b2:	79fb      	ldrb	r3, [r7, #7]
 80042b4:	3b0a      	subs	r3, #10
 80042b6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80042b8:	79fb      	ldrb	r3, [r7, #7]
 80042ba:	2b09      	cmp	r3, #9
 80042bc:	d8f6      	bhi.n	80042ac <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80042be:	7bfb      	ldrb	r3, [r7, #15]
 80042c0:	011b      	lsls	r3, r3, #4
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	79fb      	ldrb	r3, [r7, #7]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	b2db      	uxtb	r3, r3
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3714      	adds	r7, #20
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b082      	sub	sp, #8
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e041      	b.n	800436c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d106      	bne.n	8004302 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f7fd f8fb 	bl	80014f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2202      	movs	r2, #2
 8004306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	3304      	adds	r3, #4
 8004312:	4619      	mov	r1, r3
 8004314:	4610      	mov	r0, r2
 8004316:	f000 fd55 	bl	8004dc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e041      	b.n	800440a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d106      	bne.n	80043a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f839 	bl	8004412 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	3304      	adds	r3, #4
 80043b0:	4619      	mov	r1, r3
 80043b2:	4610      	mov	r0, r2
 80043b4:	f000 fd06 	bl	8004dc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004412:	b480      	push	{r7}
 8004414:	b083      	sub	sp, #12
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800441a:	bf00      	nop
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
	...

08004428 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d109      	bne.n	800444c <HAL_TIM_PWM_Start+0x24>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b01      	cmp	r3, #1
 8004442:	bf14      	ite	ne
 8004444:	2301      	movne	r3, #1
 8004446:	2300      	moveq	r3, #0
 8004448:	b2db      	uxtb	r3, r3
 800444a:	e022      	b.n	8004492 <HAL_TIM_PWM_Start+0x6a>
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	2b04      	cmp	r3, #4
 8004450:	d109      	bne.n	8004466 <HAL_TIM_PWM_Start+0x3e>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b01      	cmp	r3, #1
 800445c:	bf14      	ite	ne
 800445e:	2301      	movne	r3, #1
 8004460:	2300      	moveq	r3, #0
 8004462:	b2db      	uxtb	r3, r3
 8004464:	e015      	b.n	8004492 <HAL_TIM_PWM_Start+0x6a>
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b08      	cmp	r3, #8
 800446a:	d109      	bne.n	8004480 <HAL_TIM_PWM_Start+0x58>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b01      	cmp	r3, #1
 8004476:	bf14      	ite	ne
 8004478:	2301      	movne	r3, #1
 800447a:	2300      	moveq	r3, #0
 800447c:	b2db      	uxtb	r3, r3
 800447e:	e008      	b.n	8004492 <HAL_TIM_PWM_Start+0x6a>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b01      	cmp	r3, #1
 800448a:	bf14      	ite	ne
 800448c:	2301      	movne	r3, #1
 800448e:	2300      	moveq	r3, #0
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e068      	b.n	800456c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d104      	bne.n	80044aa <HAL_TIM_PWM_Start+0x82>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2202      	movs	r2, #2
 80044a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044a8:	e013      	b.n	80044d2 <HAL_TIM_PWM_Start+0xaa>
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2b04      	cmp	r3, #4
 80044ae:	d104      	bne.n	80044ba <HAL_TIM_PWM_Start+0x92>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2202      	movs	r2, #2
 80044b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044b8:	e00b      	b.n	80044d2 <HAL_TIM_PWM_Start+0xaa>
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d104      	bne.n	80044ca <HAL_TIM_PWM_Start+0xa2>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2202      	movs	r2, #2
 80044c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044c8:	e003      	b.n	80044d2 <HAL_TIM_PWM_Start+0xaa>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2202      	movs	r2, #2
 80044ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2201      	movs	r2, #1
 80044d8:	6839      	ldr	r1, [r7, #0]
 80044da:	4618      	mov	r0, r3
 80044dc:	f001 f836 	bl	800554c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a23      	ldr	r2, [pc, #140]	; (8004574 <HAL_TIM_PWM_Start+0x14c>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d107      	bne.n	80044fa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a1d      	ldr	r2, [pc, #116]	; (8004574 <HAL_TIM_PWM_Start+0x14c>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d018      	beq.n	8004536 <HAL_TIM_PWM_Start+0x10e>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800450c:	d013      	beq.n	8004536 <HAL_TIM_PWM_Start+0x10e>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a19      	ldr	r2, [pc, #100]	; (8004578 <HAL_TIM_PWM_Start+0x150>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d00e      	beq.n	8004536 <HAL_TIM_PWM_Start+0x10e>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a17      	ldr	r2, [pc, #92]	; (800457c <HAL_TIM_PWM_Start+0x154>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d009      	beq.n	8004536 <HAL_TIM_PWM_Start+0x10e>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a16      	ldr	r2, [pc, #88]	; (8004580 <HAL_TIM_PWM_Start+0x158>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d004      	beq.n	8004536 <HAL_TIM_PWM_Start+0x10e>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a14      	ldr	r2, [pc, #80]	; (8004584 <HAL_TIM_PWM_Start+0x15c>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d111      	bne.n	800455a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2b06      	cmp	r3, #6
 8004546:	d010      	beq.n	800456a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 0201 	orr.w	r2, r2, #1
 8004556:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004558:	e007      	b.n	800456a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f042 0201 	orr.w	r2, r2, #1
 8004568:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40010000 	.word	0x40010000
 8004578:	40000400 	.word	0x40000400
 800457c:	40000800 	.word	0x40000800
 8004580:	40000c00 	.word	0x40000c00
 8004584:	40014000 	.word	0x40014000

08004588 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2200      	movs	r2, #0
 8004598:	6839      	ldr	r1, [r7, #0]
 800459a:	4618      	mov	r0, r3
 800459c:	f000 ffd6 	bl	800554c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a29      	ldr	r2, [pc, #164]	; (800464c <HAL_TIM_PWM_Stop+0xc4>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d117      	bne.n	80045da <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6a1a      	ldr	r2, [r3, #32]
 80045b0:	f241 1311 	movw	r3, #4369	; 0x1111
 80045b4:	4013      	ands	r3, r2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10f      	bne.n	80045da <HAL_TIM_PWM_Stop+0x52>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6a1a      	ldr	r2, [r3, #32]
 80045c0:	f240 4344 	movw	r3, #1092	; 0x444
 80045c4:	4013      	ands	r3, r2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d107      	bne.n	80045da <HAL_TIM_PWM_Stop+0x52>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6a1a      	ldr	r2, [r3, #32]
 80045e0:	f241 1311 	movw	r3, #4369	; 0x1111
 80045e4:	4013      	ands	r3, r2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10f      	bne.n	800460a <HAL_TIM_PWM_Stop+0x82>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6a1a      	ldr	r2, [r3, #32]
 80045f0:	f240 4344 	movw	r3, #1092	; 0x444
 80045f4:	4013      	ands	r3, r2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d107      	bne.n	800460a <HAL_TIM_PWM_Stop+0x82>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f022 0201 	bic.w	r2, r2, #1
 8004608:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d104      	bne.n	800461a <HAL_TIM_PWM_Stop+0x92>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004618:	e013      	b.n	8004642 <HAL_TIM_PWM_Stop+0xba>
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	2b04      	cmp	r3, #4
 800461e:	d104      	bne.n	800462a <HAL_TIM_PWM_Stop+0xa2>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004628:	e00b      	b.n	8004642 <HAL_TIM_PWM_Stop+0xba>
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	2b08      	cmp	r3, #8
 800462e:	d104      	bne.n	800463a <HAL_TIM_PWM_Stop+0xb2>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004638:	e003      	b.n	8004642 <HAL_TIM_PWM_Stop+0xba>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	40010000 	.word	0x40010000

08004650 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e041      	b.n	80046e6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d106      	bne.n	800467c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f839 	bl	80046ee <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2202      	movs	r2, #2
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	3304      	adds	r3, #4
 800468c:	4619      	mov	r1, r3
 800468e:	4610      	mov	r0, r2
 8004690:	f000 fb98 	bl	8004dc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3708      	adds	r7, #8
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80046ee:	b480      	push	{r7}
 80046f0:	b083      	sub	sp, #12
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80046f6:	bf00      	nop
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b082      	sub	sp, #8
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b02      	cmp	r3, #2
 8004716:	d122      	bne.n	800475e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b02      	cmp	r3, #2
 8004724:	d11b      	bne.n	800475e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f06f 0202 	mvn.w	r2, #2
 800472e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	f003 0303 	and.w	r3, r3, #3
 8004740:	2b00      	cmp	r3, #0
 8004742:	d003      	beq.n	800474c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 fb1e 	bl	8004d86 <HAL_TIM_IC_CaptureCallback>
 800474a:	e005      	b.n	8004758 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 fb10 	bl	8004d72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 fb21 	bl	8004d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	f003 0304 	and.w	r3, r3, #4
 8004768:	2b04      	cmp	r3, #4
 800476a:	d122      	bne.n	80047b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	f003 0304 	and.w	r3, r3, #4
 8004776:	2b04      	cmp	r3, #4
 8004778:	d11b      	bne.n	80047b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f06f 0204 	mvn.w	r2, #4
 8004782:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2202      	movs	r2, #2
 8004788:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004794:	2b00      	cmp	r3, #0
 8004796:	d003      	beq.n	80047a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 faf4 	bl	8004d86 <HAL_TIM_IC_CaptureCallback>
 800479e:	e005      	b.n	80047ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 fae6 	bl	8004d72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 faf7 	bl	8004d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	f003 0308 	and.w	r3, r3, #8
 80047bc:	2b08      	cmp	r3, #8
 80047be:	d122      	bne.n	8004806 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	f003 0308 	and.w	r3, r3, #8
 80047ca:	2b08      	cmp	r3, #8
 80047cc:	d11b      	bne.n	8004806 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f06f 0208 	mvn.w	r2, #8
 80047d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2204      	movs	r2, #4
 80047dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	69db      	ldr	r3, [r3, #28]
 80047e4:	f003 0303 	and.w	r3, r3, #3
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 faca 	bl	8004d86 <HAL_TIM_IC_CaptureCallback>
 80047f2:	e005      	b.n	8004800 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 fabc 	bl	8004d72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 facd 	bl	8004d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	f003 0310 	and.w	r3, r3, #16
 8004810:	2b10      	cmp	r3, #16
 8004812:	d122      	bne.n	800485a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	f003 0310 	and.w	r3, r3, #16
 800481e:	2b10      	cmp	r3, #16
 8004820:	d11b      	bne.n	800485a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f06f 0210 	mvn.w	r2, #16
 800482a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2208      	movs	r2, #8
 8004830:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	69db      	ldr	r3, [r3, #28]
 8004838:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 faa0 	bl	8004d86 <HAL_TIM_IC_CaptureCallback>
 8004846:	e005      	b.n	8004854 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 fa92 	bl	8004d72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 faa3 	bl	8004d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b01      	cmp	r3, #1
 8004866:	d10e      	bne.n	8004886 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b01      	cmp	r3, #1
 8004874:	d107      	bne.n	8004886 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f06f 0201 	mvn.w	r2, #1
 800487e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 fa6c 	bl	8004d5e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004890:	2b80      	cmp	r3, #128	; 0x80
 8004892:	d10e      	bne.n	80048b2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800489e:	2b80      	cmp	r3, #128	; 0x80
 80048a0:	d107      	bne.n	80048b2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f001 f847 	bl	8005940 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048bc:	2b40      	cmp	r3, #64	; 0x40
 80048be:	d10e      	bne.n	80048de <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ca:	2b40      	cmp	r3, #64	; 0x40
 80048cc:	d107      	bne.n	80048de <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 fa68 	bl	8004dae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	f003 0320 	and.w	r3, r3, #32
 80048e8:	2b20      	cmp	r3, #32
 80048ea:	d10e      	bne.n	800490a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	f003 0320 	and.w	r3, r3, #32
 80048f6:	2b20      	cmp	r3, #32
 80048f8:	d107      	bne.n	800490a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f06f 0220 	mvn.w	r2, #32
 8004902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f001 f811 	bl	800592c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800490a:	bf00      	nop
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b086      	sub	sp, #24
 8004916:	af00      	add	r7, sp, #0
 8004918:	60f8      	str	r0, [r7, #12]
 800491a:	60b9      	str	r1, [r7, #8]
 800491c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800491e:	2300      	movs	r3, #0
 8004920:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004928:	2b01      	cmp	r3, #1
 800492a:	d101      	bne.n	8004930 <HAL_TIM_IC_ConfigChannel+0x1e>
 800492c:	2302      	movs	r3, #2
 800492e:	e088      	b.n	8004a42 <HAL_TIM_IC_ConfigChannel+0x130>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d11b      	bne.n	8004976 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6818      	ldr	r0, [r3, #0]
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	6819      	ldr	r1, [r3, #0]
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	685a      	ldr	r2, [r3, #4]
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	f000 fc45 	bl	80051dc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	699a      	ldr	r2, [r3, #24]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 020c 	bic.w	r2, r2, #12
 8004960:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	6999      	ldr	r1, [r3, #24]
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	689a      	ldr	r2, [r3, #8]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	430a      	orrs	r2, r1
 8004972:	619a      	str	r2, [r3, #24]
 8004974:	e060      	b.n	8004a38 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2b04      	cmp	r3, #4
 800497a:	d11c      	bne.n	80049b6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6818      	ldr	r0, [r3, #0]
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	6819      	ldr	r1, [r3, #0]
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f000 fcbd 	bl	800530a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	699a      	ldr	r2, [r3, #24]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800499e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6999      	ldr	r1, [r3, #24]
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	021a      	lsls	r2, r3, #8
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	430a      	orrs	r2, r1
 80049b2:	619a      	str	r2, [r3, #24]
 80049b4:	e040      	b.n	8004a38 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2b08      	cmp	r3, #8
 80049ba:	d11b      	bne.n	80049f4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6818      	ldr	r0, [r3, #0]
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	6819      	ldr	r1, [r3, #0]
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	f000 fd0a 	bl	80053e4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	69da      	ldr	r2, [r3, #28]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 020c 	bic.w	r2, r2, #12
 80049de:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	69d9      	ldr	r1, [r3, #28]
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	689a      	ldr	r2, [r3, #8]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	61da      	str	r2, [r3, #28]
 80049f2:	e021      	b.n	8004a38 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b0c      	cmp	r3, #12
 80049f8:	d11c      	bne.n	8004a34 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6818      	ldr	r0, [r3, #0]
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	6819      	ldr	r1, [r3, #0]
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	f000 fd27 	bl	800545c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	69da      	ldr	r2, [r3, #28]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004a1c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	69d9      	ldr	r1, [r3, #28]
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	021a      	lsls	r2, r3, #8
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	61da      	str	r2, [r3, #28]
 8004a32:	e001      	b.n	8004a38 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3718      	adds	r7, #24
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
	...

08004a4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d101      	bne.n	8004a6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a66:	2302      	movs	r3, #2
 8004a68:	e0ae      	b.n	8004bc8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b0c      	cmp	r3, #12
 8004a76:	f200 809f 	bhi.w	8004bb8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a7a:	a201      	add	r2, pc, #4	; (adr r2, 8004a80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a80:	08004ab5 	.word	0x08004ab5
 8004a84:	08004bb9 	.word	0x08004bb9
 8004a88:	08004bb9 	.word	0x08004bb9
 8004a8c:	08004bb9 	.word	0x08004bb9
 8004a90:	08004af5 	.word	0x08004af5
 8004a94:	08004bb9 	.word	0x08004bb9
 8004a98:	08004bb9 	.word	0x08004bb9
 8004a9c:	08004bb9 	.word	0x08004bb9
 8004aa0:	08004b37 	.word	0x08004b37
 8004aa4:	08004bb9 	.word	0x08004bb9
 8004aa8:	08004bb9 	.word	0x08004bb9
 8004aac:	08004bb9 	.word	0x08004bb9
 8004ab0:	08004b77 	.word	0x08004b77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68b9      	ldr	r1, [r7, #8]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 fa02 	bl	8004ec4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	699a      	ldr	r2, [r3, #24]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f042 0208 	orr.w	r2, r2, #8
 8004ace:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	699a      	ldr	r2, [r3, #24]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f022 0204 	bic.w	r2, r2, #4
 8004ade:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6999      	ldr	r1, [r3, #24]
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	691a      	ldr	r2, [r3, #16]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	619a      	str	r2, [r3, #24]
      break;
 8004af2:	e064      	b.n	8004bbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68b9      	ldr	r1, [r7, #8]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 fa48 	bl	8004f90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	699a      	ldr	r2, [r3, #24]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	699a      	ldr	r2, [r3, #24]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6999      	ldr	r1, [r3, #24]
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	021a      	lsls	r2, r3, #8
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	430a      	orrs	r2, r1
 8004b32:	619a      	str	r2, [r3, #24]
      break;
 8004b34:	e043      	b.n	8004bbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68b9      	ldr	r1, [r7, #8]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f000 fa93 	bl	8005068 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	69da      	ldr	r2, [r3, #28]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f042 0208 	orr.w	r2, r2, #8
 8004b50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	69da      	ldr	r2, [r3, #28]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f022 0204 	bic.w	r2, r2, #4
 8004b60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	69d9      	ldr	r1, [r3, #28]
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	691a      	ldr	r2, [r3, #16]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	430a      	orrs	r2, r1
 8004b72:	61da      	str	r2, [r3, #28]
      break;
 8004b74:	e023      	b.n	8004bbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68b9      	ldr	r1, [r7, #8]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f000 fadd 	bl	800513c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	69da      	ldr	r2, [r3, #28]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	69da      	ldr	r2, [r3, #28]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ba0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	69d9      	ldr	r1, [r3, #28]
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	021a      	lsls	r2, r3, #8
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	61da      	str	r2, [r3, #28]
      break;
 8004bb6:	e002      	b.n	8004bbe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	75fb      	strb	r3, [r7, #23]
      break;
 8004bbc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3718      	adds	r7, #24
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d101      	bne.n	8004bec <HAL_TIM_ConfigClockSource+0x1c>
 8004be8:	2302      	movs	r3, #2
 8004bea:	e0b4      	b.n	8004d56 <HAL_TIM_ConfigClockSource+0x186>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c24:	d03e      	beq.n	8004ca4 <HAL_TIM_ConfigClockSource+0xd4>
 8004c26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c2a:	f200 8087 	bhi.w	8004d3c <HAL_TIM_ConfigClockSource+0x16c>
 8004c2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c32:	f000 8086 	beq.w	8004d42 <HAL_TIM_ConfigClockSource+0x172>
 8004c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c3a:	d87f      	bhi.n	8004d3c <HAL_TIM_ConfigClockSource+0x16c>
 8004c3c:	2b70      	cmp	r3, #112	; 0x70
 8004c3e:	d01a      	beq.n	8004c76 <HAL_TIM_ConfigClockSource+0xa6>
 8004c40:	2b70      	cmp	r3, #112	; 0x70
 8004c42:	d87b      	bhi.n	8004d3c <HAL_TIM_ConfigClockSource+0x16c>
 8004c44:	2b60      	cmp	r3, #96	; 0x60
 8004c46:	d050      	beq.n	8004cea <HAL_TIM_ConfigClockSource+0x11a>
 8004c48:	2b60      	cmp	r3, #96	; 0x60
 8004c4a:	d877      	bhi.n	8004d3c <HAL_TIM_ConfigClockSource+0x16c>
 8004c4c:	2b50      	cmp	r3, #80	; 0x50
 8004c4e:	d03c      	beq.n	8004cca <HAL_TIM_ConfigClockSource+0xfa>
 8004c50:	2b50      	cmp	r3, #80	; 0x50
 8004c52:	d873      	bhi.n	8004d3c <HAL_TIM_ConfigClockSource+0x16c>
 8004c54:	2b40      	cmp	r3, #64	; 0x40
 8004c56:	d058      	beq.n	8004d0a <HAL_TIM_ConfigClockSource+0x13a>
 8004c58:	2b40      	cmp	r3, #64	; 0x40
 8004c5a:	d86f      	bhi.n	8004d3c <HAL_TIM_ConfigClockSource+0x16c>
 8004c5c:	2b30      	cmp	r3, #48	; 0x30
 8004c5e:	d064      	beq.n	8004d2a <HAL_TIM_ConfigClockSource+0x15a>
 8004c60:	2b30      	cmp	r3, #48	; 0x30
 8004c62:	d86b      	bhi.n	8004d3c <HAL_TIM_ConfigClockSource+0x16c>
 8004c64:	2b20      	cmp	r3, #32
 8004c66:	d060      	beq.n	8004d2a <HAL_TIM_ConfigClockSource+0x15a>
 8004c68:	2b20      	cmp	r3, #32
 8004c6a:	d867      	bhi.n	8004d3c <HAL_TIM_ConfigClockSource+0x16c>
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d05c      	beq.n	8004d2a <HAL_TIM_ConfigClockSource+0x15a>
 8004c70:	2b10      	cmp	r3, #16
 8004c72:	d05a      	beq.n	8004d2a <HAL_TIM_ConfigClockSource+0x15a>
 8004c74:	e062      	b.n	8004d3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6818      	ldr	r0, [r3, #0]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	6899      	ldr	r1, [r3, #8]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	f000 fc41 	bl	800550c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68ba      	ldr	r2, [r7, #8]
 8004ca0:	609a      	str	r2, [r3, #8]
      break;
 8004ca2:	e04f      	b.n	8004d44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6818      	ldr	r0, [r3, #0]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	6899      	ldr	r1, [r3, #8]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	685a      	ldr	r2, [r3, #4]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f000 fc2a 	bl	800550c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	689a      	ldr	r2, [r3, #8]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cc6:	609a      	str	r2, [r3, #8]
      break;
 8004cc8:	e03c      	b.n	8004d44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6818      	ldr	r0, [r3, #0]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	6859      	ldr	r1, [r3, #4]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	f000 fae8 	bl	80052ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2150      	movs	r1, #80	; 0x50
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 fbf7 	bl	80054d6 <TIM_ITRx_SetConfig>
      break;
 8004ce8:	e02c      	b.n	8004d44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6818      	ldr	r0, [r3, #0]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	6859      	ldr	r1, [r3, #4]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	f000 fb44 	bl	8005384 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2160      	movs	r1, #96	; 0x60
 8004d02:	4618      	mov	r0, r3
 8004d04:	f000 fbe7 	bl	80054d6 <TIM_ITRx_SetConfig>
      break;
 8004d08:	e01c      	b.n	8004d44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6818      	ldr	r0, [r3, #0]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	6859      	ldr	r1, [r3, #4]
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	461a      	mov	r2, r3
 8004d18:	f000 fac8 	bl	80052ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2140      	movs	r1, #64	; 0x40
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 fbd7 	bl	80054d6 <TIM_ITRx_SetConfig>
      break;
 8004d28:	e00c      	b.n	8004d44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4619      	mov	r1, r3
 8004d34:	4610      	mov	r0, r2
 8004d36:	f000 fbce 	bl	80054d6 <TIM_ITRx_SetConfig>
      break;
 8004d3a:	e003      	b.n	8004d44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d40:	e000      	b.n	8004d44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b083      	sub	sp, #12
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d66:	bf00      	nop
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr

08004d72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d72:	b480      	push	{r7}
 8004d74:	b083      	sub	sp, #12
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d7a:	bf00      	nop
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr

08004d86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b083      	sub	sp, #12
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d8e:	bf00      	nop
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004da2:	bf00      	nop
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dae:	b480      	push	{r7}
 8004db0:	b083      	sub	sp, #12
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004db6:	bf00      	nop
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
	...

08004dc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a34      	ldr	r2, [pc, #208]	; (8004ea8 <TIM_Base_SetConfig+0xe4>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d00f      	beq.n	8004dfc <TIM_Base_SetConfig+0x38>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004de2:	d00b      	beq.n	8004dfc <TIM_Base_SetConfig+0x38>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a31      	ldr	r2, [pc, #196]	; (8004eac <TIM_Base_SetConfig+0xe8>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d007      	beq.n	8004dfc <TIM_Base_SetConfig+0x38>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a30      	ldr	r2, [pc, #192]	; (8004eb0 <TIM_Base_SetConfig+0xec>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d003      	beq.n	8004dfc <TIM_Base_SetConfig+0x38>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a2f      	ldr	r2, [pc, #188]	; (8004eb4 <TIM_Base_SetConfig+0xf0>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d108      	bne.n	8004e0e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a25      	ldr	r2, [pc, #148]	; (8004ea8 <TIM_Base_SetConfig+0xe4>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d01b      	beq.n	8004e4e <TIM_Base_SetConfig+0x8a>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e1c:	d017      	beq.n	8004e4e <TIM_Base_SetConfig+0x8a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a22      	ldr	r2, [pc, #136]	; (8004eac <TIM_Base_SetConfig+0xe8>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d013      	beq.n	8004e4e <TIM_Base_SetConfig+0x8a>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a21      	ldr	r2, [pc, #132]	; (8004eb0 <TIM_Base_SetConfig+0xec>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d00f      	beq.n	8004e4e <TIM_Base_SetConfig+0x8a>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a20      	ldr	r2, [pc, #128]	; (8004eb4 <TIM_Base_SetConfig+0xf0>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d00b      	beq.n	8004e4e <TIM_Base_SetConfig+0x8a>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a1f      	ldr	r2, [pc, #124]	; (8004eb8 <TIM_Base_SetConfig+0xf4>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d007      	beq.n	8004e4e <TIM_Base_SetConfig+0x8a>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a1e      	ldr	r2, [pc, #120]	; (8004ebc <TIM_Base_SetConfig+0xf8>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d003      	beq.n	8004e4e <TIM_Base_SetConfig+0x8a>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a1d      	ldr	r2, [pc, #116]	; (8004ec0 <TIM_Base_SetConfig+0xfc>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d108      	bne.n	8004e60 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	689a      	ldr	r2, [r3, #8]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a08      	ldr	r2, [pc, #32]	; (8004ea8 <TIM_Base_SetConfig+0xe4>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d103      	bne.n	8004e94 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	691a      	ldr	r2, [r3, #16]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	615a      	str	r2, [r3, #20]
}
 8004e9a:	bf00      	nop
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	40010000 	.word	0x40010000
 8004eac:	40000400 	.word	0x40000400
 8004eb0:	40000800 	.word	0x40000800
 8004eb4:	40000c00 	.word	0x40000c00
 8004eb8:	40014000 	.word	0x40014000
 8004ebc:	40014400 	.word	0x40014400
 8004ec0:	40014800 	.word	0x40014800

08004ec4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b087      	sub	sp, #28
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	f023 0201 	bic.w	r2, r3, #1
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f023 0303 	bic.w	r3, r3, #3
 8004efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f023 0302 	bic.w	r3, r3, #2
 8004f0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a1c      	ldr	r2, [pc, #112]	; (8004f8c <TIM_OC1_SetConfig+0xc8>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d10c      	bne.n	8004f3a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f023 0308 	bic.w	r3, r3, #8
 8004f26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f023 0304 	bic.w	r3, r3, #4
 8004f38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a13      	ldr	r2, [pc, #76]	; (8004f8c <TIM_OC1_SetConfig+0xc8>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d111      	bne.n	8004f66 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	621a      	str	r2, [r3, #32]
}
 8004f80:	bf00      	nop
 8004f82:	371c      	adds	r7, #28
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr
 8004f8c:	40010000 	.word	0x40010000

08004f90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b087      	sub	sp, #28
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	f023 0210 	bic.w	r2, r3, #16
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	021b      	lsls	r3, r3, #8
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f023 0320 	bic.w	r3, r3, #32
 8004fda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	011b      	lsls	r3, r3, #4
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a1e      	ldr	r2, [pc, #120]	; (8005064 <TIM_OC2_SetConfig+0xd4>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d10d      	bne.n	800500c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ff6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	011b      	lsls	r3, r3, #4
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	4313      	orrs	r3, r2
 8005002:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800500a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a15      	ldr	r2, [pc, #84]	; (8005064 <TIM_OC2_SetConfig+0xd4>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d113      	bne.n	800503c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800501a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005022:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	4313      	orrs	r3, r2
 800502e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	4313      	orrs	r3, r2
 800503a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	621a      	str	r2, [r3, #32]
}
 8005056:	bf00      	nop
 8005058:	371c      	adds	r7, #28
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	40010000 	.word	0x40010000

08005068 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005068:	b480      	push	{r7}
 800506a:	b087      	sub	sp, #28
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 0303 	bic.w	r3, r3, #3
 800509e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	021b      	lsls	r3, r3, #8
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a1d      	ldr	r2, [pc, #116]	; (8005138 <TIM_OC3_SetConfig+0xd0>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d10d      	bne.n	80050e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	021b      	lsls	r3, r3, #8
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a14      	ldr	r2, [pc, #80]	; (8005138 <TIM_OC3_SetConfig+0xd0>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d113      	bne.n	8005112 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	011b      	lsls	r3, r3, #4
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	4313      	orrs	r3, r2
 8005104:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	011b      	lsls	r3, r3, #4
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	4313      	orrs	r3, r2
 8005110:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	685a      	ldr	r2, [r3, #4]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	621a      	str	r2, [r3, #32]
}
 800512c:	bf00      	nop
 800512e:	371c      	adds	r7, #28
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr
 8005138:	40010000 	.word	0x40010000

0800513c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800513c:	b480      	push	{r7}
 800513e:	b087      	sub	sp, #28
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a1b      	ldr	r3, [r3, #32]
 8005156:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800516a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005172:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	021b      	lsls	r3, r3, #8
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	4313      	orrs	r3, r2
 800517e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005186:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	031b      	lsls	r3, r3, #12
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	4313      	orrs	r3, r2
 8005192:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a10      	ldr	r2, [pc, #64]	; (80051d8 <TIM_OC4_SetConfig+0x9c>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d109      	bne.n	80051b0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	019b      	lsls	r3, r3, #6
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	685a      	ldr	r2, [r3, #4]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	621a      	str	r2, [r3, #32]
}
 80051ca:	bf00      	nop
 80051cc:	371c      	adds	r7, #28
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	40010000 	.word	0x40010000

080051dc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80051dc:	b480      	push	{r7}
 80051de:	b087      	sub	sp, #28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
 80051e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	f023 0201 	bic.w	r2, r3, #1
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6a1b      	ldr	r3, [r3, #32]
 8005200:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	4a24      	ldr	r2, [pc, #144]	; (8005298 <TIM_TI1_SetConfig+0xbc>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d013      	beq.n	8005232 <TIM_TI1_SetConfig+0x56>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005210:	d00f      	beq.n	8005232 <TIM_TI1_SetConfig+0x56>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	4a21      	ldr	r2, [pc, #132]	; (800529c <TIM_TI1_SetConfig+0xc0>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d00b      	beq.n	8005232 <TIM_TI1_SetConfig+0x56>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	4a20      	ldr	r2, [pc, #128]	; (80052a0 <TIM_TI1_SetConfig+0xc4>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d007      	beq.n	8005232 <TIM_TI1_SetConfig+0x56>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	4a1f      	ldr	r2, [pc, #124]	; (80052a4 <TIM_TI1_SetConfig+0xc8>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d003      	beq.n	8005232 <TIM_TI1_SetConfig+0x56>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	4a1e      	ldr	r2, [pc, #120]	; (80052a8 <TIM_TI1_SetConfig+0xcc>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d101      	bne.n	8005236 <TIM_TI1_SetConfig+0x5a>
 8005232:	2301      	movs	r3, #1
 8005234:	e000      	b.n	8005238 <TIM_TI1_SetConfig+0x5c>
 8005236:	2300      	movs	r3, #0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d008      	beq.n	800524e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f023 0303 	bic.w	r3, r3, #3
 8005242:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4313      	orrs	r3, r2
 800524a:	617b      	str	r3, [r7, #20]
 800524c:	e003      	b.n	8005256 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f043 0301 	orr.w	r3, r3, #1
 8005254:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800525c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	011b      	lsls	r3, r3, #4
 8005262:	b2db      	uxtb	r3, r3
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	4313      	orrs	r3, r2
 8005268:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	f023 030a 	bic.w	r3, r3, #10
 8005270:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	f003 030a 	and.w	r3, r3, #10
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	4313      	orrs	r3, r2
 800527c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	621a      	str	r2, [r3, #32]
}
 800528a:	bf00      	nop
 800528c:	371c      	adds	r7, #28
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	40010000 	.word	0x40010000
 800529c:	40000400 	.word	0x40000400
 80052a0:	40000800 	.word	0x40000800
 80052a4:	40000c00 	.word	0x40000c00
 80052a8:	40014000 	.word	0x40014000

080052ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b087      	sub	sp, #28
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	f023 0201 	bic.w	r2, r3, #1
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	011b      	lsls	r3, r3, #4
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	4313      	orrs	r3, r2
 80052e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	f023 030a 	bic.w	r3, r3, #10
 80052e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	621a      	str	r2, [r3, #32]
}
 80052fe:	bf00      	nop
 8005300:	371c      	adds	r7, #28
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800530a:	b480      	push	{r7}
 800530c:	b087      	sub	sp, #28
 800530e:	af00      	add	r7, sp, #0
 8005310:	60f8      	str	r0, [r7, #12]
 8005312:	60b9      	str	r1, [r7, #8]
 8005314:	607a      	str	r2, [r7, #4]
 8005316:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6a1b      	ldr	r3, [r3, #32]
 800531c:	f023 0210 	bic.w	r2, r3, #16
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005336:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	021b      	lsls	r3, r3, #8
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	4313      	orrs	r3, r2
 8005340:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005348:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	031b      	lsls	r3, r3, #12
 800534e:	b29b      	uxth	r3, r3
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	4313      	orrs	r3, r2
 8005354:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800535c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	011b      	lsls	r3, r3, #4
 8005362:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	4313      	orrs	r3, r2
 800536a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	693a      	ldr	r2, [r7, #16]
 8005376:	621a      	str	r2, [r3, #32]
}
 8005378:	bf00      	nop
 800537a:	371c      	adds	r7, #28
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005384:	b480      	push	{r7}
 8005386:	b087      	sub	sp, #28
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6a1b      	ldr	r3, [r3, #32]
 8005394:	f023 0210 	bic.w	r2, r3, #16
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	031b      	lsls	r3, r3, #12
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80053c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	011b      	lsls	r3, r3, #4
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	621a      	str	r2, [r3, #32]
}
 80053d8:	bf00      	nop
 80053da:	371c      	adds	r7, #28
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b087      	sub	sp, #28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
 80053f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	69db      	ldr	r3, [r3, #28]
 8005402:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f023 0303 	bic.w	r3, r3, #3
 8005410:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4313      	orrs	r3, r2
 8005418:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005420:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	011b      	lsls	r3, r3, #4
 8005426:	b2db      	uxtb	r3, r3
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	4313      	orrs	r3, r2
 800542c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005434:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	021b      	lsls	r3, r3, #8
 800543a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	4313      	orrs	r3, r2
 8005442:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	621a      	str	r2, [r3, #32]
}
 8005450:	bf00      	nop
 8005452:	371c      	adds	r7, #28
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800545c:	b480      	push	{r7}
 800545e:	b087      	sub	sp, #28
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
 8005468:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6a1b      	ldr	r3, [r3, #32]
 8005480:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005488:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	021b      	lsls	r3, r3, #8
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	4313      	orrs	r3, r2
 8005492:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800549a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	031b      	lsls	r3, r3, #12
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80054ae:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	031b      	lsls	r3, r3, #12
 80054b4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	621a      	str	r2, [r3, #32]
}
 80054ca:	bf00      	nop
 80054cc:	371c      	adds	r7, #28
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b085      	sub	sp, #20
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
 80054de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054ee:	683a      	ldr	r2, [r7, #0]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	f043 0307 	orr.w	r3, r3, #7
 80054f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	609a      	str	r2, [r3, #8]
}
 8005500:	bf00      	nop
 8005502:	3714      	adds	r7, #20
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
 8005518:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005526:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	021a      	lsls	r2, r3, #8
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	431a      	orrs	r2, r3
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	4313      	orrs	r3, r2
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	4313      	orrs	r3, r2
 8005538:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	609a      	str	r2, [r3, #8]
}
 8005540:	bf00      	nop
 8005542:	371c      	adds	r7, #28
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800554c:	b480      	push	{r7}
 800554e:	b087      	sub	sp, #28
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	f003 031f 	and.w	r3, r3, #31
 800555e:	2201      	movs	r2, #1
 8005560:	fa02 f303 	lsl.w	r3, r2, r3
 8005564:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6a1a      	ldr	r2, [r3, #32]
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	43db      	mvns	r3, r3
 800556e:	401a      	ands	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6a1a      	ldr	r2, [r3, #32]
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	f003 031f 	and.w	r3, r3, #31
 800557e:	6879      	ldr	r1, [r7, #4]
 8005580:	fa01 f303 	lsl.w	r3, r1, r3
 8005584:	431a      	orrs	r2, r3
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	621a      	str	r2, [r3, #32]
}
 800558a:	bf00      	nop
 800558c:	371c      	adds	r7, #28
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
	...

08005598 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d109      	bne.n	80055bc <HAL_TIMEx_PWMN_Start+0x24>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	bf14      	ite	ne
 80055b4:	2301      	movne	r3, #1
 80055b6:	2300      	moveq	r3, #0
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	e022      	b.n	8005602 <HAL_TIMEx_PWMN_Start+0x6a>
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	2b04      	cmp	r3, #4
 80055c0:	d109      	bne.n	80055d6 <HAL_TIMEx_PWMN_Start+0x3e>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	bf14      	ite	ne
 80055ce:	2301      	movne	r3, #1
 80055d0:	2300      	moveq	r3, #0
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	e015      	b.n	8005602 <HAL_TIMEx_PWMN_Start+0x6a>
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	2b08      	cmp	r3, #8
 80055da:	d109      	bne.n	80055f0 <HAL_TIMEx_PWMN_Start+0x58>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	bf14      	ite	ne
 80055e8:	2301      	movne	r3, #1
 80055ea:	2300      	moveq	r3, #0
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	e008      	b.n	8005602 <HAL_TIMEx_PWMN_Start+0x6a>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	bf14      	ite	ne
 80055fc:	2301      	movne	r3, #1
 80055fe:	2300      	moveq	r3, #0
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d001      	beq.n	800560a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e063      	b.n	80056d2 <HAL_TIMEx_PWMN_Start+0x13a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d104      	bne.n	800561a <HAL_TIMEx_PWMN_Start+0x82>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2202      	movs	r2, #2
 8005614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005618:	e013      	b.n	8005642 <HAL_TIMEx_PWMN_Start+0xaa>
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	2b04      	cmp	r3, #4
 800561e:	d104      	bne.n	800562a <HAL_TIMEx_PWMN_Start+0x92>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2202      	movs	r2, #2
 8005624:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005628:	e00b      	b.n	8005642 <HAL_TIMEx_PWMN_Start+0xaa>
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	2b08      	cmp	r3, #8
 800562e:	d104      	bne.n	800563a <HAL_TIMEx_PWMN_Start+0xa2>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2202      	movs	r2, #2
 8005634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005638:	e003      	b.n	8005642 <HAL_TIMEx_PWMN_Start+0xaa>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2202      	movs	r2, #2
 800563e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2204      	movs	r2, #4
 8005648:	6839      	ldr	r1, [r7, #0]
 800564a:	4618      	mov	r0, r3
 800564c:	f000 f982 	bl	8005954 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800565e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a1d      	ldr	r2, [pc, #116]	; (80056dc <HAL_TIMEx_PWMN_Start+0x144>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d018      	beq.n	800569c <HAL_TIMEx_PWMN_Start+0x104>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005672:	d013      	beq.n	800569c <HAL_TIMEx_PWMN_Start+0x104>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a19      	ldr	r2, [pc, #100]	; (80056e0 <HAL_TIMEx_PWMN_Start+0x148>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d00e      	beq.n	800569c <HAL_TIMEx_PWMN_Start+0x104>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a18      	ldr	r2, [pc, #96]	; (80056e4 <HAL_TIMEx_PWMN_Start+0x14c>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d009      	beq.n	800569c <HAL_TIMEx_PWMN_Start+0x104>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a16      	ldr	r2, [pc, #88]	; (80056e8 <HAL_TIMEx_PWMN_Start+0x150>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d004      	beq.n	800569c <HAL_TIMEx_PWMN_Start+0x104>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a15      	ldr	r2, [pc, #84]	; (80056ec <HAL_TIMEx_PWMN_Start+0x154>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d111      	bne.n	80056c0 <HAL_TIMEx_PWMN_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f003 0307 	and.w	r3, r3, #7
 80056a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2b06      	cmp	r3, #6
 80056ac:	d010      	beq.n	80056d0 <HAL_TIMEx_PWMN_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f042 0201 	orr.w	r2, r2, #1
 80056bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056be:	e007      	b.n	80056d0 <HAL_TIMEx_PWMN_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f042 0201 	orr.w	r2, r2, #1
 80056ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	40010000 	.word	0x40010000
 80056e0:	40000400 	.word	0x40000400
 80056e4:	40000800 	.word	0x40000800
 80056e8:	40000c00 	.word	0x40000c00
 80056ec:	40014000 	.word	0x40014000

080056f0 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2200      	movs	r2, #0
 8005700:	6839      	ldr	r1, [r7, #0]
 8005702:	4618      	mov	r0, r3
 8005704:	f000 f926 	bl	8005954 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6a1a      	ldr	r2, [r3, #32]
 800570e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005712:	4013      	ands	r3, r2
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10f      	bne.n	8005738 <HAL_TIMEx_PWMN_Stop+0x48>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6a1a      	ldr	r2, [r3, #32]
 800571e:	f240 4344 	movw	r3, #1092	; 0x444
 8005722:	4013      	ands	r3, r2
 8005724:	2b00      	cmp	r3, #0
 8005726:	d107      	bne.n	8005738 <HAL_TIMEx_PWMN_Stop+0x48>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005736:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6a1a      	ldr	r2, [r3, #32]
 800573e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005742:	4013      	ands	r3, r2
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10f      	bne.n	8005768 <HAL_TIMEx_PWMN_Stop+0x78>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6a1a      	ldr	r2, [r3, #32]
 800574e:	f240 4344 	movw	r3, #1092	; 0x444
 8005752:	4013      	ands	r3, r2
 8005754:	2b00      	cmp	r3, #0
 8005756:	d107      	bne.n	8005768 <HAL_TIMEx_PWMN_Stop+0x78>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f022 0201 	bic.w	r2, r2, #1
 8005766:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d104      	bne.n	8005778 <HAL_TIMEx_PWMN_Stop+0x88>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005776:	e013      	b.n	80057a0 <HAL_TIMEx_PWMN_Stop+0xb0>
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	2b04      	cmp	r3, #4
 800577c:	d104      	bne.n	8005788 <HAL_TIMEx_PWMN_Stop+0x98>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005786:	e00b      	b.n	80057a0 <HAL_TIMEx_PWMN_Stop+0xb0>
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	2b08      	cmp	r3, #8
 800578c:	d104      	bne.n	8005798 <HAL_TIMEx_PWMN_Stop+0xa8>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005796:	e003      	b.n	80057a0 <HAL_TIMEx_PWMN_Stop+0xb0>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3708      	adds	r7, #8
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
	...

080057ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d101      	bne.n	80057c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057c0:	2302      	movs	r3, #2
 80057c2:	e050      	b.n	8005866 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a1c      	ldr	r2, [pc, #112]	; (8005874 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d018      	beq.n	800583a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005810:	d013      	beq.n	800583a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a18      	ldr	r2, [pc, #96]	; (8005878 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d00e      	beq.n	800583a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a16      	ldr	r2, [pc, #88]	; (800587c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d009      	beq.n	800583a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a15      	ldr	r2, [pc, #84]	; (8005880 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d004      	beq.n	800583a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a13      	ldr	r2, [pc, #76]	; (8005884 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d10c      	bne.n	8005854 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005840:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	4313      	orrs	r3, r2
 800584a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68ba      	ldr	r2, [r7, #8]
 8005852:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	40010000 	.word	0x40010000
 8005878:	40000400 	.word	0x40000400
 800587c:	40000800 	.word	0x40000800
 8005880:	40000c00 	.word	0x40000c00
 8005884:	40014000 	.word	0x40014000

08005888 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005892:	2300      	movs	r3, #0
 8005894:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800589c:	2b01      	cmp	r3, #1
 800589e:	d101      	bne.n	80058a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80058a0:	2302      	movs	r3, #2
 80058a2:	e03d      	b.n	8005920 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	4313      	orrs	r3, r2
 800590c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3714      	adds	r7, #20
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005954:	b480      	push	{r7}
 8005956:	b087      	sub	sp, #28
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	f003 031f 	and.w	r3, r3, #31
 8005966:	2204      	movs	r2, #4
 8005968:	fa02 f303 	lsl.w	r3, r2, r3
 800596c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6a1a      	ldr	r2, [r3, #32]
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	43db      	mvns	r3, r3
 8005976:	401a      	ands	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6a1a      	ldr	r2, [r3, #32]
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	f003 031f 	and.w	r3, r3, #31
 8005986:	6879      	ldr	r1, [r7, #4]
 8005988:	fa01 f303 	lsl.w	r3, r1, r3
 800598c:	431a      	orrs	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	621a      	str	r2, [r3, #32]
}
 8005992:	bf00      	nop
 8005994:	371c      	adds	r7, #28
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b082      	sub	sp, #8
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d101      	bne.n	80059b0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e03f      	b.n	8005a30 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d106      	bne.n	80059ca <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f7fb fe93 	bl	80016f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2224      	movs	r2, #36	; 0x24
 80059ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68da      	ldr	r2, [r3, #12]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059e0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 fc7a 	bl	80062dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	691a      	ldr	r2, [r3, #16]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059f6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	695a      	ldr	r2, [r3, #20]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a06:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68da      	ldr	r2, [r3, #12]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a16:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2220      	movs	r2, #32
 8005a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2220      	movs	r2, #32
 8005a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3708      	adds	r7, #8
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b0ba      	sub	sp, #232	; 0xe8
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005a64:	2300      	movs	r3, #0
 8005a66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a6e:	f003 030f 	and.w	r3, r3, #15
 8005a72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005a76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10f      	bne.n	8005a9e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a82:	f003 0320 	and.w	r3, r3, #32
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d009      	beq.n	8005a9e <HAL_UART_IRQHandler+0x66>
 8005a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a8e:	f003 0320 	and.w	r3, r3, #32
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d003      	beq.n	8005a9e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 fb65 	bl	8006166 <UART_Receive_IT>
      return;
 8005a9c:	e256      	b.n	8005f4c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005a9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f000 80de 	beq.w	8005c64 <HAL_UART_IRQHandler+0x22c>
 8005aa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005aac:	f003 0301 	and.w	r3, r3, #1
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d106      	bne.n	8005ac2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005ab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ab8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f000 80d1 	beq.w	8005c64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ac6:	f003 0301 	and.w	r3, r3, #1
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00b      	beq.n	8005ae6 <HAL_UART_IRQHandler+0xae>
 8005ace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d005      	beq.n	8005ae6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ade:	f043 0201 	orr.w	r2, r3, #1
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aea:	f003 0304 	and.w	r3, r3, #4
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00b      	beq.n	8005b0a <HAL_UART_IRQHandler+0xd2>
 8005af2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d005      	beq.n	8005b0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b02:	f043 0202 	orr.w	r2, r3, #2
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b0e:	f003 0302 	and.w	r3, r3, #2
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00b      	beq.n	8005b2e <HAL_UART_IRQHandler+0xf6>
 8005b16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d005      	beq.n	8005b2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b26:	f043 0204 	orr.w	r2, r3, #4
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b32:	f003 0308 	and.w	r3, r3, #8
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d011      	beq.n	8005b5e <HAL_UART_IRQHandler+0x126>
 8005b3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b3e:	f003 0320 	and.w	r3, r3, #32
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d105      	bne.n	8005b52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b4a:	f003 0301 	and.w	r3, r3, #1
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d005      	beq.n	8005b5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b56:	f043 0208 	orr.w	r2, r3, #8
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f000 81ed 	beq.w	8005f42 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b6c:	f003 0320 	and.w	r3, r3, #32
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d008      	beq.n	8005b86 <HAL_UART_IRQHandler+0x14e>
 8005b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b78:	f003 0320 	and.w	r3, r3, #32
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d002      	beq.n	8005b86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 faf0 	bl	8006166 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	695b      	ldr	r3, [r3, #20]
 8005b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b90:	2b40      	cmp	r3, #64	; 0x40
 8005b92:	bf0c      	ite	eq
 8005b94:	2301      	moveq	r3, #1
 8005b96:	2300      	movne	r3, #0
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba2:	f003 0308 	and.w	r3, r3, #8
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d103      	bne.n	8005bb2 <HAL_UART_IRQHandler+0x17a>
 8005baa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d04f      	beq.n	8005c52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f9f8 	bl	8005fa8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc2:	2b40      	cmp	r3, #64	; 0x40
 8005bc4:	d141      	bne.n	8005c4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	3314      	adds	r3, #20
 8005bcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bd4:	e853 3f00 	ldrex	r3, [r3]
 8005bd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005bdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005be0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005be4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	3314      	adds	r3, #20
 8005bee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005bf2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005bf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005bfe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005c02:	e841 2300 	strex	r3, r2, [r1]
 8005c06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005c0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1d9      	bne.n	8005bc6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d013      	beq.n	8005c42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1e:	4a7d      	ldr	r2, [pc, #500]	; (8005e14 <HAL_UART_IRQHandler+0x3dc>)
 8005c20:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7fc fc63 	bl	80024f2 <HAL_DMA_Abort_IT>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d016      	beq.n	8005c60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c3c:	4610      	mov	r0, r2
 8005c3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c40:	e00e      	b.n	8005c60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 f99a 	bl	8005f7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c48:	e00a      	b.n	8005c60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f996 	bl	8005f7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c50:	e006      	b.n	8005c60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f992 	bl	8005f7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005c5e:	e170      	b.n	8005f42 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c60:	bf00      	nop
    return;
 8005c62:	e16e      	b.n	8005f42 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	f040 814a 	bne.w	8005f02 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c72:	f003 0310 	and.w	r3, r3, #16
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f000 8143 	beq.w	8005f02 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c80:	f003 0310 	and.w	r3, r3, #16
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f000 813c 	beq.w	8005f02 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	60bb      	str	r3, [r7, #8]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	60bb      	str	r3, [r7, #8]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	60bb      	str	r3, [r7, #8]
 8005c9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005caa:	2b40      	cmp	r3, #64	; 0x40
 8005cac:	f040 80b4 	bne.w	8005e18 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005cbc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f000 8140 	beq.w	8005f46 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005cca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	f080 8139 	bcs.w	8005f46 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005cda:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce0:	69db      	ldr	r3, [r3, #28]
 8005ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ce6:	f000 8088 	beq.w	8005dfa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	330c      	adds	r3, #12
 8005cf0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005cf8:	e853 3f00 	ldrex	r3, [r3]
 8005cfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005d00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	330c      	adds	r3, #12
 8005d12:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005d16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005d1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005d22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005d26:	e841 2300 	strex	r3, r2, [r1]
 8005d2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005d2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1d9      	bne.n	8005cea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	3314      	adds	r3, #20
 8005d3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d40:	e853 3f00 	ldrex	r3, [r3]
 8005d44:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005d46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d48:	f023 0301 	bic.w	r3, r3, #1
 8005d4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	3314      	adds	r3, #20
 8005d56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005d5a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005d5e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d60:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005d62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005d66:	e841 2300 	strex	r3, r2, [r1]
 8005d6a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005d6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1e1      	bne.n	8005d36 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	3314      	adds	r3, #20
 8005d78:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d7c:	e853 3f00 	ldrex	r3, [r3]
 8005d80:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005d82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	3314      	adds	r3, #20
 8005d92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005d96:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005d98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005d9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005d9e:	e841 2300 	strex	r3, r2, [r1]
 8005da2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005da4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1e3      	bne.n	8005d72 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2220      	movs	r2, #32
 8005dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	330c      	adds	r3, #12
 8005dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dc2:	e853 3f00 	ldrex	r3, [r3]
 8005dc6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005dc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dca:	f023 0310 	bic.w	r3, r3, #16
 8005dce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	330c      	adds	r3, #12
 8005dd8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005ddc:	65ba      	str	r2, [r7, #88]	; 0x58
 8005dde:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005de2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005de4:	e841 2300 	strex	r3, r2, [r1]
 8005de8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005dea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1e3      	bne.n	8005db8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7fc fb0c 	bl	8002412 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	4619      	mov	r1, r3
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 f8c0 	bl	8005f90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e10:	e099      	b.n	8005f46 <HAL_UART_IRQHandler+0x50e>
 8005e12:	bf00      	nop
 8005e14:	0800606f 	.word	0x0800606f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f000 808b 	beq.w	8005f4a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005e34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f000 8086 	beq.w	8005f4a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	330c      	adds	r3, #12
 8005e44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e48:	e853 3f00 	ldrex	r3, [r3]
 8005e4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	330c      	adds	r3, #12
 8005e5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005e62:	647a      	str	r2, [r7, #68]	; 0x44
 8005e64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e6a:	e841 2300 	strex	r3, r2, [r1]
 8005e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1e3      	bne.n	8005e3e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	3314      	adds	r3, #20
 8005e7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e80:	e853 3f00 	ldrex	r3, [r3]
 8005e84:	623b      	str	r3, [r7, #32]
   return(result);
 8005e86:	6a3b      	ldr	r3, [r7, #32]
 8005e88:	f023 0301 	bic.w	r3, r3, #1
 8005e8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	3314      	adds	r3, #20
 8005e96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005e9a:	633a      	str	r2, [r7, #48]	; 0x30
 8005e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ea0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ea2:	e841 2300 	strex	r3, r2, [r1]
 8005ea6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1e3      	bne.n	8005e76 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2220      	movs	r2, #32
 8005eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	330c      	adds	r3, #12
 8005ec2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	e853 3f00 	ldrex	r3, [r3]
 8005eca:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f023 0310 	bic.w	r3, r3, #16
 8005ed2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	330c      	adds	r3, #12
 8005edc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005ee0:	61fa      	str	r2, [r7, #28]
 8005ee2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee4:	69b9      	ldr	r1, [r7, #24]
 8005ee6:	69fa      	ldr	r2, [r7, #28]
 8005ee8:	e841 2300 	strex	r3, r2, [r1]
 8005eec:	617b      	str	r3, [r7, #20]
   return(result);
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1e3      	bne.n	8005ebc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ef4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ef8:	4619      	mov	r1, r3
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 f848 	bl	8005f90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f00:	e023      	b.n	8005f4a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d009      	beq.n	8005f22 <HAL_UART_IRQHandler+0x4ea>
 8005f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d003      	beq.n	8005f22 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 f8bb 	bl	8006096 <UART_Transmit_IT>
    return;
 8005f20:	e014      	b.n	8005f4c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00e      	beq.n	8005f4c <HAL_UART_IRQHandler+0x514>
 8005f2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d008      	beq.n	8005f4c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f8fb 	bl	8006136 <UART_EndTransmit_IT>
    return;
 8005f40:	e004      	b.n	8005f4c <HAL_UART_IRQHandler+0x514>
    return;
 8005f42:	bf00      	nop
 8005f44:	e002      	b.n	8005f4c <HAL_UART_IRQHandler+0x514>
      return;
 8005f46:	bf00      	nop
 8005f48:	e000      	b.n	8005f4c <HAL_UART_IRQHandler+0x514>
      return;
 8005f4a:	bf00      	nop
  }
}
 8005f4c:	37e8      	adds	r7, #232	; 0xe8
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop

08005f54 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	460b      	mov	r3, r1
 8005f9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f9c:	bf00      	nop
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b095      	sub	sp, #84	; 0x54
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	330c      	adds	r3, #12
 8005fb6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fba:	e853 3f00 	ldrex	r3, [r3]
 8005fbe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	330c      	adds	r3, #12
 8005fce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fd0:	643a      	str	r2, [r7, #64]	; 0x40
 8005fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fd8:	e841 2300 	strex	r3, r2, [r1]
 8005fdc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1e5      	bne.n	8005fb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	3314      	adds	r3, #20
 8005fea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fec:	6a3b      	ldr	r3, [r7, #32]
 8005fee:	e853 3f00 	ldrex	r3, [r3]
 8005ff2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	f023 0301 	bic.w	r3, r3, #1
 8005ffa:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	3314      	adds	r3, #20
 8006002:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006004:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006006:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006008:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800600a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800600c:	e841 2300 	strex	r3, r2, [r1]
 8006010:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006014:	2b00      	cmp	r3, #0
 8006016:	d1e5      	bne.n	8005fe4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800601c:	2b01      	cmp	r3, #1
 800601e:	d119      	bne.n	8006054 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	330c      	adds	r3, #12
 8006026:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	e853 3f00 	ldrex	r3, [r3]
 800602e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	f023 0310 	bic.w	r3, r3, #16
 8006036:	647b      	str	r3, [r7, #68]	; 0x44
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	330c      	adds	r3, #12
 800603e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006040:	61ba      	str	r2, [r7, #24]
 8006042:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006044:	6979      	ldr	r1, [r7, #20]
 8006046:	69ba      	ldr	r2, [r7, #24]
 8006048:	e841 2300 	strex	r3, r2, [r1]
 800604c:	613b      	str	r3, [r7, #16]
   return(result);
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d1e5      	bne.n	8006020 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2220      	movs	r2, #32
 8006058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006062:	bf00      	nop
 8006064:	3754      	adds	r7, #84	; 0x54
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr

0800606e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800606e:	b580      	push	{r7, lr}
 8006070:	b084      	sub	sp, #16
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f7ff ff77 	bl	8005f7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800608e:	bf00      	nop
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006096:	b480      	push	{r7}
 8006098:	b085      	sub	sp, #20
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b21      	cmp	r3, #33	; 0x21
 80060a8:	d13e      	bne.n	8006128 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060b2:	d114      	bne.n	80060de <UART_Transmit_IT+0x48>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d110      	bne.n	80060de <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a1b      	ldr	r3, [r3, #32]
 80060c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	881b      	ldrh	r3, [r3, #0]
 80060c6:	461a      	mov	r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	1c9a      	adds	r2, r3, #2
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	621a      	str	r2, [r3, #32]
 80060dc:	e008      	b.n	80060f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	1c59      	adds	r1, r3, #1
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	6211      	str	r1, [r2, #32]
 80060e8:	781a      	ldrb	r2, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	3b01      	subs	r3, #1
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	4619      	mov	r1, r3
 80060fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006100:	2b00      	cmp	r3, #0
 8006102:	d10f      	bne.n	8006124 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68da      	ldr	r2, [r3, #12]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006112:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68da      	ldr	r2, [r3, #12]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006122:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006124:	2300      	movs	r3, #0
 8006126:	e000      	b.n	800612a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006128:	2302      	movs	r3, #2
  }
}
 800612a:	4618      	mov	r0, r3
 800612c:	3714      	adds	r7, #20
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b082      	sub	sp, #8
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68da      	ldr	r2, [r3, #12]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800614c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2220      	movs	r2, #32
 8006152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f7ff fefc 	bl	8005f54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3708      	adds	r7, #8
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b08c      	sub	sp, #48	; 0x30
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006174:	b2db      	uxtb	r3, r3
 8006176:	2b22      	cmp	r3, #34	; 0x22
 8006178:	f040 80ab 	bne.w	80062d2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006184:	d117      	bne.n	80061b6 <UART_Receive_IT+0x50>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d113      	bne.n	80061b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800618e:	2300      	movs	r3, #0
 8006190:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006196:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	b29b      	uxth	r3, r3
 80061a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ae:	1c9a      	adds	r2, r3, #2
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	629a      	str	r2, [r3, #40]	; 0x28
 80061b4:	e026      	b.n	8006204 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80061bc:	2300      	movs	r3, #0
 80061be:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061c8:	d007      	beq.n	80061da <UART_Receive_IT+0x74>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10a      	bne.n	80061e8 <UART_Receive_IT+0x82>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d106      	bne.n	80061e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	b2da      	uxtb	r2, r3
 80061e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e4:	701a      	strb	r2, [r3, #0]
 80061e6:	e008      	b.n	80061fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061f4:	b2da      	uxtb	r2, r3
 80061f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061fe:	1c5a      	adds	r2, r3, #1
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006208:	b29b      	uxth	r3, r3
 800620a:	3b01      	subs	r3, #1
 800620c:	b29b      	uxth	r3, r3
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	4619      	mov	r1, r3
 8006212:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006214:	2b00      	cmp	r3, #0
 8006216:	d15a      	bne.n	80062ce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68da      	ldr	r2, [r3, #12]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f022 0220 	bic.w	r2, r2, #32
 8006226:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68da      	ldr	r2, [r3, #12]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006236:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	695a      	ldr	r2, [r3, #20]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f022 0201 	bic.w	r2, r2, #1
 8006246:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2220      	movs	r2, #32
 800624c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006254:	2b01      	cmp	r3, #1
 8006256:	d135      	bne.n	80062c4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	330c      	adds	r3, #12
 8006264:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	e853 3f00 	ldrex	r3, [r3]
 800626c:	613b      	str	r3, [r7, #16]
   return(result);
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	f023 0310 	bic.w	r3, r3, #16
 8006274:	627b      	str	r3, [r7, #36]	; 0x24
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	330c      	adds	r3, #12
 800627c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800627e:	623a      	str	r2, [r7, #32]
 8006280:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006282:	69f9      	ldr	r1, [r7, #28]
 8006284:	6a3a      	ldr	r2, [r7, #32]
 8006286:	e841 2300 	strex	r3, r2, [r1]
 800628a:	61bb      	str	r3, [r7, #24]
   return(result);
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1e5      	bne.n	800625e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0310 	and.w	r3, r3, #16
 800629c:	2b10      	cmp	r3, #16
 800629e:	d10a      	bne.n	80062b6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062a0:	2300      	movs	r3, #0
 80062a2:	60fb      	str	r3, [r7, #12]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	60fb      	str	r3, [r7, #12]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	60fb      	str	r3, [r7, #12]
 80062b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062ba:	4619      	mov	r1, r3
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f7ff fe67 	bl	8005f90 <HAL_UARTEx_RxEventCallback>
 80062c2:	e002      	b.n	80062ca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f7ff fe4f 	bl	8005f68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80062ca:	2300      	movs	r3, #0
 80062cc:	e002      	b.n	80062d4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80062ce:	2300      	movs	r3, #0
 80062d0:	e000      	b.n	80062d4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80062d2:	2302      	movs	r3, #2
  }
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3730      	adds	r7, #48	; 0x30
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062e0:	b0c0      	sub	sp, #256	; 0x100
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80062f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062f8:	68d9      	ldr	r1, [r3, #12]
 80062fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	ea40 0301 	orr.w	r3, r0, r1
 8006304:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800630a:	689a      	ldr	r2, [r3, #8]
 800630c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	431a      	orrs	r2, r3
 8006314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	431a      	orrs	r2, r3
 800631c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	4313      	orrs	r3, r2
 8006324:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006334:	f021 010c 	bic.w	r1, r1, #12
 8006338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006342:	430b      	orrs	r3, r1
 8006344:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006356:	6999      	ldr	r1, [r3, #24]
 8006358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	ea40 0301 	orr.w	r3, r0, r1
 8006362:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	4b8f      	ldr	r3, [pc, #572]	; (80065a8 <UART_SetConfig+0x2cc>)
 800636c:	429a      	cmp	r2, r3
 800636e:	d005      	beq.n	800637c <UART_SetConfig+0xa0>
 8006370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	4b8d      	ldr	r3, [pc, #564]	; (80065ac <UART_SetConfig+0x2d0>)
 8006378:	429a      	cmp	r2, r3
 800637a:	d104      	bne.n	8006386 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800637c:	f7fd fc74 	bl	8003c68 <HAL_RCC_GetPCLK2Freq>
 8006380:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006384:	e003      	b.n	800638e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006386:	f7fd fc5b 	bl	8003c40 <HAL_RCC_GetPCLK1Freq>
 800638a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800638e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006392:	69db      	ldr	r3, [r3, #28]
 8006394:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006398:	f040 810c 	bne.w	80065b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800639c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063a0:	2200      	movs	r2, #0
 80063a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80063a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80063aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80063ae:	4622      	mov	r2, r4
 80063b0:	462b      	mov	r3, r5
 80063b2:	1891      	adds	r1, r2, r2
 80063b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80063b6:	415b      	adcs	r3, r3
 80063b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80063be:	4621      	mov	r1, r4
 80063c0:	eb12 0801 	adds.w	r8, r2, r1
 80063c4:	4629      	mov	r1, r5
 80063c6:	eb43 0901 	adc.w	r9, r3, r1
 80063ca:	f04f 0200 	mov.w	r2, #0
 80063ce:	f04f 0300 	mov.w	r3, #0
 80063d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063de:	4690      	mov	r8, r2
 80063e0:	4699      	mov	r9, r3
 80063e2:	4623      	mov	r3, r4
 80063e4:	eb18 0303 	adds.w	r3, r8, r3
 80063e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063ec:	462b      	mov	r3, r5
 80063ee:	eb49 0303 	adc.w	r3, r9, r3
 80063f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006402:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006406:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800640a:	460b      	mov	r3, r1
 800640c:	18db      	adds	r3, r3, r3
 800640e:	653b      	str	r3, [r7, #80]	; 0x50
 8006410:	4613      	mov	r3, r2
 8006412:	eb42 0303 	adc.w	r3, r2, r3
 8006416:	657b      	str	r3, [r7, #84]	; 0x54
 8006418:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800641c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006420:	f7f9 ff2e 	bl	8000280 <__aeabi_uldivmod>
 8006424:	4602      	mov	r2, r0
 8006426:	460b      	mov	r3, r1
 8006428:	4b61      	ldr	r3, [pc, #388]	; (80065b0 <UART_SetConfig+0x2d4>)
 800642a:	fba3 2302 	umull	r2, r3, r3, r2
 800642e:	095b      	lsrs	r3, r3, #5
 8006430:	011c      	lsls	r4, r3, #4
 8006432:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006436:	2200      	movs	r2, #0
 8006438:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800643c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006440:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006444:	4642      	mov	r2, r8
 8006446:	464b      	mov	r3, r9
 8006448:	1891      	adds	r1, r2, r2
 800644a:	64b9      	str	r1, [r7, #72]	; 0x48
 800644c:	415b      	adcs	r3, r3
 800644e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006450:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006454:	4641      	mov	r1, r8
 8006456:	eb12 0a01 	adds.w	sl, r2, r1
 800645a:	4649      	mov	r1, r9
 800645c:	eb43 0b01 	adc.w	fp, r3, r1
 8006460:	f04f 0200 	mov.w	r2, #0
 8006464:	f04f 0300 	mov.w	r3, #0
 8006468:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800646c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006470:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006474:	4692      	mov	sl, r2
 8006476:	469b      	mov	fp, r3
 8006478:	4643      	mov	r3, r8
 800647a:	eb1a 0303 	adds.w	r3, sl, r3
 800647e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006482:	464b      	mov	r3, r9
 8006484:	eb4b 0303 	adc.w	r3, fp, r3
 8006488:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800648c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006498:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800649c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80064a0:	460b      	mov	r3, r1
 80064a2:	18db      	adds	r3, r3, r3
 80064a4:	643b      	str	r3, [r7, #64]	; 0x40
 80064a6:	4613      	mov	r3, r2
 80064a8:	eb42 0303 	adc.w	r3, r2, r3
 80064ac:	647b      	str	r3, [r7, #68]	; 0x44
 80064ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80064b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80064b6:	f7f9 fee3 	bl	8000280 <__aeabi_uldivmod>
 80064ba:	4602      	mov	r2, r0
 80064bc:	460b      	mov	r3, r1
 80064be:	4611      	mov	r1, r2
 80064c0:	4b3b      	ldr	r3, [pc, #236]	; (80065b0 <UART_SetConfig+0x2d4>)
 80064c2:	fba3 2301 	umull	r2, r3, r3, r1
 80064c6:	095b      	lsrs	r3, r3, #5
 80064c8:	2264      	movs	r2, #100	; 0x64
 80064ca:	fb02 f303 	mul.w	r3, r2, r3
 80064ce:	1acb      	subs	r3, r1, r3
 80064d0:	00db      	lsls	r3, r3, #3
 80064d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80064d6:	4b36      	ldr	r3, [pc, #216]	; (80065b0 <UART_SetConfig+0x2d4>)
 80064d8:	fba3 2302 	umull	r2, r3, r3, r2
 80064dc:	095b      	lsrs	r3, r3, #5
 80064de:	005b      	lsls	r3, r3, #1
 80064e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064e4:	441c      	add	r4, r3
 80064e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064ea:	2200      	movs	r2, #0
 80064ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80064f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80064f8:	4642      	mov	r2, r8
 80064fa:	464b      	mov	r3, r9
 80064fc:	1891      	adds	r1, r2, r2
 80064fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8006500:	415b      	adcs	r3, r3
 8006502:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006504:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006508:	4641      	mov	r1, r8
 800650a:	1851      	adds	r1, r2, r1
 800650c:	6339      	str	r1, [r7, #48]	; 0x30
 800650e:	4649      	mov	r1, r9
 8006510:	414b      	adcs	r3, r1
 8006512:	637b      	str	r3, [r7, #52]	; 0x34
 8006514:	f04f 0200 	mov.w	r2, #0
 8006518:	f04f 0300 	mov.w	r3, #0
 800651c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006520:	4659      	mov	r1, fp
 8006522:	00cb      	lsls	r3, r1, #3
 8006524:	4651      	mov	r1, sl
 8006526:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800652a:	4651      	mov	r1, sl
 800652c:	00ca      	lsls	r2, r1, #3
 800652e:	4610      	mov	r0, r2
 8006530:	4619      	mov	r1, r3
 8006532:	4603      	mov	r3, r0
 8006534:	4642      	mov	r2, r8
 8006536:	189b      	adds	r3, r3, r2
 8006538:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800653c:	464b      	mov	r3, r9
 800653e:	460a      	mov	r2, r1
 8006540:	eb42 0303 	adc.w	r3, r2, r3
 8006544:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006554:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006558:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800655c:	460b      	mov	r3, r1
 800655e:	18db      	adds	r3, r3, r3
 8006560:	62bb      	str	r3, [r7, #40]	; 0x28
 8006562:	4613      	mov	r3, r2
 8006564:	eb42 0303 	adc.w	r3, r2, r3
 8006568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800656a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800656e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006572:	f7f9 fe85 	bl	8000280 <__aeabi_uldivmod>
 8006576:	4602      	mov	r2, r0
 8006578:	460b      	mov	r3, r1
 800657a:	4b0d      	ldr	r3, [pc, #52]	; (80065b0 <UART_SetConfig+0x2d4>)
 800657c:	fba3 1302 	umull	r1, r3, r3, r2
 8006580:	095b      	lsrs	r3, r3, #5
 8006582:	2164      	movs	r1, #100	; 0x64
 8006584:	fb01 f303 	mul.w	r3, r1, r3
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	00db      	lsls	r3, r3, #3
 800658c:	3332      	adds	r3, #50	; 0x32
 800658e:	4a08      	ldr	r2, [pc, #32]	; (80065b0 <UART_SetConfig+0x2d4>)
 8006590:	fba2 2303 	umull	r2, r3, r2, r3
 8006594:	095b      	lsrs	r3, r3, #5
 8006596:	f003 0207 	and.w	r2, r3, #7
 800659a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4422      	add	r2, r4
 80065a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80065a4:	e106      	b.n	80067b4 <UART_SetConfig+0x4d8>
 80065a6:	bf00      	nop
 80065a8:	40011000 	.word	0x40011000
 80065ac:	40011400 	.word	0x40011400
 80065b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065b8:	2200      	movs	r2, #0
 80065ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80065be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80065c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80065c6:	4642      	mov	r2, r8
 80065c8:	464b      	mov	r3, r9
 80065ca:	1891      	adds	r1, r2, r2
 80065cc:	6239      	str	r1, [r7, #32]
 80065ce:	415b      	adcs	r3, r3
 80065d0:	627b      	str	r3, [r7, #36]	; 0x24
 80065d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065d6:	4641      	mov	r1, r8
 80065d8:	1854      	adds	r4, r2, r1
 80065da:	4649      	mov	r1, r9
 80065dc:	eb43 0501 	adc.w	r5, r3, r1
 80065e0:	f04f 0200 	mov.w	r2, #0
 80065e4:	f04f 0300 	mov.w	r3, #0
 80065e8:	00eb      	lsls	r3, r5, #3
 80065ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065ee:	00e2      	lsls	r2, r4, #3
 80065f0:	4614      	mov	r4, r2
 80065f2:	461d      	mov	r5, r3
 80065f4:	4643      	mov	r3, r8
 80065f6:	18e3      	adds	r3, r4, r3
 80065f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80065fc:	464b      	mov	r3, r9
 80065fe:	eb45 0303 	adc.w	r3, r5, r3
 8006602:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006612:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006616:	f04f 0200 	mov.w	r2, #0
 800661a:	f04f 0300 	mov.w	r3, #0
 800661e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006622:	4629      	mov	r1, r5
 8006624:	008b      	lsls	r3, r1, #2
 8006626:	4621      	mov	r1, r4
 8006628:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800662c:	4621      	mov	r1, r4
 800662e:	008a      	lsls	r2, r1, #2
 8006630:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006634:	f7f9 fe24 	bl	8000280 <__aeabi_uldivmod>
 8006638:	4602      	mov	r2, r0
 800663a:	460b      	mov	r3, r1
 800663c:	4b60      	ldr	r3, [pc, #384]	; (80067c0 <UART_SetConfig+0x4e4>)
 800663e:	fba3 2302 	umull	r2, r3, r3, r2
 8006642:	095b      	lsrs	r3, r3, #5
 8006644:	011c      	lsls	r4, r3, #4
 8006646:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800664a:	2200      	movs	r2, #0
 800664c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006650:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006654:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006658:	4642      	mov	r2, r8
 800665a:	464b      	mov	r3, r9
 800665c:	1891      	adds	r1, r2, r2
 800665e:	61b9      	str	r1, [r7, #24]
 8006660:	415b      	adcs	r3, r3
 8006662:	61fb      	str	r3, [r7, #28]
 8006664:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006668:	4641      	mov	r1, r8
 800666a:	1851      	adds	r1, r2, r1
 800666c:	6139      	str	r1, [r7, #16]
 800666e:	4649      	mov	r1, r9
 8006670:	414b      	adcs	r3, r1
 8006672:	617b      	str	r3, [r7, #20]
 8006674:	f04f 0200 	mov.w	r2, #0
 8006678:	f04f 0300 	mov.w	r3, #0
 800667c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006680:	4659      	mov	r1, fp
 8006682:	00cb      	lsls	r3, r1, #3
 8006684:	4651      	mov	r1, sl
 8006686:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800668a:	4651      	mov	r1, sl
 800668c:	00ca      	lsls	r2, r1, #3
 800668e:	4610      	mov	r0, r2
 8006690:	4619      	mov	r1, r3
 8006692:	4603      	mov	r3, r0
 8006694:	4642      	mov	r2, r8
 8006696:	189b      	adds	r3, r3, r2
 8006698:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800669c:	464b      	mov	r3, r9
 800669e:	460a      	mov	r2, r1
 80066a0:	eb42 0303 	adc.w	r3, r2, r3
 80066a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80066a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80066b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80066b4:	f04f 0200 	mov.w	r2, #0
 80066b8:	f04f 0300 	mov.w	r3, #0
 80066bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80066c0:	4649      	mov	r1, r9
 80066c2:	008b      	lsls	r3, r1, #2
 80066c4:	4641      	mov	r1, r8
 80066c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066ca:	4641      	mov	r1, r8
 80066cc:	008a      	lsls	r2, r1, #2
 80066ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80066d2:	f7f9 fdd5 	bl	8000280 <__aeabi_uldivmod>
 80066d6:	4602      	mov	r2, r0
 80066d8:	460b      	mov	r3, r1
 80066da:	4611      	mov	r1, r2
 80066dc:	4b38      	ldr	r3, [pc, #224]	; (80067c0 <UART_SetConfig+0x4e4>)
 80066de:	fba3 2301 	umull	r2, r3, r3, r1
 80066e2:	095b      	lsrs	r3, r3, #5
 80066e4:	2264      	movs	r2, #100	; 0x64
 80066e6:	fb02 f303 	mul.w	r3, r2, r3
 80066ea:	1acb      	subs	r3, r1, r3
 80066ec:	011b      	lsls	r3, r3, #4
 80066ee:	3332      	adds	r3, #50	; 0x32
 80066f0:	4a33      	ldr	r2, [pc, #204]	; (80067c0 <UART_SetConfig+0x4e4>)
 80066f2:	fba2 2303 	umull	r2, r3, r2, r3
 80066f6:	095b      	lsrs	r3, r3, #5
 80066f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066fc:	441c      	add	r4, r3
 80066fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006702:	2200      	movs	r2, #0
 8006704:	673b      	str	r3, [r7, #112]	; 0x70
 8006706:	677a      	str	r2, [r7, #116]	; 0x74
 8006708:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800670c:	4642      	mov	r2, r8
 800670e:	464b      	mov	r3, r9
 8006710:	1891      	adds	r1, r2, r2
 8006712:	60b9      	str	r1, [r7, #8]
 8006714:	415b      	adcs	r3, r3
 8006716:	60fb      	str	r3, [r7, #12]
 8006718:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800671c:	4641      	mov	r1, r8
 800671e:	1851      	adds	r1, r2, r1
 8006720:	6039      	str	r1, [r7, #0]
 8006722:	4649      	mov	r1, r9
 8006724:	414b      	adcs	r3, r1
 8006726:	607b      	str	r3, [r7, #4]
 8006728:	f04f 0200 	mov.w	r2, #0
 800672c:	f04f 0300 	mov.w	r3, #0
 8006730:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006734:	4659      	mov	r1, fp
 8006736:	00cb      	lsls	r3, r1, #3
 8006738:	4651      	mov	r1, sl
 800673a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800673e:	4651      	mov	r1, sl
 8006740:	00ca      	lsls	r2, r1, #3
 8006742:	4610      	mov	r0, r2
 8006744:	4619      	mov	r1, r3
 8006746:	4603      	mov	r3, r0
 8006748:	4642      	mov	r2, r8
 800674a:	189b      	adds	r3, r3, r2
 800674c:	66bb      	str	r3, [r7, #104]	; 0x68
 800674e:	464b      	mov	r3, r9
 8006750:	460a      	mov	r2, r1
 8006752:	eb42 0303 	adc.w	r3, r2, r3
 8006756:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	663b      	str	r3, [r7, #96]	; 0x60
 8006762:	667a      	str	r2, [r7, #100]	; 0x64
 8006764:	f04f 0200 	mov.w	r2, #0
 8006768:	f04f 0300 	mov.w	r3, #0
 800676c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006770:	4649      	mov	r1, r9
 8006772:	008b      	lsls	r3, r1, #2
 8006774:	4641      	mov	r1, r8
 8006776:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800677a:	4641      	mov	r1, r8
 800677c:	008a      	lsls	r2, r1, #2
 800677e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006782:	f7f9 fd7d 	bl	8000280 <__aeabi_uldivmod>
 8006786:	4602      	mov	r2, r0
 8006788:	460b      	mov	r3, r1
 800678a:	4b0d      	ldr	r3, [pc, #52]	; (80067c0 <UART_SetConfig+0x4e4>)
 800678c:	fba3 1302 	umull	r1, r3, r3, r2
 8006790:	095b      	lsrs	r3, r3, #5
 8006792:	2164      	movs	r1, #100	; 0x64
 8006794:	fb01 f303 	mul.w	r3, r1, r3
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	011b      	lsls	r3, r3, #4
 800679c:	3332      	adds	r3, #50	; 0x32
 800679e:	4a08      	ldr	r2, [pc, #32]	; (80067c0 <UART_SetConfig+0x4e4>)
 80067a0:	fba2 2303 	umull	r2, r3, r2, r3
 80067a4:	095b      	lsrs	r3, r3, #5
 80067a6:	f003 020f 	and.w	r2, r3, #15
 80067aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4422      	add	r2, r4
 80067b2:	609a      	str	r2, [r3, #8]
}
 80067b4:	bf00      	nop
 80067b6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80067ba:	46bd      	mov	sp, r7
 80067bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067c0:	51eb851f 	.word	0x51eb851f

080067c4 <siprintf>:
 80067c4:	b40e      	push	{r1, r2, r3}
 80067c6:	b500      	push	{lr}
 80067c8:	b09c      	sub	sp, #112	; 0x70
 80067ca:	ab1d      	add	r3, sp, #116	; 0x74
 80067cc:	9002      	str	r0, [sp, #8]
 80067ce:	9006      	str	r0, [sp, #24]
 80067d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80067d4:	4809      	ldr	r0, [pc, #36]	; (80067fc <siprintf+0x38>)
 80067d6:	9107      	str	r1, [sp, #28]
 80067d8:	9104      	str	r1, [sp, #16]
 80067da:	4909      	ldr	r1, [pc, #36]	; (8006800 <siprintf+0x3c>)
 80067dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80067e0:	9105      	str	r1, [sp, #20]
 80067e2:	6800      	ldr	r0, [r0, #0]
 80067e4:	9301      	str	r3, [sp, #4]
 80067e6:	a902      	add	r1, sp, #8
 80067e8:	f000 f992 	bl	8006b10 <_svfiprintf_r>
 80067ec:	9b02      	ldr	r3, [sp, #8]
 80067ee:	2200      	movs	r2, #0
 80067f0:	701a      	strb	r2, [r3, #0]
 80067f2:	b01c      	add	sp, #112	; 0x70
 80067f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80067f8:	b003      	add	sp, #12
 80067fa:	4770      	bx	lr
 80067fc:	20000058 	.word	0x20000058
 8006800:	ffff0208 	.word	0xffff0208

08006804 <memset>:
 8006804:	4402      	add	r2, r0
 8006806:	4603      	mov	r3, r0
 8006808:	4293      	cmp	r3, r2
 800680a:	d100      	bne.n	800680e <memset+0xa>
 800680c:	4770      	bx	lr
 800680e:	f803 1b01 	strb.w	r1, [r3], #1
 8006812:	e7f9      	b.n	8006808 <memset+0x4>

08006814 <__errno>:
 8006814:	4b01      	ldr	r3, [pc, #4]	; (800681c <__errno+0x8>)
 8006816:	6818      	ldr	r0, [r3, #0]
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	20000058 	.word	0x20000058

08006820 <__libc_init_array>:
 8006820:	b570      	push	{r4, r5, r6, lr}
 8006822:	4d0d      	ldr	r5, [pc, #52]	; (8006858 <__libc_init_array+0x38>)
 8006824:	4c0d      	ldr	r4, [pc, #52]	; (800685c <__libc_init_array+0x3c>)
 8006826:	1b64      	subs	r4, r4, r5
 8006828:	10a4      	asrs	r4, r4, #2
 800682a:	2600      	movs	r6, #0
 800682c:	42a6      	cmp	r6, r4
 800682e:	d109      	bne.n	8006844 <__libc_init_array+0x24>
 8006830:	4d0b      	ldr	r5, [pc, #44]	; (8006860 <__libc_init_array+0x40>)
 8006832:	4c0c      	ldr	r4, [pc, #48]	; (8006864 <__libc_init_array+0x44>)
 8006834:	f000 fc6a 	bl	800710c <_init>
 8006838:	1b64      	subs	r4, r4, r5
 800683a:	10a4      	asrs	r4, r4, #2
 800683c:	2600      	movs	r6, #0
 800683e:	42a6      	cmp	r6, r4
 8006840:	d105      	bne.n	800684e <__libc_init_array+0x2e>
 8006842:	bd70      	pop	{r4, r5, r6, pc}
 8006844:	f855 3b04 	ldr.w	r3, [r5], #4
 8006848:	4798      	blx	r3
 800684a:	3601      	adds	r6, #1
 800684c:	e7ee      	b.n	800682c <__libc_init_array+0xc>
 800684e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006852:	4798      	blx	r3
 8006854:	3601      	adds	r6, #1
 8006856:	e7f2      	b.n	800683e <__libc_init_array+0x1e>
 8006858:	08007260 	.word	0x08007260
 800685c:	08007260 	.word	0x08007260
 8006860:	08007260 	.word	0x08007260
 8006864:	08007264 	.word	0x08007264

08006868 <__retarget_lock_acquire_recursive>:
 8006868:	4770      	bx	lr

0800686a <__retarget_lock_release_recursive>:
 800686a:	4770      	bx	lr

0800686c <_free_r>:
 800686c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800686e:	2900      	cmp	r1, #0
 8006870:	d044      	beq.n	80068fc <_free_r+0x90>
 8006872:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006876:	9001      	str	r0, [sp, #4]
 8006878:	2b00      	cmp	r3, #0
 800687a:	f1a1 0404 	sub.w	r4, r1, #4
 800687e:	bfb8      	it	lt
 8006880:	18e4      	addlt	r4, r4, r3
 8006882:	f000 f8df 	bl	8006a44 <__malloc_lock>
 8006886:	4a1e      	ldr	r2, [pc, #120]	; (8006900 <_free_r+0x94>)
 8006888:	9801      	ldr	r0, [sp, #4]
 800688a:	6813      	ldr	r3, [r2, #0]
 800688c:	b933      	cbnz	r3, 800689c <_free_r+0x30>
 800688e:	6063      	str	r3, [r4, #4]
 8006890:	6014      	str	r4, [r2, #0]
 8006892:	b003      	add	sp, #12
 8006894:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006898:	f000 b8da 	b.w	8006a50 <__malloc_unlock>
 800689c:	42a3      	cmp	r3, r4
 800689e:	d908      	bls.n	80068b2 <_free_r+0x46>
 80068a0:	6825      	ldr	r5, [r4, #0]
 80068a2:	1961      	adds	r1, r4, r5
 80068a4:	428b      	cmp	r3, r1
 80068a6:	bf01      	itttt	eq
 80068a8:	6819      	ldreq	r1, [r3, #0]
 80068aa:	685b      	ldreq	r3, [r3, #4]
 80068ac:	1949      	addeq	r1, r1, r5
 80068ae:	6021      	streq	r1, [r4, #0]
 80068b0:	e7ed      	b.n	800688e <_free_r+0x22>
 80068b2:	461a      	mov	r2, r3
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	b10b      	cbz	r3, 80068bc <_free_r+0x50>
 80068b8:	42a3      	cmp	r3, r4
 80068ba:	d9fa      	bls.n	80068b2 <_free_r+0x46>
 80068bc:	6811      	ldr	r1, [r2, #0]
 80068be:	1855      	adds	r5, r2, r1
 80068c0:	42a5      	cmp	r5, r4
 80068c2:	d10b      	bne.n	80068dc <_free_r+0x70>
 80068c4:	6824      	ldr	r4, [r4, #0]
 80068c6:	4421      	add	r1, r4
 80068c8:	1854      	adds	r4, r2, r1
 80068ca:	42a3      	cmp	r3, r4
 80068cc:	6011      	str	r1, [r2, #0]
 80068ce:	d1e0      	bne.n	8006892 <_free_r+0x26>
 80068d0:	681c      	ldr	r4, [r3, #0]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	6053      	str	r3, [r2, #4]
 80068d6:	440c      	add	r4, r1
 80068d8:	6014      	str	r4, [r2, #0]
 80068da:	e7da      	b.n	8006892 <_free_r+0x26>
 80068dc:	d902      	bls.n	80068e4 <_free_r+0x78>
 80068de:	230c      	movs	r3, #12
 80068e0:	6003      	str	r3, [r0, #0]
 80068e2:	e7d6      	b.n	8006892 <_free_r+0x26>
 80068e4:	6825      	ldr	r5, [r4, #0]
 80068e6:	1961      	adds	r1, r4, r5
 80068e8:	428b      	cmp	r3, r1
 80068ea:	bf04      	itt	eq
 80068ec:	6819      	ldreq	r1, [r3, #0]
 80068ee:	685b      	ldreq	r3, [r3, #4]
 80068f0:	6063      	str	r3, [r4, #4]
 80068f2:	bf04      	itt	eq
 80068f4:	1949      	addeq	r1, r1, r5
 80068f6:	6021      	streq	r1, [r4, #0]
 80068f8:	6054      	str	r4, [r2, #4]
 80068fa:	e7ca      	b.n	8006892 <_free_r+0x26>
 80068fc:	b003      	add	sp, #12
 80068fe:	bd30      	pop	{r4, r5, pc}
 8006900:	200003d4 	.word	0x200003d4

08006904 <sbrk_aligned>:
 8006904:	b570      	push	{r4, r5, r6, lr}
 8006906:	4e0e      	ldr	r6, [pc, #56]	; (8006940 <sbrk_aligned+0x3c>)
 8006908:	460c      	mov	r4, r1
 800690a:	6831      	ldr	r1, [r6, #0]
 800690c:	4605      	mov	r5, r0
 800690e:	b911      	cbnz	r1, 8006916 <sbrk_aligned+0x12>
 8006910:	f000 fba6 	bl	8007060 <_sbrk_r>
 8006914:	6030      	str	r0, [r6, #0]
 8006916:	4621      	mov	r1, r4
 8006918:	4628      	mov	r0, r5
 800691a:	f000 fba1 	bl	8007060 <_sbrk_r>
 800691e:	1c43      	adds	r3, r0, #1
 8006920:	d00a      	beq.n	8006938 <sbrk_aligned+0x34>
 8006922:	1cc4      	adds	r4, r0, #3
 8006924:	f024 0403 	bic.w	r4, r4, #3
 8006928:	42a0      	cmp	r0, r4
 800692a:	d007      	beq.n	800693c <sbrk_aligned+0x38>
 800692c:	1a21      	subs	r1, r4, r0
 800692e:	4628      	mov	r0, r5
 8006930:	f000 fb96 	bl	8007060 <_sbrk_r>
 8006934:	3001      	adds	r0, #1
 8006936:	d101      	bne.n	800693c <sbrk_aligned+0x38>
 8006938:	f04f 34ff 	mov.w	r4, #4294967295
 800693c:	4620      	mov	r0, r4
 800693e:	bd70      	pop	{r4, r5, r6, pc}
 8006940:	200003d8 	.word	0x200003d8

08006944 <_malloc_r>:
 8006944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006948:	1ccd      	adds	r5, r1, #3
 800694a:	f025 0503 	bic.w	r5, r5, #3
 800694e:	3508      	adds	r5, #8
 8006950:	2d0c      	cmp	r5, #12
 8006952:	bf38      	it	cc
 8006954:	250c      	movcc	r5, #12
 8006956:	2d00      	cmp	r5, #0
 8006958:	4607      	mov	r7, r0
 800695a:	db01      	blt.n	8006960 <_malloc_r+0x1c>
 800695c:	42a9      	cmp	r1, r5
 800695e:	d905      	bls.n	800696c <_malloc_r+0x28>
 8006960:	230c      	movs	r3, #12
 8006962:	603b      	str	r3, [r7, #0]
 8006964:	2600      	movs	r6, #0
 8006966:	4630      	mov	r0, r6
 8006968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800696c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006a40 <_malloc_r+0xfc>
 8006970:	f000 f868 	bl	8006a44 <__malloc_lock>
 8006974:	f8d8 3000 	ldr.w	r3, [r8]
 8006978:	461c      	mov	r4, r3
 800697a:	bb5c      	cbnz	r4, 80069d4 <_malloc_r+0x90>
 800697c:	4629      	mov	r1, r5
 800697e:	4638      	mov	r0, r7
 8006980:	f7ff ffc0 	bl	8006904 <sbrk_aligned>
 8006984:	1c43      	adds	r3, r0, #1
 8006986:	4604      	mov	r4, r0
 8006988:	d155      	bne.n	8006a36 <_malloc_r+0xf2>
 800698a:	f8d8 4000 	ldr.w	r4, [r8]
 800698e:	4626      	mov	r6, r4
 8006990:	2e00      	cmp	r6, #0
 8006992:	d145      	bne.n	8006a20 <_malloc_r+0xdc>
 8006994:	2c00      	cmp	r4, #0
 8006996:	d048      	beq.n	8006a2a <_malloc_r+0xe6>
 8006998:	6823      	ldr	r3, [r4, #0]
 800699a:	4631      	mov	r1, r6
 800699c:	4638      	mov	r0, r7
 800699e:	eb04 0903 	add.w	r9, r4, r3
 80069a2:	f000 fb5d 	bl	8007060 <_sbrk_r>
 80069a6:	4581      	cmp	r9, r0
 80069a8:	d13f      	bne.n	8006a2a <_malloc_r+0xe6>
 80069aa:	6821      	ldr	r1, [r4, #0]
 80069ac:	1a6d      	subs	r5, r5, r1
 80069ae:	4629      	mov	r1, r5
 80069b0:	4638      	mov	r0, r7
 80069b2:	f7ff ffa7 	bl	8006904 <sbrk_aligned>
 80069b6:	3001      	adds	r0, #1
 80069b8:	d037      	beq.n	8006a2a <_malloc_r+0xe6>
 80069ba:	6823      	ldr	r3, [r4, #0]
 80069bc:	442b      	add	r3, r5
 80069be:	6023      	str	r3, [r4, #0]
 80069c0:	f8d8 3000 	ldr.w	r3, [r8]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d038      	beq.n	8006a3a <_malloc_r+0xf6>
 80069c8:	685a      	ldr	r2, [r3, #4]
 80069ca:	42a2      	cmp	r2, r4
 80069cc:	d12b      	bne.n	8006a26 <_malloc_r+0xe2>
 80069ce:	2200      	movs	r2, #0
 80069d0:	605a      	str	r2, [r3, #4]
 80069d2:	e00f      	b.n	80069f4 <_malloc_r+0xb0>
 80069d4:	6822      	ldr	r2, [r4, #0]
 80069d6:	1b52      	subs	r2, r2, r5
 80069d8:	d41f      	bmi.n	8006a1a <_malloc_r+0xd6>
 80069da:	2a0b      	cmp	r2, #11
 80069dc:	d917      	bls.n	8006a0e <_malloc_r+0xca>
 80069de:	1961      	adds	r1, r4, r5
 80069e0:	42a3      	cmp	r3, r4
 80069e2:	6025      	str	r5, [r4, #0]
 80069e4:	bf18      	it	ne
 80069e6:	6059      	strne	r1, [r3, #4]
 80069e8:	6863      	ldr	r3, [r4, #4]
 80069ea:	bf08      	it	eq
 80069ec:	f8c8 1000 	streq.w	r1, [r8]
 80069f0:	5162      	str	r2, [r4, r5]
 80069f2:	604b      	str	r3, [r1, #4]
 80069f4:	4638      	mov	r0, r7
 80069f6:	f104 060b 	add.w	r6, r4, #11
 80069fa:	f000 f829 	bl	8006a50 <__malloc_unlock>
 80069fe:	f026 0607 	bic.w	r6, r6, #7
 8006a02:	1d23      	adds	r3, r4, #4
 8006a04:	1af2      	subs	r2, r6, r3
 8006a06:	d0ae      	beq.n	8006966 <_malloc_r+0x22>
 8006a08:	1b9b      	subs	r3, r3, r6
 8006a0a:	50a3      	str	r3, [r4, r2]
 8006a0c:	e7ab      	b.n	8006966 <_malloc_r+0x22>
 8006a0e:	42a3      	cmp	r3, r4
 8006a10:	6862      	ldr	r2, [r4, #4]
 8006a12:	d1dd      	bne.n	80069d0 <_malloc_r+0x8c>
 8006a14:	f8c8 2000 	str.w	r2, [r8]
 8006a18:	e7ec      	b.n	80069f4 <_malloc_r+0xb0>
 8006a1a:	4623      	mov	r3, r4
 8006a1c:	6864      	ldr	r4, [r4, #4]
 8006a1e:	e7ac      	b.n	800697a <_malloc_r+0x36>
 8006a20:	4634      	mov	r4, r6
 8006a22:	6876      	ldr	r6, [r6, #4]
 8006a24:	e7b4      	b.n	8006990 <_malloc_r+0x4c>
 8006a26:	4613      	mov	r3, r2
 8006a28:	e7cc      	b.n	80069c4 <_malloc_r+0x80>
 8006a2a:	230c      	movs	r3, #12
 8006a2c:	603b      	str	r3, [r7, #0]
 8006a2e:	4638      	mov	r0, r7
 8006a30:	f000 f80e 	bl	8006a50 <__malloc_unlock>
 8006a34:	e797      	b.n	8006966 <_malloc_r+0x22>
 8006a36:	6025      	str	r5, [r4, #0]
 8006a38:	e7dc      	b.n	80069f4 <_malloc_r+0xb0>
 8006a3a:	605b      	str	r3, [r3, #4]
 8006a3c:	deff      	udf	#255	; 0xff
 8006a3e:	bf00      	nop
 8006a40:	200003d4 	.word	0x200003d4

08006a44 <__malloc_lock>:
 8006a44:	4801      	ldr	r0, [pc, #4]	; (8006a4c <__malloc_lock+0x8>)
 8006a46:	f7ff bf0f 	b.w	8006868 <__retarget_lock_acquire_recursive>
 8006a4a:	bf00      	nop
 8006a4c:	200003d0 	.word	0x200003d0

08006a50 <__malloc_unlock>:
 8006a50:	4801      	ldr	r0, [pc, #4]	; (8006a58 <__malloc_unlock+0x8>)
 8006a52:	f7ff bf0a 	b.w	800686a <__retarget_lock_release_recursive>
 8006a56:	bf00      	nop
 8006a58:	200003d0 	.word	0x200003d0

08006a5c <__ssputs_r>:
 8006a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a60:	688e      	ldr	r6, [r1, #8]
 8006a62:	461f      	mov	r7, r3
 8006a64:	42be      	cmp	r6, r7
 8006a66:	680b      	ldr	r3, [r1, #0]
 8006a68:	4682      	mov	sl, r0
 8006a6a:	460c      	mov	r4, r1
 8006a6c:	4690      	mov	r8, r2
 8006a6e:	d82c      	bhi.n	8006aca <__ssputs_r+0x6e>
 8006a70:	898a      	ldrh	r2, [r1, #12]
 8006a72:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a76:	d026      	beq.n	8006ac6 <__ssputs_r+0x6a>
 8006a78:	6965      	ldr	r5, [r4, #20]
 8006a7a:	6909      	ldr	r1, [r1, #16]
 8006a7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a80:	eba3 0901 	sub.w	r9, r3, r1
 8006a84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a88:	1c7b      	adds	r3, r7, #1
 8006a8a:	444b      	add	r3, r9
 8006a8c:	106d      	asrs	r5, r5, #1
 8006a8e:	429d      	cmp	r5, r3
 8006a90:	bf38      	it	cc
 8006a92:	461d      	movcc	r5, r3
 8006a94:	0553      	lsls	r3, r2, #21
 8006a96:	d527      	bpl.n	8006ae8 <__ssputs_r+0x8c>
 8006a98:	4629      	mov	r1, r5
 8006a9a:	f7ff ff53 	bl	8006944 <_malloc_r>
 8006a9e:	4606      	mov	r6, r0
 8006aa0:	b360      	cbz	r0, 8006afc <__ssputs_r+0xa0>
 8006aa2:	6921      	ldr	r1, [r4, #16]
 8006aa4:	464a      	mov	r2, r9
 8006aa6:	f000 faeb 	bl	8007080 <memcpy>
 8006aaa:	89a3      	ldrh	r3, [r4, #12]
 8006aac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ab4:	81a3      	strh	r3, [r4, #12]
 8006ab6:	6126      	str	r6, [r4, #16]
 8006ab8:	6165      	str	r5, [r4, #20]
 8006aba:	444e      	add	r6, r9
 8006abc:	eba5 0509 	sub.w	r5, r5, r9
 8006ac0:	6026      	str	r6, [r4, #0]
 8006ac2:	60a5      	str	r5, [r4, #8]
 8006ac4:	463e      	mov	r6, r7
 8006ac6:	42be      	cmp	r6, r7
 8006ac8:	d900      	bls.n	8006acc <__ssputs_r+0x70>
 8006aca:	463e      	mov	r6, r7
 8006acc:	6820      	ldr	r0, [r4, #0]
 8006ace:	4632      	mov	r2, r6
 8006ad0:	4641      	mov	r1, r8
 8006ad2:	f000 faab 	bl	800702c <memmove>
 8006ad6:	68a3      	ldr	r3, [r4, #8]
 8006ad8:	1b9b      	subs	r3, r3, r6
 8006ada:	60a3      	str	r3, [r4, #8]
 8006adc:	6823      	ldr	r3, [r4, #0]
 8006ade:	4433      	add	r3, r6
 8006ae0:	6023      	str	r3, [r4, #0]
 8006ae2:	2000      	movs	r0, #0
 8006ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ae8:	462a      	mov	r2, r5
 8006aea:	f000 fad7 	bl	800709c <_realloc_r>
 8006aee:	4606      	mov	r6, r0
 8006af0:	2800      	cmp	r0, #0
 8006af2:	d1e0      	bne.n	8006ab6 <__ssputs_r+0x5a>
 8006af4:	6921      	ldr	r1, [r4, #16]
 8006af6:	4650      	mov	r0, sl
 8006af8:	f7ff feb8 	bl	800686c <_free_r>
 8006afc:	230c      	movs	r3, #12
 8006afe:	f8ca 3000 	str.w	r3, [sl]
 8006b02:	89a3      	ldrh	r3, [r4, #12]
 8006b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b08:	81a3      	strh	r3, [r4, #12]
 8006b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b0e:	e7e9      	b.n	8006ae4 <__ssputs_r+0x88>

08006b10 <_svfiprintf_r>:
 8006b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b14:	4698      	mov	r8, r3
 8006b16:	898b      	ldrh	r3, [r1, #12]
 8006b18:	061b      	lsls	r3, r3, #24
 8006b1a:	b09d      	sub	sp, #116	; 0x74
 8006b1c:	4607      	mov	r7, r0
 8006b1e:	460d      	mov	r5, r1
 8006b20:	4614      	mov	r4, r2
 8006b22:	d50e      	bpl.n	8006b42 <_svfiprintf_r+0x32>
 8006b24:	690b      	ldr	r3, [r1, #16]
 8006b26:	b963      	cbnz	r3, 8006b42 <_svfiprintf_r+0x32>
 8006b28:	2140      	movs	r1, #64	; 0x40
 8006b2a:	f7ff ff0b 	bl	8006944 <_malloc_r>
 8006b2e:	6028      	str	r0, [r5, #0]
 8006b30:	6128      	str	r0, [r5, #16]
 8006b32:	b920      	cbnz	r0, 8006b3e <_svfiprintf_r+0x2e>
 8006b34:	230c      	movs	r3, #12
 8006b36:	603b      	str	r3, [r7, #0]
 8006b38:	f04f 30ff 	mov.w	r0, #4294967295
 8006b3c:	e0d0      	b.n	8006ce0 <_svfiprintf_r+0x1d0>
 8006b3e:	2340      	movs	r3, #64	; 0x40
 8006b40:	616b      	str	r3, [r5, #20]
 8006b42:	2300      	movs	r3, #0
 8006b44:	9309      	str	r3, [sp, #36]	; 0x24
 8006b46:	2320      	movs	r3, #32
 8006b48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b50:	2330      	movs	r3, #48	; 0x30
 8006b52:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006cf8 <_svfiprintf_r+0x1e8>
 8006b56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b5a:	f04f 0901 	mov.w	r9, #1
 8006b5e:	4623      	mov	r3, r4
 8006b60:	469a      	mov	sl, r3
 8006b62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b66:	b10a      	cbz	r2, 8006b6c <_svfiprintf_r+0x5c>
 8006b68:	2a25      	cmp	r2, #37	; 0x25
 8006b6a:	d1f9      	bne.n	8006b60 <_svfiprintf_r+0x50>
 8006b6c:	ebba 0b04 	subs.w	fp, sl, r4
 8006b70:	d00b      	beq.n	8006b8a <_svfiprintf_r+0x7a>
 8006b72:	465b      	mov	r3, fp
 8006b74:	4622      	mov	r2, r4
 8006b76:	4629      	mov	r1, r5
 8006b78:	4638      	mov	r0, r7
 8006b7a:	f7ff ff6f 	bl	8006a5c <__ssputs_r>
 8006b7e:	3001      	adds	r0, #1
 8006b80:	f000 80a9 	beq.w	8006cd6 <_svfiprintf_r+0x1c6>
 8006b84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b86:	445a      	add	r2, fp
 8006b88:	9209      	str	r2, [sp, #36]	; 0x24
 8006b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	f000 80a1 	beq.w	8006cd6 <_svfiprintf_r+0x1c6>
 8006b94:	2300      	movs	r3, #0
 8006b96:	f04f 32ff 	mov.w	r2, #4294967295
 8006b9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b9e:	f10a 0a01 	add.w	sl, sl, #1
 8006ba2:	9304      	str	r3, [sp, #16]
 8006ba4:	9307      	str	r3, [sp, #28]
 8006ba6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006baa:	931a      	str	r3, [sp, #104]	; 0x68
 8006bac:	4654      	mov	r4, sl
 8006bae:	2205      	movs	r2, #5
 8006bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bb4:	4850      	ldr	r0, [pc, #320]	; (8006cf8 <_svfiprintf_r+0x1e8>)
 8006bb6:	f7f9 fb13 	bl	80001e0 <memchr>
 8006bba:	9a04      	ldr	r2, [sp, #16]
 8006bbc:	b9d8      	cbnz	r0, 8006bf6 <_svfiprintf_r+0xe6>
 8006bbe:	06d0      	lsls	r0, r2, #27
 8006bc0:	bf44      	itt	mi
 8006bc2:	2320      	movmi	r3, #32
 8006bc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bc8:	0711      	lsls	r1, r2, #28
 8006bca:	bf44      	itt	mi
 8006bcc:	232b      	movmi	r3, #43	; 0x2b
 8006bce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8006bd6:	2b2a      	cmp	r3, #42	; 0x2a
 8006bd8:	d015      	beq.n	8006c06 <_svfiprintf_r+0xf6>
 8006bda:	9a07      	ldr	r2, [sp, #28]
 8006bdc:	4654      	mov	r4, sl
 8006bde:	2000      	movs	r0, #0
 8006be0:	f04f 0c0a 	mov.w	ip, #10
 8006be4:	4621      	mov	r1, r4
 8006be6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bea:	3b30      	subs	r3, #48	; 0x30
 8006bec:	2b09      	cmp	r3, #9
 8006bee:	d94d      	bls.n	8006c8c <_svfiprintf_r+0x17c>
 8006bf0:	b1b0      	cbz	r0, 8006c20 <_svfiprintf_r+0x110>
 8006bf2:	9207      	str	r2, [sp, #28]
 8006bf4:	e014      	b.n	8006c20 <_svfiprintf_r+0x110>
 8006bf6:	eba0 0308 	sub.w	r3, r0, r8
 8006bfa:	fa09 f303 	lsl.w	r3, r9, r3
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	9304      	str	r3, [sp, #16]
 8006c02:	46a2      	mov	sl, r4
 8006c04:	e7d2      	b.n	8006bac <_svfiprintf_r+0x9c>
 8006c06:	9b03      	ldr	r3, [sp, #12]
 8006c08:	1d19      	adds	r1, r3, #4
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	9103      	str	r1, [sp, #12]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	bfbb      	ittet	lt
 8006c12:	425b      	neglt	r3, r3
 8006c14:	f042 0202 	orrlt.w	r2, r2, #2
 8006c18:	9307      	strge	r3, [sp, #28]
 8006c1a:	9307      	strlt	r3, [sp, #28]
 8006c1c:	bfb8      	it	lt
 8006c1e:	9204      	strlt	r2, [sp, #16]
 8006c20:	7823      	ldrb	r3, [r4, #0]
 8006c22:	2b2e      	cmp	r3, #46	; 0x2e
 8006c24:	d10c      	bne.n	8006c40 <_svfiprintf_r+0x130>
 8006c26:	7863      	ldrb	r3, [r4, #1]
 8006c28:	2b2a      	cmp	r3, #42	; 0x2a
 8006c2a:	d134      	bne.n	8006c96 <_svfiprintf_r+0x186>
 8006c2c:	9b03      	ldr	r3, [sp, #12]
 8006c2e:	1d1a      	adds	r2, r3, #4
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	9203      	str	r2, [sp, #12]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	bfb8      	it	lt
 8006c38:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c3c:	3402      	adds	r4, #2
 8006c3e:	9305      	str	r3, [sp, #20]
 8006c40:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006d08 <_svfiprintf_r+0x1f8>
 8006c44:	7821      	ldrb	r1, [r4, #0]
 8006c46:	2203      	movs	r2, #3
 8006c48:	4650      	mov	r0, sl
 8006c4a:	f7f9 fac9 	bl	80001e0 <memchr>
 8006c4e:	b138      	cbz	r0, 8006c60 <_svfiprintf_r+0x150>
 8006c50:	9b04      	ldr	r3, [sp, #16]
 8006c52:	eba0 000a 	sub.w	r0, r0, sl
 8006c56:	2240      	movs	r2, #64	; 0x40
 8006c58:	4082      	lsls	r2, r0
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	3401      	adds	r4, #1
 8006c5e:	9304      	str	r3, [sp, #16]
 8006c60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c64:	4825      	ldr	r0, [pc, #148]	; (8006cfc <_svfiprintf_r+0x1ec>)
 8006c66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c6a:	2206      	movs	r2, #6
 8006c6c:	f7f9 fab8 	bl	80001e0 <memchr>
 8006c70:	2800      	cmp	r0, #0
 8006c72:	d038      	beq.n	8006ce6 <_svfiprintf_r+0x1d6>
 8006c74:	4b22      	ldr	r3, [pc, #136]	; (8006d00 <_svfiprintf_r+0x1f0>)
 8006c76:	bb1b      	cbnz	r3, 8006cc0 <_svfiprintf_r+0x1b0>
 8006c78:	9b03      	ldr	r3, [sp, #12]
 8006c7a:	3307      	adds	r3, #7
 8006c7c:	f023 0307 	bic.w	r3, r3, #7
 8006c80:	3308      	adds	r3, #8
 8006c82:	9303      	str	r3, [sp, #12]
 8006c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c86:	4433      	add	r3, r6
 8006c88:	9309      	str	r3, [sp, #36]	; 0x24
 8006c8a:	e768      	b.n	8006b5e <_svfiprintf_r+0x4e>
 8006c8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c90:	460c      	mov	r4, r1
 8006c92:	2001      	movs	r0, #1
 8006c94:	e7a6      	b.n	8006be4 <_svfiprintf_r+0xd4>
 8006c96:	2300      	movs	r3, #0
 8006c98:	3401      	adds	r4, #1
 8006c9a:	9305      	str	r3, [sp, #20]
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	f04f 0c0a 	mov.w	ip, #10
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ca8:	3a30      	subs	r2, #48	; 0x30
 8006caa:	2a09      	cmp	r2, #9
 8006cac:	d903      	bls.n	8006cb6 <_svfiprintf_r+0x1a6>
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d0c6      	beq.n	8006c40 <_svfiprintf_r+0x130>
 8006cb2:	9105      	str	r1, [sp, #20]
 8006cb4:	e7c4      	b.n	8006c40 <_svfiprintf_r+0x130>
 8006cb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cba:	4604      	mov	r4, r0
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e7f0      	b.n	8006ca2 <_svfiprintf_r+0x192>
 8006cc0:	ab03      	add	r3, sp, #12
 8006cc2:	9300      	str	r3, [sp, #0]
 8006cc4:	462a      	mov	r2, r5
 8006cc6:	4b0f      	ldr	r3, [pc, #60]	; (8006d04 <_svfiprintf_r+0x1f4>)
 8006cc8:	a904      	add	r1, sp, #16
 8006cca:	4638      	mov	r0, r7
 8006ccc:	f3af 8000 	nop.w
 8006cd0:	1c42      	adds	r2, r0, #1
 8006cd2:	4606      	mov	r6, r0
 8006cd4:	d1d6      	bne.n	8006c84 <_svfiprintf_r+0x174>
 8006cd6:	89ab      	ldrh	r3, [r5, #12]
 8006cd8:	065b      	lsls	r3, r3, #25
 8006cda:	f53f af2d 	bmi.w	8006b38 <_svfiprintf_r+0x28>
 8006cde:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ce0:	b01d      	add	sp, #116	; 0x74
 8006ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ce6:	ab03      	add	r3, sp, #12
 8006ce8:	9300      	str	r3, [sp, #0]
 8006cea:	462a      	mov	r2, r5
 8006cec:	4b05      	ldr	r3, [pc, #20]	; (8006d04 <_svfiprintf_r+0x1f4>)
 8006cee:	a904      	add	r1, sp, #16
 8006cf0:	4638      	mov	r0, r7
 8006cf2:	f000 f879 	bl	8006de8 <_printf_i>
 8006cf6:	e7eb      	b.n	8006cd0 <_svfiprintf_r+0x1c0>
 8006cf8:	08007224 	.word	0x08007224
 8006cfc:	0800722e 	.word	0x0800722e
 8006d00:	00000000 	.word	0x00000000
 8006d04:	08006a5d 	.word	0x08006a5d
 8006d08:	0800722a 	.word	0x0800722a

08006d0c <_printf_common>:
 8006d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d10:	4616      	mov	r6, r2
 8006d12:	4699      	mov	r9, r3
 8006d14:	688a      	ldr	r2, [r1, #8]
 8006d16:	690b      	ldr	r3, [r1, #16]
 8006d18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	bfb8      	it	lt
 8006d20:	4613      	movlt	r3, r2
 8006d22:	6033      	str	r3, [r6, #0]
 8006d24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d28:	4607      	mov	r7, r0
 8006d2a:	460c      	mov	r4, r1
 8006d2c:	b10a      	cbz	r2, 8006d32 <_printf_common+0x26>
 8006d2e:	3301      	adds	r3, #1
 8006d30:	6033      	str	r3, [r6, #0]
 8006d32:	6823      	ldr	r3, [r4, #0]
 8006d34:	0699      	lsls	r1, r3, #26
 8006d36:	bf42      	ittt	mi
 8006d38:	6833      	ldrmi	r3, [r6, #0]
 8006d3a:	3302      	addmi	r3, #2
 8006d3c:	6033      	strmi	r3, [r6, #0]
 8006d3e:	6825      	ldr	r5, [r4, #0]
 8006d40:	f015 0506 	ands.w	r5, r5, #6
 8006d44:	d106      	bne.n	8006d54 <_printf_common+0x48>
 8006d46:	f104 0a19 	add.w	sl, r4, #25
 8006d4a:	68e3      	ldr	r3, [r4, #12]
 8006d4c:	6832      	ldr	r2, [r6, #0]
 8006d4e:	1a9b      	subs	r3, r3, r2
 8006d50:	42ab      	cmp	r3, r5
 8006d52:	dc26      	bgt.n	8006da2 <_printf_common+0x96>
 8006d54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d58:	1e13      	subs	r3, r2, #0
 8006d5a:	6822      	ldr	r2, [r4, #0]
 8006d5c:	bf18      	it	ne
 8006d5e:	2301      	movne	r3, #1
 8006d60:	0692      	lsls	r2, r2, #26
 8006d62:	d42b      	bmi.n	8006dbc <_printf_common+0xb0>
 8006d64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d68:	4649      	mov	r1, r9
 8006d6a:	4638      	mov	r0, r7
 8006d6c:	47c0      	blx	r8
 8006d6e:	3001      	adds	r0, #1
 8006d70:	d01e      	beq.n	8006db0 <_printf_common+0xa4>
 8006d72:	6823      	ldr	r3, [r4, #0]
 8006d74:	6922      	ldr	r2, [r4, #16]
 8006d76:	f003 0306 	and.w	r3, r3, #6
 8006d7a:	2b04      	cmp	r3, #4
 8006d7c:	bf02      	ittt	eq
 8006d7e:	68e5      	ldreq	r5, [r4, #12]
 8006d80:	6833      	ldreq	r3, [r6, #0]
 8006d82:	1aed      	subeq	r5, r5, r3
 8006d84:	68a3      	ldr	r3, [r4, #8]
 8006d86:	bf0c      	ite	eq
 8006d88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d8c:	2500      	movne	r5, #0
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	bfc4      	itt	gt
 8006d92:	1a9b      	subgt	r3, r3, r2
 8006d94:	18ed      	addgt	r5, r5, r3
 8006d96:	2600      	movs	r6, #0
 8006d98:	341a      	adds	r4, #26
 8006d9a:	42b5      	cmp	r5, r6
 8006d9c:	d11a      	bne.n	8006dd4 <_printf_common+0xc8>
 8006d9e:	2000      	movs	r0, #0
 8006da0:	e008      	b.n	8006db4 <_printf_common+0xa8>
 8006da2:	2301      	movs	r3, #1
 8006da4:	4652      	mov	r2, sl
 8006da6:	4649      	mov	r1, r9
 8006da8:	4638      	mov	r0, r7
 8006daa:	47c0      	blx	r8
 8006dac:	3001      	adds	r0, #1
 8006dae:	d103      	bne.n	8006db8 <_printf_common+0xac>
 8006db0:	f04f 30ff 	mov.w	r0, #4294967295
 8006db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006db8:	3501      	adds	r5, #1
 8006dba:	e7c6      	b.n	8006d4a <_printf_common+0x3e>
 8006dbc:	18e1      	adds	r1, r4, r3
 8006dbe:	1c5a      	adds	r2, r3, #1
 8006dc0:	2030      	movs	r0, #48	; 0x30
 8006dc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006dc6:	4422      	add	r2, r4
 8006dc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006dcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006dd0:	3302      	adds	r3, #2
 8006dd2:	e7c7      	b.n	8006d64 <_printf_common+0x58>
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	4622      	mov	r2, r4
 8006dd8:	4649      	mov	r1, r9
 8006dda:	4638      	mov	r0, r7
 8006ddc:	47c0      	blx	r8
 8006dde:	3001      	adds	r0, #1
 8006de0:	d0e6      	beq.n	8006db0 <_printf_common+0xa4>
 8006de2:	3601      	adds	r6, #1
 8006de4:	e7d9      	b.n	8006d9a <_printf_common+0x8e>
	...

08006de8 <_printf_i>:
 8006de8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006dec:	7e0f      	ldrb	r7, [r1, #24]
 8006dee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006df0:	2f78      	cmp	r7, #120	; 0x78
 8006df2:	4691      	mov	r9, r2
 8006df4:	4680      	mov	r8, r0
 8006df6:	460c      	mov	r4, r1
 8006df8:	469a      	mov	sl, r3
 8006dfa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006dfe:	d807      	bhi.n	8006e10 <_printf_i+0x28>
 8006e00:	2f62      	cmp	r7, #98	; 0x62
 8006e02:	d80a      	bhi.n	8006e1a <_printf_i+0x32>
 8006e04:	2f00      	cmp	r7, #0
 8006e06:	f000 80d4 	beq.w	8006fb2 <_printf_i+0x1ca>
 8006e0a:	2f58      	cmp	r7, #88	; 0x58
 8006e0c:	f000 80c0 	beq.w	8006f90 <_printf_i+0x1a8>
 8006e10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e18:	e03a      	b.n	8006e90 <_printf_i+0xa8>
 8006e1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e1e:	2b15      	cmp	r3, #21
 8006e20:	d8f6      	bhi.n	8006e10 <_printf_i+0x28>
 8006e22:	a101      	add	r1, pc, #4	; (adr r1, 8006e28 <_printf_i+0x40>)
 8006e24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e28:	08006e81 	.word	0x08006e81
 8006e2c:	08006e95 	.word	0x08006e95
 8006e30:	08006e11 	.word	0x08006e11
 8006e34:	08006e11 	.word	0x08006e11
 8006e38:	08006e11 	.word	0x08006e11
 8006e3c:	08006e11 	.word	0x08006e11
 8006e40:	08006e95 	.word	0x08006e95
 8006e44:	08006e11 	.word	0x08006e11
 8006e48:	08006e11 	.word	0x08006e11
 8006e4c:	08006e11 	.word	0x08006e11
 8006e50:	08006e11 	.word	0x08006e11
 8006e54:	08006f99 	.word	0x08006f99
 8006e58:	08006ec1 	.word	0x08006ec1
 8006e5c:	08006f53 	.word	0x08006f53
 8006e60:	08006e11 	.word	0x08006e11
 8006e64:	08006e11 	.word	0x08006e11
 8006e68:	08006fbb 	.word	0x08006fbb
 8006e6c:	08006e11 	.word	0x08006e11
 8006e70:	08006ec1 	.word	0x08006ec1
 8006e74:	08006e11 	.word	0x08006e11
 8006e78:	08006e11 	.word	0x08006e11
 8006e7c:	08006f5b 	.word	0x08006f5b
 8006e80:	682b      	ldr	r3, [r5, #0]
 8006e82:	1d1a      	adds	r2, r3, #4
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	602a      	str	r2, [r5, #0]
 8006e88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e90:	2301      	movs	r3, #1
 8006e92:	e09f      	b.n	8006fd4 <_printf_i+0x1ec>
 8006e94:	6820      	ldr	r0, [r4, #0]
 8006e96:	682b      	ldr	r3, [r5, #0]
 8006e98:	0607      	lsls	r7, r0, #24
 8006e9a:	f103 0104 	add.w	r1, r3, #4
 8006e9e:	6029      	str	r1, [r5, #0]
 8006ea0:	d501      	bpl.n	8006ea6 <_printf_i+0xbe>
 8006ea2:	681e      	ldr	r6, [r3, #0]
 8006ea4:	e003      	b.n	8006eae <_printf_i+0xc6>
 8006ea6:	0646      	lsls	r6, r0, #25
 8006ea8:	d5fb      	bpl.n	8006ea2 <_printf_i+0xba>
 8006eaa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006eae:	2e00      	cmp	r6, #0
 8006eb0:	da03      	bge.n	8006eba <_printf_i+0xd2>
 8006eb2:	232d      	movs	r3, #45	; 0x2d
 8006eb4:	4276      	negs	r6, r6
 8006eb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eba:	485a      	ldr	r0, [pc, #360]	; (8007024 <_printf_i+0x23c>)
 8006ebc:	230a      	movs	r3, #10
 8006ebe:	e012      	b.n	8006ee6 <_printf_i+0xfe>
 8006ec0:	682b      	ldr	r3, [r5, #0]
 8006ec2:	6820      	ldr	r0, [r4, #0]
 8006ec4:	1d19      	adds	r1, r3, #4
 8006ec6:	6029      	str	r1, [r5, #0]
 8006ec8:	0605      	lsls	r5, r0, #24
 8006eca:	d501      	bpl.n	8006ed0 <_printf_i+0xe8>
 8006ecc:	681e      	ldr	r6, [r3, #0]
 8006ece:	e002      	b.n	8006ed6 <_printf_i+0xee>
 8006ed0:	0641      	lsls	r1, r0, #25
 8006ed2:	d5fb      	bpl.n	8006ecc <_printf_i+0xe4>
 8006ed4:	881e      	ldrh	r6, [r3, #0]
 8006ed6:	4853      	ldr	r0, [pc, #332]	; (8007024 <_printf_i+0x23c>)
 8006ed8:	2f6f      	cmp	r7, #111	; 0x6f
 8006eda:	bf0c      	ite	eq
 8006edc:	2308      	moveq	r3, #8
 8006ede:	230a      	movne	r3, #10
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ee6:	6865      	ldr	r5, [r4, #4]
 8006ee8:	60a5      	str	r5, [r4, #8]
 8006eea:	2d00      	cmp	r5, #0
 8006eec:	bfa2      	ittt	ge
 8006eee:	6821      	ldrge	r1, [r4, #0]
 8006ef0:	f021 0104 	bicge.w	r1, r1, #4
 8006ef4:	6021      	strge	r1, [r4, #0]
 8006ef6:	b90e      	cbnz	r6, 8006efc <_printf_i+0x114>
 8006ef8:	2d00      	cmp	r5, #0
 8006efa:	d04b      	beq.n	8006f94 <_printf_i+0x1ac>
 8006efc:	4615      	mov	r5, r2
 8006efe:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f02:	fb03 6711 	mls	r7, r3, r1, r6
 8006f06:	5dc7      	ldrb	r7, [r0, r7]
 8006f08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f0c:	4637      	mov	r7, r6
 8006f0e:	42bb      	cmp	r3, r7
 8006f10:	460e      	mov	r6, r1
 8006f12:	d9f4      	bls.n	8006efe <_printf_i+0x116>
 8006f14:	2b08      	cmp	r3, #8
 8006f16:	d10b      	bne.n	8006f30 <_printf_i+0x148>
 8006f18:	6823      	ldr	r3, [r4, #0]
 8006f1a:	07de      	lsls	r6, r3, #31
 8006f1c:	d508      	bpl.n	8006f30 <_printf_i+0x148>
 8006f1e:	6923      	ldr	r3, [r4, #16]
 8006f20:	6861      	ldr	r1, [r4, #4]
 8006f22:	4299      	cmp	r1, r3
 8006f24:	bfde      	ittt	le
 8006f26:	2330      	movle	r3, #48	; 0x30
 8006f28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f30:	1b52      	subs	r2, r2, r5
 8006f32:	6122      	str	r2, [r4, #16]
 8006f34:	f8cd a000 	str.w	sl, [sp]
 8006f38:	464b      	mov	r3, r9
 8006f3a:	aa03      	add	r2, sp, #12
 8006f3c:	4621      	mov	r1, r4
 8006f3e:	4640      	mov	r0, r8
 8006f40:	f7ff fee4 	bl	8006d0c <_printf_common>
 8006f44:	3001      	adds	r0, #1
 8006f46:	d14a      	bne.n	8006fde <_printf_i+0x1f6>
 8006f48:	f04f 30ff 	mov.w	r0, #4294967295
 8006f4c:	b004      	add	sp, #16
 8006f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f52:	6823      	ldr	r3, [r4, #0]
 8006f54:	f043 0320 	orr.w	r3, r3, #32
 8006f58:	6023      	str	r3, [r4, #0]
 8006f5a:	4833      	ldr	r0, [pc, #204]	; (8007028 <_printf_i+0x240>)
 8006f5c:	2778      	movs	r7, #120	; 0x78
 8006f5e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006f62:	6823      	ldr	r3, [r4, #0]
 8006f64:	6829      	ldr	r1, [r5, #0]
 8006f66:	061f      	lsls	r7, r3, #24
 8006f68:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f6c:	d402      	bmi.n	8006f74 <_printf_i+0x18c>
 8006f6e:	065f      	lsls	r7, r3, #25
 8006f70:	bf48      	it	mi
 8006f72:	b2b6      	uxthmi	r6, r6
 8006f74:	07df      	lsls	r7, r3, #31
 8006f76:	bf48      	it	mi
 8006f78:	f043 0320 	orrmi.w	r3, r3, #32
 8006f7c:	6029      	str	r1, [r5, #0]
 8006f7e:	bf48      	it	mi
 8006f80:	6023      	strmi	r3, [r4, #0]
 8006f82:	b91e      	cbnz	r6, 8006f8c <_printf_i+0x1a4>
 8006f84:	6823      	ldr	r3, [r4, #0]
 8006f86:	f023 0320 	bic.w	r3, r3, #32
 8006f8a:	6023      	str	r3, [r4, #0]
 8006f8c:	2310      	movs	r3, #16
 8006f8e:	e7a7      	b.n	8006ee0 <_printf_i+0xf8>
 8006f90:	4824      	ldr	r0, [pc, #144]	; (8007024 <_printf_i+0x23c>)
 8006f92:	e7e4      	b.n	8006f5e <_printf_i+0x176>
 8006f94:	4615      	mov	r5, r2
 8006f96:	e7bd      	b.n	8006f14 <_printf_i+0x12c>
 8006f98:	682b      	ldr	r3, [r5, #0]
 8006f9a:	6826      	ldr	r6, [r4, #0]
 8006f9c:	6961      	ldr	r1, [r4, #20]
 8006f9e:	1d18      	adds	r0, r3, #4
 8006fa0:	6028      	str	r0, [r5, #0]
 8006fa2:	0635      	lsls	r5, r6, #24
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	d501      	bpl.n	8006fac <_printf_i+0x1c4>
 8006fa8:	6019      	str	r1, [r3, #0]
 8006faa:	e002      	b.n	8006fb2 <_printf_i+0x1ca>
 8006fac:	0670      	lsls	r0, r6, #25
 8006fae:	d5fb      	bpl.n	8006fa8 <_printf_i+0x1c0>
 8006fb0:	8019      	strh	r1, [r3, #0]
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	6123      	str	r3, [r4, #16]
 8006fb6:	4615      	mov	r5, r2
 8006fb8:	e7bc      	b.n	8006f34 <_printf_i+0x14c>
 8006fba:	682b      	ldr	r3, [r5, #0]
 8006fbc:	1d1a      	adds	r2, r3, #4
 8006fbe:	602a      	str	r2, [r5, #0]
 8006fc0:	681d      	ldr	r5, [r3, #0]
 8006fc2:	6862      	ldr	r2, [r4, #4]
 8006fc4:	2100      	movs	r1, #0
 8006fc6:	4628      	mov	r0, r5
 8006fc8:	f7f9 f90a 	bl	80001e0 <memchr>
 8006fcc:	b108      	cbz	r0, 8006fd2 <_printf_i+0x1ea>
 8006fce:	1b40      	subs	r0, r0, r5
 8006fd0:	6060      	str	r0, [r4, #4]
 8006fd2:	6863      	ldr	r3, [r4, #4]
 8006fd4:	6123      	str	r3, [r4, #16]
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fdc:	e7aa      	b.n	8006f34 <_printf_i+0x14c>
 8006fde:	6923      	ldr	r3, [r4, #16]
 8006fe0:	462a      	mov	r2, r5
 8006fe2:	4649      	mov	r1, r9
 8006fe4:	4640      	mov	r0, r8
 8006fe6:	47d0      	blx	sl
 8006fe8:	3001      	adds	r0, #1
 8006fea:	d0ad      	beq.n	8006f48 <_printf_i+0x160>
 8006fec:	6823      	ldr	r3, [r4, #0]
 8006fee:	079b      	lsls	r3, r3, #30
 8006ff0:	d413      	bmi.n	800701a <_printf_i+0x232>
 8006ff2:	68e0      	ldr	r0, [r4, #12]
 8006ff4:	9b03      	ldr	r3, [sp, #12]
 8006ff6:	4298      	cmp	r0, r3
 8006ff8:	bfb8      	it	lt
 8006ffa:	4618      	movlt	r0, r3
 8006ffc:	e7a6      	b.n	8006f4c <_printf_i+0x164>
 8006ffe:	2301      	movs	r3, #1
 8007000:	4632      	mov	r2, r6
 8007002:	4649      	mov	r1, r9
 8007004:	4640      	mov	r0, r8
 8007006:	47d0      	blx	sl
 8007008:	3001      	adds	r0, #1
 800700a:	d09d      	beq.n	8006f48 <_printf_i+0x160>
 800700c:	3501      	adds	r5, #1
 800700e:	68e3      	ldr	r3, [r4, #12]
 8007010:	9903      	ldr	r1, [sp, #12]
 8007012:	1a5b      	subs	r3, r3, r1
 8007014:	42ab      	cmp	r3, r5
 8007016:	dcf2      	bgt.n	8006ffe <_printf_i+0x216>
 8007018:	e7eb      	b.n	8006ff2 <_printf_i+0x20a>
 800701a:	2500      	movs	r5, #0
 800701c:	f104 0619 	add.w	r6, r4, #25
 8007020:	e7f5      	b.n	800700e <_printf_i+0x226>
 8007022:	bf00      	nop
 8007024:	08007235 	.word	0x08007235
 8007028:	08007246 	.word	0x08007246

0800702c <memmove>:
 800702c:	4288      	cmp	r0, r1
 800702e:	b510      	push	{r4, lr}
 8007030:	eb01 0402 	add.w	r4, r1, r2
 8007034:	d902      	bls.n	800703c <memmove+0x10>
 8007036:	4284      	cmp	r4, r0
 8007038:	4623      	mov	r3, r4
 800703a:	d807      	bhi.n	800704c <memmove+0x20>
 800703c:	1e43      	subs	r3, r0, #1
 800703e:	42a1      	cmp	r1, r4
 8007040:	d008      	beq.n	8007054 <memmove+0x28>
 8007042:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007046:	f803 2f01 	strb.w	r2, [r3, #1]!
 800704a:	e7f8      	b.n	800703e <memmove+0x12>
 800704c:	4402      	add	r2, r0
 800704e:	4601      	mov	r1, r0
 8007050:	428a      	cmp	r2, r1
 8007052:	d100      	bne.n	8007056 <memmove+0x2a>
 8007054:	bd10      	pop	{r4, pc}
 8007056:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800705a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800705e:	e7f7      	b.n	8007050 <memmove+0x24>

08007060 <_sbrk_r>:
 8007060:	b538      	push	{r3, r4, r5, lr}
 8007062:	4d06      	ldr	r5, [pc, #24]	; (800707c <_sbrk_r+0x1c>)
 8007064:	2300      	movs	r3, #0
 8007066:	4604      	mov	r4, r0
 8007068:	4608      	mov	r0, r1
 800706a:	602b      	str	r3, [r5, #0]
 800706c:	f7fa fbd6 	bl	800181c <_sbrk>
 8007070:	1c43      	adds	r3, r0, #1
 8007072:	d102      	bne.n	800707a <_sbrk_r+0x1a>
 8007074:	682b      	ldr	r3, [r5, #0]
 8007076:	b103      	cbz	r3, 800707a <_sbrk_r+0x1a>
 8007078:	6023      	str	r3, [r4, #0]
 800707a:	bd38      	pop	{r3, r4, r5, pc}
 800707c:	200003cc 	.word	0x200003cc

08007080 <memcpy>:
 8007080:	440a      	add	r2, r1
 8007082:	4291      	cmp	r1, r2
 8007084:	f100 33ff 	add.w	r3, r0, #4294967295
 8007088:	d100      	bne.n	800708c <memcpy+0xc>
 800708a:	4770      	bx	lr
 800708c:	b510      	push	{r4, lr}
 800708e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007092:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007096:	4291      	cmp	r1, r2
 8007098:	d1f9      	bne.n	800708e <memcpy+0xe>
 800709a:	bd10      	pop	{r4, pc}

0800709c <_realloc_r>:
 800709c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070a0:	4680      	mov	r8, r0
 80070a2:	4614      	mov	r4, r2
 80070a4:	460e      	mov	r6, r1
 80070a6:	b921      	cbnz	r1, 80070b2 <_realloc_r+0x16>
 80070a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070ac:	4611      	mov	r1, r2
 80070ae:	f7ff bc49 	b.w	8006944 <_malloc_r>
 80070b2:	b92a      	cbnz	r2, 80070c0 <_realloc_r+0x24>
 80070b4:	f7ff fbda 	bl	800686c <_free_r>
 80070b8:	4625      	mov	r5, r4
 80070ba:	4628      	mov	r0, r5
 80070bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070c0:	f000 f81b 	bl	80070fa <_malloc_usable_size_r>
 80070c4:	4284      	cmp	r4, r0
 80070c6:	4607      	mov	r7, r0
 80070c8:	d802      	bhi.n	80070d0 <_realloc_r+0x34>
 80070ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80070ce:	d812      	bhi.n	80070f6 <_realloc_r+0x5a>
 80070d0:	4621      	mov	r1, r4
 80070d2:	4640      	mov	r0, r8
 80070d4:	f7ff fc36 	bl	8006944 <_malloc_r>
 80070d8:	4605      	mov	r5, r0
 80070da:	2800      	cmp	r0, #0
 80070dc:	d0ed      	beq.n	80070ba <_realloc_r+0x1e>
 80070de:	42bc      	cmp	r4, r7
 80070e0:	4622      	mov	r2, r4
 80070e2:	4631      	mov	r1, r6
 80070e4:	bf28      	it	cs
 80070e6:	463a      	movcs	r2, r7
 80070e8:	f7ff ffca 	bl	8007080 <memcpy>
 80070ec:	4631      	mov	r1, r6
 80070ee:	4640      	mov	r0, r8
 80070f0:	f7ff fbbc 	bl	800686c <_free_r>
 80070f4:	e7e1      	b.n	80070ba <_realloc_r+0x1e>
 80070f6:	4635      	mov	r5, r6
 80070f8:	e7df      	b.n	80070ba <_realloc_r+0x1e>

080070fa <_malloc_usable_size_r>:
 80070fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070fe:	1f18      	subs	r0, r3, #4
 8007100:	2b00      	cmp	r3, #0
 8007102:	bfbc      	itt	lt
 8007104:	580b      	ldrlt	r3, [r1, r0]
 8007106:	18c0      	addlt	r0, r0, r3
 8007108:	4770      	bx	lr
	...

0800710c <_init>:
 800710c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710e:	bf00      	nop
 8007110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007112:	bc08      	pop	{r3}
 8007114:	469e      	mov	lr, r3
 8007116:	4770      	bx	lr

08007118 <_fini>:
 8007118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800711a:	bf00      	nop
 800711c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800711e:	bc08      	pop	{r3}
 8007120:	469e      	mov	lr, r3
 8007122:	4770      	bx	lr
