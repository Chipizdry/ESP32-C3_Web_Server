
Client_TUYA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b100  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  0800b2a0  0800b2a0  0000c2a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b718  0800b718  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b718  0800b718  0000c718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b720  0800b720  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b720  0800b720  0000c720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b724  0800b724  0000c724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b728  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000468  200001d4  0800b8fc  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000063c  0800b8fc  0000d63c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ecb  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a4e  00000000  00000000  000210cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001278  00000000  00000000  00023b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e91  00000000  00000000  00024d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003bd5  00000000  00000000  00025c29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000173d0  00000000  00000000  000297fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a442f  00000000  00000000  00040bce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e4ffd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006050  00000000  00000000  000e5040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  000eb090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b288 	.word	0x0800b288

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	0800b288 	.word	0x0800b288

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <calcCRC16>:
// Глобальные буферы для приема и передачи
uint8_t rx_buffer[RX_BUFFER_SIZE];
uint8_t tx_buffer[TX_BUFFER_SIZE];


uint16_t calcCRC16(uint8_t *buffer, uint8_t u8length) {
 8000f48:	b480      	push	{r7}
 8000f4a:	b087      	sub	sp, #28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	460b      	mov	r3, r1
 8000f52:	70fb      	strb	r3, [r7, #3]
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
 8000f54:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f58:	617b      	str	r3, [r7, #20]
	for (unsigned char i = 0; i < u8length; i++) {
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	74fb      	strb	r3, [r7, #19]
 8000f5e:	e023      	b.n	8000fa8 <calcCRC16+0x60>
		temp = temp ^ buffer[i];
 8000f60:	7cfb      	ldrb	r3, [r7, #19]
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	4053      	eors	r3, r2
 8000f6e:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 8000f70:	2301      	movs	r3, #1
 8000f72:	74bb      	strb	r3, [r7, #18]
 8000f74:	e012      	b.n	8000f9c <calcCRC16+0x54>
			flag = temp & 0x0001;
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	60bb      	str	r3, [r7, #8]
			temp >>= 1;
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	085b      	lsrs	r3, r3, #1
 8000f82:	617b      	str	r3, [r7, #20]
			if (flag)
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d005      	beq.n	8000f96 <calcCRC16+0x4e>
				temp ^= 0xA001;
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	f483 4320 	eor.w	r3, r3, #40960	@ 0xa000
 8000f90:	f083 0301 	eor.w	r3, r3, #1
 8000f94:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 8000f96:	7cbb      	ldrb	r3, [r7, #18]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	74bb      	strb	r3, [r7, #18]
 8000f9c:	7cbb      	ldrb	r3, [r7, #18]
 8000f9e:	2b08      	cmp	r3, #8
 8000fa0:	d9e9      	bls.n	8000f76 <calcCRC16+0x2e>
	for (unsigned char i = 0; i < u8length; i++) {
 8000fa2:	7cfb      	ldrb	r3, [r7, #19]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	74fb      	strb	r3, [r7, #19]
 8000fa8:	7cfa      	ldrb	r2, [r7, #19]
 8000faa:	78fb      	ldrb	r3, [r7, #3]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d3d7      	bcc.n	8000f60 <calcCRC16+0x18>
		}
	}
	// Reverse byte order.
	temp2 = temp >> 8;
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	0a1b      	lsrs	r3, r3, #8
 8000fb4:	60fb      	str	r3, [r7, #12]
	temp = (temp << 8) | temp2;
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	021b      	lsls	r3, r3, #8
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	617b      	str	r3, [r7, #20]
	temp &= 0xFFFF;
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	617b      	str	r3, [r7, #20]
	// the returned value is already swapped
	// crcLo byte is first & crcHi byte is last
	return temp;
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	b29b      	uxth	r3, r3

}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	371c      	adds	r7, #28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
	...

08000fd8 <send_response>:

void send_response(uint8_t *payload, uint16_t payload_len, uint8_t command) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	807b      	strh	r3, [r7, #2]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	707b      	strb	r3, [r7, #1]
    uint8_t response[16]; // Массив для формирования пакета
    uint16_t pos = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	83fb      	strh	r3, [r7, #30]

    // Заголовок
    response[pos++] = HEADER_1;
 8000fec:	8bfb      	ldrh	r3, [r7, #30]
 8000fee:	1c5a      	adds	r2, r3, #1
 8000ff0:	83fa      	strh	r2, [r7, #30]
 8000ff2:	3320      	adds	r3, #32
 8000ff4:	443b      	add	r3, r7
 8000ff6:	2255      	movs	r2, #85	@ 0x55
 8000ff8:	f803 2c18 	strb.w	r2, [r3, #-24]
    response[pos++] = HEADER_2;
 8000ffc:	8bfb      	ldrh	r3, [r7, #30]
 8000ffe:	1c5a      	adds	r2, r3, #1
 8001000:	83fa      	strh	r2, [r7, #30]
 8001002:	3320      	adds	r3, #32
 8001004:	443b      	add	r3, r7
 8001006:	22aa      	movs	r2, #170	@ 0xaa
 8001008:	f803 2c18 	strb.w	r2, [r3, #-24]

    // Тип пакета: ответ
    response[pos++] = 0x01;
 800100c:	8bfb      	ldrh	r3, [r7, #30]
 800100e:	1c5a      	adds	r2, r3, #1
 8001010:	83fa      	strh	r2, [r7, #30]
 8001012:	3320      	adds	r3, #32
 8001014:	443b      	add	r3, r7
 8001016:	2201      	movs	r2, #1
 8001018:	f803 2c18 	strb.w	r2, [r3, #-24]

    // Команда (переданная в функцию)
    response[pos++] = command;
 800101c:	8bfb      	ldrh	r3, [r7, #30]
 800101e:	1c5a      	adds	r2, r3, #1
 8001020:	83fa      	strh	r2, [r7, #30]
 8001022:	3320      	adds	r3, #32
 8001024:	443b      	add	r3, r7
 8001026:	787a      	ldrb	r2, [r7, #1]
 8001028:	f803 2c18 	strb.w	r2, [r3, #-24]

    // Длина полезной нагрузки
    response[pos++] = (payload_len >> 8) & 0xFF;  // Старший байт длины
 800102c:	887b      	ldrh	r3, [r7, #2]
 800102e:	0a1b      	lsrs	r3, r3, #8
 8001030:	b29a      	uxth	r2, r3
 8001032:	8bfb      	ldrh	r3, [r7, #30]
 8001034:	1c59      	adds	r1, r3, #1
 8001036:	83f9      	strh	r1, [r7, #30]
 8001038:	b2d2      	uxtb	r2, r2
 800103a:	3320      	adds	r3, #32
 800103c:	443b      	add	r3, r7
 800103e:	f803 2c18 	strb.w	r2, [r3, #-24]
    response[pos++] = payload_len & 0xFF;          // Младший байт длины
 8001042:	8bfb      	ldrh	r3, [r7, #30]
 8001044:	1c5a      	adds	r2, r3, #1
 8001046:	83fa      	strh	r2, [r7, #30]
 8001048:	887a      	ldrh	r2, [r7, #2]
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	3320      	adds	r3, #32
 800104e:	443b      	add	r3, r7
 8001050:	f803 2c18 	strb.w	r2, [r3, #-24]

    // Копируем полезную нагрузку (payload) в массив ответа
    for (uint16_t i = 0; i < payload_len; i++) {
 8001054:	2300      	movs	r3, #0
 8001056:	83bb      	strh	r3, [r7, #28]
 8001058:	e00d      	b.n	8001076 <send_response+0x9e>
        response[pos++] = payload[i];
 800105a:	8bbb      	ldrh	r3, [r7, #28]
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	441a      	add	r2, r3
 8001060:	8bfb      	ldrh	r3, [r7, #30]
 8001062:	1c59      	adds	r1, r3, #1
 8001064:	83f9      	strh	r1, [r7, #30]
 8001066:	7812      	ldrb	r2, [r2, #0]
 8001068:	3320      	adds	r3, #32
 800106a:	443b      	add	r3, r7
 800106c:	f803 2c18 	strb.w	r2, [r3, #-24]
    for (uint16_t i = 0; i < payload_len; i++) {
 8001070:	8bbb      	ldrh	r3, [r7, #28]
 8001072:	3301      	adds	r3, #1
 8001074:	83bb      	strh	r3, [r7, #28]
 8001076:	8bba      	ldrh	r2, [r7, #28]
 8001078:	887b      	ldrh	r3, [r7, #2]
 800107a:	429a      	cmp	r2, r3
 800107c:	d3ed      	bcc.n	800105a <send_response+0x82>
    }

    // Вычисляем CRC для всех данных до CRC (без последних двух байт CRC)
    uint16_t crc = calcCRC16(response, pos);
 800107e:	8bfb      	ldrh	r3, [r7, #30]
 8001080:	b2da      	uxtb	r2, r3
 8001082:	f107 0308 	add.w	r3, r7, #8
 8001086:	4611      	mov	r1, r2
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ff5d 	bl	8000f48 <calcCRC16>
 800108e:	4603      	mov	r3, r0
 8001090:	837b      	strh	r3, [r7, #26]

    // Добавляем CRC в конец пакета
    response[pos++] = crc & 0xFF;         // Младший байт CRC
 8001092:	8bfb      	ldrh	r3, [r7, #30]
 8001094:	1c5a      	adds	r2, r3, #1
 8001096:	83fa      	strh	r2, [r7, #30]
 8001098:	8b7a      	ldrh	r2, [r7, #26]
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	3320      	adds	r3, #32
 800109e:	443b      	add	r3, r7
 80010a0:	f803 2c18 	strb.w	r2, [r3, #-24]
    response[pos++] = (crc >> 8) & 0xFF;  // Старший байт CRC
 80010a4:	8b7b      	ldrh	r3, [r7, #26]
 80010a6:	0a1b      	lsrs	r3, r3, #8
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	8bfb      	ldrh	r3, [r7, #30]
 80010ac:	1c59      	adds	r1, r3, #1
 80010ae:	83f9      	strh	r1, [r7, #30]
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	3320      	adds	r3, #32
 80010b4:	443b      	add	r3, r7
 80010b6:	f803 2c18 	strb.w	r2, [r3, #-24]
  //  response[pos++] = crc & 0xFF;         // Младший байт CRC

    // Отправляем сформированный пакет через UART
    HAL_UART_Transmit_DMA(&huart1, response, pos);
 80010ba:	8bfa      	ldrh	r2, [r7, #30]
 80010bc:	f107 0308 	add.w	r3, r7, #8
 80010c0:	4619      	mov	r1, r3
 80010c2:	4803      	ldr	r0, [pc, #12]	@ (80010d0 <send_response+0xf8>)
 80010c4:	f006 f8e2 	bl	800728c <HAL_UART_Transmit_DMA>
}
 80010c8:	bf00      	nop
 80010ca:	3720      	adds	r7, #32
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	200003a4 	.word	0x200003a4

080010d4 <process_received_data>:


// Функция для обработки полученных данных
void process_received_data(uint8_t *data, uint16_t length) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b096      	sub	sp, #88	@ 0x58
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	807b      	strh	r3, [r7, #2]

    // Минимальная длина пакета: заголовок (2 байта) + тип пакета (1 байт) + команда (1 байт) + длина данных (2 байта) + CRC (2 байта)
    if (length < 8) {
 80010e0:	887b      	ldrh	r3, [r7, #2]
 80010e2:	2b07      	cmp	r3, #7
 80010e4:	d805      	bhi.n	80010f2 <process_received_data+0x1e>
        // Пакет слишком короткий
    	 HAL_UARTEx_ReceiveToIdle_DMA(&huart1,rx_buffer, RX_BUFFER_SIZE);
 80010e6:	2220      	movs	r2, #32
 80010e8:	499f      	ldr	r1, [pc, #636]	@ (8001368 <process_received_data+0x294>)
 80010ea:	48a0      	ldr	r0, [pc, #640]	@ (800136c <process_received_data+0x298>)
 80010ec:	f006 f93e 	bl	800736c <HAL_UARTEx_ReceiveToIdle_DMA>

        return;
 80010f0:	e1b5      	b.n	800145e <process_received_data+0x38a>
    }

    // Проверяем заголовок
    if (data[0] != HEADER_1 || data[1] != HEADER_2) {
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b55      	cmp	r3, #85	@ 0x55
 80010f8:	d104      	bne.n	8001104 <process_received_data+0x30>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3301      	adds	r3, #1
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2baa      	cmp	r3, #170	@ 0xaa
 8001102:	d005      	beq.n	8001110 <process_received_data+0x3c>
        // Неверный заголовок
    	 HAL_UARTEx_ReceiveToIdle_DMA(&huart1,rx_buffer, RX_BUFFER_SIZE);
 8001104:	2220      	movs	r2, #32
 8001106:	4998      	ldr	r1, [pc, #608]	@ (8001368 <process_received_data+0x294>)
 8001108:	4898      	ldr	r0, [pc, #608]	@ (800136c <process_received_data+0x298>)
 800110a:	f006 f92f 	bl	800736c <HAL_UARTEx_ReceiveToIdle_DMA>

        return;
 800110e:	e1a6      	b.n	800145e <process_received_data+0x38a>
    }

    // Извлекаем тип пакета и команду
    uint8_t packet_type = data[2];
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	789b      	ldrb	r3, [r3, #2]
 8001114:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if(packet_type==0){
 8001118:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800111c:	2b00      	cmp	r3, #0
 800111e:	d12e      	bne.n	800117e <process_received_data+0xaa>

    	 // Если данные не обновлялись
if (update_data == 0) {
 8001120:	4b93      	ldr	r3, [pc, #588]	@ (8001370 <process_received_data+0x29c>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d122      	bne.n	800116e <process_received_data+0x9a>
// Отправляем ответ «пульс» (без полезной нагрузки)
		uint8_t heartbeat[6];
		heartbeat[0] = HEADER_1;
 8001128:	2355      	movs	r3, #85	@ 0x55
 800112a:	753b      	strb	r3, [r7, #20]
		heartbeat[1] = HEADER_2;
 800112c:	23aa      	movs	r3, #170	@ 0xaa
 800112e:	757b      	strb	r3, [r7, #21]
		heartbeat[2] = 0x01;  // Тип пакета: ответ
 8001130:	2301      	movs	r3, #1
 8001132:	75bb      	strb	r3, [r7, #22]
		heartbeat[3] = 0x00;  // Команда для "пульса" или пустого ответа
 8001134:	2300      	movs	r3, #0
 8001136:	75fb      	strb	r3, [r7, #23]
		// Отправляем ответ через UART
		uint16_t crc = calcCRC16(heartbeat, 4);
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	2104      	movs	r1, #4
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ff02 	bl	8000f48 <calcCRC16>
 8001144:	4603      	mov	r3, r0
 8001146:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
		heartbeat[4] = crc & 0xFF;
 800114a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800114e:	b2db      	uxtb	r3, r3
 8001150:	763b      	strb	r3, [r7, #24]
		heartbeat[5] = (crc >> 8) & 0xFF;
 8001152:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8001156:	0a1b      	lsrs	r3, r3, #8
 8001158:	b29b      	uxth	r3, r3
 800115a:	b2db      	uxtb	r3, r3
 800115c:	767b      	strb	r3, [r7, #25]
		HAL_UART_Transmit_DMA(&huart1, heartbeat, 6);  // Передаем пакет
 800115e:	f107 0314 	add.w	r3, r7, #20
 8001162:	2206      	movs	r2, #6
 8001164:	4619      	mov	r1, r3
 8001166:	4881      	ldr	r0, [pc, #516]	@ (800136c <process_received_data+0x298>)
 8001168:	f006 f890 	bl	800728c <HAL_UART_Transmit_DMA>
 800116c:	e007      	b.n	800117e <process_received_data+0xaa>
}

			// Если данные обновились
    	        else if (update_data == 1) {
 800116e:	4b80      	ldr	r3, [pc, #512]	@ (8001370 <process_received_data+0x29c>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d103      	bne.n	800117e <process_received_data+0xaa>
    	       // Отправляем новые данные
    	           // send_updated_data();
    	            update_data = 0;  // Сбрасываем флаг обновления после отправки
 8001176:	4b7e      	ldr	r3, [pc, #504]	@ (8001370 <process_received_data+0x29c>)
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
    	            return;
 800117c:	e16f      	b.n	800145e <process_received_data+0x38a>
    	           }

    }
    uint8_t command = data[3];
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	78db      	ldrb	r3, [r3, #3]
 8001182:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    cmd_in=data[3];
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	78da      	ldrb	r2, [r3, #3]
 800118a:	4b7a      	ldr	r3, [pc, #488]	@ (8001374 <process_received_data+0x2a0>)
 800118c:	701a      	strb	r2, [r3, #0]
    // Извлекаем длину полезной нагрузки
    uint16_t payload_len = (data[4] << 8) | data[5];
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3304      	adds	r3, #4
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	021b      	lsls	r3, r3, #8
 8001196:	b21a      	sxth	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3305      	adds	r3, #5
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	b21b      	sxth	r3, r3
 80011a0:	4313      	orrs	r3, r2
 80011a2:	b21b      	sxth	r3, r3
 80011a4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

    // Проверяем корректность длины пакета
    if ((payload_len + 8) != length) {
 80011a8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80011ac:	f103 0208 	add.w	r2, r3, #8
 80011b0:	887b      	ldrh	r3, [r7, #2]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d005      	beq.n	80011c2 <process_received_data+0xee>
        // Неверная длина пакета
    	HAL_UARTEx_ReceiveToIdle_DMA(&huart1,rx_buffer, RX_BUFFER_SIZE);
 80011b6:	2220      	movs	r2, #32
 80011b8:	496b      	ldr	r1, [pc, #428]	@ (8001368 <process_received_data+0x294>)
 80011ba:	486c      	ldr	r0, [pc, #432]	@ (800136c <process_received_data+0x298>)
 80011bc:	f006 f8d6 	bl	800736c <HAL_UARTEx_ReceiveToIdle_DMA>

        return;
 80011c0:	e14d      	b.n	800145e <process_received_data+0x38a>
    }

    // Проверяем CRC
    uint16_t crc_received = (data[length - 1] << 8) | data[length - 2];
 80011c2:	887b      	ldrh	r3, [r7, #2]
 80011c4:	3b01      	subs	r3, #1
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	021b      	lsls	r3, r3, #8
 80011ce:	b21a      	sxth	r2, r3
 80011d0:	887b      	ldrh	r3, [r7, #2]
 80011d2:	3b02      	subs	r3, #2
 80011d4:	6879      	ldr	r1, [r7, #4]
 80011d6:	440b      	add	r3, r1
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	b21b      	sxth	r3, r3
 80011dc:	4313      	orrs	r3, r2
 80011de:	b21b      	sxth	r3, r3
 80011e0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    uint16_t crc_calculated = calcCRC16(data, length - 2);
 80011e4:	887b      	ldrh	r3, [r7, #2]
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	3b02      	subs	r3, #2
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	4619      	mov	r1, r3
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff feaa 	bl	8000f48 <calcCRC16>
 80011f4:	4603      	mov	r3, r0
 80011f6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    if (crc_received != crc_calculated) {
 80011fa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80011fe:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001202:	429a      	cmp	r2, r3
 8001204:	d005      	beq.n	8001212 <process_received_data+0x13e>
        // Неверный CRC
    	HAL_UARTEx_ReceiveToIdle_DMA(&huart1,rx_buffer, RX_BUFFER_SIZE);
 8001206:	2220      	movs	r2, #32
 8001208:	4957      	ldr	r1, [pc, #348]	@ (8001368 <process_received_data+0x294>)
 800120a:	4858      	ldr	r0, [pc, #352]	@ (800136c <process_received_data+0x298>)
 800120c:	f006 f8ae 	bl	800736c <HAL_UARTEx_ReceiveToIdle_DMA>


        return;
 8001210:	e125      	b.n	800145e <process_received_data+0x38a>
    }

    // Извлекаем полезную нагрузку
    uint8_t *payload = &data[6];
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3306      	adds	r3, #6
 8001216:	64bb      	str	r3, [r7, #72]	@ 0x48

    // Обрабатываем команду
    switch (command) {
 8001218:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800121c:	2b03      	cmp	r3, #3
 800121e:	d003      	beq.n	8001228 <process_received_data+0x154>
 8001220:	2b04      	cmp	r3, #4
 8001222:	f000 80ab 	beq.w	800137c <process_received_data+0x2a8>
 8001226:	e111      	b.n	800144c <process_received_data+0x378>
        case 0x03: // Параметры батареи
                if (payload_len == 6) {
 8001228:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800122c:	2b06      	cmp	r3, #6
 800122e:	f040 8113 	bne.w	8001458 <process_received_data+0x384>
                uint16_t lowThreshold = (payload[0] << 8) | payload[1];
 8001232:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	021b      	lsls	r3, r3, #8
 8001238:	b21a      	sxth	r2, r3
 800123a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800123c:	3301      	adds	r3, #1
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b21b      	sxth	r3, r3
 8001242:	4313      	orrs	r3, r2
 8001244:	b21b      	sxth	r3, r3
 8001246:	867b      	strh	r3, [r7, #50]	@ 0x32
                uint16_t highThreshold = (payload[2] << 8) | payload[3];
 8001248:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800124a:	3302      	adds	r3, #2
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	021b      	lsls	r3, r3, #8
 8001250:	b21a      	sxth	r2, r3
 8001252:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001254:	3303      	adds	r3, #3
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	b21b      	sxth	r3, r3
 800125a:	4313      	orrs	r3, r2
 800125c:	b21b      	sxth	r3, r3
 800125e:	863b      	strh	r3, [r7, #48]	@ 0x30
                uint16_t maxCurrentRange = (payload[4] << 8) | payload[5];
 8001260:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001262:	3304      	adds	r3, #4
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	021b      	lsls	r3, r3, #8
 8001268:	b21a      	sxth	r2, r3
 800126a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800126c:	3305      	adds	r3, #5
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	b21b      	sxth	r3, r3
 8001272:	4313      	orrs	r3, r2
 8001274:	b21b      	sxth	r3, r3
 8001276:	85fb      	strh	r3, [r7, #46]	@ 0x2e

                // Преобразуем значения обратно в float
                float low = lowThreshold / 10.0;
 8001278:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff f95a 	bl	8000534 <__aeabi_i2d>
 8001280:	f04f 0200 	mov.w	r2, #0
 8001284:	4b3c      	ldr	r3, [pc, #240]	@ (8001378 <process_received_data+0x2a4>)
 8001286:	f7ff fae9 	bl	800085c <__aeabi_ddiv>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4610      	mov	r0, r2
 8001290:	4619      	mov	r1, r3
 8001292:	f7ff fc91 	bl	8000bb8 <__aeabi_d2f>
 8001296:	4603      	mov	r3, r0
 8001298:	62bb      	str	r3, [r7, #40]	@ 0x28
                float high = highThreshold / 10.0;
 800129a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff f949 	bl	8000534 <__aeabi_i2d>
 80012a2:	f04f 0200 	mov.w	r2, #0
 80012a6:	4b34      	ldr	r3, [pc, #208]	@ (8001378 <process_received_data+0x2a4>)
 80012a8:	f7ff fad8 	bl	800085c <__aeabi_ddiv>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	4610      	mov	r0, r2
 80012b2:	4619      	mov	r1, r3
 80012b4:	f7ff fc80 	bl	8000bb8 <__aeabi_d2f>
 80012b8:	4603      	mov	r3, r0
 80012ba:	627b      	str	r3, [r7, #36]	@ 0x24
                float maxCurrent = maxCurrentRange / 10.0;
 80012bc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff f938 	bl	8000534 <__aeabi_i2d>
 80012c4:	f04f 0200 	mov.w	r2, #0
 80012c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001378 <process_received_data+0x2a4>)
 80012ca:	f7ff fac7 	bl	800085c <__aeabi_ddiv>
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	4610      	mov	r0, r2
 80012d4:	4619      	mov	r1, r3
 80012d6:	f7ff fc6f 	bl	8000bb8 <__aeabi_d2f>
 80012da:	4603      	mov	r3, r0
 80012dc:	623b      	str	r3, [r7, #32]

                // Кодируем параметры в uint16_t с точностью до 0.1
                         uint16_t load_value = (uint16_t)(low * 10);
 80012de:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80012e2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80012e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012ee:	ee17 3a90 	vmov	r3, s15
 80012f2:	83fb      	strh	r3, [r7, #30]
                         uint16_t voltage_value = (uint16_t)(high * 10);
 80012f4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80012f8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80012fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001300:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001304:	ee17 3a90 	vmov	r3, s15
 8001308:	83bb      	strh	r3, [r7, #28]
                         uint16_t current_diff_value = (uint16_t)(maxCurrent * 10);
 800130a:	edd7 7a08 	vldr	s15, [r7, #32]
 800130e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001312:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001316:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800131a:	ee17 3a90 	vmov	r3, s15
 800131e:	837b      	strh	r3, [r7, #26]

                         uint8_t load[6]={0, };
 8001320:	2300      	movs	r3, #0
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	2300      	movs	r3, #0
 8001326:	823b      	strh	r3, [r7, #16]
                         // Заполняем payload данными
                         load[0] = (load_value >> 8) & 0xFF;      // Старший байт maxLoad
 8001328:	8bfb      	ldrh	r3, [r7, #30]
 800132a:	0a1b      	lsrs	r3, r3, #8
 800132c:	b29b      	uxth	r3, r3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	733b      	strb	r3, [r7, #12]
                         load[1] = load_value & 0xFF;             // Младший байт maxLoad
 8001332:	8bfb      	ldrh	r3, [r7, #30]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	737b      	strb	r3, [r7, #13]
                         load[2] = (voltage_value >> 8) & 0xFF;   // Старший байт outputVoltage
 8001338:	8bbb      	ldrh	r3, [r7, #28]
 800133a:	0a1b      	lsrs	r3, r3, #8
 800133c:	b29b      	uxth	r3, r3
 800133e:	b2db      	uxtb	r3, r3
 8001340:	73bb      	strb	r3, [r7, #14]
                         load[3] = voltage_value & 0xFF;          // Младший байт outputVoltage
 8001342:	8bbb      	ldrh	r3, [r7, #28]
 8001344:	b2db      	uxtb	r3, r3
 8001346:	73fb      	strb	r3, [r7, #15]
                         load[4] = (current_diff_value >> 8) & 0xFF;  // Старший байт maxCurrentDifference
 8001348:	8b7b      	ldrh	r3, [r7, #26]
 800134a:	0a1b      	lsrs	r3, r3, #8
 800134c:	b29b      	uxth	r3, r3
 800134e:	b2db      	uxtb	r3, r3
 8001350:	743b      	strb	r3, [r7, #16]
                         load[5] = current_diff_value & 0xFF;         // Младший байт maxCurrentDifference
 8001352:	8b7b      	ldrh	r3, [r7, #26]
 8001354:	b2db      	uxtb	r3, r3
 8001356:	747b      	strb	r3, [r7, #17]


                send_response(load, 6, 0x05);
 8001358:	f107 030c 	add.w	r3, r7, #12
 800135c:	2205      	movs	r2, #5
 800135e:	2106      	movs	r1, #6
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff fe39 	bl	8000fd8 <send_response>
               // printf("Battery settings - Low: %.2f, High: %.2f, Max Current: %.2f\n", low, high, maxCurrent);
               }
            break;
 8001366:	e077      	b.n	8001458 <process_received_data+0x384>
 8001368:	200001f0 	.word	0x200001f0
 800136c:	200003a4 	.word	0x200003a4
 8001370:	200004e4 	.word	0x200004e4
 8001374:	200004e5 	.word	0x200004e5
 8001378:	40240000 	.word	0x40240000

        case 0x04: // Параметры нагрузки
                if (payload_len == 6) {
 800137c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001380:	2b06      	cmp	r3, #6
 8001382:	d16b      	bne.n	800145c <process_received_data+0x388>
                uint16_t maxLoad = (payload[0] << 8) | payload[1];
 8001384:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	021b      	lsls	r3, r3, #8
 800138a:	b21a      	sxth	r2, r3
 800138c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800138e:	3301      	adds	r3, #1
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	b21b      	sxth	r3, r3
 8001394:	4313      	orrs	r3, r2
 8001396:	b21b      	sxth	r3, r3
 8001398:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                uint16_t outputVoltage = (payload[2] << 8) | payload[3];
 800139c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800139e:	3302      	adds	r3, #2
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	021b      	lsls	r3, r3, #8
 80013a4:	b21a      	sxth	r2, r3
 80013a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80013a8:	3303      	adds	r3, #3
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	b21b      	sxth	r3, r3
 80013ae:	4313      	orrs	r3, r2
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
                uint16_t maxCurrentDifference = (payload[4] << 8) | payload[5];
 80013b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80013b8:	3304      	adds	r3, #4
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	021b      	lsls	r3, r3, #8
 80013be:	b21a      	sxth	r2, r3
 80013c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80013c2:	3305      	adds	r3, #5
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	b21b      	sxth	r3, r3
 80013c8:	4313      	orrs	r3, r2
 80013ca:	b21b      	sxth	r3, r3
 80013cc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

                // Преобразуем значения обратно в float
                float load = maxLoad / 10.0;
 80013d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff f8ad 	bl	8000534 <__aeabi_i2d>
 80013da:	f04f 0200 	mov.w	r2, #0
 80013de:	4b21      	ldr	r3, [pc, #132]	@ (8001464 <process_received_data+0x390>)
 80013e0:	f7ff fa3c 	bl	800085c <__aeabi_ddiv>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	4610      	mov	r0, r2
 80013ea:	4619      	mov	r1, r3
 80013ec:	f7ff fbe4 	bl	8000bb8 <__aeabi_d2f>
 80013f0:	4603      	mov	r3, r0
 80013f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
                float voltage = outputVoltage / 10.0;
 80013f4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff f89b 	bl	8000534 <__aeabi_i2d>
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	4b18      	ldr	r3, [pc, #96]	@ (8001464 <process_received_data+0x390>)
 8001404:	f7ff fa2a 	bl	800085c <__aeabi_ddiv>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	4610      	mov	r0, r2
 800140e:	4619      	mov	r1, r3
 8001410:	f7ff fbd2 	bl	8000bb8 <__aeabi_d2f>
 8001414:	4603      	mov	r3, r0
 8001416:	63bb      	str	r3, [r7, #56]	@ 0x38
                float currentDiff = maxCurrentDifference / 10.0;
 8001418:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff f889 	bl	8000534 <__aeabi_i2d>
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	4b0f      	ldr	r3, [pc, #60]	@ (8001464 <process_received_data+0x390>)
 8001428:	f7ff fa18 	bl	800085c <__aeabi_ddiv>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4610      	mov	r0, r2
 8001432:	4619      	mov	r1, r3
 8001434:	f7ff fbc0 	bl	8000bb8 <__aeabi_d2f>
 8001438:	4603      	mov	r3, r0
 800143a:	637b      	str	r3, [r7, #52]	@ 0x34

                // Сохраняем в переменные или используем
                // Пример: отображение значений
                send_response(*payload, 6, 0x05);
 800143c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2205      	movs	r2, #5
 8001442:	2106      	movs	r1, #6
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff fdc7 	bl	8000fd8 <send_response>
              //  printf("Load settings - Max Load: %.2f, Output Voltage: %.2f, Max Current Difference: %.2f\n", load, voltage, currentDiff);
                }
              break;
 800144a:	e007      	b.n	800145c <process_received_data+0x388>

        default:
            // Обработка других команд
        	HAL_UARTEx_ReceiveToIdle_DMA(&huart1,rx_buffer, RX_BUFFER_SIZE);
 800144c:	2220      	movs	r2, #32
 800144e:	4906      	ldr	r1, [pc, #24]	@ (8001468 <process_received_data+0x394>)
 8001450:	4806      	ldr	r0, [pc, #24]	@ (800146c <process_received_data+0x398>)
 8001452:	f005 ff8b 	bl	800736c <HAL_UARTEx_ReceiveToIdle_DMA>

            break;
 8001456:	e002      	b.n	800145e <process_received_data+0x38a>
            break;
 8001458:	bf00      	nop
 800145a:	e000      	b.n	800145e <process_received_data+0x38a>
              break;
 800145c:	bf00      	nop
    }
}
 800145e:	3758      	adds	r7, #88	@ 0x58
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40240000 	.word	0x40240000
 8001468:	200001f0 	.word	0x200001f0
 800146c:	200003a4 	.word	0x200003a4

08001470 <HAL_UART_TxCpltCallback>:

// Колбэк завершения передачи данных по DMA
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
    if (huart == &huart1) {
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a09      	ldr	r2, [pc, #36]	@ (80014a0 <HAL_UART_TxCpltCallback+0x30>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d10a      	bne.n	8001496 <HAL_UART_TxCpltCallback+0x26>
        // Запускаем прием данных через DMA
        // Включаем прерывание по IDLE для отслеживания завершения приема данных
        HAL_UARTEx_ReceiveToIdle_DMA(&huart1,rx_buffer, RX_BUFFER_SIZE);
 8001480:	2220      	movs	r2, #32
 8001482:	4908      	ldr	r1, [pc, #32]	@ (80014a4 <HAL_UART_TxCpltCallback+0x34>)
 8001484:	4806      	ldr	r0, [pc, #24]	@ (80014a0 <HAL_UART_TxCpltCallback+0x30>)
 8001486:	f005 ff71 	bl	800736c <HAL_UARTEx_ReceiveToIdle_DMA>

        LED_1_OFF;
 800148a:	2201      	movs	r2, #1
 800148c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001490:	4805      	ldr	r0, [pc, #20]	@ (80014a8 <HAL_UART_TxCpltCallback+0x38>)
 8001492:	f002 fe6f 	bl	8004174 <HAL_GPIO_WritePin>
    }
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	200003a4 	.word	0x200003a4
 80014a4:	200001f0 	.word	0x200001f0
 80014a8:	40020800 	.word	0x40020800

080014ac <I2C_send>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void I2C_send(uint8_t data, uint8_t flags)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af02      	add	r7, sp, #8
 80014b2:	4603      	mov	r3, r0
 80014b4:	460a      	mov	r2, r1
 80014b6:	71fb      	strb	r3, [r7, #7]
 80014b8:	4613      	mov	r3, r2
 80014ba:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef res;
	    for(;;) {                                                                     // бесконечный цикл
	        res = HAL_I2C_IsDeviceReady(&hi2c1, LCD_ADDR, 1, HAL_MAX_DELAY);          // проверяем, готово ли устройство по адресу lcd_addr для связи
 80014bc:	f04f 33ff 	mov.w	r3, #4294967295
 80014c0:	2201      	movs	r2, #1
 80014c2:	214e      	movs	r1, #78	@ 0x4e
 80014c4:	4820      	ldr	r0, [pc, #128]	@ (8001548 <I2C_send+0x9c>)
 80014c6:	f003 f8d5 	bl	8004674 <HAL_I2C_IsDeviceReady>
 80014ca:	4603      	mov	r3, r0
 80014cc:	73fb      	strb	r3, [r7, #15]
	        if(res == HAL_OK) break;                                                  // если да, то выходим из бесконечного цикла
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d000      	beq.n	80014d6 <I2C_send+0x2a>
	        res = HAL_I2C_IsDeviceReady(&hi2c1, LCD_ADDR, 1, HAL_MAX_DELAY);          // проверяем, готово ли устройство по адресу lcd_addr для связи
 80014d4:	e7f2      	b.n	80014bc <I2C_send+0x10>
	        if(res == HAL_OK) break;                                                  // если да, то выходим из бесконечного цикла
 80014d6:	bf00      	nop
	    }

	uint8_t up = data & 0xF0;                 // операция �? с 1111 0000, приводит к обнулению последних бит с 0 по 3, остаются биты с 4 по 7
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	f023 030f 	bic.w	r3, r3, #15
 80014de:	73bb      	strb	r3, [r7, #14]
	uint8_t lo = (data << 4) & 0xF0;          // тоже самое, но data сдвигается на 4 бита влево, т.е. в этой
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	011b      	lsls	r3, r3, #4
 80014e4:	737b      	strb	r3, [r7, #13]
	                                           // переменной остаются  биты с 0 по 3
	uint8_t data_arr[4];
	data_arr[0] = up|flags|BACKLIGHT|PIN_EN;  // 4-7 биты содержат информацию, биты 0-3 конфигурируют работу
 80014e6:	7bba      	ldrb	r2, [r7, #14]
 80014e8:	79bb      	ldrb	r3, [r7, #6]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	f043 030c 	orr.w	r3, r3, #12
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	723b      	strb	r3, [r7, #8]
	data_arr[1] = up|flags|BACKLIGHT;         // ублирование сигнала, на выводе Е в этот раз 0
 80014f6:	7bba      	ldrb	r2, [r7, #14]
 80014f8:	79bb      	ldrb	r3, [r7, #6]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	f043 0308 	orr.w	r3, r3, #8
 8001502:	b2db      	uxtb	r3, r3
 8001504:	727b      	strb	r3, [r7, #9]
	data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 8001506:	7b7a      	ldrb	r2, [r7, #13]
 8001508:	79bb      	ldrb	r3, [r7, #6]
 800150a:	4313      	orrs	r3, r2
 800150c:	b2db      	uxtb	r3, r3
 800150e:	f043 030c 	orr.w	r3, r3, #12
 8001512:	b2db      	uxtb	r3, r3
 8001514:	72bb      	strb	r3, [r7, #10]
	data_arr[3] = lo|flags|BACKLIGHT;
 8001516:	7b7a      	ldrb	r2, [r7, #13]
 8001518:	79bb      	ldrb	r3, [r7, #6]
 800151a:	4313      	orrs	r3, r2
 800151c:	b2db      	uxtb	r3, r3
 800151e:	f043 0308 	orr.w	r3, r3, #8
 8001522:	b2db      	uxtb	r3, r3
 8001524:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 8001526:	f107 0208 	add.w	r2, r7, #8
 800152a:	f04f 33ff 	mov.w	r3, #4294967295
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	2304      	movs	r3, #4
 8001532:	214e      	movs	r1, #78	@ 0x4e
 8001534:	4804      	ldr	r0, [pc, #16]	@ (8001548 <I2C_send+0x9c>)
 8001536:	f002 ff9f 	bl	8004478 <HAL_I2C_Master_Transmit>
	HAL_Delay(LCD_DELAY_MS);
 800153a:	2005      	movs	r0, #5
 800153c:	f001 fb64 	bl	8002c08 <HAL_Delay>
}
 8001540:	bf00      	nop
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000258 	.word	0x20000258

0800154c <LCD_SendString>:


void LCD_SendString(char *str)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]

	while(*str) {                                   // пока строчка не закончится
 8001554:	e008      	b.n	8001568 <LCD_SendString+0x1c>
		I2C_send((uint8_t)(*str), 1);               // передача первого символа строки
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2101      	movs	r1, #1
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ffa5 	bl	80014ac <I2C_send>
        str++;                                      // сдвиг строки налево на 1 символ
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	3301      	adds	r3, #1
 8001566:	607b      	str	r3, [r7, #4]
	while(*str) {                                   // пока строчка не закончится
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1f2      	bne.n	8001556 <LCD_SendString+0xa>
    }
}
 8001570:	bf00      	nop
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800157c:	b5b0      	push	{r4, r5, r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001582:	f001 facf 	bl	8002b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001586:	f000 faa7 	bl	8001ad8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800158a:	f000 fdd3 	bl	8002134 <MX_GPIO_Init>
  MX_DMA_Init();
 800158e:	f000 fda9 	bl	80020e4 <MX_DMA_Init>
  MX_I2C1_Init();
 8001592:	f000 fb5f 	bl	8001c54 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001596:	f000 fd7b 	bl	8002090 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800159a:	f000 fbe3 	bl	8001d64 <MX_TIM1_Init>
  MX_RTC_Init();
 800159e:	f000 fb87 	bl	8001cb0 <MX_RTC_Init>
  MX_ADC1_Init();
 80015a2:	f000 fb05 	bl	8001bb0 <MX_ADC1_Init>
  MX_TIM2_Init();
 80015a6:	f000 fc7f 	bl	8001ea8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80015aa:	f000 fcfb 	bl	8001fa4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  LED_1_ON;
 80015ae:	2200      	movs	r2, #0
 80015b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015b4:	48ae      	ldr	r0, [pc, #696]	@ (8001870 <main+0x2f4>)
 80015b6:	f002 fddd 	bl	8004174 <HAL_GPIO_WritePin>
   I2C_send(0b00110000,0);   // 8ми битный интерфейс
 80015ba:	2100      	movs	r1, #0
 80015bc:	2030      	movs	r0, #48	@ 0x30
 80015be:	f7ff ff75 	bl	80014ac <I2C_send>
   I2C_send(0b00000010,0);   // установка курсора в начале строки
 80015c2:	2100      	movs	r1, #0
 80015c4:	2002      	movs	r0, #2
 80015c6:	f7ff ff71 	bl	80014ac <I2C_send>
   I2C_send(0b00001100,0);   // нормальный режим работы
 80015ca:	2100      	movs	r1, #0
 80015cc:	200c      	movs	r0, #12
 80015ce:	f7ff ff6d 	bl	80014ac <I2C_send>
   I2C_send(0b00000001,0);   // очистка дисплея
 80015d2:	2100      	movs	r1, #0
 80015d4:	2001      	movs	r0, #1
 80015d6:	f7ff ff69 	bl	80014ac <I2C_send>
   //  LCD_SendString("  Hello ");
   //  I2C_send(0b11000000,0);   // переход на 2 строку

   //  I2C_send(0b10010100,0);   // переход на 3 строку

     I2C_send(0b11010100,0);   // переход на 4 строку
 80015da:	2100      	movs	r1, #0
 80015dc:	20d4      	movs	r0, #212	@ 0xd4
 80015de:	f7ff ff65 	bl	80014ac <I2C_send>
     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80015e2:	2100      	movs	r1, #0
 80015e4:	48a3      	ldr	r0, [pc, #652]	@ (8001874 <main+0x2f8>)
 80015e6:	f004 fbff 	bl	8005de8 <HAL_TIM_PWM_Start>
     void HAL_UART_IDLECallback(UART_HandleTypeDef *huart);
     // Запускаем прием по DMA с буфером для приема данных
     HAL_UARTEx_ReceiveToIdle_DMA(&huart1,rx_buffer, RX_BUFFER_SIZE);
 80015ea:	2220      	movs	r2, #32
 80015ec:	49a2      	ldr	r1, [pc, #648]	@ (8001878 <main+0x2fc>)
 80015ee:	48a3      	ldr	r0, [pc, #652]	@ (800187c <main+0x300>)
 80015f0:	f005 febc 	bl	800736c <HAL_UARTEx_ReceiveToIdle_DMA>
           __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80015f4:	4ba2      	ldr	r3, [pc, #648]	@ (8001880 <main+0x304>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	4ba1      	ldr	r3, [pc, #644]	@ (8001880 <main+0x304>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f022 0208 	bic.w	r2, r2, #8
 8001602:	601a      	str	r2, [r3, #0]



     LED_1_OFF;
 8001604:	2201      	movs	r2, #1
 8001606:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800160a:	4899      	ldr	r0, [pc, #612]	@ (8001870 <main+0x2f4>)
 800160c:	f002 fdb2 	bl	8004174 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)==0)&&(flag==0)){
 8001610:	2110      	movs	r1, #16
 8001612:	489c      	ldr	r0, [pc, #624]	@ (8001884 <main+0x308>)
 8001614:	f002 fd96 	bl	8004144 <HAL_GPIO_ReadPin>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d11c      	bne.n	8001658 <main+0xdc>
 800161e:	4b9a      	ldr	r3, [pc, #616]	@ (8001888 <main+0x30c>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d118      	bne.n	8001658 <main+0xdc>
		  regim++;
 8001626:	4b99      	ldr	r3, [pc, #612]	@ (800188c <main+0x310>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	3301      	adds	r3, #1
 800162c:	b2da      	uxtb	r2, r3
 800162e:	4b97      	ldr	r3, [pc, #604]	@ (800188c <main+0x310>)
 8001630:	701a      	strb	r2, [r3, #0]
		  flag=1;
 8001632:	4b95      	ldr	r3, [pc, #596]	@ (8001888 <main+0x30c>)
 8001634:	2201      	movs	r2, #1
 8001636:	701a      	strb	r2, [r3, #0]
		  arm=0;
 8001638:	4b95      	ldr	r3, [pc, #596]	@ (8001890 <main+0x314>)
 800163a:	2200      	movs	r2, #0
 800163c:	701a      	strb	r2, [r3, #0]
		  run=0;
 800163e:	4b95      	ldr	r3, [pc, #596]	@ (8001894 <main+0x318>)
 8001640:	2200      	movs	r2, #0
 8001642:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(150);
 8001644:	2096      	movs	r0, #150	@ 0x96
 8001646:	f001 fadf 	bl	8002c08 <HAL_Delay>
		  if(regim>3){regim=1;}
 800164a:	4b90      	ldr	r3, [pc, #576]	@ (800188c <main+0x310>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b03      	cmp	r3, #3
 8001650:	d902      	bls.n	8001658 <main+0xdc>
 8001652:	4b8e      	ldr	r3, [pc, #568]	@ (800188c <main+0x310>)
 8001654:	2201      	movs	r2, #1
 8001656:	701a      	strb	r2, [r3, #0]
         }


	  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)==1)&&(flag==1)){
 8001658:	2110      	movs	r1, #16
 800165a:	488a      	ldr	r0, [pc, #552]	@ (8001884 <main+0x308>)
 800165c:	f002 fd72 	bl	8004144 <HAL_GPIO_ReadPin>
 8001660:	4603      	mov	r3, r0
 8001662:	2b01      	cmp	r3, #1
 8001664:	d109      	bne.n	800167a <main+0xfe>
 8001666:	4b88      	ldr	r3, [pc, #544]	@ (8001888 <main+0x30c>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d105      	bne.n	800167a <main+0xfe>

		  flag=0;
 800166e:	4b86      	ldr	r3, [pc, #536]	@ (8001888 <main+0x30c>)
 8001670:	2200      	movs	r2, #0
 8001672:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(150);
 8001674:	2096      	movs	r0, #150	@ 0x96
 8001676:	f001 fac7 	bl	8002c08 <HAL_Delay>

	  }

	  sprintf(time_buffer,"%04d-%02d-%02d  %02d:%02d:%02d",year, month, date,hour, minute, second);
 800167a:	4b87      	ldr	r3, [pc, #540]	@ (8001898 <main+0x31c>)
 800167c:	881b      	ldrh	r3, [r3, #0]
 800167e:	461c      	mov	r4, r3
 8001680:	4b86      	ldr	r3, [pc, #536]	@ (800189c <main+0x320>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	461d      	mov	r5, r3
 8001686:	4b86      	ldr	r3, [pc, #536]	@ (80018a0 <main+0x324>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	461a      	mov	r2, r3
 800168c:	4b85      	ldr	r3, [pc, #532]	@ (80018a4 <main+0x328>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	4619      	mov	r1, r3
 8001692:	4b85      	ldr	r3, [pc, #532]	@ (80018a8 <main+0x32c>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	4b84      	ldr	r3, [pc, #528]	@ (80018ac <main+0x330>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	9303      	str	r3, [sp, #12]
 800169e:	9002      	str	r0, [sp, #8]
 80016a0:	9101      	str	r1, [sp, #4]
 80016a2:	9200      	str	r2, [sp, #0]
 80016a4:	462b      	mov	r3, r5
 80016a6:	4622      	mov	r2, r4
 80016a8:	4981      	ldr	r1, [pc, #516]	@ (80018b0 <main+0x334>)
 80016aa:	4882      	ldr	r0, [pc, #520]	@ (80018b4 <main+0x338>)
 80016ac:	f007 fcbe 	bl	800902c <siprintf>
	  	  		//I2C_send(0b00000001,0);   // очистка дисплея
	  	  	    I2C_send(0b11010100,0);   // переход на 4 строку
 80016b0:	2100      	movs	r1, #0
 80016b2:	20d4      	movs	r0, #212	@ 0xd4
 80016b4:	f7ff fefa 	bl	80014ac <I2C_send>
	  	  		LCD_SendString(time_buffer);
 80016b8:	487e      	ldr	r0, [pc, #504]	@ (80018b4 <main+0x338>)
 80016ba:	f7ff ff47 	bl	800154c <LCD_SendString>




	  if(regim==1){
 80016be:	4b73      	ldr	r3, [pc, #460]	@ (800188c <main+0x310>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	f040 8117 	bne.w	80018f6 <main+0x37a>
		  I2C_send(0b10000000,0);   // переход на 1 строку
 80016c8:	2100      	movs	r1, #0
 80016ca:	2080      	movs	r0, #128	@ 0x80
 80016cc:	f7ff feee 	bl	80014ac <I2C_send>
		  LCD_SendString("RUN MODE-           ");
 80016d0:	4879      	ldr	r0, [pc, #484]	@ (80018b8 <main+0x33c>)
 80016d2:	f7ff ff3b 	bl	800154c <LCD_SendString>
		  I2C_send(0b11000000,0);   // переход на 2 строку
 80016d6:	2100      	movs	r1, #0
 80016d8:	20c0      	movs	r0, #192	@ 0xc0
 80016da:	f7ff fee7 	bl	80014ac <I2C_send>
		  sprintf(info_buffer,"Turns=%04d      ",cmd_in);
 80016de:	4b77      	ldr	r3, [pc, #476]	@ (80018bc <main+0x340>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	461a      	mov	r2, r3
 80016e4:	4976      	ldr	r1, [pc, #472]	@ (80018c0 <main+0x344>)
 80016e6:	4877      	ldr	r0, [pc, #476]	@ (80018c4 <main+0x348>)
 80016e8:	f007 fca0 	bl	800902c <siprintf>
		  LCD_SendString(info_buffer);
 80016ec:	4875      	ldr	r0, [pc, #468]	@ (80018c4 <main+0x348>)
 80016ee:	f7ff ff2d 	bl	800154c <LCD_SendString>
		  FORVARD;
 80016f2:	2200      	movs	r2, #0
 80016f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016f8:	4873      	ldr	r0, [pc, #460]	@ (80018c8 <main+0x34c>)
 80016fa:	f002 fd3b 	bl	8004174 <HAL_GPIO_WritePin>
		  I2C_send(0b10010100,0);   // переход на 3 строку
 80016fe:	2100      	movs	r1, #0
 8001700:	2094      	movs	r0, #148	@ 0x94
 8001702:	f7ff fed3 	bl	80014ac <I2C_send>
		  sprintf(info_buffer,"Speed=%04d RPM     ",speed);
 8001706:	4b71      	ldr	r3, [pc, #452]	@ (80018cc <main+0x350>)
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	461a      	mov	r2, r3
 800170c:	4970      	ldr	r1, [pc, #448]	@ (80018d0 <main+0x354>)
 800170e:	486d      	ldr	r0, [pc, #436]	@ (80018c4 <main+0x348>)
 8001710:	f007 fc8c 	bl	800902c <siprintf>
		  		  LCD_SendString(info_buffer);
 8001714:	486b      	ldr	r0, [pc, #428]	@ (80018c4 <main+0x348>)
 8001716:	f7ff ff19 	bl	800154c <LCD_SendString>



		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==1)&&(arm==0)&&(run==0)){
 800171a:	2108      	movs	r1, #8
 800171c:	4859      	ldr	r0, [pc, #356]	@ (8001884 <main+0x308>)
 800171e:	f002 fd11 	bl	8004144 <HAL_GPIO_ReadPin>
 8001722:	4603      	mov	r3, r0
 8001724:	2b01      	cmp	r3, #1
 8001726:	d119      	bne.n	800175c <main+0x1e0>
 8001728:	4b59      	ldr	r3, [pc, #356]	@ (8001890 <main+0x314>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d115      	bne.n	800175c <main+0x1e0>
 8001730:	4b58      	ldr	r3, [pc, #352]	@ (8001894 <main+0x318>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d111      	bne.n	800175c <main+0x1e0>
			  HAL_Delay(50);
 8001738:	2032      	movs	r0, #50	@ 0x32
 800173a:	f001 fa65 	bl	8002c08 <HAL_Delay>
			  I2C_send(0b10000000,0);   // переход на 1 строку
 800173e:	2100      	movs	r1, #0
 8001740:	2080      	movs	r0, #128	@ 0x80
 8001742:	f7ff feb3 	bl	80014ac <I2C_send>
			  		  LCD_SendString("RUN MODE- READY...  ");
 8001746:	4863      	ldr	r0, [pc, #396]	@ (80018d4 <main+0x358>)
 8001748:	f7ff ff00 	bl	800154c <LCD_SendString>
			  		 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800174c:	2100      	movs	r1, #0
 800174e:	4849      	ldr	r0, [pc, #292]	@ (8001874 <main+0x2f8>)
 8001750:	f004 fbfa 	bl	8005f48 <HAL_TIM_PWM_Stop>
			  		 HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001754:	2100      	movs	r1, #0
 8001756:	4847      	ldr	r0, [pc, #284]	@ (8001874 <main+0x2f8>)
 8001758:	f005 fbf1 	bl	8006f3e <HAL_TIMEx_PWMN_Stop>
		  }

		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==0)&&(arm==0)&&(run==0)){
 800175c:	2108      	movs	r1, #8
 800175e:	4849      	ldr	r0, [pc, #292]	@ (8001884 <main+0x308>)
 8001760:	f002 fcf0 	bl	8004144 <HAL_GPIO_ReadPin>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10d      	bne.n	8001786 <main+0x20a>
 800176a:	4b49      	ldr	r3, [pc, #292]	@ (8001890 <main+0x314>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d109      	bne.n	8001786 <main+0x20a>
 8001772:	4b48      	ldr	r3, [pc, #288]	@ (8001894 <main+0x318>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d105      	bne.n	8001786 <main+0x20a>
                 arm=1;
 800177a:	4b45      	ldr	r3, [pc, #276]	@ (8001890 <main+0x314>)
 800177c:	2201      	movs	r2, #1
 800177e:	701a      	strb	r2, [r3, #0]
					  HAL_Delay(150); }
 8001780:	2096      	movs	r0, #150	@ 0x96
 8001782:	f001 fa41 	bl	8002c08 <HAL_Delay>

		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==1)&&(arm==1)&&(run==0)){
 8001786:	2108      	movs	r1, #8
 8001788:	483e      	ldr	r0, [pc, #248]	@ (8001884 <main+0x308>)
 800178a:	f002 fcdb 	bl	8004144 <HAL_GPIO_ReadPin>
 800178e:	4603      	mov	r3, r0
 8001790:	2b01      	cmp	r3, #1
 8001792:	d114      	bne.n	80017be <main+0x242>
 8001794:	4b3e      	ldr	r3, [pc, #248]	@ (8001890 <main+0x314>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d110      	bne.n	80017be <main+0x242>
 800179c:	4b3d      	ldr	r3, [pc, #244]	@ (8001894 <main+0x318>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d10c      	bne.n	80017be <main+0x242>
		 			  HAL_Delay(50);
 80017a4:	2032      	movs	r0, #50	@ 0x32
 80017a6:	f001 fa2f 	bl	8002c08 <HAL_Delay>
		 			  run=1;
 80017aa:	4b3a      	ldr	r3, [pc, #232]	@ (8001894 <main+0x318>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	701a      	strb	r2, [r3, #0]
		 			  I2C_send(0b10000000,0);   // переход на 1 строку
 80017b0:	2100      	movs	r1, #0
 80017b2:	2080      	movs	r0, #128	@ 0x80
 80017b4:	f7ff fe7a 	bl	80014ac <I2C_send>
		 			  		  LCD_SendString("RUN MODE- RUNING    ");
 80017b8:	4847      	ldr	r0, [pc, #284]	@ (80018d8 <main+0x35c>)
 80017ba:	f7ff fec7 	bl	800154c <LCD_SendString>

                }


		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==1)&&(arm==1)&&(run==1)){
 80017be:	2108      	movs	r1, #8
 80017c0:	4830      	ldr	r0, [pc, #192]	@ (8001884 <main+0x308>)
 80017c2:	f002 fcbf 	bl	8004144 <HAL_GPIO_ReadPin>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d125      	bne.n	8001818 <main+0x29c>
 80017cc:	4b30      	ldr	r3, [pc, #192]	@ (8001890 <main+0x314>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d121      	bne.n	8001818 <main+0x29c>
 80017d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001894 <main+0x318>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d11d      	bne.n	8001818 <main+0x29c>

		 		                      I2C_send(0b10000000,0);   // переход на 1 строку
 80017dc:	2100      	movs	r1, #0
 80017de:	2080      	movs	r0, #128	@ 0x80
 80017e0:	f7ff fe64 	bl	80014ac <I2C_send>
		 		                      LCD_SendString("RUN MODE- RUNING    ");
 80017e4:	483c      	ldr	r0, [pc, #240]	@ (80018d8 <main+0x35c>)
 80017e6:	f7ff feb1 	bl	800154c <LCD_SendString>

		 		                     HAL_ADC_Start(&hadc1); // запускаем преобразование сигнала АЦП
 80017ea:	483c      	ldr	r0, [pc, #240]	@ (80018dc <main+0x360>)
 80017ec:	f001 fa74 	bl	8002cd8 <HAL_ADC_Start>
		 		                     HAL_ADC_PollForConversion(&hadc1, 100); // ожидаем окончания преобразования
 80017f0:	2164      	movs	r1, #100	@ 0x64
 80017f2:	483a      	ldr	r0, [pc, #232]	@ (80018dc <main+0x360>)
 80017f4:	f001 fb57 	bl	8002ea6 <HAL_ADC_PollForConversion>
		 		                     adc = HAL_ADC_GetValue(&hadc1); // читаем полученное значение в переменную adc
 80017f8:	4838      	ldr	r0, [pc, #224]	@ (80018dc <main+0x360>)
 80017fa:	f001 fbdf 	bl	8002fbc <HAL_ADC_GetValue>
 80017fe:	4603      	mov	r3, r0
 8001800:	b29a      	uxth	r2, r3
 8001802:	4b37      	ldr	r3, [pc, #220]	@ (80018e0 <main+0x364>)
 8001804:	801a      	strh	r2, [r3, #0]
		 		                     HAL_ADC_Stop(&hadc1); // останавливаем АЦП (не обязательно)
 8001806:	4835      	ldr	r0, [pc, #212]	@ (80018dc <main+0x360>)
 8001808:	f001 fb1a 	bl	8002e40 <HAL_ADC_Stop>
		 		                     speed=adc-230;
 800180c:	4b34      	ldr	r3, [pc, #208]	@ (80018e0 <main+0x364>)
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	3be6      	subs	r3, #230	@ 0xe6
 8001812:	b29a      	uxth	r2, r3
 8001814:	4b2d      	ldr	r3, [pc, #180]	@ (80018cc <main+0x350>)
 8001816:	801a      	strh	r2, [r3, #0]
		 	*/

		 		 					}


		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==0)&&(arm==1)&&(run==1)){
 8001818:	2108      	movs	r1, #8
 800181a:	481a      	ldr	r0, [pc, #104]	@ (8001884 <main+0x308>)
 800181c:	f002 fc92 	bl	8004144 <HAL_GPIO_ReadPin>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d114      	bne.n	8001850 <main+0x2d4>
 8001826:	4b1a      	ldr	r3, [pc, #104]	@ (8001890 <main+0x314>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d110      	bne.n	8001850 <main+0x2d4>
 800182e:	4b19      	ldr	r3, [pc, #100]	@ (8001894 <main+0x318>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d10c      	bne.n	8001850 <main+0x2d4>
		                       arm=0;
 8001836:	4b16      	ldr	r3, [pc, #88]	@ (8001890 <main+0x314>)
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
		                       I2C_send(0b10000000,0);   // переход на 1 строку
 800183c:	2100      	movs	r1, #0
 800183e:	2080      	movs	r0, #128	@ 0x80
 8001840:	f7ff fe34 	bl	80014ac <I2C_send>
		                        LCD_SendString("RUN MODE- RUNING    ");
 8001844:	4824      	ldr	r0, [pc, #144]	@ (80018d8 <main+0x35c>)
 8001846:	f7ff fe81 	bl	800154c <LCD_SendString>
		 					  HAL_Delay(150); }
 800184a:	2096      	movs	r0, #150	@ 0x96
 800184c:	f001 f9dc 	bl	8002c08 <HAL_Delay>

		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==1)&&(arm==0)&&(run==1)){
 8001850:	2108      	movs	r1, #8
 8001852:	480c      	ldr	r0, [pc, #48]	@ (8001884 <main+0x308>)
 8001854:	f002 fc76 	bl	8004144 <HAL_GPIO_ReadPin>
 8001858:	4603      	mov	r3, r0
 800185a:	2b01      	cmp	r3, #1
 800185c:	d14b      	bne.n	80018f6 <main+0x37a>
 800185e:	4b0c      	ldr	r3, [pc, #48]	@ (8001890 <main+0x314>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d147      	bne.n	80018f6 <main+0x37a>
 8001866:	4b0b      	ldr	r3, [pc, #44]	@ (8001894 <main+0x318>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d143      	bne.n	80018f6 <main+0x37a>
 800186e:	e039      	b.n	80018e4 <main+0x368>
 8001870:	40020800 	.word	0x40020800
 8001874:	200002cc 	.word	0x200002cc
 8001878:	200001f0 	.word	0x200001f0
 800187c:	200003a4 	.word	0x200003a4
 8001880:	200003ec 	.word	0x200003ec
 8001884:	40020400 	.word	0x40020400
 8001888:	200004db 	.word	0x200004db
 800188c:	200004dc 	.word	0x200004dc
 8001890:	200004dd 	.word	0x200004dd
 8001894:	200004de 	.word	0x200004de
 8001898:	200004d4 	.word	0x200004d4
 800189c:	200004d6 	.word	0x200004d6
 80018a0:	200004d7 	.word	0x200004d7
 80018a4:	200004d8 	.word	0x200004d8
 80018a8:	200004d9 	.word	0x200004d9
 80018ac:	200004da 	.word	0x200004da
 80018b0:	0800b2a0 	.word	0x0800b2a0
 80018b4:	200004ac 	.word	0x200004ac
 80018b8:	0800b2c0 	.word	0x0800b2c0
 80018bc:	200004e5 	.word	0x200004e5
 80018c0:	0800b2d8 	.word	0x0800b2d8
 80018c4:	200004c0 	.word	0x200004c0
 80018c8:	40020000 	.word	0x40020000
 80018cc:	200004e0 	.word	0x200004e0
 80018d0:	0800b2ec 	.word	0x0800b2ec
 80018d4:	0800b300 	.word	0x0800b300
 80018d8:	0800b318 	.word	0x0800b318
 80018dc:	20000210 	.word	0x20000210
 80018e0:	200004e2 	.word	0x200004e2
				                       arm=0;
 80018e4:	4b70      	ldr	r3, [pc, #448]	@ (8001aa8 <main+0x52c>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	701a      	strb	r2, [r3, #0]
				                       run=0;
 80018ea:	4b70      	ldr	r3, [pc, #448]	@ (8001aac <main+0x530>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]
				 					  HAL_Delay(150); }
 80018f0:	2096      	movs	r0, #150	@ 0x96
 80018f2:	f001 f989 	bl	8002c08 <HAL_Delay>

	  }

	  if(regim==2){
 80018f6:	4b6e      	ldr	r3, [pc, #440]	@ (8001ab0 <main+0x534>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	f040 80c7 	bne.w	8001a8e <main+0x512>
	 		  I2C_send(0b10000000,0);   // переход на 1 строку
 8001900:	2100      	movs	r1, #0
 8001902:	2080      	movs	r0, #128	@ 0x80
 8001904:	f7ff fdd2 	bl	80014ac <I2C_send>
	 		  LCD_SendString("REVERS MODE         ");
 8001908:	486a      	ldr	r0, [pc, #424]	@ (8001ab4 <main+0x538>)
 800190a:	f7ff fe1f 	bl	800154c <LCD_SendString>
	 		  REVERS;
 800190e:	2201      	movs	r2, #1
 8001910:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001914:	4868      	ldr	r0, [pc, #416]	@ (8001ab8 <main+0x53c>)
 8001916:	f002 fc2d 	bl	8004174 <HAL_GPIO_WritePin>
	/////////////////////////////////////REVERS/////////////////////////////////////////////
	 		 if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==1)&&(arm==0)&&(run==0)){
 800191a:	2108      	movs	r1, #8
 800191c:	4867      	ldr	r0, [pc, #412]	@ (8001abc <main+0x540>)
 800191e:	f002 fc11 	bl	8004144 <HAL_GPIO_ReadPin>
 8001922:	4603      	mov	r3, r0
 8001924:	2b01      	cmp	r3, #1
 8001926:	d111      	bne.n	800194c <main+0x3d0>
 8001928:	4b5f      	ldr	r3, [pc, #380]	@ (8001aa8 <main+0x52c>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d10d      	bne.n	800194c <main+0x3d0>
 8001930:	4b5e      	ldr	r3, [pc, #376]	@ (8001aac <main+0x530>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d109      	bne.n	800194c <main+0x3d0>
	 		 			  HAL_Delay(50);
 8001938:	2032      	movs	r0, #50	@ 0x32
 800193a:	f001 f965 	bl	8002c08 <HAL_Delay>
	 		 			  I2C_send(0b10000000,0);   // переход на 1 строку
 800193e:	2100      	movs	r1, #0
 8001940:	2080      	movs	r0, #128	@ 0x80
 8001942:	f7ff fdb3 	bl	80014ac <I2C_send>
	 		 			  		  LCD_SendString("REVERS MODE- READY...  ");
 8001946:	485e      	ldr	r0, [pc, #376]	@ (8001ac0 <main+0x544>)
 8001948:	f7ff fe00 	bl	800154c <LCD_SendString>
	 		 			  	//	 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
	 		 			  	//	 HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
	 		 		  }

	 		 		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==0)&&(arm==0)&&(run==0)){
 800194c:	2108      	movs	r1, #8
 800194e:	485b      	ldr	r0, [pc, #364]	@ (8001abc <main+0x540>)
 8001950:	f002 fbf8 	bl	8004144 <HAL_GPIO_ReadPin>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10d      	bne.n	8001976 <main+0x3fa>
 800195a:	4b53      	ldr	r3, [pc, #332]	@ (8001aa8 <main+0x52c>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d109      	bne.n	8001976 <main+0x3fa>
 8001962:	4b52      	ldr	r3, [pc, #328]	@ (8001aac <main+0x530>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d105      	bne.n	8001976 <main+0x3fa>
	 		                       arm=1;
 800196a:	4b4f      	ldr	r3, [pc, #316]	@ (8001aa8 <main+0x52c>)
 800196c:	2201      	movs	r2, #1
 800196e:	701a      	strb	r2, [r3, #0]
	 		 					  HAL_Delay(150); }
 8001970:	2096      	movs	r0, #150	@ 0x96
 8001972:	f001 f949 	bl	8002c08 <HAL_Delay>

	 		 		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==1)&&(arm==1)&&(run==0)){
 8001976:	2108      	movs	r1, #8
 8001978:	4850      	ldr	r0, [pc, #320]	@ (8001abc <main+0x540>)
 800197a:	f002 fbe3 	bl	8004144 <HAL_GPIO_ReadPin>
 800197e:	4603      	mov	r3, r0
 8001980:	2b01      	cmp	r3, #1
 8001982:	d125      	bne.n	80019d0 <main+0x454>
 8001984:	4b48      	ldr	r3, [pc, #288]	@ (8001aa8 <main+0x52c>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d121      	bne.n	80019d0 <main+0x454>
 800198c:	4b47      	ldr	r3, [pc, #284]	@ (8001aac <main+0x530>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d11d      	bne.n	80019d0 <main+0x454>
	 		 		 			  HAL_Delay(50);
 8001994:	2032      	movs	r0, #50	@ 0x32
 8001996:	f001 f937 	bl	8002c08 <HAL_Delay>
	 		 		 			  run=1;
 800199a:	4b44      	ldr	r3, [pc, #272]	@ (8001aac <main+0x530>)
 800199c:	2201      	movs	r2, #1
 800199e:	701a      	strb	r2, [r3, #0]
	 		 		 			  I2C_send(0b10000000,0);   // переход на 1 строку
 80019a0:	2100      	movs	r1, #0
 80019a2:	2080      	movs	r0, #128	@ 0x80
 80019a4:	f7ff fd82 	bl	80014ac <I2C_send>
	 		 		 			  		  LCD_SendString("REVERS MODE- RUNING    ");
 80019a8:	4846      	ldr	r0, [pc, #280]	@ (8001ac4 <main+0x548>)
 80019aa:	f7ff fdcf 	bl	800154c <LCD_SendString>

	 		 		 			  	  HAL_ADC_Start(&hadc1); // запускаем преобразование сигнала АЦП
 80019ae:	4846      	ldr	r0, [pc, #280]	@ (8001ac8 <main+0x54c>)
 80019b0:	f001 f992 	bl	8002cd8 <HAL_ADC_Start>
	 		 		 			      HAL_ADC_PollForConversion(&hadc1, 100); // ожидаем окончания преобразования
 80019b4:	2164      	movs	r1, #100	@ 0x64
 80019b6:	4844      	ldr	r0, [pc, #272]	@ (8001ac8 <main+0x54c>)
 80019b8:	f001 fa75 	bl	8002ea6 <HAL_ADC_PollForConversion>
	 		 		 			      adc = HAL_ADC_GetValue(&hadc1); // читаем полученное значение в переменную adc
 80019bc:	4842      	ldr	r0, [pc, #264]	@ (8001ac8 <main+0x54c>)
 80019be:	f001 fafd 	bl	8002fbc <HAL_ADC_GetValue>
 80019c2:	4603      	mov	r3, r0
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	4b41      	ldr	r3, [pc, #260]	@ (8001acc <main+0x550>)
 80019c8:	801a      	strh	r2, [r3, #0]
	 		 		 			      HAL_ADC_Stop(&hadc1); // останавливаем АЦП (не обязательно)
 80019ca:	483f      	ldr	r0, [pc, #252]	@ (8001ac8 <main+0x54c>)
 80019cc:	f001 fa38 	bl	8002e40 <HAL_ADC_Stop>

	 		                      }


	 		 		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==1)&&(arm==1)&&(run==1)){
 80019d0:	2108      	movs	r1, #8
 80019d2:	483a      	ldr	r0, [pc, #232]	@ (8001abc <main+0x540>)
 80019d4:	f002 fbb6 	bl	8004144 <HAL_GPIO_ReadPin>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d123      	bne.n	8001a26 <main+0x4aa>
 80019de:	4b32      	ldr	r3, [pc, #200]	@ (8001aa8 <main+0x52c>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d11f      	bne.n	8001a26 <main+0x4aa>
 80019e6:	4b31      	ldr	r3, [pc, #196]	@ (8001aac <main+0x530>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d11b      	bne.n	8001a26 <main+0x4aa>

	 		 		 		                      I2C_send(0b10000000,0);   // переход на 1 строку
 80019ee:	2100      	movs	r1, #0
 80019f0:	2080      	movs	r0, #128	@ 0x80
 80019f2:	f7ff fd5b 	bl	80014ac <I2C_send>
	 		 		 		                      LCD_SendString("REVERS MODE- RUNING    ");
 80019f6:	4833      	ldr	r0, [pc, #204]	@ (8001ac4 <main+0x548>)
 80019f8:	f7ff fda8 	bl	800154c <LCD_SendString>
	 		 		 		                    //   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	 		 		 		                    //   HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);

	 		 		 		                    HAL_ADC_Start(&hadc1); // запускаем преобразование сигнала АЦП
 80019fc:	4832      	ldr	r0, [pc, #200]	@ (8001ac8 <main+0x54c>)
 80019fe:	f001 f96b 	bl	8002cd8 <HAL_ADC_Start>
	 		 		 		                    HAL_ADC_PollForConversion(&hadc1, 100); // ожидаем окончания преобразования
 8001a02:	2164      	movs	r1, #100	@ 0x64
 8001a04:	4830      	ldr	r0, [pc, #192]	@ (8001ac8 <main+0x54c>)
 8001a06:	f001 fa4e 	bl	8002ea6 <HAL_ADC_PollForConversion>
	 		 		 		                    adc = HAL_ADC_GetValue(&hadc1); // читаем полученное значение в переменную adc
 8001a0a:	482f      	ldr	r0, [pc, #188]	@ (8001ac8 <main+0x54c>)
 8001a0c:	f001 fad6 	bl	8002fbc <HAL_ADC_GetValue>
 8001a10:	4603      	mov	r3, r0
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	4b2d      	ldr	r3, [pc, #180]	@ (8001acc <main+0x550>)
 8001a16:	801a      	strh	r2, [r3, #0]
	 		 		 		                     HAL_ADC_Stop(&hadc1); // останавливаем АЦП (не обязательно)
 8001a18:	482b      	ldr	r0, [pc, #172]	@ (8001ac8 <main+0x54c>)
 8001a1a:	f001 fa11 	bl	8002e40 <HAL_ADC_Stop>
	 		 		 		                     speed=adc;
 8001a1e:	4b2b      	ldr	r3, [pc, #172]	@ (8001acc <main+0x550>)
 8001a20:	881a      	ldrh	r2, [r3, #0]
 8001a22:	4b2b      	ldr	r3, [pc, #172]	@ (8001ad0 <main+0x554>)
 8001a24:	801a      	strh	r2, [r3, #0]
	 		 		 		 					}


	 		 		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==0)&&(arm==1)&&(run==1)){
 8001a26:	2108      	movs	r1, #8
 8001a28:	4824      	ldr	r0, [pc, #144]	@ (8001abc <main+0x540>)
 8001a2a:	f002 fb8b 	bl	8004144 <HAL_GPIO_ReadPin>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d114      	bne.n	8001a5e <main+0x4e2>
 8001a34:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa8 <main+0x52c>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d110      	bne.n	8001a5e <main+0x4e2>
 8001a3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001aac <main+0x530>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d10c      	bne.n	8001a5e <main+0x4e2>
	 		 		                       arm=0;
 8001a44:	4b18      	ldr	r3, [pc, #96]	@ (8001aa8 <main+0x52c>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]
	 		 		                       I2C_send(0b10000000,0);   // переход на 1 строку
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	2080      	movs	r0, #128	@ 0x80
 8001a4e:	f7ff fd2d 	bl	80014ac <I2C_send>
	 		 		                        LCD_SendString("REVERS MODE- RUNING    ");
 8001a52:	481c      	ldr	r0, [pc, #112]	@ (8001ac4 <main+0x548>)
 8001a54:	f7ff fd7a 	bl	800154c <LCD_SendString>
	 		 		 					  HAL_Delay(150); }
 8001a58:	2096      	movs	r0, #150	@ 0x96
 8001a5a:	f001 f8d5 	bl	8002c08 <HAL_Delay>

	 		 		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==1)&&(arm==0)&&(run==1)){
 8001a5e:	2108      	movs	r1, #8
 8001a60:	4816      	ldr	r0, [pc, #88]	@ (8001abc <main+0x540>)
 8001a62:	f002 fb6f 	bl	8004144 <HAL_GPIO_ReadPin>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d110      	bne.n	8001a8e <main+0x512>
 8001a6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa8 <main+0x52c>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d10c      	bne.n	8001a8e <main+0x512>
 8001a74:	4b0d      	ldr	r3, [pc, #52]	@ (8001aac <main+0x530>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d108      	bne.n	8001a8e <main+0x512>
	 		 				                       arm=0;
 8001a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa8 <main+0x52c>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	701a      	strb	r2, [r3, #0]
	 		 				                       run=0;
 8001a82:	4b0a      	ldr	r3, [pc, #40]	@ (8001aac <main+0x530>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	701a      	strb	r2, [r3, #0]
	 		 				 					  HAL_Delay(150); }
 8001a88:	2096      	movs	r0, #150	@ 0x96
 8001a8a:	f001 f8bd 	bl	8002c08 <HAL_Delay>


	 	  }

	  if(regim==3){
 8001a8e:	4b08      	ldr	r3, [pc, #32]	@ (8001ab0 <main+0x534>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b03      	cmp	r3, #3
 8001a94:	f47f adbc 	bne.w	8001610 <main+0x94>
		 		  I2C_send(0b10000000,0);   // переход на 1 строку
 8001a98:	2100      	movs	r1, #0
 8001a9a:	2080      	movs	r0, #128	@ 0x80
 8001a9c:	f7ff fd06 	bl	80014ac <I2C_send>
		 		  LCD_SendString("SETUP MODE     ");
 8001aa0:	480c      	ldr	r0, [pc, #48]	@ (8001ad4 <main+0x558>)
 8001aa2:	f7ff fd53 	bl	800154c <LCD_SendString>
	  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)==0)&&(flag==0)){
 8001aa6:	e5b3      	b.n	8001610 <main+0x94>
 8001aa8:	200004dd 	.word	0x200004dd
 8001aac:	200004de 	.word	0x200004de
 8001ab0:	200004dc 	.word	0x200004dc
 8001ab4:	0800b330 	.word	0x0800b330
 8001ab8:	40020000 	.word	0x40020000
 8001abc:	40020400 	.word	0x40020400
 8001ac0:	0800b348 	.word	0x0800b348
 8001ac4:	0800b360 	.word	0x0800b360
 8001ac8:	20000210 	.word	0x20000210
 8001acc:	200004e2 	.word	0x200004e2
 8001ad0:	200004e0 	.word	0x200004e0
 8001ad4:	0800b378 	.word	0x0800b378

08001ad8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b094      	sub	sp, #80	@ 0x50
 8001adc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ade:	f107 0320 	add.w	r3, r7, #32
 8001ae2:	2230      	movs	r2, #48	@ 0x30
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f007 fb03 	bl	80090f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aec:	f107 030c 	add.w	r3, r7, #12
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001afc:	2300      	movs	r3, #0
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	4b29      	ldr	r3, [pc, #164]	@ (8001ba8 <SystemClock_Config+0xd0>)
 8001b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b04:	4a28      	ldr	r2, [pc, #160]	@ (8001ba8 <SystemClock_Config+0xd0>)
 8001b06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b0c:	4b26      	ldr	r3, [pc, #152]	@ (8001ba8 <SystemClock_Config+0xd0>)
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b18:	2300      	movs	r3, #0
 8001b1a:	607b      	str	r3, [r7, #4]
 8001b1c:	4b23      	ldr	r3, [pc, #140]	@ (8001bac <SystemClock_Config+0xd4>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001b24:	4a21      	ldr	r2, [pc, #132]	@ (8001bac <SystemClock_Config+0xd4>)
 8001b26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b2a:	6013      	str	r3, [r2, #0]
 8001b2c:	4b1f      	ldr	r3, [pc, #124]	@ (8001bac <SystemClock_Config+0xd4>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001b34:	607b      	str	r3, [r7, #4]
 8001b36:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001b38:	230a      	movs	r3, #10
 8001b3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b40:	2310      	movs	r3, #16
 8001b42:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001b44:	2301      	movs	r3, #1
 8001b46:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b50:	2308      	movs	r3, #8
 8001b52:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001b54:	2354      	movs	r3, #84	@ 0x54
 8001b56:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b5c:	2304      	movs	r3, #4
 8001b5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b60:	f107 0320 	add.w	r3, r7, #32
 8001b64:	4618      	mov	r0, r3
 8001b66:	f003 f90f 	bl	8004d88 <HAL_RCC_OscConfig>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001b70:	f000 fbc0 	bl	80022f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b74:	230f      	movs	r3, #15
 8001b76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b8a:	f107 030c 	add.w	r3, r7, #12
 8001b8e:	2102      	movs	r1, #2
 8001b90:	4618      	mov	r0, r3
 8001b92:	f003 fb71 	bl	8005278 <HAL_RCC_ClockConfig>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001b9c:	f000 fbaa 	bl	80022f4 <Error_Handler>
  }
}
 8001ba0:	bf00      	nop
 8001ba2:	3750      	adds	r7, #80	@ 0x50
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40007000 	.word	0x40007000

08001bb0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bb6:	463b      	mov	r3, r7
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001bc2:	4b21      	ldr	r3, [pc, #132]	@ (8001c48 <MX_ADC1_Init+0x98>)
 8001bc4:	4a21      	ldr	r2, [pc, #132]	@ (8001c4c <MX_ADC1_Init+0x9c>)
 8001bc6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001bc8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c48 <MX_ADC1_Init+0x98>)
 8001bca:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001bce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001bd0:	4b1d      	ldr	r3, [pc, #116]	@ (8001c48 <MX_ADC1_Init+0x98>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001bd6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c48 <MX_ADC1_Init+0x98>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001bdc:	4b1a      	ldr	r3, [pc, #104]	@ (8001c48 <MX_ADC1_Init+0x98>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001be2:	4b19      	ldr	r3, [pc, #100]	@ (8001c48 <MX_ADC1_Init+0x98>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bea:	4b17      	ldr	r3, [pc, #92]	@ (8001c48 <MX_ADC1_Init+0x98>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bf0:	4b15      	ldr	r3, [pc, #84]	@ (8001c48 <MX_ADC1_Init+0x98>)
 8001bf2:	4a17      	ldr	r2, [pc, #92]	@ (8001c50 <MX_ADC1_Init+0xa0>)
 8001bf4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bf6:	4b14      	ldr	r3, [pc, #80]	@ (8001c48 <MX_ADC1_Init+0x98>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001bfc:	4b12      	ldr	r3, [pc, #72]	@ (8001c48 <MX_ADC1_Init+0x98>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c02:	4b11      	ldr	r3, [pc, #68]	@ (8001c48 <MX_ADC1_Init+0x98>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c48 <MX_ADC1_Init+0x98>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c10:	480d      	ldr	r0, [pc, #52]	@ (8001c48 <MX_ADC1_Init+0x98>)
 8001c12:	f001 f81d 	bl	8002c50 <HAL_ADC_Init>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001c1c:	f000 fb6a 	bl	80022f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001c20:	2306      	movs	r3, #6
 8001c22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001c24:	2301      	movs	r3, #1
 8001c26:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c2c:	463b      	mov	r3, r7
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4805      	ldr	r0, [pc, #20]	@ (8001c48 <MX_ADC1_Init+0x98>)
 8001c32:	f001 f9d1 	bl	8002fd8 <HAL_ADC_ConfigChannel>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001c3c:	f000 fb5a 	bl	80022f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c40:	bf00      	nop
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000210 	.word	0x20000210
 8001c4c:	40012000 	.word	0x40012000
 8001c50:	0f000001 	.word	0x0f000001

08001c54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c58:	4b12      	ldr	r3, [pc, #72]	@ (8001ca4 <MX_I2C1_Init+0x50>)
 8001c5a:	4a13      	ldr	r2, [pc, #76]	@ (8001ca8 <MX_I2C1_Init+0x54>)
 8001c5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c5e:	4b11      	ldr	r3, [pc, #68]	@ (8001ca4 <MX_I2C1_Init+0x50>)
 8001c60:	4a12      	ldr	r2, [pc, #72]	@ (8001cac <MX_I2C1_Init+0x58>)
 8001c62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c64:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca4 <MX_I2C1_Init+0x50>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca4 <MX_I2C1_Init+0x50>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca4 <MX_I2C1_Init+0x50>)
 8001c72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c78:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca4 <MX_I2C1_Init+0x50>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ca4 <MX_I2C1_Init+0x50>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c84:	4b07      	ldr	r3, [pc, #28]	@ (8001ca4 <MX_I2C1_Init+0x50>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <MX_I2C1_Init+0x50>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c90:	4804      	ldr	r0, [pc, #16]	@ (8001ca4 <MX_I2C1_Init+0x50>)
 8001c92:	f002 faad 	bl	80041f0 <HAL_I2C_Init>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c9c:	f000 fb2a 	bl	80022f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ca0:	bf00      	nop
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	20000258 	.word	0x20000258
 8001ca8:	40005400 	.word	0x40005400
 8001cac:	000186a0 	.word	0x000186a0

08001cb0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001cb6:	1d3b      	adds	r3, r7, #4
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001cc8:	4b24      	ldr	r3, [pc, #144]	@ (8001d5c <MX_RTC_Init+0xac>)
 8001cca:	4a25      	ldr	r2, [pc, #148]	@ (8001d60 <MX_RTC_Init+0xb0>)
 8001ccc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001cce:	4b23      	ldr	r3, [pc, #140]	@ (8001d5c <MX_RTC_Init+0xac>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001cd4:	4b21      	ldr	r3, [pc, #132]	@ (8001d5c <MX_RTC_Init+0xac>)
 8001cd6:	227f      	movs	r2, #127	@ 0x7f
 8001cd8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001cda:	4b20      	ldr	r3, [pc, #128]	@ (8001d5c <MX_RTC_Init+0xac>)
 8001cdc:	22ff      	movs	r2, #255	@ 0xff
 8001cde:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ce0:	4b1e      	ldr	r3, [pc, #120]	@ (8001d5c <MX_RTC_Init+0xac>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ce6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d5c <MX_RTC_Init+0xac>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001cec:	4b1b      	ldr	r3, [pc, #108]	@ (8001d5c <MX_RTC_Init+0xac>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001cf2:	481a      	ldr	r0, [pc, #104]	@ (8001d5c <MX_RTC_Init+0xac>)
 8001cf4:	f003 fd8e 	bl	8005814 <HAL_RTC_Init>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001cfe:	f000 faf9 	bl	80022f4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d12:	2300      	movs	r3, #0
 8001d14:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001d16:	1d3b      	adds	r3, r7, #4
 8001d18:	2201      	movs	r2, #1
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	480f      	ldr	r0, [pc, #60]	@ (8001d5c <MX_RTC_Init+0xac>)
 8001d1e:	f003 fdfc 	bl	800591a <HAL_RTC_SetTime>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001d28:	f000 fae4 	bl	80022f4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;
 8001d30:	2304      	movs	r3, #4
 8001d32:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001d34:	2301      	movs	r3, #1
 8001d36:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001d3c:	463b      	mov	r3, r7
 8001d3e:	2201      	movs	r2, #1
 8001d40:	4619      	mov	r1, r3
 8001d42:	4806      	ldr	r0, [pc, #24]	@ (8001d5c <MX_RTC_Init+0xac>)
 8001d44:	f003 fe83 	bl	8005a4e <HAL_RTC_SetDate>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001d4e:	f000 fad1 	bl	80022f4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001d52:	bf00      	nop
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	200002ac 	.word	0x200002ac
 8001d60:	40002800 	.word	0x40002800

08001d64 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b096      	sub	sp, #88	@ 0x58
 8001d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d6a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	609a      	str	r2, [r3, #8]
 8001d76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d78:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	605a      	str	r2, [r3, #4]
 8001d8c:	609a      	str	r2, [r3, #8]
 8001d8e:	60da      	str	r2, [r3, #12]
 8001d90:	611a      	str	r2, [r3, #16]
 8001d92:	615a      	str	r2, [r3, #20]
 8001d94:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d96:	1d3b      	adds	r3, r7, #4
 8001d98:	2220      	movs	r2, #32
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f007 f9a8 	bl	80090f2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001da2:	4b3f      	ldr	r3, [pc, #252]	@ (8001ea0 <MX_TIM1_Init+0x13c>)
 8001da4:	4a3f      	ldr	r2, [pc, #252]	@ (8001ea4 <MX_TIM1_Init+0x140>)
 8001da6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001da8:	4b3d      	ldr	r3, [pc, #244]	@ (8001ea0 <MX_TIM1_Init+0x13c>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dae:	4b3c      	ldr	r3, [pc, #240]	@ (8001ea0 <MX_TIM1_Init+0x13c>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1500;
 8001db4:	4b3a      	ldr	r3, [pc, #232]	@ (8001ea0 <MX_TIM1_Init+0x13c>)
 8001db6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001dba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dbc:	4b38      	ldr	r3, [pc, #224]	@ (8001ea0 <MX_TIM1_Init+0x13c>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001dc2:	4b37      	ldr	r3, [pc, #220]	@ (8001ea0 <MX_TIM1_Init+0x13c>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001dc8:	4b35      	ldr	r3, [pc, #212]	@ (8001ea0 <MX_TIM1_Init+0x13c>)
 8001dca:	2280      	movs	r2, #128	@ 0x80
 8001dcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001dce:	4834      	ldr	r0, [pc, #208]	@ (8001ea0 <MX_TIM1_Init+0x13c>)
 8001dd0:	f003 ff62 	bl	8005c98 <HAL_TIM_Base_Init>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001dda:	f000 fa8b 	bl	80022f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001de2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001de4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001de8:	4619      	mov	r1, r3
 8001dea:	482d      	ldr	r0, [pc, #180]	@ (8001ea0 <MX_TIM1_Init+0x13c>)
 8001dec:	f004 fbb8 	bl	8006560 <HAL_TIM_ConfigClockSource>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001df6:	f000 fa7d 	bl	80022f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001dfa:	4829      	ldr	r0, [pc, #164]	@ (8001ea0 <MX_TIM1_Init+0x13c>)
 8001dfc:	f003 ff9b 	bl	8005d36 <HAL_TIM_PWM_Init>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001e06:	f000 fa75 	bl	80022f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e12:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001e16:	4619      	mov	r1, r3
 8001e18:	4821      	ldr	r0, [pc, #132]	@ (8001ea0 <MX_TIM1_Init+0x13c>)
 8001e1a:	f005 f8ed 	bl	8006ff8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001e24:	f000 fa66 	bl	80022f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e28:	2360      	movs	r3, #96	@ 0x60
 8001e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 750;
 8001e2c:	f240 23ee 	movw	r3, #750	@ 0x2ee
 8001e30:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e32:	2300      	movs	r3, #0
 8001e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e36:	2300      	movs	r3, #0
 8001e38:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001e3a:	2304      	movs	r3, #4
 8001e3c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e42:	2300      	movs	r3, #0
 8001e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4814      	ldr	r0, [pc, #80]	@ (8001ea0 <MX_TIM1_Init+0x13c>)
 8001e50:	f004 fac4 	bl	80063dc <HAL_TIM_PWM_ConfigChannel>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001e5a:	f000 fa4b 	bl	80022f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e62:	2300      	movs	r3, #0
 8001e64:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e72:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e76:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e7c:	1d3b      	adds	r3, r7, #4
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4807      	ldr	r0, [pc, #28]	@ (8001ea0 <MX_TIM1_Init+0x13c>)
 8001e82:	f005 f927 	bl	80070d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001e8c:	f000 fa32 	bl	80022f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e90:	4803      	ldr	r0, [pc, #12]	@ (8001ea0 <MX_TIM1_Init+0x13c>)
 8001e92:	f000 fb95 	bl	80025c0 <HAL_TIM_MspPostInit>

}
 8001e96:	bf00      	nop
 8001e98:	3758      	adds	r7, #88	@ 0x58
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	200002cc 	.word	0x200002cc
 8001ea4:	40010000 	.word	0x40010000

08001ea8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08a      	sub	sp, #40	@ 0x28
 8001eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eae:	f107 0318 	add.w	r3, r7, #24
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	605a      	str	r2, [r3, #4]
 8001eb8:	609a      	str	r2, [r3, #8]
 8001eba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ebc:	f107 0310 	add.w	r3, r7, #16
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ec6:	463b      	mov	r3, r7
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ed2:	4b33      	ldr	r3, [pc, #204]	@ (8001fa0 <MX_TIM2_Init+0xf8>)
 8001ed4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ed8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001eda:	4b31      	ldr	r3, [pc, #196]	@ (8001fa0 <MX_TIM2_Init+0xf8>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ee0:	4b2f      	ldr	r3, [pc, #188]	@ (8001fa0 <MX_TIM2_Init+0xf8>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001ee6:	4b2e      	ldr	r3, [pc, #184]	@ (8001fa0 <MX_TIM2_Init+0xf8>)
 8001ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8001eec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eee:	4b2c      	ldr	r3, [pc, #176]	@ (8001fa0 <MX_TIM2_Init+0xf8>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ef4:	4b2a      	ldr	r3, [pc, #168]	@ (8001fa0 <MX_TIM2_Init+0xf8>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001efa:	4829      	ldr	r0, [pc, #164]	@ (8001fa0 <MX_TIM2_Init+0xf8>)
 8001efc:	f003 fecc 	bl	8005c98 <HAL_TIM_Base_Init>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001f06:	f000 f9f5 	bl	80022f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f0e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f10:	f107 0318 	add.w	r3, r7, #24
 8001f14:	4619      	mov	r1, r3
 8001f16:	4822      	ldr	r0, [pc, #136]	@ (8001fa0 <MX_TIM2_Init+0xf8>)
 8001f18:	f004 fb22 	bl	8006560 <HAL_TIM_ConfigClockSource>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001f22:	f000 f9e7 	bl	80022f4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001f26:	481e      	ldr	r0, [pc, #120]	@ (8001fa0 <MX_TIM2_Init+0xf8>)
 8001f28:	f004 f872 	bl	8006010 <HAL_TIM_IC_Init>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001f32:	f000 f9df 	bl	80022f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f3e:	f107 0310 	add.w	r3, r7, #16
 8001f42:	4619      	mov	r1, r3
 8001f44:	4816      	ldr	r0, [pc, #88]	@ (8001fa0 <MX_TIM2_Init+0xf8>)
 8001f46:	f005 f857 	bl	8006ff8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001f50:	f000 f9d0 	bl	80022f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f54:	2300      	movs	r3, #0
 8001f56:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001f64:	463b      	mov	r3, r7
 8001f66:	2200      	movs	r2, #0
 8001f68:	4619      	mov	r1, r3
 8001f6a:	480d      	ldr	r0, [pc, #52]	@ (8001fa0 <MX_TIM2_Init+0xf8>)
 8001f6c:	f004 f999 	bl	80062a2 <HAL_TIM_IC_ConfigChannel>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001f76:	f000 f9bd 	bl	80022f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001f82:	463b      	mov	r3, r7
 8001f84:	2204      	movs	r2, #4
 8001f86:	4619      	mov	r1, r3
 8001f88:	4805      	ldr	r0, [pc, #20]	@ (8001fa0 <MX_TIM2_Init+0xf8>)
 8001f8a:	f004 f98a 	bl	80062a2 <HAL_TIM_IC_ConfigChannel>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001f94:	f000 f9ae 	bl	80022f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f98:	bf00      	nop
 8001f9a:	3728      	adds	r7, #40	@ 0x28
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	20000314 	.word	0x20000314

08001fa4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08e      	sub	sp, #56	@ 0x38
 8001fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001faa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	605a      	str	r2, [r3, #4]
 8001fb4:	609a      	str	r2, [r3, #8]
 8001fb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fb8:	f107 0320 	add.w	r3, r7, #32
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fc2:	1d3b      	adds	r3, r7, #4
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	611a      	str	r2, [r3, #16]
 8001fd0:	615a      	str	r2, [r3, #20]
 8001fd2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fd4:	4b2c      	ldr	r3, [pc, #176]	@ (8002088 <MX_TIM3_Init+0xe4>)
 8001fd6:	4a2d      	ldr	r2, [pc, #180]	@ (800208c <MX_TIM3_Init+0xe8>)
 8001fd8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001fda:	4b2b      	ldr	r3, [pc, #172]	@ (8002088 <MX_TIM3_Init+0xe4>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe0:	4b29      	ldr	r3, [pc, #164]	@ (8002088 <MX_TIM3_Init+0xe4>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001fe6:	4b28      	ldr	r3, [pc, #160]	@ (8002088 <MX_TIM3_Init+0xe4>)
 8001fe8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fee:	4b26      	ldr	r3, [pc, #152]	@ (8002088 <MX_TIM3_Init+0xe4>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ff4:	4b24      	ldr	r3, [pc, #144]	@ (8002088 <MX_TIM3_Init+0xe4>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ffa:	4823      	ldr	r0, [pc, #140]	@ (8002088 <MX_TIM3_Init+0xe4>)
 8001ffc:	f003 fe4c 	bl	8005c98 <HAL_TIM_Base_Init>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002006:	f000 f975 	bl	80022f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800200a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800200e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002010:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002014:	4619      	mov	r1, r3
 8002016:	481c      	ldr	r0, [pc, #112]	@ (8002088 <MX_TIM3_Init+0xe4>)
 8002018:	f004 faa2 	bl	8006560 <HAL_TIM_ConfigClockSource>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002022:	f000 f967 	bl	80022f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002026:	4818      	ldr	r0, [pc, #96]	@ (8002088 <MX_TIM3_Init+0xe4>)
 8002028:	f003 fe85 	bl	8005d36 <HAL_TIM_PWM_Init>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002032:	f000 f95f 	bl	80022f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002036:	2300      	movs	r3, #0
 8002038:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800203a:	2300      	movs	r3, #0
 800203c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800203e:	f107 0320 	add.w	r3, r7, #32
 8002042:	4619      	mov	r1, r3
 8002044:	4810      	ldr	r0, [pc, #64]	@ (8002088 <MX_TIM3_Init+0xe4>)
 8002046:	f004 ffd7 	bl	8006ff8 <HAL_TIMEx_MasterConfigSynchronization>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002050:	f000 f950 	bl	80022f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002054:	2360      	movs	r3, #96	@ 0x60
 8002056:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002058:	2300      	movs	r3, #0
 800205a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800205c:	2300      	movs	r3, #0
 800205e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002064:	1d3b      	adds	r3, r7, #4
 8002066:	2204      	movs	r2, #4
 8002068:	4619      	mov	r1, r3
 800206a:	4807      	ldr	r0, [pc, #28]	@ (8002088 <MX_TIM3_Init+0xe4>)
 800206c:	f004 f9b6 	bl	80063dc <HAL_TIM_PWM_ConfigChannel>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002076:	f000 f93d 	bl	80022f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800207a:	4803      	ldr	r0, [pc, #12]	@ (8002088 <MX_TIM3_Init+0xe4>)
 800207c:	f000 faa0 	bl	80025c0 <HAL_TIM_MspPostInit>

}
 8002080:	bf00      	nop
 8002082:	3738      	adds	r7, #56	@ 0x38
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	2000035c 	.word	0x2000035c
 800208c:	40000400 	.word	0x40000400

08002090 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002094:	4b11      	ldr	r3, [pc, #68]	@ (80020dc <MX_USART1_UART_Init+0x4c>)
 8002096:	4a12      	ldr	r2, [pc, #72]	@ (80020e0 <MX_USART1_UART_Init+0x50>)
 8002098:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800209a:	4b10      	ldr	r3, [pc, #64]	@ (80020dc <MX_USART1_UART_Init+0x4c>)
 800209c:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 80020a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020a2:	4b0e      	ldr	r3, [pc, #56]	@ (80020dc <MX_USART1_UART_Init+0x4c>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020a8:	4b0c      	ldr	r3, [pc, #48]	@ (80020dc <MX_USART1_UART_Init+0x4c>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020ae:	4b0b      	ldr	r3, [pc, #44]	@ (80020dc <MX_USART1_UART_Init+0x4c>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020b4:	4b09      	ldr	r3, [pc, #36]	@ (80020dc <MX_USART1_UART_Init+0x4c>)
 80020b6:	220c      	movs	r2, #12
 80020b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ba:	4b08      	ldr	r3, [pc, #32]	@ (80020dc <MX_USART1_UART_Init+0x4c>)
 80020bc:	2200      	movs	r2, #0
 80020be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020c0:	4b06      	ldr	r3, [pc, #24]	@ (80020dc <MX_USART1_UART_Init+0x4c>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020c6:	4805      	ldr	r0, [pc, #20]	@ (80020dc <MX_USART1_UART_Init+0x4c>)
 80020c8:	f005 f88f 	bl	80071ea <HAL_UART_Init>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80020d2:	f000 f90f 	bl	80022f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	200003a4 	.word	0x200003a4
 80020e0:	40011000 	.word	0x40011000

080020e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	607b      	str	r3, [r7, #4]
 80020ee:	4b10      	ldr	r3, [pc, #64]	@ (8002130 <MX_DMA_Init+0x4c>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f2:	4a0f      	ldr	r2, [pc, #60]	@ (8002130 <MX_DMA_Init+0x4c>)
 80020f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80020f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002130 <MX_DMA_Init+0x4c>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002102:	607b      	str	r3, [r7, #4]
 8002104:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002106:	2200      	movs	r2, #0
 8002108:	2100      	movs	r1, #0
 800210a:	203a      	movs	r0, #58	@ 0x3a
 800210c:	f001 fa5d 	bl	80035ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002110:	203a      	movs	r0, #58	@ 0x3a
 8002112:	f001 fa76 	bl	8003602 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002116:	2200      	movs	r2, #0
 8002118:	2100      	movs	r1, #0
 800211a:	2046      	movs	r0, #70	@ 0x46
 800211c:	f001 fa55 	bl	80035ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002120:	2046      	movs	r0, #70	@ 0x46
 8002122:	f001 fa6e 	bl	8003602 <HAL_NVIC_EnableIRQ>

}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40023800 	.word	0x40023800

08002134 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b088      	sub	sp, #32
 8002138:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800213a:	f107 030c 	add.w	r3, r7, #12
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	605a      	str	r2, [r3, #4]
 8002144:	609a      	str	r2, [r3, #8]
 8002146:	60da      	str	r2, [r3, #12]
 8002148:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	60bb      	str	r3, [r7, #8]
 800214e:	4b4c      	ldr	r3, [pc, #304]	@ (8002280 <MX_GPIO_Init+0x14c>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002152:	4a4b      	ldr	r2, [pc, #300]	@ (8002280 <MX_GPIO_Init+0x14c>)
 8002154:	f043 0304 	orr.w	r3, r3, #4
 8002158:	6313      	str	r3, [r2, #48]	@ 0x30
 800215a:	4b49      	ldr	r3, [pc, #292]	@ (8002280 <MX_GPIO_Init+0x14c>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	60bb      	str	r3, [r7, #8]
 8002164:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	607b      	str	r3, [r7, #4]
 800216a:	4b45      	ldr	r3, [pc, #276]	@ (8002280 <MX_GPIO_Init+0x14c>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216e:	4a44      	ldr	r2, [pc, #272]	@ (8002280 <MX_GPIO_Init+0x14c>)
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	6313      	str	r3, [r2, #48]	@ 0x30
 8002176:	4b42      	ldr	r3, [pc, #264]	@ (8002280 <MX_GPIO_Init+0x14c>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	607b      	str	r3, [r7, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	603b      	str	r3, [r7, #0]
 8002186:	4b3e      	ldr	r3, [pc, #248]	@ (8002280 <MX_GPIO_Init+0x14c>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218a:	4a3d      	ldr	r2, [pc, #244]	@ (8002280 <MX_GPIO_Init+0x14c>)
 800218c:	f043 0302 	orr.w	r3, r3, #2
 8002190:	6313      	str	r3, [r2, #48]	@ 0x30
 8002192:	4b3b      	ldr	r3, [pc, #236]	@ (8002280 <MX_GPIO_Init+0x14c>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	603b      	str	r3, [r7, #0]
 800219c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800219e:	2200      	movs	r2, #0
 80021a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021a4:	4837      	ldr	r0, [pc, #220]	@ (8002284 <MX_GPIO_Init+0x150>)
 80021a6:	f001 ffe5 	bl	8004174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZ_Pin|DIRECTION_2_Pin, GPIO_PIN_RESET);
 80021aa:	2200      	movs	r2, #0
 80021ac:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80021b0:	4835      	ldr	r0, [pc, #212]	@ (8002288 <MX_GPIO_Init+0x154>)
 80021b2:	f001 ffdf 	bl	8004174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STOP_2_Pin|STOP_DRIVER_Pin|DIRECTION_Pin, GPIO_PIN_RESET);
 80021b6:	2200      	movs	r2, #0
 80021b8:	f44f 4118 	mov.w	r1, #38912	@ 0x9800
 80021bc:	4833      	ldr	r0, [pc, #204]	@ (800228c <MX_GPIO_Init+0x158>)
 80021be:	f001 ffd9 	bl	8004174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80021c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c8:	2301      	movs	r3, #1
 80021ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d0:	2300      	movs	r3, #0
 80021d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80021d4:	f107 030c 	add.w	r3, r7, #12
 80021d8:	4619      	mov	r1, r3
 80021da:	482a      	ldr	r0, [pc, #168]	@ (8002284 <MX_GPIO_Init+0x150>)
 80021dc:	f001 fe2e 	bl	8003e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZ_Pin DIRECTION_2_Pin */
  GPIO_InitStruct.Pin = BUZZ_Pin|DIRECTION_2_Pin;
 80021e0:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80021e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e6:	2301      	movs	r3, #1
 80021e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f2:	f107 030c 	add.w	r3, r7, #12
 80021f6:	4619      	mov	r1, r3
 80021f8:	4823      	ldr	r0, [pc, #140]	@ (8002288 <MX_GPIO_Init+0x154>)
 80021fa:	f001 fe1f 	bl	8003e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : STOP_2_Pin STOP_DRIVER_Pin DIRECTION_Pin */
  GPIO_InitStruct.Pin = STOP_2_Pin|STOP_DRIVER_Pin|DIRECTION_Pin;
 80021fe:	f44f 4318 	mov.w	r3, #38912	@ 0x9800
 8002202:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002204:	2301      	movs	r3, #1
 8002206:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220c:	2300      	movs	r3, #0
 800220e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002210:	f107 030c 	add.w	r3, r7, #12
 8002214:	4619      	mov	r1, r3
 8002216:	481d      	ldr	r0, [pc, #116]	@ (800228c <MX_GPIO_Init+0x158>)
 8002218:	f001 fe10 	bl	8003e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : DIRECT_BUTTON_Pin */
  GPIO_InitStruct.Pin = DIRECT_BUTTON_Pin;
 800221c:	2308      	movs	r3, #8
 800221e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002220:	2300      	movs	r3, #0
 8002222:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DIRECT_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002228:	f107 030c 	add.w	r3, r7, #12
 800222c:	4619      	mov	r1, r3
 800222e:	4816      	ldr	r0, [pc, #88]	@ (8002288 <MX_GPIO_Init+0x154>)
 8002230:	f001 fe04 	bl	8003e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : MODE_BUT_Pin */
  GPIO_InitStruct.Pin = MODE_BUT_Pin;
 8002234:	2310      	movs	r3, #16
 8002236:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002238:	2300      	movs	r3, #0
 800223a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800223c:	2301      	movs	r3, #1
 800223e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MODE_BUT_GPIO_Port, &GPIO_InitStruct);
 8002240:	f107 030c 	add.w	r3, r7, #12
 8002244:	4619      	mov	r1, r3
 8002246:	4810      	ldr	r0, [pc, #64]	@ (8002288 <MX_GPIO_Init+0x154>)
 8002248:	f001 fdf8 	bl	8003e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : Counter_Pin */
  GPIO_InitStruct.Pin = Counter_Pin;
 800224c:	2320      	movs	r3, #32
 800224e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002250:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002254:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Counter_GPIO_Port, &GPIO_InitStruct);
 800225a:	f107 030c 	add.w	r3, r7, #12
 800225e:	4619      	mov	r1, r3
 8002260:	4809      	ldr	r0, [pc, #36]	@ (8002288 <MX_GPIO_Init+0x154>)
 8002262:	f001 fdeb 	bl	8003e3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002266:	2200      	movs	r2, #0
 8002268:	2100      	movs	r1, #0
 800226a:	2017      	movs	r0, #23
 800226c:	f001 f9ad 	bl	80035ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002270:	2017      	movs	r0, #23
 8002272:	f001 f9c6 	bl	8003602 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002276:	bf00      	nop
 8002278:	3720      	adds	r7, #32
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40023800 	.word	0x40023800
 8002284:	40020800 	.word	0x40020800
 8002288:	40020400 	.word	0x40020400
 800228c:	40020000 	.word	0x40020000

08002290 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	460b      	mov	r3, r1
 800229a:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a0f      	ldr	r2, [pc, #60]	@ (80022e0 <HAL_UARTEx_RxEventCallback+0x50>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d117      	bne.n	80022d6 <HAL_UARTEx_RxEventCallback+0x46>
	{
		//lastActivityTime = HAL_GetTick();
		LED_1_ON;
 80022a6:	2200      	movs	r2, #0
 80022a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80022ac:	480d      	ldr	r0, [pc, #52]	@ (80022e4 <HAL_UARTEx_RxEventCallback+0x54>)
 80022ae:	f001 ff61 	bl	8004174 <HAL_GPIO_WritePin>

	    __HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 80022b2:	4b0d      	ldr	r3, [pc, #52]	@ (80022e8 <HAL_UARTEx_RxEventCallback+0x58>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68da      	ldr	r2, [r3, #12]
 80022b8:	4b0b      	ldr	r3, [pc, #44]	@ (80022e8 <HAL_UARTEx_RxEventCallback+0x58>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 0210 	bic.w	r2, r2, #16
 80022c0:	60da      	str	r2, [r3, #12]

	    HAL_DMA_Abort(&hdma_usart1_rx);
 80022c2:	480a      	ldr	r0, [pc, #40]	@ (80022ec <HAL_UARTEx_RxEventCallback+0x5c>)
 80022c4:	f001 fabe 	bl	8003844 <HAL_DMA_Abort>
	    uint16_t    received_length = Size;
 80022c8:	887b      	ldrh	r3, [r7, #2]
 80022ca:	81fb      	strh	r3, [r7, #14]
	    process_received_data(rx_buffer, received_length);
 80022cc:	89fb      	ldrh	r3, [r7, #14]
 80022ce:	4619      	mov	r1, r3
 80022d0:	4807      	ldr	r0, [pc, #28]	@ (80022f0 <HAL_UARTEx_RxEventCallback+0x60>)
 80022d2:	f7fe feff 	bl	80010d4 <process_received_data>

	}
}
 80022d6:	bf00      	nop
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40011000 	.word	0x40011000
 80022e4:	40020800 	.word	0x40020800
 80022e8:	200003a4 	.word	0x200003a4
 80022ec:	200003ec 	.word	0x200003ec
 80022f0:	200001f0 	.word	0x200001f0

080022f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022f8:	b672      	cpsid	i
}
 80022fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022fc:	bf00      	nop
 80022fe:	e7fd      	b.n	80022fc <Error_Handler+0x8>

08002300 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	607b      	str	r3, [r7, #4]
 800230a:	4b13      	ldr	r3, [pc, #76]	@ (8002358 <HAL_MspInit+0x58>)
 800230c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230e:	4a12      	ldr	r2, [pc, #72]	@ (8002358 <HAL_MspInit+0x58>)
 8002310:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002314:	6453      	str	r3, [r2, #68]	@ 0x44
 8002316:	4b10      	ldr	r3, [pc, #64]	@ (8002358 <HAL_MspInit+0x58>)
 8002318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800231a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800231e:	607b      	str	r3, [r7, #4]
 8002320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	603b      	str	r3, [r7, #0]
 8002326:	4b0c      	ldr	r3, [pc, #48]	@ (8002358 <HAL_MspInit+0x58>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232a:	4a0b      	ldr	r2, [pc, #44]	@ (8002358 <HAL_MspInit+0x58>)
 800232c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002330:	6413      	str	r3, [r2, #64]	@ 0x40
 8002332:	4b09      	ldr	r3, [pc, #36]	@ (8002358 <HAL_MspInit+0x58>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800233a:	603b      	str	r3, [r7, #0]
 800233c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800233e:	2200      	movs	r2, #0
 8002340:	2100      	movs	r1, #0
 8002342:	2005      	movs	r0, #5
 8002344:	f001 f941 	bl	80035ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002348:	2005      	movs	r0, #5
 800234a:	f001 f95a 	bl	8003602 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40023800 	.word	0x40023800

0800235c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08a      	sub	sp, #40	@ 0x28
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002364:	f107 0314 	add.w	r3, r7, #20
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	609a      	str	r2, [r3, #8]
 8002370:	60da      	str	r2, [r3, #12]
 8002372:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a17      	ldr	r2, [pc, #92]	@ (80023d8 <HAL_ADC_MspInit+0x7c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d127      	bne.n	80023ce <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	613b      	str	r3, [r7, #16]
 8002382:	4b16      	ldr	r3, [pc, #88]	@ (80023dc <HAL_ADC_MspInit+0x80>)
 8002384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002386:	4a15      	ldr	r2, [pc, #84]	@ (80023dc <HAL_ADC_MspInit+0x80>)
 8002388:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800238c:	6453      	str	r3, [r2, #68]	@ 0x44
 800238e:	4b13      	ldr	r3, [pc, #76]	@ (80023dc <HAL_ADC_MspInit+0x80>)
 8002390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002392:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002396:	613b      	str	r3, [r7, #16]
 8002398:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	4b0f      	ldr	r3, [pc, #60]	@ (80023dc <HAL_ADC_MspInit+0x80>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a2:	4a0e      	ldr	r2, [pc, #56]	@ (80023dc <HAL_ADC_MspInit+0x80>)
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023aa:	4b0c      	ldr	r3, [pc, #48]	@ (80023dc <HAL_ADC_MspInit+0x80>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = INP_1_Pin|INP_2_Pin|SPEED_Pin|Pedal_Pin;
 80023b6:	2378      	movs	r3, #120	@ 0x78
 80023b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023ba:	2303      	movs	r3, #3
 80023bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023be:	2300      	movs	r3, #0
 80023c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c2:	f107 0314 	add.w	r3, r7, #20
 80023c6:	4619      	mov	r1, r3
 80023c8:	4805      	ldr	r0, [pc, #20]	@ (80023e0 <HAL_ADC_MspInit+0x84>)
 80023ca:	f001 fd37 	bl	8003e3c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80023ce:	bf00      	nop
 80023d0:	3728      	adds	r7, #40	@ 0x28
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40012000 	.word	0x40012000
 80023dc:	40023800 	.word	0x40023800
 80023e0:	40020000 	.word	0x40020000

080023e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08a      	sub	sp, #40	@ 0x28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ec:	f107 0314 	add.w	r3, r7, #20
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	605a      	str	r2, [r3, #4]
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	60da      	str	r2, [r3, #12]
 80023fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a19      	ldr	r2, [pc, #100]	@ (8002468 <HAL_I2C_MspInit+0x84>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d12b      	bne.n	800245e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	613b      	str	r3, [r7, #16]
 800240a:	4b18      	ldr	r3, [pc, #96]	@ (800246c <HAL_I2C_MspInit+0x88>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240e:	4a17      	ldr	r2, [pc, #92]	@ (800246c <HAL_I2C_MspInit+0x88>)
 8002410:	f043 0302 	orr.w	r3, r3, #2
 8002414:	6313      	str	r3, [r2, #48]	@ 0x30
 8002416:	4b15      	ldr	r3, [pc, #84]	@ (800246c <HAL_I2C_MspInit+0x88>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002422:	23c0      	movs	r3, #192	@ 0xc0
 8002424:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002426:	2312      	movs	r3, #18
 8002428:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242a:	2300      	movs	r3, #0
 800242c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800242e:	2303      	movs	r3, #3
 8002430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002432:	2304      	movs	r3, #4
 8002434:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002436:	f107 0314 	add.w	r3, r7, #20
 800243a:	4619      	mov	r1, r3
 800243c:	480c      	ldr	r0, [pc, #48]	@ (8002470 <HAL_I2C_MspInit+0x8c>)
 800243e:	f001 fcfd 	bl	8003e3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	4b09      	ldr	r3, [pc, #36]	@ (800246c <HAL_I2C_MspInit+0x88>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244a:	4a08      	ldr	r2, [pc, #32]	@ (800246c <HAL_I2C_MspInit+0x88>)
 800244c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002450:	6413      	str	r3, [r2, #64]	@ 0x40
 8002452:	4b06      	ldr	r3, [pc, #24]	@ (800246c <HAL_I2C_MspInit+0x88>)
 8002454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002456:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800245e:	bf00      	nop
 8002460:	3728      	adds	r7, #40	@ 0x28
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40005400 	.word	0x40005400
 800246c:	40023800 	.word	0x40023800
 8002470:	40020400 	.word	0x40020400

08002474 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b088      	sub	sp, #32
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800247c:	f107 030c 	add.w	r3, r7, #12
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	605a      	str	r2, [r3, #4]
 8002486:	609a      	str	r2, [r3, #8]
 8002488:	60da      	str	r2, [r3, #12]
 800248a:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a0c      	ldr	r2, [pc, #48]	@ (80024c4 <HAL_RTC_MspInit+0x50>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d111      	bne.n	80024ba <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002496:	2302      	movs	r3, #2
 8002498:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800249a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800249e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024a0:	f107 030c 	add.w	r3, r7, #12
 80024a4:	4618      	mov	r0, r3
 80024a6:	f003 f8c7 	bl	8005638 <HAL_RCCEx_PeriphCLKConfig>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80024b0:	f7ff ff20 	bl	80022f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80024b4:	4b04      	ldr	r3, [pc, #16]	@ (80024c8 <HAL_RTC_MspInit+0x54>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80024ba:	bf00      	nop
 80024bc:	3720      	adds	r7, #32
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40002800 	.word	0x40002800
 80024c8:	42470e3c 	.word	0x42470e3c

080024cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08c      	sub	sp, #48	@ 0x30
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d4:	f107 031c 	add.w	r3, r7, #28
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	605a      	str	r2, [r3, #4]
 80024de:	609a      	str	r2, [r3, #8]
 80024e0:	60da      	str	r2, [r3, #12]
 80024e2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a31      	ldr	r2, [pc, #196]	@ (80025b0 <HAL_TIM_Base_MspInit+0xe4>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d10e      	bne.n	800250c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	61bb      	str	r3, [r7, #24]
 80024f2:	4b30      	ldr	r3, [pc, #192]	@ (80025b4 <HAL_TIM_Base_MspInit+0xe8>)
 80024f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f6:	4a2f      	ldr	r2, [pc, #188]	@ (80025b4 <HAL_TIM_Base_MspInit+0xe8>)
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80024fe:	4b2d      	ldr	r3, [pc, #180]	@ (80025b4 <HAL_TIM_Base_MspInit+0xe8>)
 8002500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	61bb      	str	r3, [r7, #24]
 8002508:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800250a:	e04c      	b.n	80025a6 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM2)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002514:	d134      	bne.n	8002580 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]
 800251a:	4b26      	ldr	r3, [pc, #152]	@ (80025b4 <HAL_TIM_Base_MspInit+0xe8>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251e:	4a25      	ldr	r2, [pc, #148]	@ (80025b4 <HAL_TIM_Base_MspInit+0xe8>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	6413      	str	r3, [r2, #64]	@ 0x40
 8002526:	4b23      	ldr	r3, [pc, #140]	@ (80025b4 <HAL_TIM_Base_MspInit+0xe8>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	4b1f      	ldr	r3, [pc, #124]	@ (80025b4 <HAL_TIM_Base_MspInit+0xe8>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253a:	4a1e      	ldr	r2, [pc, #120]	@ (80025b4 <HAL_TIM_Base_MspInit+0xe8>)
 800253c:	f043 0301 	orr.w	r3, r3, #1
 8002540:	6313      	str	r3, [r2, #48]	@ 0x30
 8002542:	4b1c      	ldr	r3, [pc, #112]	@ (80025b4 <HAL_TIM_Base_MspInit+0xe8>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	613b      	str	r3, [r7, #16]
 800254c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Counter_2_Pin;
 800254e:	2301      	movs	r3, #1
 8002550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002552:	2302      	movs	r3, #2
 8002554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255a:	2300      	movs	r3, #0
 800255c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800255e:	2301      	movs	r3, #1
 8002560:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Counter_2_GPIO_Port, &GPIO_InitStruct);
 8002562:	f107 031c 	add.w	r3, r7, #28
 8002566:	4619      	mov	r1, r3
 8002568:	4813      	ldr	r0, [pc, #76]	@ (80025b8 <HAL_TIM_Base_MspInit+0xec>)
 800256a:	f001 fc67 	bl	8003e3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800256e:	2200      	movs	r2, #0
 8002570:	2100      	movs	r1, #0
 8002572:	201c      	movs	r0, #28
 8002574:	f001 f829 	bl	80035ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002578:	201c      	movs	r0, #28
 800257a:	f001 f842 	bl	8003602 <HAL_NVIC_EnableIRQ>
}
 800257e:	e012      	b.n	80025a6 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM3)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a0d      	ldr	r2, [pc, #52]	@ (80025bc <HAL_TIM_Base_MspInit+0xf0>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d10d      	bne.n	80025a6 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	4b09      	ldr	r3, [pc, #36]	@ (80025b4 <HAL_TIM_Base_MspInit+0xe8>)
 8002590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002592:	4a08      	ldr	r2, [pc, #32]	@ (80025b4 <HAL_TIM_Base_MspInit+0xe8>)
 8002594:	f043 0302 	orr.w	r3, r3, #2
 8002598:	6413      	str	r3, [r2, #64]	@ 0x40
 800259a:	4b06      	ldr	r3, [pc, #24]	@ (80025b4 <HAL_TIM_Base_MspInit+0xe8>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]
}
 80025a6:	bf00      	nop
 80025a8:	3730      	adds	r7, #48	@ 0x30
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40010000 	.word	0x40010000
 80025b4:	40023800 	.word	0x40023800
 80025b8:	40020000 	.word	0x40020000
 80025bc:	40000400 	.word	0x40000400

080025c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08a      	sub	sp, #40	@ 0x28
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c8:	f107 0314 	add.w	r3, r7, #20
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	60da      	str	r2, [r3, #12]
 80025d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a34      	ldr	r2, [pc, #208]	@ (80026b0 <HAL_TIM_MspPostInit+0xf0>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d13e      	bne.n	8002660 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	613b      	str	r3, [r7, #16]
 80025e6:	4b33      	ldr	r3, [pc, #204]	@ (80026b4 <HAL_TIM_MspPostInit+0xf4>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ea:	4a32      	ldr	r2, [pc, #200]	@ (80026b4 <HAL_TIM_MspPostInit+0xf4>)
 80025ec:	f043 0302 	orr.w	r3, r3, #2
 80025f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025f2:	4b30      	ldr	r3, [pc, #192]	@ (80026b4 <HAL_TIM_MspPostInit+0xf4>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	613b      	str	r3, [r7, #16]
 80025fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	4b2c      	ldr	r3, [pc, #176]	@ (80026b4 <HAL_TIM_MspPostInit+0xf4>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002606:	4a2b      	ldr	r2, [pc, #172]	@ (80026b4 <HAL_TIM_MspPostInit+0xf4>)
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	6313      	str	r3, [r2, #48]	@ 0x30
 800260e:	4b29      	ldr	r3, [pc, #164]	@ (80026b4 <HAL_TIM_MspPostInit+0xf4>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB13     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800261a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800261e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002620:	2302      	movs	r3, #2
 8002622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	2300      	movs	r3, #0
 8002626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002628:	2300      	movs	r3, #0
 800262a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800262c:	2301      	movs	r3, #1
 800262e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002630:	f107 0314 	add.w	r3, r7, #20
 8002634:	4619      	mov	r1, r3
 8002636:	4820      	ldr	r0, [pc, #128]	@ (80026b8 <HAL_TIM_MspPostInit+0xf8>)
 8002638:	f001 fc00 	bl	8003e3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800263c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002642:	2302      	movs	r3, #2
 8002644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002646:	2300      	movs	r3, #0
 8002648:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264a:	2300      	movs	r3, #0
 800264c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800264e:	2301      	movs	r3, #1
 8002650:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002652:	f107 0314 	add.w	r3, r7, #20
 8002656:	4619      	mov	r1, r3
 8002658:	4818      	ldr	r0, [pc, #96]	@ (80026bc <HAL_TIM_MspPostInit+0xfc>)
 800265a:	f001 fbef 	bl	8003e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800265e:	e022      	b.n	80026a6 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM3)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a16      	ldr	r2, [pc, #88]	@ (80026c0 <HAL_TIM_MspPostInit+0x100>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d11d      	bne.n	80026a6 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	60bb      	str	r3, [r7, #8]
 800266e:	4b11      	ldr	r3, [pc, #68]	@ (80026b4 <HAL_TIM_MspPostInit+0xf4>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002672:	4a10      	ldr	r2, [pc, #64]	@ (80026b4 <HAL_TIM_MspPostInit+0xf4>)
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	6313      	str	r3, [r2, #48]	@ 0x30
 800267a:	4b0e      	ldr	r3, [pc, #56]	@ (80026b4 <HAL_TIM_MspPostInit+0xf4>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	60bb      	str	r3, [r7, #8]
 8002684:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002686:	2380      	movs	r3, #128	@ 0x80
 8002688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268a:	2302      	movs	r3, #2
 800268c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268e:	2300      	movs	r3, #0
 8002690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002692:	2300      	movs	r3, #0
 8002694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002696:	2302      	movs	r3, #2
 8002698:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800269a:	f107 0314 	add.w	r3, r7, #20
 800269e:	4619      	mov	r1, r3
 80026a0:	4806      	ldr	r0, [pc, #24]	@ (80026bc <HAL_TIM_MspPostInit+0xfc>)
 80026a2:	f001 fbcb 	bl	8003e3c <HAL_GPIO_Init>
}
 80026a6:	bf00      	nop
 80026a8:	3728      	adds	r7, #40	@ 0x28
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40010000 	.word	0x40010000
 80026b4:	40023800 	.word	0x40023800
 80026b8:	40020400 	.word	0x40020400
 80026bc:	40020000 	.word	0x40020000
 80026c0:	40000400 	.word	0x40000400

080026c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08a      	sub	sp, #40	@ 0x28
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026cc:	f107 0314 	add.w	r3, r7, #20
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	609a      	str	r2, [r3, #8]
 80026d8:	60da      	str	r2, [r3, #12]
 80026da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a55      	ldr	r2, [pc, #340]	@ (8002838 <HAL_UART_MspInit+0x174>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	f040 80a3 	bne.w	800282e <HAL_UART_MspInit+0x16a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026e8:	2300      	movs	r3, #0
 80026ea:	613b      	str	r3, [r7, #16]
 80026ec:	4b53      	ldr	r3, [pc, #332]	@ (800283c <HAL_UART_MspInit+0x178>)
 80026ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f0:	4a52      	ldr	r2, [pc, #328]	@ (800283c <HAL_UART_MspInit+0x178>)
 80026f2:	f043 0310 	orr.w	r3, r3, #16
 80026f6:	6453      	str	r3, [r2, #68]	@ 0x44
 80026f8:	4b50      	ldr	r3, [pc, #320]	@ (800283c <HAL_UART_MspInit+0x178>)
 80026fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fc:	f003 0310 	and.w	r3, r3, #16
 8002700:	613b      	str	r3, [r7, #16]
 8002702:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002704:	2300      	movs	r3, #0
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	4b4c      	ldr	r3, [pc, #304]	@ (800283c <HAL_UART_MspInit+0x178>)
 800270a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270c:	4a4b      	ldr	r2, [pc, #300]	@ (800283c <HAL_UART_MspInit+0x178>)
 800270e:	f043 0301 	orr.w	r3, r3, #1
 8002712:	6313      	str	r3, [r2, #48]	@ 0x30
 8002714:	4b49      	ldr	r3, [pc, #292]	@ (800283c <HAL_UART_MspInit+0x178>)
 8002716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002720:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002726:	2302      	movs	r3, #2
 8002728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272a:	2300      	movs	r3, #0
 800272c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800272e:	2303      	movs	r3, #3
 8002730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002732:	2307      	movs	r3, #7
 8002734:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002736:	f107 0314 	add.w	r3, r7, #20
 800273a:	4619      	mov	r1, r3
 800273c:	4840      	ldr	r0, [pc, #256]	@ (8002840 <HAL_UART_MspInit+0x17c>)
 800273e:	f001 fb7d 	bl	8003e3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002742:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002746:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002748:	2302      	movs	r3, #2
 800274a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800274c:	2301      	movs	r3, #1
 800274e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002750:	2303      	movs	r3, #3
 8002752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002754:	2307      	movs	r3, #7
 8002756:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002758:	f107 0314 	add.w	r3, r7, #20
 800275c:	4619      	mov	r1, r3
 800275e:	4838      	ldr	r0, [pc, #224]	@ (8002840 <HAL_UART_MspInit+0x17c>)
 8002760:	f001 fb6c 	bl	8003e3c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002764:	4b37      	ldr	r3, [pc, #220]	@ (8002844 <HAL_UART_MspInit+0x180>)
 8002766:	4a38      	ldr	r2, [pc, #224]	@ (8002848 <HAL_UART_MspInit+0x184>)
 8002768:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800276a:	4b36      	ldr	r3, [pc, #216]	@ (8002844 <HAL_UART_MspInit+0x180>)
 800276c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002770:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002772:	4b34      	ldr	r3, [pc, #208]	@ (8002844 <HAL_UART_MspInit+0x180>)
 8002774:	2200      	movs	r2, #0
 8002776:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002778:	4b32      	ldr	r3, [pc, #200]	@ (8002844 <HAL_UART_MspInit+0x180>)
 800277a:	2200      	movs	r2, #0
 800277c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800277e:	4b31      	ldr	r3, [pc, #196]	@ (8002844 <HAL_UART_MspInit+0x180>)
 8002780:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002784:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002786:	4b2f      	ldr	r3, [pc, #188]	@ (8002844 <HAL_UART_MspInit+0x180>)
 8002788:	2200      	movs	r2, #0
 800278a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800278c:	4b2d      	ldr	r3, [pc, #180]	@ (8002844 <HAL_UART_MspInit+0x180>)
 800278e:	2200      	movs	r2, #0
 8002790:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002792:	4b2c      	ldr	r3, [pc, #176]	@ (8002844 <HAL_UART_MspInit+0x180>)
 8002794:	2200      	movs	r2, #0
 8002796:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002798:	4b2a      	ldr	r3, [pc, #168]	@ (8002844 <HAL_UART_MspInit+0x180>)
 800279a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800279e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027a0:	4b28      	ldr	r3, [pc, #160]	@ (8002844 <HAL_UART_MspInit+0x180>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80027a6:	4827      	ldr	r0, [pc, #156]	@ (8002844 <HAL_UART_MspInit+0x180>)
 80027a8:	f000 ff46 	bl	8003638 <HAL_DMA_Init>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 80027b2:	f7ff fd9f 	bl	80022f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a22      	ldr	r2, [pc, #136]	@ (8002844 <HAL_UART_MspInit+0x180>)
 80027ba:	63da      	str	r2, [r3, #60]	@ 0x3c
 80027bc:	4a21      	ldr	r2, [pc, #132]	@ (8002844 <HAL_UART_MspInit+0x180>)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80027c2:	4b22      	ldr	r3, [pc, #136]	@ (800284c <HAL_UART_MspInit+0x188>)
 80027c4:	4a22      	ldr	r2, [pc, #136]	@ (8002850 <HAL_UART_MspInit+0x18c>)
 80027c6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80027c8:	4b20      	ldr	r3, [pc, #128]	@ (800284c <HAL_UART_MspInit+0x188>)
 80027ca:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80027ce:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027d0:	4b1e      	ldr	r3, [pc, #120]	@ (800284c <HAL_UART_MspInit+0x188>)
 80027d2:	2240      	movs	r2, #64	@ 0x40
 80027d4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027d6:	4b1d      	ldr	r3, [pc, #116]	@ (800284c <HAL_UART_MspInit+0x188>)
 80027d8:	2200      	movs	r2, #0
 80027da:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027dc:	4b1b      	ldr	r3, [pc, #108]	@ (800284c <HAL_UART_MspInit+0x188>)
 80027de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027e2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027e4:	4b19      	ldr	r3, [pc, #100]	@ (800284c <HAL_UART_MspInit+0x188>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027ea:	4b18      	ldr	r3, [pc, #96]	@ (800284c <HAL_UART_MspInit+0x188>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80027f0:	4b16      	ldr	r3, [pc, #88]	@ (800284c <HAL_UART_MspInit+0x188>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80027f6:	4b15      	ldr	r3, [pc, #84]	@ (800284c <HAL_UART_MspInit+0x188>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027fc:	4b13      	ldr	r3, [pc, #76]	@ (800284c <HAL_UART_MspInit+0x188>)
 80027fe:	2200      	movs	r2, #0
 8002800:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002802:	4812      	ldr	r0, [pc, #72]	@ (800284c <HAL_UART_MspInit+0x188>)
 8002804:	f000 ff18 	bl	8003638 <HAL_DMA_Init>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <HAL_UART_MspInit+0x14e>
    {
      Error_Handler();
 800280e:	f7ff fd71 	bl	80022f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a0d      	ldr	r2, [pc, #52]	@ (800284c <HAL_UART_MspInit+0x188>)
 8002816:	639a      	str	r2, [r3, #56]	@ 0x38
 8002818:	4a0c      	ldr	r2, [pc, #48]	@ (800284c <HAL_UART_MspInit+0x188>)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800281e:	2200      	movs	r2, #0
 8002820:	2100      	movs	r1, #0
 8002822:	2025      	movs	r0, #37	@ 0x25
 8002824:	f000 fed1 	bl	80035ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002828:	2025      	movs	r0, #37	@ 0x25
 800282a:	f000 feea 	bl	8003602 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800282e:	bf00      	nop
 8002830:	3728      	adds	r7, #40	@ 0x28
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40011000 	.word	0x40011000
 800283c:	40023800 	.word	0x40023800
 8002840:	40020000 	.word	0x40020000
 8002844:	200003ec 	.word	0x200003ec
 8002848:	40026440 	.word	0x40026440
 800284c:	2000044c 	.word	0x2000044c
 8002850:	400264b8 	.word	0x400264b8

08002854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002858:	bf00      	nop
 800285a:	e7fd      	b.n	8002858 <NMI_Handler+0x4>

0800285c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002860:	bf00      	nop
 8002862:	e7fd      	b.n	8002860 <HardFault_Handler+0x4>

08002864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002868:	bf00      	nop
 800286a:	e7fd      	b.n	8002868 <MemManage_Handler+0x4>

0800286c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002870:	bf00      	nop
 8002872:	e7fd      	b.n	8002870 <BusFault_Handler+0x4>

08002874 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002878:	bf00      	nop
 800287a:	e7fd      	b.n	8002878 <UsageFault_Handler+0x4>

0800287c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002880:	bf00      	nop
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800288a:	b480      	push	{r7}
 800288c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800288e:	bf00      	nop
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800289c:	bf00      	nop
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028aa:	f000 f98d 	bl	8002bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028ae:	bf00      	nop
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80028b2:	b480      	push	{r7}
 80028b4:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80028b6:	bf00      	nop
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Counter_Pin);
 80028c4:	2020      	movs	r0, #32
 80028c6:	f001 fc6f 	bl	80041a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80028ca:	bf00      	nop
 80028cc:	bd80      	pop	{r7, pc}
	...

080028d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80028d4:	4802      	ldr	r0, [pc, #8]	@ (80028e0 <TIM2_IRQHandler+0x10>)
 80028d6:	f003 fbf4 	bl	80060c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80028da:	bf00      	nop
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	20000314 	.word	0x20000314

080028e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80028e8:	4802      	ldr	r0, [pc, #8]	@ (80028f4 <USART1_IRQHandler+0x10>)
 80028ea:	f004 fd9d 	bl	8007428 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	200003a4 	.word	0x200003a4

080028f8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80028fc:	4802      	ldr	r0, [pc, #8]	@ (8002908 <DMA2_Stream2_IRQHandler+0x10>)
 80028fe:	f001 f833 	bl	8003968 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002902:	bf00      	nop
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	200003ec 	.word	0x200003ec

0800290c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002910:	4802      	ldr	r0, [pc, #8]	@ (800291c <DMA2_Stream7_IRQHandler+0x10>)
 8002912:	f001 f829 	bl	8003968 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002916:	bf00      	nop
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	2000044c 	.word	0x2000044c

08002920 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  return 1;
 8002924:	2301      	movs	r3, #1
}
 8002926:	4618      	mov	r0, r3
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <_kill>:

int _kill(int pid, int sig)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800293a:	f006 fc2d 	bl	8009198 <__errno>
 800293e:	4603      	mov	r3, r0
 8002940:	2216      	movs	r2, #22
 8002942:	601a      	str	r2, [r3, #0]
  return -1;
 8002944:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002948:	4618      	mov	r0, r3
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <_exit>:

void _exit (int status)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002958:	f04f 31ff 	mov.w	r1, #4294967295
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f7ff ffe7 	bl	8002930 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002962:	bf00      	nop
 8002964:	e7fd      	b.n	8002962 <_exit+0x12>

08002966 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b086      	sub	sp, #24
 800296a:	af00      	add	r7, sp, #0
 800296c:	60f8      	str	r0, [r7, #12]
 800296e:	60b9      	str	r1, [r7, #8]
 8002970:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002972:	2300      	movs	r3, #0
 8002974:	617b      	str	r3, [r7, #20]
 8002976:	e00a      	b.n	800298e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002978:	f3af 8000 	nop.w
 800297c:	4601      	mov	r1, r0
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	1c5a      	adds	r2, r3, #1
 8002982:	60ba      	str	r2, [r7, #8]
 8002984:	b2ca      	uxtb	r2, r1
 8002986:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	3301      	adds	r3, #1
 800298c:	617b      	str	r3, [r7, #20]
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	429a      	cmp	r2, r3
 8002994:	dbf0      	blt.n	8002978 <_read+0x12>
  }

  return len;
 8002996:	687b      	ldr	r3, [r7, #4]
}
 8002998:	4618      	mov	r0, r3
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ac:	2300      	movs	r3, #0
 80029ae:	617b      	str	r3, [r7, #20]
 80029b0:	e009      	b.n	80029c6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	1c5a      	adds	r2, r3, #1
 80029b6:	60ba      	str	r2, [r7, #8]
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	3301      	adds	r3, #1
 80029c4:	617b      	str	r3, [r7, #20]
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	dbf1      	blt.n	80029b2 <_write+0x12>
  }
  return len;
 80029ce:	687b      	ldr	r3, [r7, #4]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <_close>:

int _close(int file)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80029e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a00:	605a      	str	r2, [r3, #4]
  return 0;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <_isatty>:

int _isatty(int file)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a18:	2301      	movs	r3, #1
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b085      	sub	sp, #20
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	60f8      	str	r0, [r7, #12]
 8002a2e:	60b9      	str	r1, [r7, #8]
 8002a30:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a48:	4a14      	ldr	r2, [pc, #80]	@ (8002a9c <_sbrk+0x5c>)
 8002a4a:	4b15      	ldr	r3, [pc, #84]	@ (8002aa0 <_sbrk+0x60>)
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a54:	4b13      	ldr	r3, [pc, #76]	@ (8002aa4 <_sbrk+0x64>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d102      	bne.n	8002a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a5c:	4b11      	ldr	r3, [pc, #68]	@ (8002aa4 <_sbrk+0x64>)
 8002a5e:	4a12      	ldr	r2, [pc, #72]	@ (8002aa8 <_sbrk+0x68>)
 8002a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a62:	4b10      	ldr	r3, [pc, #64]	@ (8002aa4 <_sbrk+0x64>)
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4413      	add	r3, r2
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d207      	bcs.n	8002a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a70:	f006 fb92 	bl	8009198 <__errno>
 8002a74:	4603      	mov	r3, r0
 8002a76:	220c      	movs	r2, #12
 8002a78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a7e:	e009      	b.n	8002a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a80:	4b08      	ldr	r3, [pc, #32]	@ (8002aa4 <_sbrk+0x64>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a86:	4b07      	ldr	r3, [pc, #28]	@ (8002aa4 <_sbrk+0x64>)
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	4a05      	ldr	r2, [pc, #20]	@ (8002aa4 <_sbrk+0x64>)
 8002a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a92:	68fb      	ldr	r3, [r7, #12]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3718      	adds	r7, #24
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	20010000 	.word	0x20010000
 8002aa0:	00000400 	.word	0x00000400
 8002aa4:	200004e8 	.word	0x200004e8
 8002aa8:	20000640 	.word	0x20000640

08002aac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ab0:	4b06      	ldr	r3, [pc, #24]	@ (8002acc <SystemInit+0x20>)
 8002ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab6:	4a05      	ldr	r2, [pc, #20]	@ (8002acc <SystemInit+0x20>)
 8002ab8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002abc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ac0:	bf00      	nop
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	e000ed00 	.word	0xe000ed00

08002ad0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ad0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b08 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002ad4:	f7ff ffea 	bl	8002aac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ad8:	480c      	ldr	r0, [pc, #48]	@ (8002b0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ada:	490d      	ldr	r1, [pc, #52]	@ (8002b10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002adc:	4a0d      	ldr	r2, [pc, #52]	@ (8002b14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ae0:	e002      	b.n	8002ae8 <LoopCopyDataInit>

08002ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ae6:	3304      	adds	r3, #4

08002ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002aec:	d3f9      	bcc.n	8002ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aee:	4a0a      	ldr	r2, [pc, #40]	@ (8002b18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002af0:	4c0a      	ldr	r4, [pc, #40]	@ (8002b1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002af4:	e001      	b.n	8002afa <LoopFillZerobss>

08002af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002af8:	3204      	adds	r2, #4

08002afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002afc:	d3fb      	bcc.n	8002af6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002afe:	f006 fb51 	bl	80091a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b02:	f7fe fd3b 	bl	800157c <main>
  bx  lr    
 8002b06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b08:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b10:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002b14:	0800b728 	.word	0x0800b728
  ldr r2, =_sbss
 8002b18:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002b1c:	2000063c 	.word	0x2000063c

08002b20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b20:	e7fe      	b.n	8002b20 <ADC_IRQHandler>
	...

08002b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b28:	4b0e      	ldr	r3, [pc, #56]	@ (8002b64 <HAL_Init+0x40>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b64 <HAL_Init+0x40>)
 8002b2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b34:	4b0b      	ldr	r3, [pc, #44]	@ (8002b64 <HAL_Init+0x40>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a0a      	ldr	r2, [pc, #40]	@ (8002b64 <HAL_Init+0x40>)
 8002b3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b40:	4b08      	ldr	r3, [pc, #32]	@ (8002b64 <HAL_Init+0x40>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a07      	ldr	r2, [pc, #28]	@ (8002b64 <HAL_Init+0x40>)
 8002b46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b4c:	2003      	movs	r0, #3
 8002b4e:	f000 fd31 	bl	80035b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b52:	200f      	movs	r0, #15
 8002b54:	f000 f808 	bl	8002b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b58:	f7ff fbd2 	bl	8002300 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40023c00 	.word	0x40023c00

08002b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b70:	4b12      	ldr	r3, [pc, #72]	@ (8002bbc <HAL_InitTick+0x54>)
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	4b12      	ldr	r3, [pc, #72]	@ (8002bc0 <HAL_InitTick+0x58>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	4619      	mov	r1, r3
 8002b7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 fd49 	bl	800361e <HAL_SYSTICK_Config>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e00e      	b.n	8002bb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b0f      	cmp	r3, #15
 8002b9a:	d80a      	bhi.n	8002bb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba4:	f000 fd11 	bl	80035ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ba8:	4a06      	ldr	r2, [pc, #24]	@ (8002bc4 <HAL_InitTick+0x5c>)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	e000      	b.n	8002bb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	20000000 	.word	0x20000000
 8002bc0:	20000008 	.word	0x20000008
 8002bc4:	20000004 	.word	0x20000004

08002bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bcc:	4b06      	ldr	r3, [pc, #24]	@ (8002be8 <HAL_IncTick+0x20>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	4b06      	ldr	r3, [pc, #24]	@ (8002bec <HAL_IncTick+0x24>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	4a04      	ldr	r2, [pc, #16]	@ (8002bec <HAL_IncTick+0x24>)
 8002bda:	6013      	str	r3, [r2, #0]
}
 8002bdc:	bf00      	nop
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	20000008 	.word	0x20000008
 8002bec:	200004ec 	.word	0x200004ec

08002bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8002bf4:	4b03      	ldr	r3, [pc, #12]	@ (8002c04 <HAL_GetTick+0x14>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	200004ec 	.word	0x200004ec

08002c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c10:	f7ff ffee 	bl	8002bf0 <HAL_GetTick>
 8002c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c20:	d005      	beq.n	8002c2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c22:	4b0a      	ldr	r3, [pc, #40]	@ (8002c4c <HAL_Delay+0x44>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c2e:	bf00      	nop
 8002c30:	f7ff ffde 	bl	8002bf0 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d8f7      	bhi.n	8002c30 <HAL_Delay+0x28>
  {
  }
}
 8002c40:	bf00      	nop
 8002c42:	bf00      	nop
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20000008 	.word	0x20000008

08002c50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e033      	b.n	8002cce <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d109      	bne.n	8002c82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7ff fb74 	bl	800235c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c86:	f003 0310 	and.w	r3, r3, #16
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d118      	bne.n	8002cc0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c92:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002c96:	f023 0302 	bic.w	r3, r3, #2
 8002c9a:	f043 0202 	orr.w	r2, r3, #2
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 faba 	bl	800321c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb2:	f023 0303 	bic.w	r3, r3, #3
 8002cb6:	f043 0201 	orr.w	r2, r3, #1
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	641a      	str	r2, [r3, #64]	@ 0x40
 8002cbe:	e001      	b.n	8002cc4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
	...

08002cd8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d101      	bne.n	8002cf2 <HAL_ADC_Start+0x1a>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e097      	b.n	8002e22 <HAL_ADC_Start+0x14a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d018      	beq.n	8002d3a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689a      	ldr	r2, [r3, #8]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 0201 	orr.w	r2, r2, #1
 8002d16:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d18:	4b45      	ldr	r3, [pc, #276]	@ (8002e30 <HAL_ADC_Start+0x158>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a45      	ldr	r2, [pc, #276]	@ (8002e34 <HAL_ADC_Start+0x15c>)
 8002d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d22:	0c9a      	lsrs	r2, r3, #18
 8002d24:	4613      	mov	r3, r2
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	4413      	add	r3, r2
 8002d2a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002d2c:	e002      	b.n	8002d34 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	3b01      	subs	r3, #1
 8002d32:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f9      	bne.n	8002d2e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d15f      	bne.n	8002e08 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002d50:	f023 0301 	bic.w	r3, r3, #1
 8002d54:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d007      	beq.n	8002d7a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002d72:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d86:	d106      	bne.n	8002d96 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d8c:	f023 0206 	bic.w	r2, r3, #6
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	645a      	str	r2, [r3, #68]	@ 0x44
 8002d94:	e002      	b.n	8002d9c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002da4:	4b24      	ldr	r3, [pc, #144]	@ (8002e38 <HAL_ADC_Start+0x160>)
 8002da6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002db0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f003 031f 	and.w	r3, r3, #31
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10f      	bne.n	8002dde <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d129      	bne.n	8002e20 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002dda:	609a      	str	r2, [r3, #8]
 8002ddc:	e020      	b.n	8002e20 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a16      	ldr	r2, [pc, #88]	@ (8002e3c <HAL_ADC_Start+0x164>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d11b      	bne.n	8002e20 <HAL_ADC_Start+0x148>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d114      	bne.n	8002e20 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002e04:	609a      	str	r2, [r3, #8]
 8002e06:	e00b      	b.n	8002e20 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0c:	f043 0210 	orr.w	r2, r3, #16
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e18:	f043 0201 	orr.w	r2, r3, #1
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3714      	adds	r7, #20
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	20000000 	.word	0x20000000
 8002e34:	431bde83 	.word	0x431bde83
 8002e38:	40012300 	.word	0x40012300
 8002e3c:	40012000 	.word	0x40012000

08002e40 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d101      	bne.n	8002e56 <HAL_ADC_Stop+0x16>
 8002e52:	2302      	movs	r3, #2
 8002e54:	e021      	b.n	8002e9a <HAL_ADC_Stop+0x5a>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 0201 	bic.w	r2, r2, #1
 8002e6c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d109      	bne.n	8002e90 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e80:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002e84:	f023 0301 	bic.w	r3, r3, #1
 8002e88:	f043 0201 	orr.w	r2, r3, #1
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b084      	sub	sp, #16
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
 8002eae:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ebe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ec2:	d113      	bne.n	8002eec <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002ece:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ed2:	d10b      	bne.n	8002eec <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed8:	f043 0220 	orr.w	r2, r3, #32
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e063      	b.n	8002fb4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002eec:	f7ff fe80 	bl	8002bf0 <HAL_GetTick>
 8002ef0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ef2:	e021      	b.n	8002f38 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efa:	d01d      	beq.n	8002f38 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d007      	beq.n	8002f12 <HAL_ADC_PollForConversion+0x6c>
 8002f02:	f7ff fe75 	bl	8002bf0 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d212      	bcs.n	8002f38 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d00b      	beq.n	8002f38 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f24:	f043 0204 	orr.w	r2, r3, #4
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e03d      	b.n	8002fb4 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d1d6      	bne.n	8002ef4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f06f 0212 	mvn.w	r2, #18
 8002f4e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f54:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d123      	bne.n	8002fb2 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d11f      	bne.n	8002fb2 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f78:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d006      	beq.n	8002f8e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d111      	bne.n	8002fb2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f92:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d105      	bne.n	8002fb2 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002faa:	f043 0201 	orr.w	r2, r3, #1
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
	...

08002fd8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d101      	bne.n	8002ff4 <HAL_ADC_ConfigChannel+0x1c>
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	e105      	b.n	8003200 <HAL_ADC_ConfigChannel+0x228>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2b09      	cmp	r3, #9
 8003002:	d925      	bls.n	8003050 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68d9      	ldr	r1, [r3, #12]
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	b29b      	uxth	r3, r3
 8003010:	461a      	mov	r2, r3
 8003012:	4613      	mov	r3, r2
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	4413      	add	r3, r2
 8003018:	3b1e      	subs	r3, #30
 800301a:	2207      	movs	r2, #7
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	43da      	mvns	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	400a      	ands	r2, r1
 8003028:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68d9      	ldr	r1, [r3, #12]
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	b29b      	uxth	r3, r3
 800303a:	4618      	mov	r0, r3
 800303c:	4603      	mov	r3, r0
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	4403      	add	r3, r0
 8003042:	3b1e      	subs	r3, #30
 8003044:	409a      	lsls	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	60da      	str	r2, [r3, #12]
 800304e:	e022      	b.n	8003096 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6919      	ldr	r1, [r3, #16]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	b29b      	uxth	r3, r3
 800305c:	461a      	mov	r2, r3
 800305e:	4613      	mov	r3, r2
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	4413      	add	r3, r2
 8003064:	2207      	movs	r2, #7
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	43da      	mvns	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	400a      	ands	r2, r1
 8003072:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6919      	ldr	r1, [r3, #16]
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	b29b      	uxth	r3, r3
 8003084:	4618      	mov	r0, r3
 8003086:	4603      	mov	r3, r0
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	4403      	add	r3, r0
 800308c:	409a      	lsls	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b06      	cmp	r3, #6
 800309c:	d824      	bhi.n	80030e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	4613      	mov	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	3b05      	subs	r3, #5
 80030b0:	221f      	movs	r2, #31
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	43da      	mvns	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	400a      	ands	r2, r1
 80030be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	4618      	mov	r0, r3
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685a      	ldr	r2, [r3, #4]
 80030d2:	4613      	mov	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4413      	add	r3, r2
 80030d8:	3b05      	subs	r3, #5
 80030da:	fa00 f203 	lsl.w	r2, r0, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80030e6:	e04c      	b.n	8003182 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	2b0c      	cmp	r3, #12
 80030ee:	d824      	bhi.n	800313a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	4613      	mov	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	3b23      	subs	r3, #35	@ 0x23
 8003102:	221f      	movs	r2, #31
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	43da      	mvns	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	400a      	ands	r2, r1
 8003110:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	b29b      	uxth	r3, r3
 800311e:	4618      	mov	r0, r3
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	4613      	mov	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	3b23      	subs	r3, #35	@ 0x23
 800312c:	fa00 f203 	lsl.w	r2, r0, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	631a      	str	r2, [r3, #48]	@ 0x30
 8003138:	e023      	b.n	8003182 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	4613      	mov	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	3b41      	subs	r3, #65	@ 0x41
 800314c:	221f      	movs	r2, #31
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	43da      	mvns	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	400a      	ands	r2, r1
 800315a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	b29b      	uxth	r3, r3
 8003168:	4618      	mov	r0, r3
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	4613      	mov	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4413      	add	r3, r2
 8003174:	3b41      	subs	r3, #65	@ 0x41
 8003176:	fa00 f203 	lsl.w	r2, r0, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	430a      	orrs	r2, r1
 8003180:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003182:	4b22      	ldr	r3, [pc, #136]	@ (800320c <HAL_ADC_ConfigChannel+0x234>)
 8003184:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a21      	ldr	r2, [pc, #132]	@ (8003210 <HAL_ADC_ConfigChannel+0x238>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d109      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x1cc>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2b12      	cmp	r3, #18
 8003196:	d105      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a19      	ldr	r2, [pc, #100]	@ (8003210 <HAL_ADC_ConfigChannel+0x238>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d123      	bne.n	80031f6 <HAL_ADC_ConfigChannel+0x21e>
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2b10      	cmp	r3, #16
 80031b4:	d003      	beq.n	80031be <HAL_ADC_ConfigChannel+0x1e6>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2b11      	cmp	r3, #17
 80031bc:	d11b      	bne.n	80031f6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2b10      	cmp	r3, #16
 80031d0:	d111      	bne.n	80031f6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031d2:	4b10      	ldr	r3, [pc, #64]	@ (8003214 <HAL_ADC_ConfigChannel+0x23c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a10      	ldr	r2, [pc, #64]	@ (8003218 <HAL_ADC_ConfigChannel+0x240>)
 80031d8:	fba2 2303 	umull	r2, r3, r2, r3
 80031dc:	0c9a      	lsrs	r2, r3, #18
 80031de:	4613      	mov	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80031e8:	e002      	b.n	80031f0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	3b01      	subs	r3, #1
 80031ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1f9      	bne.n	80031ea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3714      	adds	r7, #20
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	40012300 	.word	0x40012300
 8003210:	40012000 	.word	0x40012000
 8003214:	20000000 	.word	0x20000000
 8003218:	431bde83 	.word	0x431bde83

0800321c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003224:	4b79      	ldr	r3, [pc, #484]	@ (800340c <ADC_Init+0x1f0>)
 8003226:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	431a      	orrs	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003250:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6859      	ldr	r1, [r3, #4]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	021a      	lsls	r2, r3, #8
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003274:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6859      	ldr	r1, [r3, #4]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	430a      	orrs	r2, r1
 8003286:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003296:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6899      	ldr	r1, [r3, #8]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68da      	ldr	r2, [r3, #12]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ae:	4a58      	ldr	r2, [pc, #352]	@ (8003410 <ADC_Init+0x1f4>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d022      	beq.n	80032fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689a      	ldr	r2, [r3, #8]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80032c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6899      	ldr	r1, [r3, #8]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80032e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6899      	ldr	r1, [r3, #8]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	609a      	str	r2, [r3, #8]
 80032f8:	e00f      	b.n	800331a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003308:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003318:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0202 	bic.w	r2, r2, #2
 8003328:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6899      	ldr	r1, [r3, #8]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	7e1b      	ldrb	r3, [r3, #24]
 8003334:	005a      	lsls	r2, r3, #1
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d01b      	beq.n	8003380 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003356:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003366:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6859      	ldr	r1, [r3, #4]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003372:	3b01      	subs	r3, #1
 8003374:	035a      	lsls	r2, r3, #13
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	605a      	str	r2, [r3, #4]
 800337e:	e007      	b.n	8003390 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800338e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800339e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	3b01      	subs	r3, #1
 80033ac:	051a      	lsls	r2, r3, #20
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80033c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6899      	ldr	r1, [r3, #8]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80033d2:	025a      	lsls	r2, r3, #9
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	430a      	orrs	r2, r1
 80033da:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689a      	ldr	r2, [r3, #8]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6899      	ldr	r1, [r3, #8]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	029a      	lsls	r2, r3, #10
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	609a      	str	r2, [r3, #8]
}
 8003400:	bf00      	nop
 8003402:	3714      	adds	r7, #20
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	40012300 	.word	0x40012300
 8003410:	0f000001 	.word	0x0f000001

08003414 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003424:	4b0c      	ldr	r3, [pc, #48]	@ (8003458 <__NVIC_SetPriorityGrouping+0x44>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003430:	4013      	ands	r3, r2
 8003432:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800343c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003440:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003446:	4a04      	ldr	r2, [pc, #16]	@ (8003458 <__NVIC_SetPriorityGrouping+0x44>)
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	60d3      	str	r3, [r2, #12]
}
 800344c:	bf00      	nop
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	e000ed00 	.word	0xe000ed00

0800345c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003460:	4b04      	ldr	r3, [pc, #16]	@ (8003474 <__NVIC_GetPriorityGrouping+0x18>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	0a1b      	lsrs	r3, r3, #8
 8003466:	f003 0307 	and.w	r3, r3, #7
}
 800346a:	4618      	mov	r0, r3
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr
 8003474:	e000ed00 	.word	0xe000ed00

08003478 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	4603      	mov	r3, r0
 8003480:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003486:	2b00      	cmp	r3, #0
 8003488:	db0b      	blt.n	80034a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800348a:	79fb      	ldrb	r3, [r7, #7]
 800348c:	f003 021f 	and.w	r2, r3, #31
 8003490:	4907      	ldr	r1, [pc, #28]	@ (80034b0 <__NVIC_EnableIRQ+0x38>)
 8003492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003496:	095b      	lsrs	r3, r3, #5
 8003498:	2001      	movs	r0, #1
 800349a:	fa00 f202 	lsl.w	r2, r0, r2
 800349e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	e000e100 	.word	0xe000e100

080034b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	4603      	mov	r3, r0
 80034bc:	6039      	str	r1, [r7, #0]
 80034be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	db0a      	blt.n	80034de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	b2da      	uxtb	r2, r3
 80034cc:	490c      	ldr	r1, [pc, #48]	@ (8003500 <__NVIC_SetPriority+0x4c>)
 80034ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d2:	0112      	lsls	r2, r2, #4
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	440b      	add	r3, r1
 80034d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034dc:	e00a      	b.n	80034f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	4908      	ldr	r1, [pc, #32]	@ (8003504 <__NVIC_SetPriority+0x50>)
 80034e4:	79fb      	ldrb	r3, [r7, #7]
 80034e6:	f003 030f 	and.w	r3, r3, #15
 80034ea:	3b04      	subs	r3, #4
 80034ec:	0112      	lsls	r2, r2, #4
 80034ee:	b2d2      	uxtb	r2, r2
 80034f0:	440b      	add	r3, r1
 80034f2:	761a      	strb	r2, [r3, #24]
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	e000e100 	.word	0xe000e100
 8003504:	e000ed00 	.word	0xe000ed00

08003508 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003508:	b480      	push	{r7}
 800350a:	b089      	sub	sp, #36	@ 0x24
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	f1c3 0307 	rsb	r3, r3, #7
 8003522:	2b04      	cmp	r3, #4
 8003524:	bf28      	it	cs
 8003526:	2304      	movcs	r3, #4
 8003528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	3304      	adds	r3, #4
 800352e:	2b06      	cmp	r3, #6
 8003530:	d902      	bls.n	8003538 <NVIC_EncodePriority+0x30>
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	3b03      	subs	r3, #3
 8003536:	e000      	b.n	800353a <NVIC_EncodePriority+0x32>
 8003538:	2300      	movs	r3, #0
 800353a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800353c:	f04f 32ff 	mov.w	r2, #4294967295
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	43da      	mvns	r2, r3
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	401a      	ands	r2, r3
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003550:	f04f 31ff 	mov.w	r1, #4294967295
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	fa01 f303 	lsl.w	r3, r1, r3
 800355a:	43d9      	mvns	r1, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003560:	4313      	orrs	r3, r2
         );
}
 8003562:	4618      	mov	r0, r3
 8003564:	3724      	adds	r7, #36	@ 0x24
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
	...

08003570 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	3b01      	subs	r3, #1
 800357c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003580:	d301      	bcc.n	8003586 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003582:	2301      	movs	r3, #1
 8003584:	e00f      	b.n	80035a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003586:	4a0a      	ldr	r2, [pc, #40]	@ (80035b0 <SysTick_Config+0x40>)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3b01      	subs	r3, #1
 800358c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800358e:	210f      	movs	r1, #15
 8003590:	f04f 30ff 	mov.w	r0, #4294967295
 8003594:	f7ff ff8e 	bl	80034b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003598:	4b05      	ldr	r3, [pc, #20]	@ (80035b0 <SysTick_Config+0x40>)
 800359a:	2200      	movs	r2, #0
 800359c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800359e:	4b04      	ldr	r3, [pc, #16]	@ (80035b0 <SysTick_Config+0x40>)
 80035a0:	2207      	movs	r2, #7
 80035a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	e000e010 	.word	0xe000e010

080035b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f7ff ff29 	bl	8003414 <__NVIC_SetPriorityGrouping>
}
 80035c2:	bf00      	nop
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b086      	sub	sp, #24
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	4603      	mov	r3, r0
 80035d2:	60b9      	str	r1, [r7, #8]
 80035d4:	607a      	str	r2, [r7, #4]
 80035d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035d8:	2300      	movs	r3, #0
 80035da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035dc:	f7ff ff3e 	bl	800345c <__NVIC_GetPriorityGrouping>
 80035e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	68b9      	ldr	r1, [r7, #8]
 80035e6:	6978      	ldr	r0, [r7, #20]
 80035e8:	f7ff ff8e 	bl	8003508 <NVIC_EncodePriority>
 80035ec:	4602      	mov	r2, r0
 80035ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035f2:	4611      	mov	r1, r2
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff ff5d 	bl	80034b4 <__NVIC_SetPriority>
}
 80035fa:	bf00      	nop
 80035fc:	3718      	adds	r7, #24
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b082      	sub	sp, #8
 8003606:	af00      	add	r7, sp, #0
 8003608:	4603      	mov	r3, r0
 800360a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800360c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003610:	4618      	mov	r0, r3
 8003612:	f7ff ff31 	bl	8003478 <__NVIC_EnableIRQ>
}
 8003616:	bf00      	nop
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b082      	sub	sp, #8
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7ff ffa2 	bl	8003570 <SysTick_Config>
 800362c:	4603      	mov	r3, r0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
	...

08003638 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003640:	2300      	movs	r3, #0
 8003642:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003644:	f7ff fad4 	bl	8002bf0 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e099      	b.n	8003788 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2202      	movs	r2, #2
 8003658:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0201 	bic.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003674:	e00f      	b.n	8003696 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003676:	f7ff fabb 	bl	8002bf0 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b05      	cmp	r3, #5
 8003682:	d908      	bls.n	8003696 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2220      	movs	r2, #32
 8003688:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2203      	movs	r2, #3
 800368e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e078      	b.n	8003788 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1e8      	bne.n	8003676 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	4b38      	ldr	r3, [pc, #224]	@ (8003790 <HAL_DMA_Init+0x158>)
 80036b0:	4013      	ands	r3, r2
 80036b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ec:	2b04      	cmp	r3, #4
 80036ee:	d107      	bne.n	8003700 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f8:	4313      	orrs	r3, r2
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	f023 0307 	bic.w	r3, r3, #7
 8003716:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	4313      	orrs	r3, r2
 8003720:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003726:	2b04      	cmp	r3, #4
 8003728:	d117      	bne.n	800375a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	4313      	orrs	r3, r2
 8003732:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00e      	beq.n	800375a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 fb01 	bl	8003d44 <DMA_CheckFifoParam>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d008      	beq.n	800375a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2240      	movs	r2, #64	@ 0x40
 800374c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003756:	2301      	movs	r3, #1
 8003758:	e016      	b.n	8003788 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 fab8 	bl	8003cd8 <DMA_CalcBaseAndBitshift>
 8003768:	4603      	mov	r3, r0
 800376a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003770:	223f      	movs	r2, #63	@ 0x3f
 8003772:	409a      	lsls	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3718      	adds	r7, #24
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	f010803f 	.word	0xf010803f

08003794 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037a2:	2300      	movs	r3, #0
 80037a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d101      	bne.n	80037ba <HAL_DMA_Start_IT+0x26>
 80037b6:	2302      	movs	r3, #2
 80037b8:	e040      	b.n	800383c <HAL_DMA_Start_IT+0xa8>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d12f      	bne.n	800382e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2202      	movs	r2, #2
 80037d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	68b9      	ldr	r1, [r7, #8]
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f000 fa4a 	bl	8003c7c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ec:	223f      	movs	r2, #63	@ 0x3f
 80037ee:	409a      	lsls	r2, r3
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f042 0216 	orr.w	r2, r2, #22
 8003802:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003808:	2b00      	cmp	r3, #0
 800380a:	d007      	beq.n	800381c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f042 0208 	orr.w	r2, r2, #8
 800381a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 0201 	orr.w	r2, r2, #1
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	e005      	b.n	800383a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003836:	2302      	movs	r3, #2
 8003838:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800383a:	7dfb      	ldrb	r3, [r7, #23]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3718      	adds	r7, #24
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003850:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003852:	f7ff f9cd 	bl	8002bf0 <HAL_GetTick>
 8003856:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d008      	beq.n	8003876 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2280      	movs	r2, #128	@ 0x80
 8003868:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e052      	b.n	800391c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 0216 	bic.w	r2, r2, #22
 8003884:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695a      	ldr	r2, [r3, #20]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003894:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389a:	2b00      	cmp	r3, #0
 800389c:	d103      	bne.n	80038a6 <HAL_DMA_Abort+0x62>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d007      	beq.n	80038b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 0208 	bic.w	r2, r2, #8
 80038b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0201 	bic.w	r2, r2, #1
 80038c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038c6:	e013      	b.n	80038f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038c8:	f7ff f992 	bl	8002bf0 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b05      	cmp	r3, #5
 80038d4:	d90c      	bls.n	80038f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2220      	movs	r2, #32
 80038da:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2203      	movs	r2, #3
 80038e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e015      	b.n	800391c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1e4      	bne.n	80038c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003902:	223f      	movs	r2, #63	@ 0x3f
 8003904:	409a      	lsls	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d004      	beq.n	8003942 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2280      	movs	r2, #128	@ 0x80
 800393c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e00c      	b.n	800395c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2205      	movs	r2, #5
 8003946:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 0201 	bic.w	r2, r2, #1
 8003958:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003974:	4b8e      	ldr	r3, [pc, #568]	@ (8003bb0 <HAL_DMA_IRQHandler+0x248>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a8e      	ldr	r2, [pc, #568]	@ (8003bb4 <HAL_DMA_IRQHandler+0x24c>)
 800397a:	fba2 2303 	umull	r2, r3, r2, r3
 800397e:	0a9b      	lsrs	r3, r3, #10
 8003980:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003986:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003992:	2208      	movs	r2, #8
 8003994:	409a      	lsls	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	4013      	ands	r3, r2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d01a      	beq.n	80039d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0304 	and.w	r3, r3, #4
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d013      	beq.n	80039d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0204 	bic.w	r2, r2, #4
 80039ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039c0:	2208      	movs	r2, #8
 80039c2:	409a      	lsls	r2, r3
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039cc:	f043 0201 	orr.w	r2, r3, #1
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039d8:	2201      	movs	r2, #1
 80039da:	409a      	lsls	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4013      	ands	r3, r2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d012      	beq.n	8003a0a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00b      	beq.n	8003a0a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039f6:	2201      	movs	r2, #1
 80039f8:	409a      	lsls	r2, r3
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a02:	f043 0202 	orr.w	r2, r3, #2
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a0e:	2204      	movs	r2, #4
 8003a10:	409a      	lsls	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4013      	ands	r3, r2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d012      	beq.n	8003a40 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00b      	beq.n	8003a40 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a2c:	2204      	movs	r2, #4
 8003a2e:	409a      	lsls	r2, r3
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a38:	f043 0204 	orr.w	r2, r3, #4
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a44:	2210      	movs	r2, #16
 8003a46:	409a      	lsls	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d043      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0308 	and.w	r3, r3, #8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d03c      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a62:	2210      	movs	r2, #16
 8003a64:	409a      	lsls	r2, r3
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d018      	beq.n	8003aaa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d108      	bne.n	8003a98 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d024      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	4798      	blx	r3
 8003a96:	e01f      	b.n	8003ad8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d01b      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	4798      	blx	r3
 8003aa8:	e016      	b.n	8003ad8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d107      	bne.n	8003ac8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0208 	bic.w	r2, r2, #8
 8003ac6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003adc:	2220      	movs	r2, #32
 8003ade:	409a      	lsls	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 808f 	beq.w	8003c08 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0310 	and.w	r3, r3, #16
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 8087 	beq.w	8003c08 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003afe:	2220      	movs	r2, #32
 8003b00:	409a      	lsls	r2, r3
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b05      	cmp	r3, #5
 8003b10:	d136      	bne.n	8003b80 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0216 	bic.w	r2, r2, #22
 8003b20:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	695a      	ldr	r2, [r3, #20]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b30:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d103      	bne.n	8003b42 <HAL_DMA_IRQHandler+0x1da>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d007      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0208 	bic.w	r2, r2, #8
 8003b50:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b56:	223f      	movs	r2, #63	@ 0x3f
 8003b58:	409a      	lsls	r2, r3
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d07e      	beq.n	8003c74 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	4798      	blx	r3
        }
        return;
 8003b7e:	e079      	b.n	8003c74 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d01d      	beq.n	8003bca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10d      	bne.n	8003bb8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d031      	beq.n	8003c08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	4798      	blx	r3
 8003bac:	e02c      	b.n	8003c08 <HAL_DMA_IRQHandler+0x2a0>
 8003bae:	bf00      	nop
 8003bb0:	20000000 	.word	0x20000000
 8003bb4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d023      	beq.n	8003c08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	4798      	blx	r3
 8003bc8:	e01e      	b.n	8003c08 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10f      	bne.n	8003bf8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0210 	bic.w	r2, r2, #16
 8003be6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d003      	beq.n	8003c08 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d032      	beq.n	8003c76 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d022      	beq.n	8003c62 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2205      	movs	r2, #5
 8003c20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 0201 	bic.w	r2, r2, #1
 8003c32:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	3301      	adds	r3, #1
 8003c38:	60bb      	str	r3, [r7, #8]
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d307      	bcc.n	8003c50 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1f2      	bne.n	8003c34 <HAL_DMA_IRQHandler+0x2cc>
 8003c4e:	e000      	b.n	8003c52 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c50:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d005      	beq.n	8003c76 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	4798      	blx	r3
 8003c72:	e000      	b.n	8003c76 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003c74:	bf00      	nop
    }
  }
}
 8003c76:	3718      	adds	r7, #24
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
 8003c88:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003c98:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	2b40      	cmp	r3, #64	@ 0x40
 8003ca8:	d108      	bne.n	8003cbc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003cba:	e007      	b.n	8003ccc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	60da      	str	r2, [r3, #12]
}
 8003ccc:	bf00      	nop
 8003cce:	3714      	adds	r7, #20
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	3b10      	subs	r3, #16
 8003ce8:	4a14      	ldr	r2, [pc, #80]	@ (8003d3c <DMA_CalcBaseAndBitshift+0x64>)
 8003cea:	fba2 2303 	umull	r2, r3, r2, r3
 8003cee:	091b      	lsrs	r3, r3, #4
 8003cf0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003cf2:	4a13      	ldr	r2, [pc, #76]	@ (8003d40 <DMA_CalcBaseAndBitshift+0x68>)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2b03      	cmp	r3, #3
 8003d04:	d909      	bls.n	8003d1a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003d0e:	f023 0303 	bic.w	r3, r3, #3
 8003d12:	1d1a      	adds	r2, r3, #4
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d18:	e007      	b.n	8003d2a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003d22:	f023 0303 	bic.w	r3, r3, #3
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3714      	adds	r7, #20
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	aaaaaaab 	.word	0xaaaaaaab
 8003d40:	0800b3a0 	.word	0x0800b3a0

08003d44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d11f      	bne.n	8003d9e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	2b03      	cmp	r3, #3
 8003d62:	d856      	bhi.n	8003e12 <DMA_CheckFifoParam+0xce>
 8003d64:	a201      	add	r2, pc, #4	@ (adr r2, 8003d6c <DMA_CheckFifoParam+0x28>)
 8003d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6a:	bf00      	nop
 8003d6c:	08003d7d 	.word	0x08003d7d
 8003d70:	08003d8f 	.word	0x08003d8f
 8003d74:	08003d7d 	.word	0x08003d7d
 8003d78:	08003e13 	.word	0x08003e13
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d046      	beq.n	8003e16 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d8c:	e043      	b.n	8003e16 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d92:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003d96:	d140      	bne.n	8003e1a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d9c:	e03d      	b.n	8003e1a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003da6:	d121      	bne.n	8003dec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	2b03      	cmp	r3, #3
 8003dac:	d837      	bhi.n	8003e1e <DMA_CheckFifoParam+0xda>
 8003dae:	a201      	add	r2, pc, #4	@ (adr r2, 8003db4 <DMA_CheckFifoParam+0x70>)
 8003db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db4:	08003dc5 	.word	0x08003dc5
 8003db8:	08003dcb 	.word	0x08003dcb
 8003dbc:	08003dc5 	.word	0x08003dc5
 8003dc0:	08003ddd 	.word	0x08003ddd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8003dc8:	e030      	b.n	8003e2c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d025      	beq.n	8003e22 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dda:	e022      	b.n	8003e22 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003de4:	d11f      	bne.n	8003e26 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003dea:	e01c      	b.n	8003e26 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d903      	bls.n	8003dfa <DMA_CheckFifoParam+0xb6>
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	2b03      	cmp	r3, #3
 8003df6:	d003      	beq.n	8003e00 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003df8:	e018      	b.n	8003e2c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	73fb      	strb	r3, [r7, #15]
      break;
 8003dfe:	e015      	b.n	8003e2c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00e      	beq.n	8003e2a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e10:	e00b      	b.n	8003e2a <DMA_CheckFifoParam+0xe6>
      break;
 8003e12:	bf00      	nop
 8003e14:	e00a      	b.n	8003e2c <DMA_CheckFifoParam+0xe8>
      break;
 8003e16:	bf00      	nop
 8003e18:	e008      	b.n	8003e2c <DMA_CheckFifoParam+0xe8>
      break;
 8003e1a:	bf00      	nop
 8003e1c:	e006      	b.n	8003e2c <DMA_CheckFifoParam+0xe8>
      break;
 8003e1e:	bf00      	nop
 8003e20:	e004      	b.n	8003e2c <DMA_CheckFifoParam+0xe8>
      break;
 8003e22:	bf00      	nop
 8003e24:	e002      	b.n	8003e2c <DMA_CheckFifoParam+0xe8>
      break;   
 8003e26:	bf00      	nop
 8003e28:	e000      	b.n	8003e2c <DMA_CheckFifoParam+0xe8>
      break;
 8003e2a:	bf00      	nop
    }
  } 
  
  return status; 
 8003e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3714      	adds	r7, #20
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop

08003e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b089      	sub	sp, #36	@ 0x24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e46:	2300      	movs	r3, #0
 8003e48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e52:	2300      	movs	r3, #0
 8003e54:	61fb      	str	r3, [r7, #28]
 8003e56:	e159      	b.n	800410c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e58:	2201      	movs	r2, #1
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	f040 8148 	bne.w	8004106 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f003 0303 	and.w	r3, r3, #3
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d005      	beq.n	8003e8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d130      	bne.n	8003ef0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	2203      	movs	r2, #3
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	43db      	mvns	r3, r3
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	68da      	ldr	r2, [r3, #12]
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ecc:	43db      	mvns	r3, r3
 8003ece:	69ba      	ldr	r2, [r7, #24]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	091b      	lsrs	r3, r3, #4
 8003eda:	f003 0201 	and.w	r2, r3, #1
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f003 0303 	and.w	r3, r3, #3
 8003ef8:	2b03      	cmp	r3, #3
 8003efa:	d017      	beq.n	8003f2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	2203      	movs	r2, #3
 8003f08:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0c:	43db      	mvns	r3, r3
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	4013      	ands	r3, r2
 8003f12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	005b      	lsls	r3, r3, #1
 8003f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f003 0303 	and.w	r3, r3, #3
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d123      	bne.n	8003f80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	08da      	lsrs	r2, r3, #3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	3208      	adds	r2, #8
 8003f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	f003 0307 	and.w	r3, r3, #7
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	220f      	movs	r2, #15
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	43db      	mvns	r3, r3
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	691a      	ldr	r2, [r3, #16]
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	f003 0307 	and.w	r3, r3, #7
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	08da      	lsrs	r2, r3, #3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	3208      	adds	r2, #8
 8003f7a:	69b9      	ldr	r1, [r7, #24]
 8003f7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	2203      	movs	r2, #3
 8003f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f90:	43db      	mvns	r3, r3
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	4013      	ands	r3, r2
 8003f96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f003 0203 	and.w	r2, r3, #3
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 80a2 	beq.w	8004106 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	60fb      	str	r3, [r7, #12]
 8003fc6:	4b57      	ldr	r3, [pc, #348]	@ (8004124 <HAL_GPIO_Init+0x2e8>)
 8003fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fca:	4a56      	ldr	r2, [pc, #344]	@ (8004124 <HAL_GPIO_Init+0x2e8>)
 8003fcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003fd2:	4b54      	ldr	r3, [pc, #336]	@ (8004124 <HAL_GPIO_Init+0x2e8>)
 8003fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fda:	60fb      	str	r3, [r7, #12]
 8003fdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fde:	4a52      	ldr	r2, [pc, #328]	@ (8004128 <HAL_GPIO_Init+0x2ec>)
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	089b      	lsrs	r3, r3, #2
 8003fe4:	3302      	adds	r3, #2
 8003fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	f003 0303 	and.w	r3, r3, #3
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	220f      	movs	r2, #15
 8003ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffa:	43db      	mvns	r3, r3
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	4013      	ands	r3, r2
 8004000:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a49      	ldr	r2, [pc, #292]	@ (800412c <HAL_GPIO_Init+0x2f0>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d019      	beq.n	800403e <HAL_GPIO_Init+0x202>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a48      	ldr	r2, [pc, #288]	@ (8004130 <HAL_GPIO_Init+0x2f4>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d013      	beq.n	800403a <HAL_GPIO_Init+0x1fe>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a47      	ldr	r2, [pc, #284]	@ (8004134 <HAL_GPIO_Init+0x2f8>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d00d      	beq.n	8004036 <HAL_GPIO_Init+0x1fa>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a46      	ldr	r2, [pc, #280]	@ (8004138 <HAL_GPIO_Init+0x2fc>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d007      	beq.n	8004032 <HAL_GPIO_Init+0x1f6>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a45      	ldr	r2, [pc, #276]	@ (800413c <HAL_GPIO_Init+0x300>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d101      	bne.n	800402e <HAL_GPIO_Init+0x1f2>
 800402a:	2304      	movs	r3, #4
 800402c:	e008      	b.n	8004040 <HAL_GPIO_Init+0x204>
 800402e:	2307      	movs	r3, #7
 8004030:	e006      	b.n	8004040 <HAL_GPIO_Init+0x204>
 8004032:	2303      	movs	r3, #3
 8004034:	e004      	b.n	8004040 <HAL_GPIO_Init+0x204>
 8004036:	2302      	movs	r3, #2
 8004038:	e002      	b.n	8004040 <HAL_GPIO_Init+0x204>
 800403a:	2301      	movs	r3, #1
 800403c:	e000      	b.n	8004040 <HAL_GPIO_Init+0x204>
 800403e:	2300      	movs	r3, #0
 8004040:	69fa      	ldr	r2, [r7, #28]
 8004042:	f002 0203 	and.w	r2, r2, #3
 8004046:	0092      	lsls	r2, r2, #2
 8004048:	4093      	lsls	r3, r2
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	4313      	orrs	r3, r2
 800404e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004050:	4935      	ldr	r1, [pc, #212]	@ (8004128 <HAL_GPIO_Init+0x2ec>)
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	089b      	lsrs	r3, r3, #2
 8004056:	3302      	adds	r3, #2
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800405e:	4b38      	ldr	r3, [pc, #224]	@ (8004140 <HAL_GPIO_Init+0x304>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	43db      	mvns	r3, r3
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	4013      	ands	r3, r2
 800406c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	4313      	orrs	r3, r2
 8004080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004082:	4a2f      	ldr	r2, [pc, #188]	@ (8004140 <HAL_GPIO_Init+0x304>)
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004088:	4b2d      	ldr	r3, [pc, #180]	@ (8004140 <HAL_GPIO_Init+0x304>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	43db      	mvns	r3, r3
 8004092:	69ba      	ldr	r2, [r7, #24]
 8004094:	4013      	ands	r3, r2
 8004096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040ac:	4a24      	ldr	r2, [pc, #144]	@ (8004140 <HAL_GPIO_Init+0x304>)
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040b2:	4b23      	ldr	r3, [pc, #140]	@ (8004140 <HAL_GPIO_Init+0x304>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	43db      	mvns	r3, r3
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	4013      	ands	r3, r2
 80040c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040d6:	4a1a      	ldr	r2, [pc, #104]	@ (8004140 <HAL_GPIO_Init+0x304>)
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040dc:	4b18      	ldr	r3, [pc, #96]	@ (8004140 <HAL_GPIO_Init+0x304>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	43db      	mvns	r3, r3
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	4013      	ands	r3, r2
 80040ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d003      	beq.n	8004100 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004100:	4a0f      	ldr	r2, [pc, #60]	@ (8004140 <HAL_GPIO_Init+0x304>)
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	3301      	adds	r3, #1
 800410a:	61fb      	str	r3, [r7, #28]
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	2b0f      	cmp	r3, #15
 8004110:	f67f aea2 	bls.w	8003e58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004114:	bf00      	nop
 8004116:	bf00      	nop
 8004118:	3724      	adds	r7, #36	@ 0x24
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	40023800 	.word	0x40023800
 8004128:	40013800 	.word	0x40013800
 800412c:	40020000 	.word	0x40020000
 8004130:	40020400 	.word	0x40020400
 8004134:	40020800 	.word	0x40020800
 8004138:	40020c00 	.word	0x40020c00
 800413c:	40021000 	.word	0x40021000
 8004140:	40013c00 	.word	0x40013c00

08004144 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	460b      	mov	r3, r1
 800414e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	691a      	ldr	r2, [r3, #16]
 8004154:	887b      	ldrh	r3, [r7, #2]
 8004156:	4013      	ands	r3, r2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d002      	beq.n	8004162 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800415c:	2301      	movs	r3, #1
 800415e:	73fb      	strb	r3, [r7, #15]
 8004160:	e001      	b.n	8004166 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004162:	2300      	movs	r3, #0
 8004164:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004166:	7bfb      	ldrb	r3, [r7, #15]
}
 8004168:	4618      	mov	r0, r3
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	460b      	mov	r3, r1
 800417e:	807b      	strh	r3, [r7, #2]
 8004180:	4613      	mov	r3, r2
 8004182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004184:	787b      	ldrb	r3, [r7, #1]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800418a:	887a      	ldrh	r2, [r7, #2]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004190:	e003      	b.n	800419a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004192:	887b      	ldrh	r3, [r7, #2]
 8004194:	041a      	lsls	r2, r3, #16
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	619a      	str	r2, [r3, #24]
}
 800419a:	bf00      	nop
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
	...

080041a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	4603      	mov	r3, r0
 80041b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80041b2:	4b08      	ldr	r3, [pc, #32]	@ (80041d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041b4:	695a      	ldr	r2, [r3, #20]
 80041b6:	88fb      	ldrh	r3, [r7, #6]
 80041b8:	4013      	ands	r3, r2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d006      	beq.n	80041cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041be:	4a05      	ldr	r2, [pc, #20]	@ (80041d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041c0:	88fb      	ldrh	r3, [r7, #6]
 80041c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041c4:	88fb      	ldrh	r3, [r7, #6]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 f806 	bl	80041d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80041cc:	bf00      	nop
 80041ce:	3708      	adds	r7, #8
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	40013c00 	.word	0x40013c00

080041d8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	4603      	mov	r3, r0
 80041e0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80041e2:	bf00      	nop
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
	...

080041f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e12b      	b.n	800445a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d106      	bne.n	800421c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f7fe f8e4 	bl	80023e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2224      	movs	r2, #36	@ 0x24
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f022 0201 	bic.w	r2, r2, #1
 8004232:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004242:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004252:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004254:	f001 f9c8 	bl	80055e8 <HAL_RCC_GetPCLK1Freq>
 8004258:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	4a81      	ldr	r2, [pc, #516]	@ (8004464 <HAL_I2C_Init+0x274>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d807      	bhi.n	8004274 <HAL_I2C_Init+0x84>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4a80      	ldr	r2, [pc, #512]	@ (8004468 <HAL_I2C_Init+0x278>)
 8004268:	4293      	cmp	r3, r2
 800426a:	bf94      	ite	ls
 800426c:	2301      	movls	r3, #1
 800426e:	2300      	movhi	r3, #0
 8004270:	b2db      	uxtb	r3, r3
 8004272:	e006      	b.n	8004282 <HAL_I2C_Init+0x92>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	4a7d      	ldr	r2, [pc, #500]	@ (800446c <HAL_I2C_Init+0x27c>)
 8004278:	4293      	cmp	r3, r2
 800427a:	bf94      	ite	ls
 800427c:	2301      	movls	r3, #1
 800427e:	2300      	movhi	r3, #0
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e0e7      	b.n	800445a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	4a78      	ldr	r2, [pc, #480]	@ (8004470 <HAL_I2C_Init+0x280>)
 800428e:	fba2 2303 	umull	r2, r3, r2, r3
 8004292:	0c9b      	lsrs	r3, r3, #18
 8004294:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	4a6a      	ldr	r2, [pc, #424]	@ (8004464 <HAL_I2C_Init+0x274>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d802      	bhi.n	80042c4 <HAL_I2C_Init+0xd4>
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	3301      	adds	r3, #1
 80042c2:	e009      	b.n	80042d8 <HAL_I2C_Init+0xe8>
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80042ca:	fb02 f303 	mul.w	r3, r2, r3
 80042ce:	4a69      	ldr	r2, [pc, #420]	@ (8004474 <HAL_I2C_Init+0x284>)
 80042d0:	fba2 2303 	umull	r2, r3, r2, r3
 80042d4:	099b      	lsrs	r3, r3, #6
 80042d6:	3301      	adds	r3, #1
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6812      	ldr	r2, [r2, #0]
 80042dc:	430b      	orrs	r3, r1
 80042de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80042ea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	495c      	ldr	r1, [pc, #368]	@ (8004464 <HAL_I2C_Init+0x274>)
 80042f4:	428b      	cmp	r3, r1
 80042f6:	d819      	bhi.n	800432c <HAL_I2C_Init+0x13c>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	1e59      	subs	r1, r3, #1
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	005b      	lsls	r3, r3, #1
 8004302:	fbb1 f3f3 	udiv	r3, r1, r3
 8004306:	1c59      	adds	r1, r3, #1
 8004308:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800430c:	400b      	ands	r3, r1
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00a      	beq.n	8004328 <HAL_I2C_Init+0x138>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	1e59      	subs	r1, r3, #1
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004320:	3301      	adds	r3, #1
 8004322:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004326:	e051      	b.n	80043cc <HAL_I2C_Init+0x1dc>
 8004328:	2304      	movs	r3, #4
 800432a:	e04f      	b.n	80043cc <HAL_I2C_Init+0x1dc>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d111      	bne.n	8004358 <HAL_I2C_Init+0x168>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	1e58      	subs	r0, r3, #1
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6859      	ldr	r1, [r3, #4]
 800433c:	460b      	mov	r3, r1
 800433e:	005b      	lsls	r3, r3, #1
 8004340:	440b      	add	r3, r1
 8004342:	fbb0 f3f3 	udiv	r3, r0, r3
 8004346:	3301      	adds	r3, #1
 8004348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800434c:	2b00      	cmp	r3, #0
 800434e:	bf0c      	ite	eq
 8004350:	2301      	moveq	r3, #1
 8004352:	2300      	movne	r3, #0
 8004354:	b2db      	uxtb	r3, r3
 8004356:	e012      	b.n	800437e <HAL_I2C_Init+0x18e>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	1e58      	subs	r0, r3, #1
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6859      	ldr	r1, [r3, #4]
 8004360:	460b      	mov	r3, r1
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	440b      	add	r3, r1
 8004366:	0099      	lsls	r1, r3, #2
 8004368:	440b      	add	r3, r1
 800436a:	fbb0 f3f3 	udiv	r3, r0, r3
 800436e:	3301      	adds	r3, #1
 8004370:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004374:	2b00      	cmp	r3, #0
 8004376:	bf0c      	ite	eq
 8004378:	2301      	moveq	r3, #1
 800437a:	2300      	movne	r3, #0
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <HAL_I2C_Init+0x196>
 8004382:	2301      	movs	r3, #1
 8004384:	e022      	b.n	80043cc <HAL_I2C_Init+0x1dc>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10e      	bne.n	80043ac <HAL_I2C_Init+0x1bc>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	1e58      	subs	r0, r3, #1
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6859      	ldr	r1, [r3, #4]
 8004396:	460b      	mov	r3, r1
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	440b      	add	r3, r1
 800439c:	fbb0 f3f3 	udiv	r3, r0, r3
 80043a0:	3301      	adds	r3, #1
 80043a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043aa:	e00f      	b.n	80043cc <HAL_I2C_Init+0x1dc>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	1e58      	subs	r0, r3, #1
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6859      	ldr	r1, [r3, #4]
 80043b4:	460b      	mov	r3, r1
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	440b      	add	r3, r1
 80043ba:	0099      	lsls	r1, r3, #2
 80043bc:	440b      	add	r3, r1
 80043be:	fbb0 f3f3 	udiv	r3, r0, r3
 80043c2:	3301      	adds	r3, #1
 80043c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80043cc:	6879      	ldr	r1, [r7, #4]
 80043ce:	6809      	ldr	r1, [r1, #0]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	69da      	ldr	r2, [r3, #28]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	431a      	orrs	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	430a      	orrs	r2, r1
 80043ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80043fa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	6911      	ldr	r1, [r2, #16]
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	68d2      	ldr	r2, [r2, #12]
 8004406:	4311      	orrs	r1, r2
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	6812      	ldr	r2, [r2, #0]
 800440c:	430b      	orrs	r3, r1
 800440e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	695a      	ldr	r2, [r3, #20]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	431a      	orrs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0201 	orr.w	r2, r2, #1
 800443a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2220      	movs	r2, #32
 8004446:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	000186a0 	.word	0x000186a0
 8004468:	001e847f 	.word	0x001e847f
 800446c:	003d08ff 	.word	0x003d08ff
 8004470:	431bde83 	.word	0x431bde83
 8004474:	10624dd3 	.word	0x10624dd3

08004478 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b088      	sub	sp, #32
 800447c:	af02      	add	r7, sp, #8
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	607a      	str	r2, [r7, #4]
 8004482:	461a      	mov	r2, r3
 8004484:	460b      	mov	r3, r1
 8004486:	817b      	strh	r3, [r7, #10]
 8004488:	4613      	mov	r3, r2
 800448a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800448c:	f7fe fbb0 	bl	8002bf0 <HAL_GetTick>
 8004490:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b20      	cmp	r3, #32
 800449c:	f040 80e0 	bne.w	8004660 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	2319      	movs	r3, #25
 80044a6:	2201      	movs	r2, #1
 80044a8:	4970      	ldr	r1, [pc, #448]	@ (800466c <HAL_I2C_Master_Transmit+0x1f4>)
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f000 fa92 	bl	80049d4 <I2C_WaitOnFlagUntilTimeout>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80044b6:	2302      	movs	r3, #2
 80044b8:	e0d3      	b.n	8004662 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d101      	bne.n	80044c8 <HAL_I2C_Master_Transmit+0x50>
 80044c4:	2302      	movs	r3, #2
 80044c6:	e0cc      	b.n	8004662 <HAL_I2C_Master_Transmit+0x1ea>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d007      	beq.n	80044ee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f042 0201 	orr.w	r2, r2, #1
 80044ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2221      	movs	r2, #33	@ 0x21
 8004502:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2210      	movs	r2, #16
 800450a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	893a      	ldrh	r2, [r7, #8]
 800451e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004524:	b29a      	uxth	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	4a50      	ldr	r2, [pc, #320]	@ (8004670 <HAL_I2C_Master_Transmit+0x1f8>)
 800452e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004530:	8979      	ldrh	r1, [r7, #10]
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	6a3a      	ldr	r2, [r7, #32]
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 f9ca 	bl	80048d0 <I2C_MasterRequestWrite>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e08d      	b.n	8004662 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004546:	2300      	movs	r3, #0
 8004548:	613b      	str	r3, [r7, #16]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	613b      	str	r3, [r7, #16]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	613b      	str	r3, [r7, #16]
 800455a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800455c:	e066      	b.n	800462c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	6a39      	ldr	r1, [r7, #32]
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f000 fb50 	bl	8004c08 <I2C_WaitOnTXEFlagUntilTimeout>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00d      	beq.n	800458a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004572:	2b04      	cmp	r3, #4
 8004574:	d107      	bne.n	8004586 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004584:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e06b      	b.n	8004662 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458e:	781a      	ldrb	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800459a:	1c5a      	adds	r2, r3, #1
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	3b01      	subs	r3, #1
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045b2:	3b01      	subs	r3, #1
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	2b04      	cmp	r3, #4
 80045c6:	d11b      	bne.n	8004600 <HAL_I2C_Master_Transmit+0x188>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d017      	beq.n	8004600 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d4:	781a      	ldrb	r2, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	6a39      	ldr	r1, [r7, #32]
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f000 fb47 	bl	8004c98 <I2C_WaitOnBTFFlagUntilTimeout>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00d      	beq.n	800462c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004614:	2b04      	cmp	r3, #4
 8004616:	d107      	bne.n	8004628 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004626:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e01a      	b.n	8004662 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004630:	2b00      	cmp	r3, #0
 8004632:	d194      	bne.n	800455e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004642:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2220      	movs	r2, #32
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800465c:	2300      	movs	r3, #0
 800465e:	e000      	b.n	8004662 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004660:	2302      	movs	r3, #2
  }
}
 8004662:	4618      	mov	r0, r3
 8004664:	3718      	adds	r7, #24
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	00100002 	.word	0x00100002
 8004670:	ffff0000 	.word	0xffff0000

08004674 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b08a      	sub	sp, #40	@ 0x28
 8004678:	af02      	add	r7, sp, #8
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	607a      	str	r2, [r7, #4]
 800467e:	603b      	str	r3, [r7, #0]
 8004680:	460b      	mov	r3, r1
 8004682:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004684:	f7fe fab4 	bl	8002bf0 <HAL_GetTick>
 8004688:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800468a:	2300      	movs	r3, #0
 800468c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b20      	cmp	r3, #32
 8004698:	f040 8111 	bne.w	80048be <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	2319      	movs	r3, #25
 80046a2:	2201      	movs	r2, #1
 80046a4:	4988      	ldr	r1, [pc, #544]	@ (80048c8 <HAL_I2C_IsDeviceReady+0x254>)
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 f994 	bl	80049d4 <I2C_WaitOnFlagUntilTimeout>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80046b2:	2302      	movs	r3, #2
 80046b4:	e104      	b.n	80048c0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d101      	bne.n	80046c4 <HAL_I2C_IsDeviceReady+0x50>
 80046c0:	2302      	movs	r3, #2
 80046c2:	e0fd      	b.n	80048c0 <HAL_I2C_IsDeviceReady+0x24c>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d007      	beq.n	80046ea <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f042 0201 	orr.w	r2, r2, #1
 80046e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2224      	movs	r2, #36	@ 0x24
 80046fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4a70      	ldr	r2, [pc, #448]	@ (80048cc <HAL_I2C_IsDeviceReady+0x258>)
 800470c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800471c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2200      	movs	r2, #0
 8004726:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 f952 	bl	80049d4 <I2C_WaitOnFlagUntilTimeout>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00d      	beq.n	8004752 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004740:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004744:	d103      	bne.n	800474e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800474c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e0b6      	b.n	80048c0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004752:	897b      	ldrh	r3, [r7, #10]
 8004754:	b2db      	uxtb	r3, r3
 8004756:	461a      	mov	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004760:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004762:	f7fe fa45 	bl	8002bf0 <HAL_GetTick>
 8004766:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b02      	cmp	r3, #2
 8004774:	bf0c      	ite	eq
 8004776:	2301      	moveq	r3, #1
 8004778:	2300      	movne	r3, #0
 800477a:	b2db      	uxtb	r3, r3
 800477c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004788:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800478c:	bf0c      	ite	eq
 800478e:	2301      	moveq	r3, #1
 8004790:	2300      	movne	r3, #0
 8004792:	b2db      	uxtb	r3, r3
 8004794:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004796:	e025      	b.n	80047e4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004798:	f7fe fa2a 	bl	8002bf0 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d302      	bcc.n	80047ae <HAL_I2C_IsDeviceReady+0x13a>
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d103      	bne.n	80047b6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	22a0      	movs	r2, #160	@ 0xa0
 80047b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	f003 0302 	and.w	r3, r3, #2
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	bf0c      	ite	eq
 80047c4:	2301      	moveq	r3, #1
 80047c6:	2300      	movne	r3, #0
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047da:	bf0c      	ite	eq
 80047dc:	2301      	moveq	r3, #1
 80047de:	2300      	movne	r3, #0
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2ba0      	cmp	r3, #160	@ 0xa0
 80047ee:	d005      	beq.n	80047fc <HAL_I2C_IsDeviceReady+0x188>
 80047f0:	7dfb      	ldrb	r3, [r7, #23]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d102      	bne.n	80047fc <HAL_I2C_IsDeviceReady+0x188>
 80047f6:	7dbb      	ldrb	r3, [r7, #22]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d0cd      	beq.n	8004798 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2220      	movs	r2, #32
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b02      	cmp	r3, #2
 8004810:	d129      	bne.n	8004866 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004820:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004822:	2300      	movs	r3, #0
 8004824:	613b      	str	r3, [r7, #16]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	613b      	str	r3, [r7, #16]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	613b      	str	r3, [r7, #16]
 8004836:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	2319      	movs	r3, #25
 800483e:	2201      	movs	r2, #1
 8004840:	4921      	ldr	r1, [pc, #132]	@ (80048c8 <HAL_I2C_IsDeviceReady+0x254>)
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f000 f8c6 	bl	80049d4 <I2C_WaitOnFlagUntilTimeout>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e036      	b.n	80048c0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2220      	movs	r2, #32
 8004856:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8004862:	2300      	movs	r3, #0
 8004864:	e02c      	b.n	80048c0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004874:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800487e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	2319      	movs	r3, #25
 8004886:	2201      	movs	r2, #1
 8004888:	490f      	ldr	r1, [pc, #60]	@ (80048c8 <HAL_I2C_IsDeviceReady+0x254>)
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f000 f8a2 	bl	80049d4 <I2C_WaitOnFlagUntilTimeout>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d001      	beq.n	800489a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e012      	b.n	80048c0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	3301      	adds	r3, #1
 800489e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	f4ff af32 	bcc.w	800470e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2220      	movs	r2, #32
 80048ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e000      	b.n	80048c0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80048be:	2302      	movs	r3, #2
  }
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3720      	adds	r7, #32
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	00100002 	.word	0x00100002
 80048cc:	ffff0000 	.word	0xffff0000

080048d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b088      	sub	sp, #32
 80048d4:	af02      	add	r7, sp, #8
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	607a      	str	r2, [r7, #4]
 80048da:	603b      	str	r3, [r7, #0]
 80048dc:	460b      	mov	r3, r1
 80048de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	2b08      	cmp	r3, #8
 80048ea:	d006      	beq.n	80048fa <I2C_MasterRequestWrite+0x2a>
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d003      	beq.n	80048fa <I2C_MasterRequestWrite+0x2a>
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80048f8:	d108      	bne.n	800490c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	e00b      	b.n	8004924 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004910:	2b12      	cmp	r3, #18
 8004912:	d107      	bne.n	8004924 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004922:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	9300      	str	r3, [sp, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f000 f84f 	bl	80049d4 <I2C_WaitOnFlagUntilTimeout>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00d      	beq.n	8004958 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004946:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800494a:	d103      	bne.n	8004954 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004952:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e035      	b.n	80049c4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004960:	d108      	bne.n	8004974 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004962:	897b      	ldrh	r3, [r7, #10]
 8004964:	b2db      	uxtb	r3, r3
 8004966:	461a      	mov	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004970:	611a      	str	r2, [r3, #16]
 8004972:	e01b      	b.n	80049ac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004974:	897b      	ldrh	r3, [r7, #10]
 8004976:	11db      	asrs	r3, r3, #7
 8004978:	b2db      	uxtb	r3, r3
 800497a:	f003 0306 	and.w	r3, r3, #6
 800497e:	b2db      	uxtb	r3, r3
 8004980:	f063 030f 	orn	r3, r3, #15
 8004984:	b2da      	uxtb	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	490e      	ldr	r1, [pc, #56]	@ (80049cc <I2C_MasterRequestWrite+0xfc>)
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f000 f898 	bl	8004ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e010      	b.n	80049c4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80049a2:	897b      	ldrh	r3, [r7, #10]
 80049a4:	b2da      	uxtb	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	4907      	ldr	r1, [pc, #28]	@ (80049d0 <I2C_MasterRequestWrite+0x100>)
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f000 f888 	bl	8004ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e000      	b.n	80049c4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3718      	adds	r7, #24
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	00010008 	.word	0x00010008
 80049d0:	00010002 	.word	0x00010002

080049d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	603b      	str	r3, [r7, #0]
 80049e0:	4613      	mov	r3, r2
 80049e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049e4:	e048      	b.n	8004a78 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ec:	d044      	beq.n	8004a78 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ee:	f7fe f8ff 	bl	8002bf0 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	683a      	ldr	r2, [r7, #0]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d302      	bcc.n	8004a04 <I2C_WaitOnFlagUntilTimeout+0x30>
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d139      	bne.n	8004a78 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	0c1b      	lsrs	r3, r3, #16
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d10d      	bne.n	8004a2a <I2C_WaitOnFlagUntilTimeout+0x56>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	43da      	mvns	r2, r3
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	bf0c      	ite	eq
 8004a20:	2301      	moveq	r3, #1
 8004a22:	2300      	movne	r3, #0
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	461a      	mov	r2, r3
 8004a28:	e00c      	b.n	8004a44 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	43da      	mvns	r2, r3
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	4013      	ands	r3, r2
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	bf0c      	ite	eq
 8004a3c:	2301      	moveq	r3, #1
 8004a3e:	2300      	movne	r3, #0
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	461a      	mov	r2, r3
 8004a44:	79fb      	ldrb	r3, [r7, #7]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d116      	bne.n	8004a78 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2220      	movs	r2, #32
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a64:	f043 0220 	orr.w	r2, r3, #32
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e023      	b.n	8004ac0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	0c1b      	lsrs	r3, r3, #16
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d10d      	bne.n	8004a9e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	43da      	mvns	r2, r3
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	bf0c      	ite	eq
 8004a94:	2301      	moveq	r3, #1
 8004a96:	2300      	movne	r3, #0
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	e00c      	b.n	8004ab8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	43da      	mvns	r2, r3
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	bf0c      	ite	eq
 8004ab0:	2301      	moveq	r3, #1
 8004ab2:	2300      	movne	r3, #0
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	79fb      	ldrb	r3, [r7, #7]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d093      	beq.n	80049e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
 8004ad4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ad6:	e071      	b.n	8004bbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ae2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ae6:	d123      	bne.n	8004b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004af6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1c:	f043 0204 	orr.w	r2, r3, #4
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e067      	b.n	8004c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b36:	d041      	beq.n	8004bbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b38:	f7fe f85a 	bl	8002bf0 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d302      	bcc.n	8004b4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d136      	bne.n	8004bbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	0c1b      	lsrs	r3, r3, #16
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d10c      	bne.n	8004b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	43da      	mvns	r2, r3
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	4013      	ands	r3, r2
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	bf14      	ite	ne
 8004b6a:	2301      	movne	r3, #1
 8004b6c:	2300      	moveq	r3, #0
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	e00b      	b.n	8004b8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	43da      	mvns	r2, r3
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	bf14      	ite	ne
 8004b84:	2301      	movne	r3, #1
 8004b86:	2300      	moveq	r3, #0
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d016      	beq.n	8004bbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba8:	f043 0220 	orr.w	r2, r3, #32
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e021      	b.n	8004c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	0c1b      	lsrs	r3, r3, #16
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d10c      	bne.n	8004be0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	43da      	mvns	r2, r3
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	bf14      	ite	ne
 8004bd8:	2301      	movne	r3, #1
 8004bda:	2300      	moveq	r3, #0
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	e00b      	b.n	8004bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	43da      	mvns	r2, r3
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	4013      	ands	r3, r2
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	bf14      	ite	ne
 8004bf2:	2301      	movne	r3, #1
 8004bf4:	2300      	moveq	r3, #0
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f47f af6d 	bne.w	8004ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c14:	e034      	b.n	8004c80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f000 f886 	bl	8004d28 <I2C_IsAcknowledgeFailed>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e034      	b.n	8004c90 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2c:	d028      	beq.n	8004c80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c2e:	f7fd ffdf 	bl	8002bf0 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d302      	bcc.n	8004c44 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d11d      	bne.n	8004c80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c4e:	2b80      	cmp	r3, #128	@ 0x80
 8004c50:	d016      	beq.n	8004c80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6c:	f043 0220 	orr.w	r2, r3, #32
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e007      	b.n	8004c90 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c8a:	2b80      	cmp	r3, #128	@ 0x80
 8004c8c:	d1c3      	bne.n	8004c16 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ca4:	e034      	b.n	8004d10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f000 f83e 	bl	8004d28 <I2C_IsAcknowledgeFailed>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e034      	b.n	8004d20 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cbc:	d028      	beq.n	8004d10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cbe:	f7fd ff97 	bl	8002bf0 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	68ba      	ldr	r2, [r7, #8]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d302      	bcc.n	8004cd4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d11d      	bne.n	8004d10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	f003 0304 	and.w	r3, r3, #4
 8004cde:	2b04      	cmp	r3, #4
 8004ce0:	d016      	beq.n	8004d10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2220      	movs	r2, #32
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cfc:	f043 0220 	orr.w	r2, r3, #32
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e007      	b.n	8004d20 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	f003 0304 	and.w	r3, r3, #4
 8004d1a:	2b04      	cmp	r3, #4
 8004d1c:	d1c3      	bne.n	8004ca6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d3e:	d11b      	bne.n	8004d78 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d48:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2220      	movs	r2, #32
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d64:	f043 0204 	orr.w	r2, r3, #4
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e000      	b.n	8004d7a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
	...

08004d88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e267      	b.n	800526a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d075      	beq.n	8004e92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004da6:	4b88      	ldr	r3, [pc, #544]	@ (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f003 030c 	and.w	r3, r3, #12
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d00c      	beq.n	8004dcc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004db2:	4b85      	ldr	r3, [pc, #532]	@ (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004dba:	2b08      	cmp	r3, #8
 8004dbc:	d112      	bne.n	8004de4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dbe:	4b82      	ldr	r3, [pc, #520]	@ (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dc6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004dca:	d10b      	bne.n	8004de4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dcc:	4b7e      	ldr	r3, [pc, #504]	@ (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d05b      	beq.n	8004e90 <HAL_RCC_OscConfig+0x108>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d157      	bne.n	8004e90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e242      	b.n	800526a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dec:	d106      	bne.n	8004dfc <HAL_RCC_OscConfig+0x74>
 8004dee:	4b76      	ldr	r3, [pc, #472]	@ (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a75      	ldr	r2, [pc, #468]	@ (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004df4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004df8:	6013      	str	r3, [r2, #0]
 8004dfa:	e01d      	b.n	8004e38 <HAL_RCC_OscConfig+0xb0>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e04:	d10c      	bne.n	8004e20 <HAL_RCC_OscConfig+0x98>
 8004e06:	4b70      	ldr	r3, [pc, #448]	@ (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a6f      	ldr	r2, [pc, #444]	@ (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004e0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e10:	6013      	str	r3, [r2, #0]
 8004e12:	4b6d      	ldr	r3, [pc, #436]	@ (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a6c      	ldr	r2, [pc, #432]	@ (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004e18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e1c:	6013      	str	r3, [r2, #0]
 8004e1e:	e00b      	b.n	8004e38 <HAL_RCC_OscConfig+0xb0>
 8004e20:	4b69      	ldr	r3, [pc, #420]	@ (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a68      	ldr	r2, [pc, #416]	@ (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004e26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e2a:	6013      	str	r3, [r2, #0]
 8004e2c:	4b66      	ldr	r3, [pc, #408]	@ (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a65      	ldr	r2, [pc, #404]	@ (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004e32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d013      	beq.n	8004e68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e40:	f7fd fed6 	bl	8002bf0 <HAL_GetTick>
 8004e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e46:	e008      	b.n	8004e5a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e48:	f7fd fed2 	bl	8002bf0 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b64      	cmp	r3, #100	@ 0x64
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e207      	b.n	800526a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e5a:	4b5b      	ldr	r3, [pc, #364]	@ (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d0f0      	beq.n	8004e48 <HAL_RCC_OscConfig+0xc0>
 8004e66:	e014      	b.n	8004e92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e68:	f7fd fec2 	bl	8002bf0 <HAL_GetTick>
 8004e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e6e:	e008      	b.n	8004e82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e70:	f7fd febe 	bl	8002bf0 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b64      	cmp	r3, #100	@ 0x64
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e1f3      	b.n	800526a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e82:	4b51      	ldr	r3, [pc, #324]	@ (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1f0      	bne.n	8004e70 <HAL_RCC_OscConfig+0xe8>
 8004e8e:	e000      	b.n	8004e92 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d063      	beq.n	8004f66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004e9e:	4b4a      	ldr	r3, [pc, #296]	@ (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f003 030c 	and.w	r3, r3, #12
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00b      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004eaa:	4b47      	ldr	r3, [pc, #284]	@ (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004eb2:	2b08      	cmp	r3, #8
 8004eb4:	d11c      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004eb6:	4b44      	ldr	r3, [pc, #272]	@ (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d116      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ec2:	4b41      	ldr	r3, [pc, #260]	@ (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d005      	beq.n	8004eda <HAL_RCC_OscConfig+0x152>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d001      	beq.n	8004eda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e1c7      	b.n	800526a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eda:	4b3b      	ldr	r3, [pc, #236]	@ (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	00db      	lsls	r3, r3, #3
 8004ee8:	4937      	ldr	r1, [pc, #220]	@ (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eee:	e03a      	b.n	8004f66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d020      	beq.n	8004f3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ef8:	4b34      	ldr	r3, [pc, #208]	@ (8004fcc <HAL_RCC_OscConfig+0x244>)
 8004efa:	2201      	movs	r2, #1
 8004efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efe:	f7fd fe77 	bl	8002bf0 <HAL_GetTick>
 8004f02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f04:	e008      	b.n	8004f18 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f06:	f7fd fe73 	bl	8002bf0 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d901      	bls.n	8004f18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e1a8      	b.n	800526a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f18:	4b2b      	ldr	r3, [pc, #172]	@ (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d0f0      	beq.n	8004f06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f24:	4b28      	ldr	r3, [pc, #160]	@ (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	00db      	lsls	r3, r3, #3
 8004f32:	4925      	ldr	r1, [pc, #148]	@ (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	600b      	str	r3, [r1, #0]
 8004f38:	e015      	b.n	8004f66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f3a:	4b24      	ldr	r3, [pc, #144]	@ (8004fcc <HAL_RCC_OscConfig+0x244>)
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f40:	f7fd fe56 	bl	8002bf0 <HAL_GetTick>
 8004f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f46:	e008      	b.n	8004f5a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f48:	f7fd fe52 	bl	8002bf0 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e187      	b.n	800526a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f5a:	4b1b      	ldr	r3, [pc, #108]	@ (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0302 	and.w	r3, r3, #2
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1f0      	bne.n	8004f48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0308 	and.w	r3, r3, #8
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d036      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d016      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f7a:	4b15      	ldr	r3, [pc, #84]	@ (8004fd0 <HAL_RCC_OscConfig+0x248>)
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f80:	f7fd fe36 	bl	8002bf0 <HAL_GetTick>
 8004f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f86:	e008      	b.n	8004f9a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f88:	f7fd fe32 	bl	8002bf0 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e167      	b.n	800526a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8004fc8 <HAL_RCC_OscConfig+0x240>)
 8004f9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d0f0      	beq.n	8004f88 <HAL_RCC_OscConfig+0x200>
 8004fa6:	e01b      	b.n	8004fe0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fa8:	4b09      	ldr	r3, [pc, #36]	@ (8004fd0 <HAL_RCC_OscConfig+0x248>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fae:	f7fd fe1f 	bl	8002bf0 <HAL_GetTick>
 8004fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fb4:	e00e      	b.n	8004fd4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fb6:	f7fd fe1b 	bl	8002bf0 <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d907      	bls.n	8004fd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e150      	b.n	800526a <HAL_RCC_OscConfig+0x4e2>
 8004fc8:	40023800 	.word	0x40023800
 8004fcc:	42470000 	.word	0x42470000
 8004fd0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fd4:	4b88      	ldr	r3, [pc, #544]	@ (80051f8 <HAL_RCC_OscConfig+0x470>)
 8004fd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fd8:	f003 0302 	and.w	r3, r3, #2
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d1ea      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0304 	and.w	r3, r3, #4
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f000 8097 	beq.w	800511c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ff2:	4b81      	ldr	r3, [pc, #516]	@ (80051f8 <HAL_RCC_OscConfig+0x470>)
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10f      	bne.n	800501e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ffe:	2300      	movs	r3, #0
 8005000:	60bb      	str	r3, [r7, #8]
 8005002:	4b7d      	ldr	r3, [pc, #500]	@ (80051f8 <HAL_RCC_OscConfig+0x470>)
 8005004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005006:	4a7c      	ldr	r2, [pc, #496]	@ (80051f8 <HAL_RCC_OscConfig+0x470>)
 8005008:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800500c:	6413      	str	r3, [r2, #64]	@ 0x40
 800500e:	4b7a      	ldr	r3, [pc, #488]	@ (80051f8 <HAL_RCC_OscConfig+0x470>)
 8005010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005012:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005016:	60bb      	str	r3, [r7, #8]
 8005018:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800501a:	2301      	movs	r3, #1
 800501c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800501e:	4b77      	ldr	r3, [pc, #476]	@ (80051fc <HAL_RCC_OscConfig+0x474>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005026:	2b00      	cmp	r3, #0
 8005028:	d118      	bne.n	800505c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800502a:	4b74      	ldr	r3, [pc, #464]	@ (80051fc <HAL_RCC_OscConfig+0x474>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a73      	ldr	r2, [pc, #460]	@ (80051fc <HAL_RCC_OscConfig+0x474>)
 8005030:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005034:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005036:	f7fd fddb 	bl	8002bf0 <HAL_GetTick>
 800503a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800503c:	e008      	b.n	8005050 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800503e:	f7fd fdd7 	bl	8002bf0 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	2b02      	cmp	r3, #2
 800504a:	d901      	bls.n	8005050 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e10c      	b.n	800526a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005050:	4b6a      	ldr	r3, [pc, #424]	@ (80051fc <HAL_RCC_OscConfig+0x474>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005058:	2b00      	cmp	r3, #0
 800505a:	d0f0      	beq.n	800503e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d106      	bne.n	8005072 <HAL_RCC_OscConfig+0x2ea>
 8005064:	4b64      	ldr	r3, [pc, #400]	@ (80051f8 <HAL_RCC_OscConfig+0x470>)
 8005066:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005068:	4a63      	ldr	r2, [pc, #396]	@ (80051f8 <HAL_RCC_OscConfig+0x470>)
 800506a:	f043 0301 	orr.w	r3, r3, #1
 800506e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005070:	e01c      	b.n	80050ac <HAL_RCC_OscConfig+0x324>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	2b05      	cmp	r3, #5
 8005078:	d10c      	bne.n	8005094 <HAL_RCC_OscConfig+0x30c>
 800507a:	4b5f      	ldr	r3, [pc, #380]	@ (80051f8 <HAL_RCC_OscConfig+0x470>)
 800507c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800507e:	4a5e      	ldr	r2, [pc, #376]	@ (80051f8 <HAL_RCC_OscConfig+0x470>)
 8005080:	f043 0304 	orr.w	r3, r3, #4
 8005084:	6713      	str	r3, [r2, #112]	@ 0x70
 8005086:	4b5c      	ldr	r3, [pc, #368]	@ (80051f8 <HAL_RCC_OscConfig+0x470>)
 8005088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800508a:	4a5b      	ldr	r2, [pc, #364]	@ (80051f8 <HAL_RCC_OscConfig+0x470>)
 800508c:	f043 0301 	orr.w	r3, r3, #1
 8005090:	6713      	str	r3, [r2, #112]	@ 0x70
 8005092:	e00b      	b.n	80050ac <HAL_RCC_OscConfig+0x324>
 8005094:	4b58      	ldr	r3, [pc, #352]	@ (80051f8 <HAL_RCC_OscConfig+0x470>)
 8005096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005098:	4a57      	ldr	r2, [pc, #348]	@ (80051f8 <HAL_RCC_OscConfig+0x470>)
 800509a:	f023 0301 	bic.w	r3, r3, #1
 800509e:	6713      	str	r3, [r2, #112]	@ 0x70
 80050a0:	4b55      	ldr	r3, [pc, #340]	@ (80051f8 <HAL_RCC_OscConfig+0x470>)
 80050a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050a4:	4a54      	ldr	r2, [pc, #336]	@ (80051f8 <HAL_RCC_OscConfig+0x470>)
 80050a6:	f023 0304 	bic.w	r3, r3, #4
 80050aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d015      	beq.n	80050e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050b4:	f7fd fd9c 	bl	8002bf0 <HAL_GetTick>
 80050b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ba:	e00a      	b.n	80050d2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050bc:	f7fd fd98 	bl	8002bf0 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e0cb      	b.n	800526a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050d2:	4b49      	ldr	r3, [pc, #292]	@ (80051f8 <HAL_RCC_OscConfig+0x470>)
 80050d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d0ee      	beq.n	80050bc <HAL_RCC_OscConfig+0x334>
 80050de:	e014      	b.n	800510a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050e0:	f7fd fd86 	bl	8002bf0 <HAL_GetTick>
 80050e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050e6:	e00a      	b.n	80050fe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050e8:	f7fd fd82 	bl	8002bf0 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e0b5      	b.n	800526a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050fe:	4b3e      	ldr	r3, [pc, #248]	@ (80051f8 <HAL_RCC_OscConfig+0x470>)
 8005100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1ee      	bne.n	80050e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800510a:	7dfb      	ldrb	r3, [r7, #23]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d105      	bne.n	800511c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005110:	4b39      	ldr	r3, [pc, #228]	@ (80051f8 <HAL_RCC_OscConfig+0x470>)
 8005112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005114:	4a38      	ldr	r2, [pc, #224]	@ (80051f8 <HAL_RCC_OscConfig+0x470>)
 8005116:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800511a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	2b00      	cmp	r3, #0
 8005122:	f000 80a1 	beq.w	8005268 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005126:	4b34      	ldr	r3, [pc, #208]	@ (80051f8 <HAL_RCC_OscConfig+0x470>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f003 030c 	and.w	r3, r3, #12
 800512e:	2b08      	cmp	r3, #8
 8005130:	d05c      	beq.n	80051ec <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	2b02      	cmp	r3, #2
 8005138:	d141      	bne.n	80051be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800513a:	4b31      	ldr	r3, [pc, #196]	@ (8005200 <HAL_RCC_OscConfig+0x478>)
 800513c:	2200      	movs	r2, #0
 800513e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005140:	f7fd fd56 	bl	8002bf0 <HAL_GetTick>
 8005144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005146:	e008      	b.n	800515a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005148:	f7fd fd52 	bl	8002bf0 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	2b02      	cmp	r3, #2
 8005154:	d901      	bls.n	800515a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e087      	b.n	800526a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800515a:	4b27      	ldr	r3, [pc, #156]	@ (80051f8 <HAL_RCC_OscConfig+0x470>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1f0      	bne.n	8005148 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	69da      	ldr	r2, [r3, #28]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	431a      	orrs	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005174:	019b      	lsls	r3, r3, #6
 8005176:	431a      	orrs	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800517c:	085b      	lsrs	r3, r3, #1
 800517e:	3b01      	subs	r3, #1
 8005180:	041b      	lsls	r3, r3, #16
 8005182:	431a      	orrs	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005188:	061b      	lsls	r3, r3, #24
 800518a:	491b      	ldr	r1, [pc, #108]	@ (80051f8 <HAL_RCC_OscConfig+0x470>)
 800518c:	4313      	orrs	r3, r2
 800518e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005190:	4b1b      	ldr	r3, [pc, #108]	@ (8005200 <HAL_RCC_OscConfig+0x478>)
 8005192:	2201      	movs	r2, #1
 8005194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005196:	f7fd fd2b 	bl	8002bf0 <HAL_GetTick>
 800519a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800519c:	e008      	b.n	80051b0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800519e:	f7fd fd27 	bl	8002bf0 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d901      	bls.n	80051b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e05c      	b.n	800526a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051b0:	4b11      	ldr	r3, [pc, #68]	@ (80051f8 <HAL_RCC_OscConfig+0x470>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d0f0      	beq.n	800519e <HAL_RCC_OscConfig+0x416>
 80051bc:	e054      	b.n	8005268 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051be:	4b10      	ldr	r3, [pc, #64]	@ (8005200 <HAL_RCC_OscConfig+0x478>)
 80051c0:	2200      	movs	r2, #0
 80051c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051c4:	f7fd fd14 	bl	8002bf0 <HAL_GetTick>
 80051c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ca:	e008      	b.n	80051de <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051cc:	f7fd fd10 	bl	8002bf0 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d901      	bls.n	80051de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e045      	b.n	800526a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051de:	4b06      	ldr	r3, [pc, #24]	@ (80051f8 <HAL_RCC_OscConfig+0x470>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1f0      	bne.n	80051cc <HAL_RCC_OscConfig+0x444>
 80051ea:	e03d      	b.n	8005268 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d107      	bne.n	8005204 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e038      	b.n	800526a <HAL_RCC_OscConfig+0x4e2>
 80051f8:	40023800 	.word	0x40023800
 80051fc:	40007000 	.word	0x40007000
 8005200:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005204:	4b1b      	ldr	r3, [pc, #108]	@ (8005274 <HAL_RCC_OscConfig+0x4ec>)
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d028      	beq.n	8005264 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800521c:	429a      	cmp	r2, r3
 800521e:	d121      	bne.n	8005264 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800522a:	429a      	cmp	r2, r3
 800522c:	d11a      	bne.n	8005264 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005234:	4013      	ands	r3, r2
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800523a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800523c:	4293      	cmp	r3, r2
 800523e:	d111      	bne.n	8005264 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800524a:	085b      	lsrs	r3, r3, #1
 800524c:	3b01      	subs	r3, #1
 800524e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005250:	429a      	cmp	r2, r3
 8005252:	d107      	bne.n	8005264 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800525e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005260:	429a      	cmp	r2, r3
 8005262:	d001      	beq.n	8005268 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e000      	b.n	800526a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3718      	adds	r7, #24
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	40023800 	.word	0x40023800

08005278 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d101      	bne.n	800528c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e0cc      	b.n	8005426 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800528c:	4b68      	ldr	r3, [pc, #416]	@ (8005430 <HAL_RCC_ClockConfig+0x1b8>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0307 	and.w	r3, r3, #7
 8005294:	683a      	ldr	r2, [r7, #0]
 8005296:	429a      	cmp	r2, r3
 8005298:	d90c      	bls.n	80052b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800529a:	4b65      	ldr	r3, [pc, #404]	@ (8005430 <HAL_RCC_ClockConfig+0x1b8>)
 800529c:	683a      	ldr	r2, [r7, #0]
 800529e:	b2d2      	uxtb	r2, r2
 80052a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052a2:	4b63      	ldr	r3, [pc, #396]	@ (8005430 <HAL_RCC_ClockConfig+0x1b8>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0307 	and.w	r3, r3, #7
 80052aa:	683a      	ldr	r2, [r7, #0]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d001      	beq.n	80052b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e0b8      	b.n	8005426 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0302 	and.w	r3, r3, #2
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d020      	beq.n	8005302 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0304 	and.w	r3, r3, #4
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d005      	beq.n	80052d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052cc:	4b59      	ldr	r3, [pc, #356]	@ (8005434 <HAL_RCC_ClockConfig+0x1bc>)
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	4a58      	ldr	r2, [pc, #352]	@ (8005434 <HAL_RCC_ClockConfig+0x1bc>)
 80052d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80052d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0308 	and.w	r3, r3, #8
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d005      	beq.n	80052f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052e4:	4b53      	ldr	r3, [pc, #332]	@ (8005434 <HAL_RCC_ClockConfig+0x1bc>)
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	4a52      	ldr	r2, [pc, #328]	@ (8005434 <HAL_RCC_ClockConfig+0x1bc>)
 80052ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80052ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052f0:	4b50      	ldr	r3, [pc, #320]	@ (8005434 <HAL_RCC_ClockConfig+0x1bc>)
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	494d      	ldr	r1, [pc, #308]	@ (8005434 <HAL_RCC_ClockConfig+0x1bc>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b00      	cmp	r3, #0
 800530c:	d044      	beq.n	8005398 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d107      	bne.n	8005326 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005316:	4b47      	ldr	r3, [pc, #284]	@ (8005434 <HAL_RCC_ClockConfig+0x1bc>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d119      	bne.n	8005356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e07f      	b.n	8005426 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	2b02      	cmp	r3, #2
 800532c:	d003      	beq.n	8005336 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005332:	2b03      	cmp	r3, #3
 8005334:	d107      	bne.n	8005346 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005336:	4b3f      	ldr	r3, [pc, #252]	@ (8005434 <HAL_RCC_ClockConfig+0x1bc>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d109      	bne.n	8005356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e06f      	b.n	8005426 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005346:	4b3b      	ldr	r3, [pc, #236]	@ (8005434 <HAL_RCC_ClockConfig+0x1bc>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0302 	and.w	r3, r3, #2
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e067      	b.n	8005426 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005356:	4b37      	ldr	r3, [pc, #220]	@ (8005434 <HAL_RCC_ClockConfig+0x1bc>)
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f023 0203 	bic.w	r2, r3, #3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	4934      	ldr	r1, [pc, #208]	@ (8005434 <HAL_RCC_ClockConfig+0x1bc>)
 8005364:	4313      	orrs	r3, r2
 8005366:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005368:	f7fd fc42 	bl	8002bf0 <HAL_GetTick>
 800536c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800536e:	e00a      	b.n	8005386 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005370:	f7fd fc3e 	bl	8002bf0 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800537e:	4293      	cmp	r3, r2
 8005380:	d901      	bls.n	8005386 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e04f      	b.n	8005426 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005386:	4b2b      	ldr	r3, [pc, #172]	@ (8005434 <HAL_RCC_ClockConfig+0x1bc>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f003 020c 	and.w	r2, r3, #12
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	429a      	cmp	r2, r3
 8005396:	d1eb      	bne.n	8005370 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005398:	4b25      	ldr	r3, [pc, #148]	@ (8005430 <HAL_RCC_ClockConfig+0x1b8>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0307 	and.w	r3, r3, #7
 80053a0:	683a      	ldr	r2, [r7, #0]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d20c      	bcs.n	80053c0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053a6:	4b22      	ldr	r3, [pc, #136]	@ (8005430 <HAL_RCC_ClockConfig+0x1b8>)
 80053a8:	683a      	ldr	r2, [r7, #0]
 80053aa:	b2d2      	uxtb	r2, r2
 80053ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ae:	4b20      	ldr	r3, [pc, #128]	@ (8005430 <HAL_RCC_ClockConfig+0x1b8>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0307 	and.w	r3, r3, #7
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d001      	beq.n	80053c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e032      	b.n	8005426 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0304 	and.w	r3, r3, #4
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d008      	beq.n	80053de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053cc:	4b19      	ldr	r3, [pc, #100]	@ (8005434 <HAL_RCC_ClockConfig+0x1bc>)
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	4916      	ldr	r1, [pc, #88]	@ (8005434 <HAL_RCC_ClockConfig+0x1bc>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0308 	and.w	r3, r3, #8
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d009      	beq.n	80053fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053ea:	4b12      	ldr	r3, [pc, #72]	@ (8005434 <HAL_RCC_ClockConfig+0x1bc>)
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	00db      	lsls	r3, r3, #3
 80053f8:	490e      	ldr	r1, [pc, #56]	@ (8005434 <HAL_RCC_ClockConfig+0x1bc>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80053fe:	f000 f821 	bl	8005444 <HAL_RCC_GetSysClockFreq>
 8005402:	4602      	mov	r2, r0
 8005404:	4b0b      	ldr	r3, [pc, #44]	@ (8005434 <HAL_RCC_ClockConfig+0x1bc>)
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	091b      	lsrs	r3, r3, #4
 800540a:	f003 030f 	and.w	r3, r3, #15
 800540e:	490a      	ldr	r1, [pc, #40]	@ (8005438 <HAL_RCC_ClockConfig+0x1c0>)
 8005410:	5ccb      	ldrb	r3, [r1, r3]
 8005412:	fa22 f303 	lsr.w	r3, r2, r3
 8005416:	4a09      	ldr	r2, [pc, #36]	@ (800543c <HAL_RCC_ClockConfig+0x1c4>)
 8005418:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800541a:	4b09      	ldr	r3, [pc, #36]	@ (8005440 <HAL_RCC_ClockConfig+0x1c8>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4618      	mov	r0, r3
 8005420:	f7fd fba2 	bl	8002b68 <HAL_InitTick>

  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	40023c00 	.word	0x40023c00
 8005434:	40023800 	.word	0x40023800
 8005438:	0800b388 	.word	0x0800b388
 800543c:	20000000 	.word	0x20000000
 8005440:	20000004 	.word	0x20000004

08005444 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005444:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005448:	b090      	sub	sp, #64	@ 0x40
 800544a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800544c:	2300      	movs	r3, #0
 800544e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005450:	2300      	movs	r3, #0
 8005452:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005454:	2300      	movs	r3, #0
 8005456:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005458:	2300      	movs	r3, #0
 800545a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800545c:	4b59      	ldr	r3, [pc, #356]	@ (80055c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f003 030c 	and.w	r3, r3, #12
 8005464:	2b08      	cmp	r3, #8
 8005466:	d00d      	beq.n	8005484 <HAL_RCC_GetSysClockFreq+0x40>
 8005468:	2b08      	cmp	r3, #8
 800546a:	f200 80a1 	bhi.w	80055b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800546e:	2b00      	cmp	r3, #0
 8005470:	d002      	beq.n	8005478 <HAL_RCC_GetSysClockFreq+0x34>
 8005472:	2b04      	cmp	r3, #4
 8005474:	d003      	beq.n	800547e <HAL_RCC_GetSysClockFreq+0x3a>
 8005476:	e09b      	b.n	80055b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005478:	4b53      	ldr	r3, [pc, #332]	@ (80055c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800547a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800547c:	e09b      	b.n	80055b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800547e:	4b53      	ldr	r3, [pc, #332]	@ (80055cc <HAL_RCC_GetSysClockFreq+0x188>)
 8005480:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005482:	e098      	b.n	80055b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005484:	4b4f      	ldr	r3, [pc, #316]	@ (80055c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800548c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800548e:	4b4d      	ldr	r3, [pc, #308]	@ (80055c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d028      	beq.n	80054ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800549a:	4b4a      	ldr	r3, [pc, #296]	@ (80055c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	099b      	lsrs	r3, r3, #6
 80054a0:	2200      	movs	r2, #0
 80054a2:	623b      	str	r3, [r7, #32]
 80054a4:	627a      	str	r2, [r7, #36]	@ 0x24
 80054a6:	6a3b      	ldr	r3, [r7, #32]
 80054a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80054ac:	2100      	movs	r1, #0
 80054ae:	4b47      	ldr	r3, [pc, #284]	@ (80055cc <HAL_RCC_GetSysClockFreq+0x188>)
 80054b0:	fb03 f201 	mul.w	r2, r3, r1
 80054b4:	2300      	movs	r3, #0
 80054b6:	fb00 f303 	mul.w	r3, r0, r3
 80054ba:	4413      	add	r3, r2
 80054bc:	4a43      	ldr	r2, [pc, #268]	@ (80055cc <HAL_RCC_GetSysClockFreq+0x188>)
 80054be:	fba0 1202 	umull	r1, r2, r0, r2
 80054c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054c4:	460a      	mov	r2, r1
 80054c6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80054c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054ca:	4413      	add	r3, r2
 80054cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054d0:	2200      	movs	r2, #0
 80054d2:	61bb      	str	r3, [r7, #24]
 80054d4:	61fa      	str	r2, [r7, #28]
 80054d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80054de:	f7fb fbbb 	bl	8000c58 <__aeabi_uldivmod>
 80054e2:	4602      	mov	r2, r0
 80054e4:	460b      	mov	r3, r1
 80054e6:	4613      	mov	r3, r2
 80054e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054ea:	e053      	b.n	8005594 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054ec:	4b35      	ldr	r3, [pc, #212]	@ (80055c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	099b      	lsrs	r3, r3, #6
 80054f2:	2200      	movs	r2, #0
 80054f4:	613b      	str	r3, [r7, #16]
 80054f6:	617a      	str	r2, [r7, #20]
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80054fe:	f04f 0b00 	mov.w	fp, #0
 8005502:	4652      	mov	r2, sl
 8005504:	465b      	mov	r3, fp
 8005506:	f04f 0000 	mov.w	r0, #0
 800550a:	f04f 0100 	mov.w	r1, #0
 800550e:	0159      	lsls	r1, r3, #5
 8005510:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005514:	0150      	lsls	r0, r2, #5
 8005516:	4602      	mov	r2, r0
 8005518:	460b      	mov	r3, r1
 800551a:	ebb2 080a 	subs.w	r8, r2, sl
 800551e:	eb63 090b 	sbc.w	r9, r3, fp
 8005522:	f04f 0200 	mov.w	r2, #0
 8005526:	f04f 0300 	mov.w	r3, #0
 800552a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800552e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005532:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005536:	ebb2 0408 	subs.w	r4, r2, r8
 800553a:	eb63 0509 	sbc.w	r5, r3, r9
 800553e:	f04f 0200 	mov.w	r2, #0
 8005542:	f04f 0300 	mov.w	r3, #0
 8005546:	00eb      	lsls	r3, r5, #3
 8005548:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800554c:	00e2      	lsls	r2, r4, #3
 800554e:	4614      	mov	r4, r2
 8005550:	461d      	mov	r5, r3
 8005552:	eb14 030a 	adds.w	r3, r4, sl
 8005556:	603b      	str	r3, [r7, #0]
 8005558:	eb45 030b 	adc.w	r3, r5, fp
 800555c:	607b      	str	r3, [r7, #4]
 800555e:	f04f 0200 	mov.w	r2, #0
 8005562:	f04f 0300 	mov.w	r3, #0
 8005566:	e9d7 4500 	ldrd	r4, r5, [r7]
 800556a:	4629      	mov	r1, r5
 800556c:	028b      	lsls	r3, r1, #10
 800556e:	4621      	mov	r1, r4
 8005570:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005574:	4621      	mov	r1, r4
 8005576:	028a      	lsls	r2, r1, #10
 8005578:	4610      	mov	r0, r2
 800557a:	4619      	mov	r1, r3
 800557c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800557e:	2200      	movs	r2, #0
 8005580:	60bb      	str	r3, [r7, #8]
 8005582:	60fa      	str	r2, [r7, #12]
 8005584:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005588:	f7fb fb66 	bl	8000c58 <__aeabi_uldivmod>
 800558c:	4602      	mov	r2, r0
 800558e:	460b      	mov	r3, r1
 8005590:	4613      	mov	r3, r2
 8005592:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005594:	4b0b      	ldr	r3, [pc, #44]	@ (80055c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	0c1b      	lsrs	r3, r3, #16
 800559a:	f003 0303 	and.w	r3, r3, #3
 800559e:	3301      	adds	r3, #1
 80055a0:	005b      	lsls	r3, r3, #1
 80055a2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80055a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80055a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80055ae:	e002      	b.n	80055b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055b0:	4b05      	ldr	r3, [pc, #20]	@ (80055c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80055b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80055b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3740      	adds	r7, #64	@ 0x40
 80055bc:	46bd      	mov	sp, r7
 80055be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055c2:	bf00      	nop
 80055c4:	40023800 	.word	0x40023800
 80055c8:	00f42400 	.word	0x00f42400
 80055cc:	017d7840 	.word	0x017d7840

080055d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055d0:	b480      	push	{r7}
 80055d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055d4:	4b03      	ldr	r3, [pc, #12]	@ (80055e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80055d6:	681b      	ldr	r3, [r3, #0]
}
 80055d8:	4618      	mov	r0, r3
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	20000000 	.word	0x20000000

080055e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80055ec:	f7ff fff0 	bl	80055d0 <HAL_RCC_GetHCLKFreq>
 80055f0:	4602      	mov	r2, r0
 80055f2:	4b05      	ldr	r3, [pc, #20]	@ (8005608 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	0a9b      	lsrs	r3, r3, #10
 80055f8:	f003 0307 	and.w	r3, r3, #7
 80055fc:	4903      	ldr	r1, [pc, #12]	@ (800560c <HAL_RCC_GetPCLK1Freq+0x24>)
 80055fe:	5ccb      	ldrb	r3, [r1, r3]
 8005600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005604:	4618      	mov	r0, r3
 8005606:	bd80      	pop	{r7, pc}
 8005608:	40023800 	.word	0x40023800
 800560c:	0800b398 	.word	0x0800b398

08005610 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005614:	f7ff ffdc 	bl	80055d0 <HAL_RCC_GetHCLKFreq>
 8005618:	4602      	mov	r2, r0
 800561a:	4b05      	ldr	r3, [pc, #20]	@ (8005630 <HAL_RCC_GetPCLK2Freq+0x20>)
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	0b5b      	lsrs	r3, r3, #13
 8005620:	f003 0307 	and.w	r3, r3, #7
 8005624:	4903      	ldr	r1, [pc, #12]	@ (8005634 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005626:	5ccb      	ldrb	r3, [r1, r3]
 8005628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800562c:	4618      	mov	r0, r3
 800562e:	bd80      	pop	{r7, pc}
 8005630:	40023800 	.word	0x40023800
 8005634:	0800b398 	.word	0x0800b398

08005638 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005644:	2300      	movs	r3, #0
 8005646:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0301 	and.w	r3, r3, #1
 8005650:	2b00      	cmp	r3, #0
 8005652:	d105      	bne.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800565c:	2b00      	cmp	r3, #0
 800565e:	d035      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005660:	4b67      	ldr	r3, [pc, #412]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005662:	2200      	movs	r2, #0
 8005664:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005666:	f7fd fac3 	bl	8002bf0 <HAL_GetTick>
 800566a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800566c:	e008      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800566e:	f7fd fabf 	bl	8002bf0 <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	2b02      	cmp	r3, #2
 800567a:	d901      	bls.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800567c:	2303      	movs	r3, #3
 800567e:	e0ba      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005680:	4b60      	ldr	r3, [pc, #384]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d1f0      	bne.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	019a      	lsls	r2, r3, #6
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	071b      	lsls	r3, r3, #28
 8005698:	495a      	ldr	r1, [pc, #360]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800569a:	4313      	orrs	r3, r2
 800569c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80056a0:	4b57      	ldr	r3, [pc, #348]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80056a2:	2201      	movs	r2, #1
 80056a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80056a6:	f7fd faa3 	bl	8002bf0 <HAL_GetTick>
 80056aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056ac:	e008      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80056ae:	f7fd fa9f 	bl	8002bf0 <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d901      	bls.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e09a      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056c0:	4b50      	ldr	r3, [pc, #320]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d0f0      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0302 	and.w	r3, r3, #2
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f000 8083 	beq.w	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80056da:	2300      	movs	r3, #0
 80056dc:	60fb      	str	r3, [r7, #12]
 80056de:	4b49      	ldr	r3, [pc, #292]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80056e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e2:	4a48      	ldr	r2, [pc, #288]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80056e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80056ea:	4b46      	ldr	r3, [pc, #280]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80056ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056f2:	60fb      	str	r3, [r7, #12]
 80056f4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80056f6:	4b44      	ldr	r3, [pc, #272]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a43      	ldr	r2, [pc, #268]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005700:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005702:	f7fd fa75 	bl	8002bf0 <HAL_GetTick>
 8005706:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005708:	e008      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800570a:	f7fd fa71 	bl	8002bf0 <HAL_GetTick>
 800570e:	4602      	mov	r2, r0
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	2b02      	cmp	r3, #2
 8005716:	d901      	bls.n	800571c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e06c      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800571c:	4b3a      	ldr	r3, [pc, #232]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005724:	2b00      	cmp	r3, #0
 8005726:	d0f0      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005728:	4b36      	ldr	r3, [pc, #216]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800572a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800572c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005730:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d02f      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	429a      	cmp	r2, r3
 8005744:	d028      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005746:	4b2f      	ldr	r3, [pc, #188]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800574a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800574e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005750:	4b2e      	ldr	r3, [pc, #184]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005752:	2201      	movs	r2, #1
 8005754:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005756:	4b2d      	ldr	r3, [pc, #180]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005758:	2200      	movs	r2, #0
 800575a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800575c:	4a29      	ldr	r2, [pc, #164]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005762:	4b28      	ldr	r3, [pc, #160]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005766:	f003 0301 	and.w	r3, r3, #1
 800576a:	2b01      	cmp	r3, #1
 800576c:	d114      	bne.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800576e:	f7fd fa3f 	bl	8002bf0 <HAL_GetTick>
 8005772:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005774:	e00a      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005776:	f7fd fa3b 	bl	8002bf0 <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005784:	4293      	cmp	r3, r2
 8005786:	d901      	bls.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e034      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800578c:	4b1d      	ldr	r3, [pc, #116]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800578e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005790:	f003 0302 	and.w	r3, r3, #2
 8005794:	2b00      	cmp	r3, #0
 8005796:	d0ee      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057a4:	d10d      	bne.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80057a6:	4b17      	ldr	r3, [pc, #92]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80057b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057ba:	4912      	ldr	r1, [pc, #72]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80057bc:	4313      	orrs	r3, r2
 80057be:	608b      	str	r3, [r1, #8]
 80057c0:	e005      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x196>
 80057c2:	4b10      	ldr	r3, [pc, #64]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	4a0f      	ldr	r2, [pc, #60]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80057c8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80057cc:	6093      	str	r3, [r2, #8]
 80057ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80057d0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057da:	490a      	ldr	r1, [pc, #40]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0308 	and.w	r3, r3, #8
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d003      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	7c1a      	ldrb	r2, [r3, #16]
 80057f0:	4b07      	ldr	r3, [pc, #28]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80057f2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3718      	adds	r7, #24
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	42470068 	.word	0x42470068
 8005804:	40023800 	.word	0x40023800
 8005808:	40007000 	.word	0x40007000
 800580c:	42470e40 	.word	0x42470e40
 8005810:	424711e0 	.word	0x424711e0

08005814 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e073      	b.n	8005912 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	7f5b      	ldrb	r3, [r3, #29]
 800582e:	b2db      	uxtb	r3, r3
 8005830:	2b00      	cmp	r3, #0
 8005832:	d105      	bne.n	8005840 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7fc fe1a 	bl	8002474 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2202      	movs	r2, #2
 8005844:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	f003 0310 	and.w	r3, r3, #16
 8005850:	2b10      	cmp	r3, #16
 8005852:	d055      	beq.n	8005900 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	22ca      	movs	r2, #202	@ 0xca
 800585a:	625a      	str	r2, [r3, #36]	@ 0x24
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2253      	movs	r2, #83	@ 0x53
 8005862:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 f99d 	bl	8005ba4 <RTC_EnterInitMode>
 800586a:	4603      	mov	r3, r0
 800586c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800586e:	7bfb      	ldrb	r3, [r7, #15]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d12c      	bne.n	80058ce <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	6812      	ldr	r2, [r2, #0]
 800587e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005882:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005886:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6899      	ldr	r1, [r3, #8]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	431a      	orrs	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	695b      	ldr	r3, [r3, #20]
 800589c:	431a      	orrs	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	430a      	orrs	r2, r1
 80058a4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	68d2      	ldr	r2, [r2, #12]
 80058ae:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6919      	ldr	r1, [r3, #16]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	041a      	lsls	r2, r3, #16
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	430a      	orrs	r2, r1
 80058c2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 f9a4 	bl	8005c12 <RTC_ExitInitMode>
 80058ca:	4603      	mov	r3, r0
 80058cc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80058ce:	7bfb      	ldrb	r3, [r7, #15]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d110      	bne.n	80058f6 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80058e2:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	699a      	ldr	r2, [r3, #24]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	430a      	orrs	r2, r1
 80058f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	22ff      	movs	r2, #255	@ 0xff
 80058fc:	625a      	str	r2, [r3, #36]	@ 0x24
 80058fe:	e001      	b.n	8005904 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005900:	2300      	movs	r3, #0
 8005902:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005904:	7bfb      	ldrb	r3, [r7, #15]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d102      	bne.n	8005910 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8005910:	7bfb      	ldrb	r3, [r7, #15]
}
 8005912:	4618      	mov	r0, r3
 8005914:	3710      	adds	r7, #16
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800591a:	b590      	push	{r4, r7, lr}
 800591c:	b087      	sub	sp, #28
 800591e:	af00      	add	r7, sp, #0
 8005920:	60f8      	str	r0, [r7, #12]
 8005922:	60b9      	str	r1, [r7, #8]
 8005924:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005926:	2300      	movs	r3, #0
 8005928:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	7f1b      	ldrb	r3, [r3, #28]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d101      	bne.n	8005936 <HAL_RTC_SetTime+0x1c>
 8005932:	2302      	movs	r3, #2
 8005934:	e087      	b.n	8005a46 <HAL_RTC_SetTime+0x12c>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2201      	movs	r2, #1
 800593a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2202      	movs	r2, #2
 8005940:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d126      	bne.n	8005996 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005952:	2b00      	cmp	r3, #0
 8005954:	d102      	bne.n	800595c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	2200      	movs	r2, #0
 800595a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	4618      	mov	r0, r3
 8005962:	f000 f97b 	bl	8005c5c <RTC_ByteToBcd2>
 8005966:	4603      	mov	r3, r0
 8005968:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	785b      	ldrb	r3, [r3, #1]
 800596e:	4618      	mov	r0, r3
 8005970:	f000 f974 	bl	8005c5c <RTC_ByteToBcd2>
 8005974:	4603      	mov	r3, r0
 8005976:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005978:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	789b      	ldrb	r3, [r3, #2]
 800597e:	4618      	mov	r0, r3
 8005980:	f000 f96c 	bl	8005c5c <RTC_ByteToBcd2>
 8005984:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005986:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	78db      	ldrb	r3, [r3, #3]
 800598e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005990:	4313      	orrs	r3, r2
 8005992:	617b      	str	r3, [r7, #20]
 8005994:	e018      	b.n	80059c8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d102      	bne.n	80059aa <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	2200      	movs	r2, #0
 80059a8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	785b      	ldrb	r3, [r3, #1]
 80059b4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80059b6:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80059bc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	78db      	ldrb	r3, [r3, #3]
 80059c2:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80059c4:	4313      	orrs	r3, r2
 80059c6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	22ca      	movs	r2, #202	@ 0xca
 80059ce:	625a      	str	r2, [r3, #36]	@ 0x24
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2253      	movs	r2, #83	@ 0x53
 80059d6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f000 f8e3 	bl	8005ba4 <RTC_EnterInitMode>
 80059de:	4603      	mov	r3, r0
 80059e0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80059e2:	7cfb      	ldrb	r3, [r7, #19]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d120      	bne.n	8005a2a <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80059f2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80059f6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	689a      	ldr	r2, [r3, #8]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005a06:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	6899      	ldr	r1, [r3, #8]
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	68da      	ldr	r2, [r3, #12]
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	431a      	orrs	r2, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f000 f8f6 	bl	8005c12 <RTC_ExitInitMode>
 8005a26:	4603      	mov	r3, r0
 8005a28:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005a2a:	7cfb      	ldrb	r3, [r7, #19]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d102      	bne.n	8005a36 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2201      	movs	r2, #1
 8005a34:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	22ff      	movs	r2, #255	@ 0xff
 8005a3c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	771a      	strb	r2, [r3, #28]

  return status;
 8005a44:	7cfb      	ldrb	r3, [r7, #19]
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	371c      	adds	r7, #28
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd90      	pop	{r4, r7, pc}

08005a4e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005a4e:	b590      	push	{r4, r7, lr}
 8005a50:	b087      	sub	sp, #28
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	60f8      	str	r0, [r7, #12]
 8005a56:	60b9      	str	r1, [r7, #8]
 8005a58:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	7f1b      	ldrb	r3, [r3, #28]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d101      	bne.n	8005a6a <HAL_RTC_SetDate+0x1c>
 8005a66:	2302      	movs	r3, #2
 8005a68:	e071      	b.n	8005b4e <HAL_RTC_SetDate+0x100>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2202      	movs	r2, #2
 8005a74:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10e      	bne.n	8005a9a <HAL_RTC_SetDate+0x4c>
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	785b      	ldrb	r3, [r3, #1]
 8005a80:	f003 0310 	and.w	r3, r3, #16
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d008      	beq.n	8005a9a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	785b      	ldrb	r3, [r3, #1]
 8005a8c:	f023 0310 	bic.w	r3, r3, #16
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	330a      	adds	r3, #10
 8005a94:	b2da      	uxtb	r2, r3
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d11c      	bne.n	8005ada <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	78db      	ldrb	r3, [r3, #3]
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f000 f8d9 	bl	8005c5c <RTC_ByteToBcd2>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	785b      	ldrb	r3, [r3, #1]
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f000 f8d2 	bl	8005c5c <RTC_ByteToBcd2>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005abc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	789b      	ldrb	r3, [r3, #2]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f000 f8ca 	bl	8005c5c <RTC_ByteToBcd2>
 8005ac8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005aca:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	617b      	str	r3, [r7, #20]
 8005ad8:	e00e      	b.n	8005af8 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	78db      	ldrb	r3, [r3, #3]
 8005ade:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	785b      	ldrb	r3, [r3, #1]
 8005ae4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005ae6:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005aec:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005af4:	4313      	orrs	r3, r2
 8005af6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	22ca      	movs	r2, #202	@ 0xca
 8005afe:	625a      	str	r2, [r3, #36]	@ 0x24
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2253      	movs	r2, #83	@ 0x53
 8005b06:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f000 f84b 	bl	8005ba4 <RTC_EnterInitMode>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005b12:	7cfb      	ldrb	r3, [r7, #19]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10c      	bne.n	8005b32 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005b22:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005b26:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f000 f872 	bl	8005c12 <RTC_ExitInitMode>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005b32:	7cfb      	ldrb	r3, [r7, #19]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d102      	bne.n	8005b3e <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	22ff      	movs	r2, #255	@ 0xff
 8005b44:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	771a      	strb	r2, [r3, #28]

  return status;
 8005b4c:	7cfb      	ldrb	r3, [r7, #19]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	371c      	adds	r7, #28
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd90      	pop	{r4, r7, pc}
	...

08005b58 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b60:	2300      	movs	r3, #0
 8005b62:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a0d      	ldr	r2, [pc, #52]	@ (8005ba0 <HAL_RTC_WaitForSynchro+0x48>)
 8005b6a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b6c:	f7fd f840 	bl	8002bf0 <HAL_GetTick>
 8005b70:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005b72:	e009      	b.n	8005b88 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005b74:	f7fd f83c 	bl	8002bf0 <HAL_GetTick>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005b82:	d901      	bls.n	8005b88 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e007      	b.n	8005b98 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	f003 0320 	and.w	r3, r3, #32
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d0ee      	beq.n	8005b74 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3710      	adds	r7, #16
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	00013f5f 	.word	0x00013f5f

08005ba4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005bac:	2300      	movs	r3, #0
 8005bae:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d122      	bne.n	8005c08 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68da      	ldr	r2, [r3, #12]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005bd0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005bd2:	f7fd f80d 	bl	8002bf0 <HAL_GetTick>
 8005bd6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005bd8:	e00c      	b.n	8005bf4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005bda:	f7fd f809 	bl	8002bf0 <HAL_GetTick>
 8005bde:	4602      	mov	r2, r0
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005be8:	d904      	bls.n	8005bf4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2204      	movs	r2, #4
 8005bee:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d102      	bne.n	8005c08 <RTC_EnterInitMode+0x64>
 8005c02:	7bfb      	ldrb	r3, [r7, #15]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d1e8      	bne.n	8005bda <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b084      	sub	sp, #16
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68da      	ldr	r2, [r3, #12]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005c2c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f003 0320 	and.w	r3, r3, #32
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10a      	bne.n	8005c52 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f7ff ff8b 	bl	8005b58 <HAL_RTC_WaitForSynchro>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d004      	beq.n	8005c52 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2204      	movs	r2, #4
 8005c4c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3710      	adds	r7, #16
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	4603      	mov	r3, r0
 8005c64:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005c66:	2300      	movs	r3, #0
 8005c68:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005c6a:	e005      	b.n	8005c78 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8005c72:	79fb      	ldrb	r3, [r7, #7]
 8005c74:	3b0a      	subs	r3, #10
 8005c76:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005c78:	79fb      	ldrb	r3, [r7, #7]
 8005c7a:	2b09      	cmp	r3, #9
 8005c7c:	d8f6      	bhi.n	8005c6c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	011b      	lsls	r3, r3, #4
 8005c84:	b2da      	uxtb	r2, r3
 8005c86:	79fb      	ldrb	r3, [r7, #7]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	b2db      	uxtb	r3, r3
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3714      	adds	r7, #20
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d101      	bne.n	8005caa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e041      	b.n	8005d2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d106      	bne.n	8005cc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f7fc fc04 	bl	80024cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	3304      	adds	r3, #4
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	4610      	mov	r0, r2
 8005cd8:	f000 fd3c 	bl	8006754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3708      	adds	r7, #8
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b082      	sub	sp, #8
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d101      	bne.n	8005d48 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e041      	b.n	8005dcc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d106      	bne.n	8005d62 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 f839 	bl	8005dd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2202      	movs	r2, #2
 8005d66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	3304      	adds	r3, #4
 8005d72:	4619      	mov	r1, r3
 8005d74:	4610      	mov	r0, r2
 8005d76:	f000 fced 	bl	8006754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3708      	adds	r7, #8
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d109      	bne.n	8005e0c <HAL_TIM_PWM_Start+0x24>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	bf14      	ite	ne
 8005e04:	2301      	movne	r3, #1
 8005e06:	2300      	moveq	r3, #0
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	e022      	b.n	8005e52 <HAL_TIM_PWM_Start+0x6a>
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	2b04      	cmp	r3, #4
 8005e10:	d109      	bne.n	8005e26 <HAL_TIM_PWM_Start+0x3e>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	bf14      	ite	ne
 8005e1e:	2301      	movne	r3, #1
 8005e20:	2300      	moveq	r3, #0
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	e015      	b.n	8005e52 <HAL_TIM_PWM_Start+0x6a>
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	2b08      	cmp	r3, #8
 8005e2a:	d109      	bne.n	8005e40 <HAL_TIM_PWM_Start+0x58>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	bf14      	ite	ne
 8005e38:	2301      	movne	r3, #1
 8005e3a:	2300      	moveq	r3, #0
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	e008      	b.n	8005e52 <HAL_TIM_PWM_Start+0x6a>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	bf14      	ite	ne
 8005e4c:	2301      	movne	r3, #1
 8005e4e:	2300      	moveq	r3, #0
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d001      	beq.n	8005e5a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e068      	b.n	8005f2c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d104      	bne.n	8005e6a <HAL_TIM_PWM_Start+0x82>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2202      	movs	r2, #2
 8005e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e68:	e013      	b.n	8005e92 <HAL_TIM_PWM_Start+0xaa>
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	2b04      	cmp	r3, #4
 8005e6e:	d104      	bne.n	8005e7a <HAL_TIM_PWM_Start+0x92>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2202      	movs	r2, #2
 8005e74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e78:	e00b      	b.n	8005e92 <HAL_TIM_PWM_Start+0xaa>
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	2b08      	cmp	r3, #8
 8005e7e:	d104      	bne.n	8005e8a <HAL_TIM_PWM_Start+0xa2>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2202      	movs	r2, #2
 8005e84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e88:	e003      	b.n	8005e92 <HAL_TIM_PWM_Start+0xaa>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2202      	movs	r2, #2
 8005e8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2201      	movs	r2, #1
 8005e98:	6839      	ldr	r1, [r7, #0]
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f001 f82a 	bl	8006ef4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a23      	ldr	r2, [pc, #140]	@ (8005f34 <HAL_TIM_PWM_Start+0x14c>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d107      	bne.n	8005eba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005eb8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a1d      	ldr	r2, [pc, #116]	@ (8005f34 <HAL_TIM_PWM_Start+0x14c>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d018      	beq.n	8005ef6 <HAL_TIM_PWM_Start+0x10e>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ecc:	d013      	beq.n	8005ef6 <HAL_TIM_PWM_Start+0x10e>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a19      	ldr	r2, [pc, #100]	@ (8005f38 <HAL_TIM_PWM_Start+0x150>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d00e      	beq.n	8005ef6 <HAL_TIM_PWM_Start+0x10e>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a17      	ldr	r2, [pc, #92]	@ (8005f3c <HAL_TIM_PWM_Start+0x154>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d009      	beq.n	8005ef6 <HAL_TIM_PWM_Start+0x10e>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a16      	ldr	r2, [pc, #88]	@ (8005f40 <HAL_TIM_PWM_Start+0x158>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d004      	beq.n	8005ef6 <HAL_TIM_PWM_Start+0x10e>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a14      	ldr	r2, [pc, #80]	@ (8005f44 <HAL_TIM_PWM_Start+0x15c>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d111      	bne.n	8005f1a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f003 0307 	and.w	r3, r3, #7
 8005f00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2b06      	cmp	r3, #6
 8005f06:	d010      	beq.n	8005f2a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f042 0201 	orr.w	r2, r2, #1
 8005f16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f18:	e007      	b.n	8005f2a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f042 0201 	orr.w	r2, r2, #1
 8005f28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3710      	adds	r7, #16
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	40010000 	.word	0x40010000
 8005f38:	40000400 	.word	0x40000400
 8005f3c:	40000800 	.word	0x40000800
 8005f40:	40000c00 	.word	0x40000c00
 8005f44:	40014000 	.word	0x40014000

08005f48 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2200      	movs	r2, #0
 8005f58:	6839      	ldr	r1, [r7, #0]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f000 ffca 	bl	8006ef4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a29      	ldr	r2, [pc, #164]	@ (800600c <HAL_TIM_PWM_Stop+0xc4>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d117      	bne.n	8005f9a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	6a1a      	ldr	r2, [r3, #32]
 8005f70:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005f74:	4013      	ands	r3, r2
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d10f      	bne.n	8005f9a <HAL_TIM_PWM_Stop+0x52>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	6a1a      	ldr	r2, [r3, #32]
 8005f80:	f240 4344 	movw	r3, #1092	@ 0x444
 8005f84:	4013      	ands	r3, r2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d107      	bne.n	8005f9a <HAL_TIM_PWM_Stop+0x52>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005f98:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	6a1a      	ldr	r2, [r3, #32]
 8005fa0:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d10f      	bne.n	8005fca <HAL_TIM_PWM_Stop+0x82>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	6a1a      	ldr	r2, [r3, #32]
 8005fb0:	f240 4344 	movw	r3, #1092	@ 0x444
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d107      	bne.n	8005fca <HAL_TIM_PWM_Stop+0x82>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f022 0201 	bic.w	r2, r2, #1
 8005fc8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d104      	bne.n	8005fda <HAL_TIM_PWM_Stop+0x92>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005fd8:	e013      	b.n	8006002 <HAL_TIM_PWM_Stop+0xba>
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	2b04      	cmp	r3, #4
 8005fde:	d104      	bne.n	8005fea <HAL_TIM_PWM_Stop+0xa2>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fe8:	e00b      	b.n	8006002 <HAL_TIM_PWM_Stop+0xba>
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	2b08      	cmp	r3, #8
 8005fee:	d104      	bne.n	8005ffa <HAL_TIM_PWM_Stop+0xb2>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ff8:	e003      	b.n	8006002 <HAL_TIM_PWM_Stop+0xba>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3708      	adds	r7, #8
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	40010000 	.word	0x40010000

08006010 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e041      	b.n	80060a6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d106      	bne.n	800603c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f839 	bl	80060ae <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2202      	movs	r2, #2
 8006040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	3304      	adds	r3, #4
 800604c:	4619      	mov	r1, r3
 800604e:	4610      	mov	r0, r2
 8006050:	f000 fb80 	bl	8006754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80060ae:	b480      	push	{r7}
 80060b0:	b083      	sub	sp, #12
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80060b6:	bf00      	nop
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b084      	sub	sp, #16
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	f003 0302 	and.w	r3, r3, #2
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d020      	beq.n	8006126 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f003 0302 	and.w	r3, r3, #2
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d01b      	beq.n	8006126 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f06f 0202 	mvn.w	r2, #2
 80060f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	f003 0303 	and.w	r3, r3, #3
 8006108:	2b00      	cmp	r3, #0
 800610a:	d003      	beq.n	8006114 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 fb02 	bl	8006716 <HAL_TIM_IC_CaptureCallback>
 8006112:	e005      	b.n	8006120 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 faf4 	bl	8006702 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 fb05 	bl	800672a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	f003 0304 	and.w	r3, r3, #4
 800612c:	2b00      	cmp	r3, #0
 800612e:	d020      	beq.n	8006172 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f003 0304 	and.w	r3, r3, #4
 8006136:	2b00      	cmp	r3, #0
 8006138:	d01b      	beq.n	8006172 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f06f 0204 	mvn.w	r2, #4
 8006142:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2202      	movs	r2, #2
 8006148:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006154:	2b00      	cmp	r3, #0
 8006156:	d003      	beq.n	8006160 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 fadc 	bl	8006716 <HAL_TIM_IC_CaptureCallback>
 800615e:	e005      	b.n	800616c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 face 	bl	8006702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 fadf 	bl	800672a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	f003 0308 	and.w	r3, r3, #8
 8006178:	2b00      	cmp	r3, #0
 800617a:	d020      	beq.n	80061be <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f003 0308 	and.w	r3, r3, #8
 8006182:	2b00      	cmp	r3, #0
 8006184:	d01b      	beq.n	80061be <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f06f 0208 	mvn.w	r2, #8
 800618e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2204      	movs	r2, #4
 8006194:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	69db      	ldr	r3, [r3, #28]
 800619c:	f003 0303 	and.w	r3, r3, #3
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d003      	beq.n	80061ac <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 fab6 	bl	8006716 <HAL_TIM_IC_CaptureCallback>
 80061aa:	e005      	b.n	80061b8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 faa8 	bl	8006702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 fab9 	bl	800672a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	f003 0310 	and.w	r3, r3, #16
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d020      	beq.n	800620a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f003 0310 	and.w	r3, r3, #16
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d01b      	beq.n	800620a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f06f 0210 	mvn.w	r2, #16
 80061da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2208      	movs	r2, #8
 80061e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	69db      	ldr	r3, [r3, #28]
 80061e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d003      	beq.n	80061f8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 fa90 	bl	8006716 <HAL_TIM_IC_CaptureCallback>
 80061f6:	e005      	b.n	8006204 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fa82 	bl	8006702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 fa93 	bl	800672a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	f003 0301 	and.w	r3, r3, #1
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00c      	beq.n	800622e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	2b00      	cmp	r3, #0
 800621c:	d007      	beq.n	800622e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f06f 0201 	mvn.w	r2, #1
 8006226:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 fa60 	bl	80066ee <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00c      	beq.n	8006252 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800623e:	2b00      	cmp	r3, #0
 8006240:	d007      	beq.n	8006252 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800624a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 ff9d 	bl	800718c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00c      	beq.n	8006276 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006262:	2b00      	cmp	r3, #0
 8006264:	d007      	beq.n	8006276 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800626e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 fa64 	bl	800673e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	f003 0320 	and.w	r3, r3, #32
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00c      	beq.n	800629a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f003 0320 	and.w	r3, r3, #32
 8006286:	2b00      	cmp	r3, #0
 8006288:	d007      	beq.n	800629a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f06f 0220 	mvn.w	r2, #32
 8006292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 ff6f 	bl	8007178 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800629a:	bf00      	nop
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b086      	sub	sp, #24
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	60f8      	str	r0, [r7, #12]
 80062aa:	60b9      	str	r1, [r7, #8]
 80062ac:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062ae:	2300      	movs	r3, #0
 80062b0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d101      	bne.n	80062c0 <HAL_TIM_IC_ConfigChannel+0x1e>
 80062bc:	2302      	movs	r3, #2
 80062be:	e088      	b.n	80063d2 <HAL_TIM_IC_ConfigChannel+0x130>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d11b      	bne.n	8006306 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80062de:	f000 fc51 	bl	8006b84 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	699a      	ldr	r2, [r3, #24]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f022 020c 	bic.w	r2, r2, #12
 80062f0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	6999      	ldr	r1, [r3, #24]
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	689a      	ldr	r2, [r3, #8]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	430a      	orrs	r2, r1
 8006302:	619a      	str	r2, [r3, #24]
 8006304:	e060      	b.n	80063c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2b04      	cmp	r3, #4
 800630a:	d11c      	bne.n	8006346 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800631c:	f000 fcc9 	bl	8006cb2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	699a      	ldr	r2, [r3, #24]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800632e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6999      	ldr	r1, [r3, #24]
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	021a      	lsls	r2, r3, #8
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	430a      	orrs	r2, r1
 8006342:	619a      	str	r2, [r3, #24]
 8006344:	e040      	b.n	80063c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2b08      	cmp	r3, #8
 800634a:	d11b      	bne.n	8006384 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800635c:	f000 fd16 	bl	8006d8c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	69da      	ldr	r2, [r3, #28]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f022 020c 	bic.w	r2, r2, #12
 800636e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	69d9      	ldr	r1, [r3, #28]
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	689a      	ldr	r2, [r3, #8]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	430a      	orrs	r2, r1
 8006380:	61da      	str	r2, [r3, #28]
 8006382:	e021      	b.n	80063c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2b0c      	cmp	r3, #12
 8006388:	d11c      	bne.n	80063c4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800639a:	f000 fd33 	bl	8006e04 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	69da      	ldr	r2, [r3, #28]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80063ac:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	69d9      	ldr	r1, [r3, #28]
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	021a      	lsls	r2, r3, #8
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	430a      	orrs	r2, r1
 80063c0:	61da      	str	r2, [r3, #28]
 80063c2:	e001      	b.n	80063c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80063d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3718      	adds	r7, #24
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
	...

080063dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b086      	sub	sp, #24
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063e8:	2300      	movs	r3, #0
 80063ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d101      	bne.n	80063fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80063f6:	2302      	movs	r3, #2
 80063f8:	e0ae      	b.n	8006558 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2b0c      	cmp	r3, #12
 8006406:	f200 809f 	bhi.w	8006548 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800640a:	a201      	add	r2, pc, #4	@ (adr r2, 8006410 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800640c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006410:	08006445 	.word	0x08006445
 8006414:	08006549 	.word	0x08006549
 8006418:	08006549 	.word	0x08006549
 800641c:	08006549 	.word	0x08006549
 8006420:	08006485 	.word	0x08006485
 8006424:	08006549 	.word	0x08006549
 8006428:	08006549 	.word	0x08006549
 800642c:	08006549 	.word	0x08006549
 8006430:	080064c7 	.word	0x080064c7
 8006434:	08006549 	.word	0x08006549
 8006438:	08006549 	.word	0x08006549
 800643c:	08006549 	.word	0x08006549
 8006440:	08006507 	.word	0x08006507
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68b9      	ldr	r1, [r7, #8]
 800644a:	4618      	mov	r0, r3
 800644c:	f000 fa0e 	bl	800686c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	699a      	ldr	r2, [r3, #24]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f042 0208 	orr.w	r2, r2, #8
 800645e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	699a      	ldr	r2, [r3, #24]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f022 0204 	bic.w	r2, r2, #4
 800646e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	6999      	ldr	r1, [r3, #24]
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	691a      	ldr	r2, [r3, #16]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	430a      	orrs	r2, r1
 8006480:	619a      	str	r2, [r3, #24]
      break;
 8006482:	e064      	b.n	800654e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68b9      	ldr	r1, [r7, #8]
 800648a:	4618      	mov	r0, r3
 800648c:	f000 fa54 	bl	8006938 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	699a      	ldr	r2, [r3, #24]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800649e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	699a      	ldr	r2, [r3, #24]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	6999      	ldr	r1, [r3, #24]
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	021a      	lsls	r2, r3, #8
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	430a      	orrs	r2, r1
 80064c2:	619a      	str	r2, [r3, #24]
      break;
 80064c4:	e043      	b.n	800654e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68b9      	ldr	r1, [r7, #8]
 80064cc:	4618      	mov	r0, r3
 80064ce:	f000 fa9f 	bl	8006a10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	69da      	ldr	r2, [r3, #28]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f042 0208 	orr.w	r2, r2, #8
 80064e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	69da      	ldr	r2, [r3, #28]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f022 0204 	bic.w	r2, r2, #4
 80064f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	69d9      	ldr	r1, [r3, #28]
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	691a      	ldr	r2, [r3, #16]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	430a      	orrs	r2, r1
 8006502:	61da      	str	r2, [r3, #28]
      break;
 8006504:	e023      	b.n	800654e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68b9      	ldr	r1, [r7, #8]
 800650c:	4618      	mov	r0, r3
 800650e:	f000 fae9 	bl	8006ae4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	69da      	ldr	r2, [r3, #28]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006520:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	69da      	ldr	r2, [r3, #28]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006530:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	69d9      	ldr	r1, [r3, #28]
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	021a      	lsls	r2, r3, #8
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	430a      	orrs	r2, r1
 8006544:	61da      	str	r2, [r3, #28]
      break;
 8006546:	e002      	b.n	800654e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	75fb      	strb	r3, [r7, #23]
      break;
 800654c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006556:	7dfb      	ldrb	r3, [r7, #23]
}
 8006558:	4618      	mov	r0, r3
 800655a:	3718      	adds	r7, #24
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800656a:	2300      	movs	r3, #0
 800656c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006574:	2b01      	cmp	r3, #1
 8006576:	d101      	bne.n	800657c <HAL_TIM_ConfigClockSource+0x1c>
 8006578:	2302      	movs	r3, #2
 800657a:	e0b4      	b.n	80066e6 <HAL_TIM_ConfigClockSource+0x186>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2202      	movs	r2, #2
 8006588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800659a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80065a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065b4:	d03e      	beq.n	8006634 <HAL_TIM_ConfigClockSource+0xd4>
 80065b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065ba:	f200 8087 	bhi.w	80066cc <HAL_TIM_ConfigClockSource+0x16c>
 80065be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065c2:	f000 8086 	beq.w	80066d2 <HAL_TIM_ConfigClockSource+0x172>
 80065c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065ca:	d87f      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x16c>
 80065cc:	2b70      	cmp	r3, #112	@ 0x70
 80065ce:	d01a      	beq.n	8006606 <HAL_TIM_ConfigClockSource+0xa6>
 80065d0:	2b70      	cmp	r3, #112	@ 0x70
 80065d2:	d87b      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x16c>
 80065d4:	2b60      	cmp	r3, #96	@ 0x60
 80065d6:	d050      	beq.n	800667a <HAL_TIM_ConfigClockSource+0x11a>
 80065d8:	2b60      	cmp	r3, #96	@ 0x60
 80065da:	d877      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x16c>
 80065dc:	2b50      	cmp	r3, #80	@ 0x50
 80065de:	d03c      	beq.n	800665a <HAL_TIM_ConfigClockSource+0xfa>
 80065e0:	2b50      	cmp	r3, #80	@ 0x50
 80065e2:	d873      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x16c>
 80065e4:	2b40      	cmp	r3, #64	@ 0x40
 80065e6:	d058      	beq.n	800669a <HAL_TIM_ConfigClockSource+0x13a>
 80065e8:	2b40      	cmp	r3, #64	@ 0x40
 80065ea:	d86f      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x16c>
 80065ec:	2b30      	cmp	r3, #48	@ 0x30
 80065ee:	d064      	beq.n	80066ba <HAL_TIM_ConfigClockSource+0x15a>
 80065f0:	2b30      	cmp	r3, #48	@ 0x30
 80065f2:	d86b      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x16c>
 80065f4:	2b20      	cmp	r3, #32
 80065f6:	d060      	beq.n	80066ba <HAL_TIM_ConfigClockSource+0x15a>
 80065f8:	2b20      	cmp	r3, #32
 80065fa:	d867      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x16c>
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d05c      	beq.n	80066ba <HAL_TIM_ConfigClockSource+0x15a>
 8006600:	2b10      	cmp	r3, #16
 8006602:	d05a      	beq.n	80066ba <HAL_TIM_ConfigClockSource+0x15a>
 8006604:	e062      	b.n	80066cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006616:	f000 fc4d 	bl	8006eb4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006628:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	609a      	str	r2, [r3, #8]
      break;
 8006632:	e04f      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006644:	f000 fc36 	bl	8006eb4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	689a      	ldr	r2, [r3, #8]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006656:	609a      	str	r2, [r3, #8]
      break;
 8006658:	e03c      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006666:	461a      	mov	r2, r3
 8006668:	f000 faf4 	bl	8006c54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2150      	movs	r1, #80	@ 0x50
 8006672:	4618      	mov	r0, r3
 8006674:	f000 fc03 	bl	8006e7e <TIM_ITRx_SetConfig>
      break;
 8006678:	e02c      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006686:	461a      	mov	r2, r3
 8006688:	f000 fb50 	bl	8006d2c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2160      	movs	r1, #96	@ 0x60
 8006692:	4618      	mov	r0, r3
 8006694:	f000 fbf3 	bl	8006e7e <TIM_ITRx_SetConfig>
      break;
 8006698:	e01c      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066a6:	461a      	mov	r2, r3
 80066a8:	f000 fad4 	bl	8006c54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2140      	movs	r1, #64	@ 0x40
 80066b2:	4618      	mov	r0, r3
 80066b4:	f000 fbe3 	bl	8006e7e <TIM_ITRx_SetConfig>
      break;
 80066b8:	e00c      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4619      	mov	r1, r3
 80066c4:	4610      	mov	r0, r2
 80066c6:	f000 fbda 	bl	8006e7e <TIM_ITRx_SetConfig>
      break;
 80066ca:	e003      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	73fb      	strb	r3, [r7, #15]
      break;
 80066d0:	e000      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80066d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80066e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3710      	adds	r7, #16
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}

080066ee <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066ee:	b480      	push	{r7}
 80066f0:	b083      	sub	sp, #12
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80066f6:	bf00      	nop
 80066f8:	370c      	adds	r7, #12
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr

08006702 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006702:	b480      	push	{r7}
 8006704:	b083      	sub	sp, #12
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800670a:	bf00      	nop
 800670c:	370c      	adds	r7, #12
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr

08006716 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006716:	b480      	push	{r7}
 8006718:	b083      	sub	sp, #12
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800671e:	bf00      	nop
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr

0800672a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800672a:	b480      	push	{r7}
 800672c:	b083      	sub	sp, #12
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006732:	bf00      	nop
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800673e:	b480      	push	{r7}
 8006740:	b083      	sub	sp, #12
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006746:	bf00      	nop
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
	...

08006754 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006754:	b480      	push	{r7}
 8006756:	b085      	sub	sp, #20
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4a3a      	ldr	r2, [pc, #232]	@ (8006850 <TIM_Base_SetConfig+0xfc>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d00f      	beq.n	800678c <TIM_Base_SetConfig+0x38>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006772:	d00b      	beq.n	800678c <TIM_Base_SetConfig+0x38>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a37      	ldr	r2, [pc, #220]	@ (8006854 <TIM_Base_SetConfig+0x100>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d007      	beq.n	800678c <TIM_Base_SetConfig+0x38>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a36      	ldr	r2, [pc, #216]	@ (8006858 <TIM_Base_SetConfig+0x104>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d003      	beq.n	800678c <TIM_Base_SetConfig+0x38>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a35      	ldr	r2, [pc, #212]	@ (800685c <TIM_Base_SetConfig+0x108>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d108      	bne.n	800679e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006792:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	4313      	orrs	r3, r2
 800679c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a2b      	ldr	r2, [pc, #172]	@ (8006850 <TIM_Base_SetConfig+0xfc>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d01b      	beq.n	80067de <TIM_Base_SetConfig+0x8a>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067ac:	d017      	beq.n	80067de <TIM_Base_SetConfig+0x8a>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a28      	ldr	r2, [pc, #160]	@ (8006854 <TIM_Base_SetConfig+0x100>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d013      	beq.n	80067de <TIM_Base_SetConfig+0x8a>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a27      	ldr	r2, [pc, #156]	@ (8006858 <TIM_Base_SetConfig+0x104>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d00f      	beq.n	80067de <TIM_Base_SetConfig+0x8a>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a26      	ldr	r2, [pc, #152]	@ (800685c <TIM_Base_SetConfig+0x108>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d00b      	beq.n	80067de <TIM_Base_SetConfig+0x8a>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a25      	ldr	r2, [pc, #148]	@ (8006860 <TIM_Base_SetConfig+0x10c>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d007      	beq.n	80067de <TIM_Base_SetConfig+0x8a>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a24      	ldr	r2, [pc, #144]	@ (8006864 <TIM_Base_SetConfig+0x110>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d003      	beq.n	80067de <TIM_Base_SetConfig+0x8a>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a23      	ldr	r2, [pc, #140]	@ (8006868 <TIM_Base_SetConfig+0x114>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d108      	bne.n	80067f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	689a      	ldr	r2, [r3, #8]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a0e      	ldr	r2, [pc, #56]	@ (8006850 <TIM_Base_SetConfig+0xfc>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d103      	bne.n	8006824 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	691a      	ldr	r2, [r3, #16]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	2b01      	cmp	r3, #1
 8006834:	d105      	bne.n	8006842 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	f023 0201 	bic.w	r2, r3, #1
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	611a      	str	r2, [r3, #16]
  }
}
 8006842:	bf00      	nop
 8006844:	3714      	adds	r7, #20
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	40010000 	.word	0x40010000
 8006854:	40000400 	.word	0x40000400
 8006858:	40000800 	.word	0x40000800
 800685c:	40000c00 	.word	0x40000c00
 8006860:	40014000 	.word	0x40014000
 8006864:	40014400 	.word	0x40014400
 8006868:	40014800 	.word	0x40014800

0800686c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800686c:	b480      	push	{r7}
 800686e:	b087      	sub	sp, #28
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a1b      	ldr	r3, [r3, #32]
 8006880:	f023 0201 	bic.w	r2, r3, #1
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800689a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f023 0303 	bic.w	r3, r3, #3
 80068a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	f023 0302 	bic.w	r3, r3, #2
 80068b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	4313      	orrs	r3, r2
 80068be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a1c      	ldr	r2, [pc, #112]	@ (8006934 <TIM_OC1_SetConfig+0xc8>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d10c      	bne.n	80068e2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	f023 0308 	bic.w	r3, r3, #8
 80068ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	697a      	ldr	r2, [r7, #20]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	f023 0304 	bic.w	r3, r3, #4
 80068e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a13      	ldr	r2, [pc, #76]	@ (8006934 <TIM_OC1_SetConfig+0xc8>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d111      	bne.n	800690e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80068f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	693a      	ldr	r2, [r7, #16]
 8006900:	4313      	orrs	r3, r2
 8006902:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	4313      	orrs	r3, r2
 800690c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	693a      	ldr	r2, [r7, #16]
 8006912:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	685a      	ldr	r2, [r3, #4]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	697a      	ldr	r2, [r7, #20]
 8006926:	621a      	str	r2, [r3, #32]
}
 8006928:	bf00      	nop
 800692a:	371c      	adds	r7, #28
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr
 8006934:	40010000 	.word	0x40010000

08006938 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006938:	b480      	push	{r7}
 800693a:	b087      	sub	sp, #28
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6a1b      	ldr	r3, [r3, #32]
 800694c:	f023 0210 	bic.w	r2, r3, #16
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800696e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	021b      	lsls	r3, r3, #8
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	4313      	orrs	r3, r2
 800697a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	f023 0320 	bic.w	r3, r3, #32
 8006982:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	011b      	lsls	r3, r3, #4
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	4313      	orrs	r3, r2
 800698e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4a1e      	ldr	r2, [pc, #120]	@ (8006a0c <TIM_OC2_SetConfig+0xd4>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d10d      	bne.n	80069b4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800699e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	011b      	lsls	r3, r3, #4
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a15      	ldr	r2, [pc, #84]	@ (8006a0c <TIM_OC2_SetConfig+0xd4>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d113      	bne.n	80069e4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80069c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80069ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	695b      	ldr	r3, [r3, #20]
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	621a      	str	r2, [r3, #32]
}
 80069fe:	bf00      	nop
 8006a00:	371c      	adds	r7, #28
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	40010000 	.word	0x40010000

08006a10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b087      	sub	sp, #28
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a1b      	ldr	r3, [r3, #32]
 8006a1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a1b      	ldr	r3, [r3, #32]
 8006a24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	69db      	ldr	r3, [r3, #28]
 8006a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f023 0303 	bic.w	r3, r3, #3
 8006a46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006a58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	021b      	lsls	r3, r3, #8
 8006a60:	697a      	ldr	r2, [r7, #20]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a1d      	ldr	r2, [pc, #116]	@ (8006ae0 <TIM_OC3_SetConfig+0xd0>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d10d      	bne.n	8006a8a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006a74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	021b      	lsls	r3, r3, #8
 8006a7c:	697a      	ldr	r2, [r7, #20]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006a88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a14      	ldr	r2, [pc, #80]	@ (8006ae0 <TIM_OC3_SetConfig+0xd0>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d113      	bne.n	8006aba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	695b      	ldr	r3, [r3, #20]
 8006aa6:	011b      	lsls	r3, r3, #4
 8006aa8:	693a      	ldr	r2, [r7, #16]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	011b      	lsls	r3, r3, #4
 8006ab4:	693a      	ldr	r2, [r7, #16]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	693a      	ldr	r2, [r7, #16]
 8006abe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	685a      	ldr	r2, [r3, #4]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	697a      	ldr	r2, [r7, #20]
 8006ad2:	621a      	str	r2, [r3, #32]
}
 8006ad4:	bf00      	nop
 8006ad6:	371c      	adds	r7, #28
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr
 8006ae0:	40010000 	.word	0x40010000

08006ae4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b087      	sub	sp, #28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6a1b      	ldr	r3, [r3, #32]
 8006af8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	69db      	ldr	r3, [r3, #28]
 8006b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	021b      	lsls	r3, r3, #8
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006b2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	031b      	lsls	r3, r3, #12
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a10      	ldr	r2, [pc, #64]	@ (8006b80 <TIM_OC4_SetConfig+0x9c>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d109      	bne.n	8006b58 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	695b      	ldr	r3, [r3, #20]
 8006b50:	019b      	lsls	r3, r3, #6
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	697a      	ldr	r2, [r7, #20]
 8006b5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	685a      	ldr	r2, [r3, #4]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	621a      	str	r2, [r3, #32]
}
 8006b72:	bf00      	nop
 8006b74:	371c      	adds	r7, #28
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	40010000 	.word	0x40010000

08006b84 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b087      	sub	sp, #28
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
 8006b90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6a1b      	ldr	r3, [r3, #32]
 8006b96:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6a1b      	ldr	r3, [r3, #32]
 8006b9c:	f023 0201 	bic.w	r2, r3, #1
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	699b      	ldr	r3, [r3, #24]
 8006ba8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	4a24      	ldr	r2, [pc, #144]	@ (8006c40 <TIM_TI1_SetConfig+0xbc>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d013      	beq.n	8006bda <TIM_TI1_SetConfig+0x56>
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bb8:	d00f      	beq.n	8006bda <TIM_TI1_SetConfig+0x56>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	4a21      	ldr	r2, [pc, #132]	@ (8006c44 <TIM_TI1_SetConfig+0xc0>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d00b      	beq.n	8006bda <TIM_TI1_SetConfig+0x56>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	4a20      	ldr	r2, [pc, #128]	@ (8006c48 <TIM_TI1_SetConfig+0xc4>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d007      	beq.n	8006bda <TIM_TI1_SetConfig+0x56>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	4a1f      	ldr	r2, [pc, #124]	@ (8006c4c <TIM_TI1_SetConfig+0xc8>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d003      	beq.n	8006bda <TIM_TI1_SetConfig+0x56>
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	4a1e      	ldr	r2, [pc, #120]	@ (8006c50 <TIM_TI1_SetConfig+0xcc>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d101      	bne.n	8006bde <TIM_TI1_SetConfig+0x5a>
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e000      	b.n	8006be0 <TIM_TI1_SetConfig+0x5c>
 8006bde:	2300      	movs	r3, #0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d008      	beq.n	8006bf6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	f023 0303 	bic.w	r3, r3, #3
 8006bea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006bec:	697a      	ldr	r2, [r7, #20]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	617b      	str	r3, [r7, #20]
 8006bf4:	e003      	b.n	8006bfe <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	f043 0301 	orr.w	r3, r3, #1
 8006bfc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	011b      	lsls	r3, r3, #4
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	f023 030a 	bic.w	r3, r3, #10
 8006c18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	f003 030a 	and.w	r3, r3, #10
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	693a      	ldr	r2, [r7, #16]
 8006c30:	621a      	str	r2, [r3, #32]
}
 8006c32:	bf00      	nop
 8006c34:	371c      	adds	r7, #28
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr
 8006c3e:	bf00      	nop
 8006c40:	40010000 	.word	0x40010000
 8006c44:	40000400 	.word	0x40000400
 8006c48:	40000800 	.word	0x40000800
 8006c4c:	40000c00 	.word	0x40000c00
 8006c50:	40014000 	.word	0x40014000

08006c54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b087      	sub	sp, #28
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6a1b      	ldr	r3, [r3, #32]
 8006c64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	f023 0201 	bic.w	r2, r3, #1
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	011b      	lsls	r3, r3, #4
 8006c84:	693a      	ldr	r2, [r7, #16]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	f023 030a 	bic.w	r3, r3, #10
 8006c90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	697a      	ldr	r2, [r7, #20]
 8006ca4:	621a      	str	r2, [r3, #32]
}
 8006ca6:	bf00      	nop
 8006ca8:	371c      	adds	r7, #28
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr

08006cb2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006cb2:	b480      	push	{r7}
 8006cb4:	b087      	sub	sp, #28
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	60f8      	str	r0, [r7, #12]
 8006cba:	60b9      	str	r1, [r7, #8]
 8006cbc:	607a      	str	r2, [r7, #4]
 8006cbe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6a1b      	ldr	r3, [r3, #32]
 8006cc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	f023 0210 	bic.w	r2, r3, #16
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	699b      	ldr	r3, [r3, #24]
 8006cd6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	021b      	lsls	r3, r3, #8
 8006ce4:	693a      	ldr	r2, [r7, #16]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006cf0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	031b      	lsls	r3, r3, #12
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	693a      	ldr	r2, [r7, #16]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006d04:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	011b      	lsls	r3, r3, #4
 8006d0a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006d0e:	697a      	ldr	r2, [r7, #20]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	693a      	ldr	r2, [r7, #16]
 8006d18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	697a      	ldr	r2, [r7, #20]
 8006d1e:	621a      	str	r2, [r3, #32]
}
 8006d20:	bf00      	nop
 8006d22:	371c      	adds	r7, #28
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b087      	sub	sp, #28
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6a1b      	ldr	r3, [r3, #32]
 8006d3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6a1b      	ldr	r3, [r3, #32]
 8006d42:	f023 0210 	bic.w	r2, r3, #16
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	031b      	lsls	r3, r3, #12
 8006d5c:	693a      	ldr	r2, [r7, #16]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006d68:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	011b      	lsls	r3, r3, #4
 8006d6e:	697a      	ldr	r2, [r7, #20]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	693a      	ldr	r2, [r7, #16]
 8006d78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	697a      	ldr	r2, [r7, #20]
 8006d7e:	621a      	str	r2, [r3, #32]
}
 8006d80:	bf00      	nop
 8006d82:	371c      	adds	r7, #28
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b087      	sub	sp, #28
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	607a      	str	r2, [r7, #4]
 8006d98:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6a1b      	ldr	r3, [r3, #32]
 8006d9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6a1b      	ldr	r3, [r3, #32]
 8006da4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	69db      	ldr	r3, [r3, #28]
 8006db0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	f023 0303 	bic.w	r3, r3, #3
 8006db8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006dba:	693a      	ldr	r2, [r7, #16]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006dc8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	011b      	lsls	r3, r3, #4
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	693a      	ldr	r2, [r7, #16]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006ddc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	021b      	lsls	r3, r3, #8
 8006de2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	693a      	ldr	r2, [r7, #16]
 8006df0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	697a      	ldr	r2, [r7, #20]
 8006df6:	621a      	str	r2, [r3, #32]
}
 8006df8:	bf00      	nop
 8006dfa:	371c      	adds	r7, #28
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b087      	sub	sp, #28
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]
 8006e10:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6a1b      	ldr	r3, [r3, #32]
 8006e16:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6a1b      	ldr	r3, [r3, #32]
 8006e1c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	69db      	ldr	r3, [r3, #28]
 8006e28:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e30:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	021b      	lsls	r3, r3, #8
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006e42:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	031b      	lsls	r3, r3, #12
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	693a      	ldr	r2, [r7, #16]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006e56:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	031b      	lsls	r3, r3, #12
 8006e5c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006e60:	697a      	ldr	r2, [r7, #20]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	693a      	ldr	r2, [r7, #16]
 8006e6a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	621a      	str	r2, [r3, #32]
}
 8006e72:	bf00      	nop
 8006e74:	371c      	adds	r7, #28
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr

08006e7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e7e:	b480      	push	{r7}
 8006e80:	b085      	sub	sp, #20
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
 8006e86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e96:	683a      	ldr	r2, [r7, #0]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	f043 0307 	orr.w	r3, r3, #7
 8006ea0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	609a      	str	r2, [r3, #8]
}
 8006ea8:	bf00      	nop
 8006eaa:	3714      	adds	r7, #20
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b087      	sub	sp, #28
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]
 8006ec0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ece:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	021a      	lsls	r2, r3, #8
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	431a      	orrs	r2, r3
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	697a      	ldr	r2, [r7, #20]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	697a      	ldr	r2, [r7, #20]
 8006ee6:	609a      	str	r2, [r3, #8]
}
 8006ee8:	bf00      	nop
 8006eea:	371c      	adds	r7, #28
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b087      	sub	sp, #28
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	f003 031f 	and.w	r3, r3, #31
 8006f06:	2201      	movs	r2, #1
 8006f08:	fa02 f303 	lsl.w	r3, r2, r3
 8006f0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6a1a      	ldr	r2, [r3, #32]
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	43db      	mvns	r3, r3
 8006f16:	401a      	ands	r2, r3
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6a1a      	ldr	r2, [r3, #32]
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	f003 031f 	and.w	r3, r3, #31
 8006f26:	6879      	ldr	r1, [r7, #4]
 8006f28:	fa01 f303 	lsl.w	r3, r1, r3
 8006f2c:	431a      	orrs	r2, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	621a      	str	r2, [r3, #32]
}
 8006f32:	bf00      	nop
 8006f34:	371c      	adds	r7, #28
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b082      	sub	sp, #8
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
 8006f46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	6839      	ldr	r1, [r7, #0]
 8006f50:	4618      	mov	r0, r3
 8006f52:	f000 f925 	bl	80071a0 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	6a1a      	ldr	r2, [r3, #32]
 8006f5c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006f60:	4013      	ands	r3, r2
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10f      	bne.n	8006f86 <HAL_TIMEx_PWMN_Stop+0x48>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	6a1a      	ldr	r2, [r3, #32]
 8006f6c:	f240 4344 	movw	r3, #1092	@ 0x444
 8006f70:	4013      	ands	r3, r2
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d107      	bne.n	8006f86 <HAL_TIMEx_PWMN_Stop+0x48>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006f84:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	6a1a      	ldr	r2, [r3, #32]
 8006f8c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006f90:	4013      	ands	r3, r2
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d10f      	bne.n	8006fb6 <HAL_TIMEx_PWMN_Stop+0x78>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	6a1a      	ldr	r2, [r3, #32]
 8006f9c:	f240 4344 	movw	r3, #1092	@ 0x444
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d107      	bne.n	8006fb6 <HAL_TIMEx_PWMN_Stop+0x78>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f022 0201 	bic.w	r2, r2, #1
 8006fb4:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d104      	bne.n	8006fc6 <HAL_TIMEx_PWMN_Stop+0x88>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006fc4:	e013      	b.n	8006fee <HAL_TIMEx_PWMN_Stop+0xb0>
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	2b04      	cmp	r3, #4
 8006fca:	d104      	bne.n	8006fd6 <HAL_TIMEx_PWMN_Stop+0x98>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006fd4:	e00b      	b.n	8006fee <HAL_TIMEx_PWMN_Stop+0xb0>
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	2b08      	cmp	r3, #8
 8006fda:	d104      	bne.n	8006fe6 <HAL_TIMEx_PWMN_Stop+0xa8>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006fe4:	e003      	b.n	8006fee <HAL_TIMEx_PWMN_Stop+0xb0>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3708      	adds	r7, #8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b085      	sub	sp, #20
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007008:	2b01      	cmp	r3, #1
 800700a:	d101      	bne.n	8007010 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800700c:	2302      	movs	r3, #2
 800700e:	e050      	b.n	80070b2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2202      	movs	r2, #2
 800701c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007036:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	4313      	orrs	r3, r2
 8007040:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a1c      	ldr	r2, [pc, #112]	@ (80070c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d018      	beq.n	8007086 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800705c:	d013      	beq.n	8007086 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a18      	ldr	r2, [pc, #96]	@ (80070c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d00e      	beq.n	8007086 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a16      	ldr	r2, [pc, #88]	@ (80070c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d009      	beq.n	8007086 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a15      	ldr	r2, [pc, #84]	@ (80070cc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d004      	beq.n	8007086 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a13      	ldr	r2, [pc, #76]	@ (80070d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d10c      	bne.n	80070a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800708c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	68ba      	ldr	r2, [r7, #8]
 8007094:	4313      	orrs	r3, r2
 8007096:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3714      	adds	r7, #20
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr
 80070be:	bf00      	nop
 80070c0:	40010000 	.word	0x40010000
 80070c4:	40000400 	.word	0x40000400
 80070c8:	40000800 	.word	0x40000800
 80070cc:	40000c00 	.word	0x40000c00
 80070d0:	40014000 	.word	0x40014000

080070d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80070de:	2300      	movs	r3, #0
 80070e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d101      	bne.n	80070f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80070ec:	2302      	movs	r3, #2
 80070ee:	e03d      	b.n	800716c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	4313      	orrs	r3, r2
 8007104:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	4313      	orrs	r3, r2
 8007112:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	4313      	orrs	r3, r2
 8007120:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4313      	orrs	r3, r2
 800712e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	4313      	orrs	r3, r2
 800713c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	695b      	ldr	r3, [r3, #20]
 8007148:	4313      	orrs	r3, r2
 800714a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	69db      	ldr	r3, [r3, #28]
 8007156:	4313      	orrs	r3, r2
 8007158:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68fa      	ldr	r2, [r7, #12]
 8007160:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3714      	adds	r7, #20
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007180:	bf00      	nop
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007194:	bf00      	nop
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b087      	sub	sp, #28
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	f003 030f 	and.w	r3, r3, #15
 80071b2:	2204      	movs	r2, #4
 80071b4:	fa02 f303 	lsl.w	r3, r2, r3
 80071b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6a1a      	ldr	r2, [r3, #32]
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	43db      	mvns	r3, r3
 80071c2:	401a      	ands	r2, r3
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6a1a      	ldr	r2, [r3, #32]
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	f003 030f 	and.w	r3, r3, #15
 80071d2:	6879      	ldr	r1, [r7, #4]
 80071d4:	fa01 f303 	lsl.w	r3, r1, r3
 80071d8:	431a      	orrs	r2, r3
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	621a      	str	r2, [r3, #32]
}
 80071de:	bf00      	nop
 80071e0:	371c      	adds	r7, #28
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b082      	sub	sp, #8
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d101      	bne.n	80071fc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e042      	b.n	8007282 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007202:	b2db      	uxtb	r3, r3
 8007204:	2b00      	cmp	r3, #0
 8007206:	d106      	bne.n	8007216 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f7fb fa57 	bl	80026c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2224      	movs	r2, #36	@ 0x24
 800721a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68da      	ldr	r2, [r3, #12]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800722c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 ff6e 	bl	8008110 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	691a      	ldr	r2, [r3, #16]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007242:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	695a      	ldr	r2, [r3, #20]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007252:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	68da      	ldr	r2, [r3, #12]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007262:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2220      	movs	r2, #32
 800726e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2220      	movs	r2, #32
 8007276:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3708      	adds	r7, #8
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
	...

0800728c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b08c      	sub	sp, #48	@ 0x30
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	4613      	mov	r3, r2
 8007298:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	2b20      	cmp	r3, #32
 80072a4:	d156      	bne.n	8007354 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d002      	beq.n	80072b2 <HAL_UART_Transmit_DMA+0x26>
 80072ac:	88fb      	ldrh	r3, [r7, #6]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d101      	bne.n	80072b6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e04f      	b.n	8007356 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80072b6:	68ba      	ldr	r2, [r7, #8]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	88fa      	ldrh	r2, [r7, #6]
 80072c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	88fa      	ldrh	r2, [r7, #6]
 80072c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2200      	movs	r2, #0
 80072cc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2221      	movs	r2, #33	@ 0x21
 80072d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072da:	4a21      	ldr	r2, [pc, #132]	@ (8007360 <HAL_UART_Transmit_DMA+0xd4>)
 80072dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072e2:	4a20      	ldr	r2, [pc, #128]	@ (8007364 <HAL_UART_Transmit_DMA+0xd8>)
 80072e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ea:	4a1f      	ldr	r2, [pc, #124]	@ (8007368 <HAL_UART_Transmit_DMA+0xdc>)
 80072ec:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072f2:	2200      	movs	r2, #0
 80072f4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80072f6:	f107 0308 	add.w	r3, r7, #8
 80072fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007302:	6819      	ldr	r1, [r3, #0]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	3304      	adds	r3, #4
 800730a:	461a      	mov	r2, r3
 800730c:	88fb      	ldrh	r3, [r7, #6]
 800730e:	f7fc fa41 	bl	8003794 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800731a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	3314      	adds	r3, #20
 8007322:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	e853 3f00 	ldrex	r3, [r3]
 800732a:	617b      	str	r3, [r7, #20]
   return(result);
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007332:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	3314      	adds	r3, #20
 800733a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800733c:	627a      	str	r2, [r7, #36]	@ 0x24
 800733e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007340:	6a39      	ldr	r1, [r7, #32]
 8007342:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007344:	e841 2300 	strex	r3, r2, [r1]
 8007348:	61fb      	str	r3, [r7, #28]
   return(result);
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d1e5      	bne.n	800731c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8007350:	2300      	movs	r3, #0
 8007352:	e000      	b.n	8007356 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8007354:	2302      	movs	r3, #2
  }
}
 8007356:	4618      	mov	r0, r3
 8007358:	3730      	adds	r7, #48	@ 0x30
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	0800799d 	.word	0x0800799d
 8007364:	08007a37 	.word	0x08007a37
 8007368:	08007bbb 	.word	0x08007bbb

0800736c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b08c      	sub	sp, #48	@ 0x30
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	4613      	mov	r3, r2
 8007378:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007380:	b2db      	uxtb	r3, r3
 8007382:	2b20      	cmp	r3, #32
 8007384:	d14a      	bne.n	800741c <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d002      	beq.n	8007392 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800738c:	88fb      	ldrh	r3, [r7, #6]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d101      	bne.n	8007396 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	e043      	b.n	800741e <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2201      	movs	r2, #1
 800739a:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80073a2:	88fb      	ldrh	r3, [r7, #6]
 80073a4:	461a      	mov	r2, r3
 80073a6:	68b9      	ldr	r1, [r7, #8]
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f000 fc51 	bl	8007c50 <UART_Start_Receive_DMA>
 80073ae:	4603      	mov	r3, r0
 80073b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80073b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d12c      	bne.n	8007416 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d125      	bne.n	8007410 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073c4:	2300      	movs	r3, #0
 80073c6:	613b      	str	r3, [r7, #16]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	613b      	str	r3, [r7, #16]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	613b      	str	r3, [r7, #16]
 80073d8:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	330c      	adds	r3, #12
 80073e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	e853 3f00 	ldrex	r3, [r3]
 80073e8:	617b      	str	r3, [r7, #20]
   return(result);
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	f043 0310 	orr.w	r3, r3, #16
 80073f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	330c      	adds	r3, #12
 80073f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80073fa:	627a      	str	r2, [r7, #36]	@ 0x24
 80073fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fe:	6a39      	ldr	r1, [r7, #32]
 8007400:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007402:	e841 2300 	strex	r3, r2, [r1]
 8007406:	61fb      	str	r3, [r7, #28]
   return(result);
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1e5      	bne.n	80073da <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800740e:	e002      	b.n	8007416 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8007416:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800741a:	e000      	b.n	800741e <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800741c:	2302      	movs	r3, #2
  }
}
 800741e:	4618      	mov	r0, r3
 8007420:	3730      	adds	r7, #48	@ 0x30
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
	...

08007428 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b0ba      	sub	sp, #232	@ 0xe8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	695b      	ldr	r3, [r3, #20]
 800744a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800744e:	2300      	movs	r3, #0
 8007450:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007454:	2300      	movs	r3, #0
 8007456:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800745a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800745e:	f003 030f 	and.w	r3, r3, #15
 8007462:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007466:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10f      	bne.n	800748e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800746e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007472:	f003 0320 	and.w	r3, r3, #32
 8007476:	2b00      	cmp	r3, #0
 8007478:	d009      	beq.n	800748e <HAL_UART_IRQHandler+0x66>
 800747a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800747e:	f003 0320 	and.w	r3, r3, #32
 8007482:	2b00      	cmp	r3, #0
 8007484:	d003      	beq.n	800748e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fd83 	bl	8007f92 <UART_Receive_IT>
      return;
 800748c:	e25b      	b.n	8007946 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800748e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007492:	2b00      	cmp	r3, #0
 8007494:	f000 80de 	beq.w	8007654 <HAL_UART_IRQHandler+0x22c>
 8007498:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800749c:	f003 0301 	and.w	r3, r3, #1
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d106      	bne.n	80074b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80074a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074a8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f000 80d1 	beq.w	8007654 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80074b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074b6:	f003 0301 	and.w	r3, r3, #1
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00b      	beq.n	80074d6 <HAL_UART_IRQHandler+0xae>
 80074be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d005      	beq.n	80074d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074ce:	f043 0201 	orr.w	r2, r3, #1
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80074d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074da:	f003 0304 	and.w	r3, r3, #4
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00b      	beq.n	80074fa <HAL_UART_IRQHandler+0xd2>
 80074e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074e6:	f003 0301 	and.w	r3, r3, #1
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d005      	beq.n	80074fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074f2:	f043 0202 	orr.w	r2, r3, #2
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80074fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074fe:	f003 0302 	and.w	r3, r3, #2
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00b      	beq.n	800751e <HAL_UART_IRQHandler+0xf6>
 8007506:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800750a:	f003 0301 	and.w	r3, r3, #1
 800750e:	2b00      	cmp	r3, #0
 8007510:	d005      	beq.n	800751e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007516:	f043 0204 	orr.w	r2, r3, #4
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800751e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007522:	f003 0308 	and.w	r3, r3, #8
 8007526:	2b00      	cmp	r3, #0
 8007528:	d011      	beq.n	800754e <HAL_UART_IRQHandler+0x126>
 800752a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800752e:	f003 0320 	and.w	r3, r3, #32
 8007532:	2b00      	cmp	r3, #0
 8007534:	d105      	bne.n	8007542 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007536:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800753a:	f003 0301 	and.w	r3, r3, #1
 800753e:	2b00      	cmp	r3, #0
 8007540:	d005      	beq.n	800754e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007546:	f043 0208 	orr.w	r2, r3, #8
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007552:	2b00      	cmp	r3, #0
 8007554:	f000 81f2 	beq.w	800793c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800755c:	f003 0320 	and.w	r3, r3, #32
 8007560:	2b00      	cmp	r3, #0
 8007562:	d008      	beq.n	8007576 <HAL_UART_IRQHandler+0x14e>
 8007564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007568:	f003 0320 	and.w	r3, r3, #32
 800756c:	2b00      	cmp	r3, #0
 800756e:	d002      	beq.n	8007576 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 fd0e 	bl	8007f92 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	695b      	ldr	r3, [r3, #20]
 800757c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007580:	2b40      	cmp	r3, #64	@ 0x40
 8007582:	bf0c      	ite	eq
 8007584:	2301      	moveq	r3, #1
 8007586:	2300      	movne	r3, #0
 8007588:	b2db      	uxtb	r3, r3
 800758a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007592:	f003 0308 	and.w	r3, r3, #8
 8007596:	2b00      	cmp	r3, #0
 8007598:	d103      	bne.n	80075a2 <HAL_UART_IRQHandler+0x17a>
 800759a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d04f      	beq.n	8007642 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 fc16 	bl	8007dd4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	695b      	ldr	r3, [r3, #20]
 80075ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075b2:	2b40      	cmp	r3, #64	@ 0x40
 80075b4:	d141      	bne.n	800763a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	3314      	adds	r3, #20
 80075bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80075c4:	e853 3f00 	ldrex	r3, [r3]
 80075c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80075cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80075d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	3314      	adds	r3, #20
 80075de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80075e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80075e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80075ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80075f2:	e841 2300 	strex	r3, r2, [r1]
 80075f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80075fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d1d9      	bne.n	80075b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007606:	2b00      	cmp	r3, #0
 8007608:	d013      	beq.n	8007632 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800760e:	4a7e      	ldr	r2, [pc, #504]	@ (8007808 <HAL_UART_IRQHandler+0x3e0>)
 8007610:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007616:	4618      	mov	r0, r3
 8007618:	f7fc f984 	bl	8003924 <HAL_DMA_Abort_IT>
 800761c:	4603      	mov	r3, r0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d016      	beq.n	8007650 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007626:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800762c:	4610      	mov	r0, r2
 800762e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007630:	e00e      	b.n	8007650 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 f9a8 	bl	8007988 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007638:	e00a      	b.n	8007650 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 f9a4 	bl	8007988 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007640:	e006      	b.n	8007650 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 f9a0 	bl	8007988 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800764e:	e175      	b.n	800793c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007650:	bf00      	nop
    return;
 8007652:	e173      	b.n	800793c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007658:	2b01      	cmp	r3, #1
 800765a:	f040 814f 	bne.w	80078fc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800765e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007662:	f003 0310 	and.w	r3, r3, #16
 8007666:	2b00      	cmp	r3, #0
 8007668:	f000 8148 	beq.w	80078fc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800766c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007670:	f003 0310 	and.w	r3, r3, #16
 8007674:	2b00      	cmp	r3, #0
 8007676:	f000 8141 	beq.w	80078fc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800767a:	2300      	movs	r3, #0
 800767c:	60bb      	str	r3, [r7, #8]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	60bb      	str	r3, [r7, #8]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	60bb      	str	r3, [r7, #8]
 800768e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	695b      	ldr	r3, [r3, #20]
 8007696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800769a:	2b40      	cmp	r3, #64	@ 0x40
 800769c:	f040 80b6 	bne.w	800780c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80076ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f000 8145 	beq.w	8007940 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80076ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80076be:	429a      	cmp	r2, r3
 80076c0:	f080 813e 	bcs.w	8007940 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80076ca:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076d0:	69db      	ldr	r3, [r3, #28]
 80076d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076d6:	f000 8088 	beq.w	80077ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	330c      	adds	r3, #12
 80076e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80076e8:	e853 3f00 	ldrex	r3, [r3]
 80076ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80076f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80076f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	330c      	adds	r3, #12
 8007702:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007706:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800770a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007712:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007716:	e841 2300 	strex	r3, r2, [r1]
 800771a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800771e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007722:	2b00      	cmp	r3, #0
 8007724:	d1d9      	bne.n	80076da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	3314      	adds	r3, #20
 800772c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007730:	e853 3f00 	ldrex	r3, [r3]
 8007734:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007736:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007738:	f023 0301 	bic.w	r3, r3, #1
 800773c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	3314      	adds	r3, #20
 8007746:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800774a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800774e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007750:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007752:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007756:	e841 2300 	strex	r3, r2, [r1]
 800775a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800775c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1e1      	bne.n	8007726 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	3314      	adds	r3, #20
 8007768:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800776c:	e853 3f00 	ldrex	r3, [r3]
 8007770:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007772:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007774:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007778:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	3314      	adds	r3, #20
 8007782:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007786:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007788:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800778c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800778e:	e841 2300 	strex	r3, r2, [r1]
 8007792:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007794:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1e3      	bne.n	8007762 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2220      	movs	r2, #32
 800779e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	330c      	adds	r3, #12
 80077ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077b2:	e853 3f00 	ldrex	r3, [r3]
 80077b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80077b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077ba:	f023 0310 	bic.w	r3, r3, #16
 80077be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	330c      	adds	r3, #12
 80077c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80077cc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80077ce:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80077d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80077d4:	e841 2300 	strex	r3, r2, [r1]
 80077d8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80077da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1e3      	bne.n	80077a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077e4:	4618      	mov	r0, r3
 80077e6:	f7fc f82d 	bl	8003844 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2202      	movs	r2, #2
 80077ee:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	1ad3      	subs	r3, r2, r3
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	4619      	mov	r1, r3
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f7fa fd45 	bl	8002290 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007806:	e09b      	b.n	8007940 <HAL_UART_IRQHandler+0x518>
 8007808:	08007e9b 	.word	0x08007e9b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007814:	b29b      	uxth	r3, r3
 8007816:	1ad3      	subs	r3, r2, r3
 8007818:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007820:	b29b      	uxth	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	f000 808e 	beq.w	8007944 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007828:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800782c:	2b00      	cmp	r3, #0
 800782e:	f000 8089 	beq.w	8007944 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	330c      	adds	r3, #12
 8007838:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800783c:	e853 3f00 	ldrex	r3, [r3]
 8007840:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007844:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007848:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	330c      	adds	r3, #12
 8007852:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007856:	647a      	str	r2, [r7, #68]	@ 0x44
 8007858:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800785c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800785e:	e841 2300 	strex	r3, r2, [r1]
 8007862:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007864:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007866:	2b00      	cmp	r3, #0
 8007868:	d1e3      	bne.n	8007832 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	3314      	adds	r3, #20
 8007870:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007874:	e853 3f00 	ldrex	r3, [r3]
 8007878:	623b      	str	r3, [r7, #32]
   return(result);
 800787a:	6a3b      	ldr	r3, [r7, #32]
 800787c:	f023 0301 	bic.w	r3, r3, #1
 8007880:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	3314      	adds	r3, #20
 800788a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800788e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007890:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007892:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007894:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007896:	e841 2300 	strex	r3, r2, [r1]
 800789a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800789c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d1e3      	bne.n	800786a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2220      	movs	r2, #32
 80078a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	330c      	adds	r3, #12
 80078b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	e853 3f00 	ldrex	r3, [r3]
 80078be:	60fb      	str	r3, [r7, #12]
   return(result);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f023 0310 	bic.w	r3, r3, #16
 80078c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	330c      	adds	r3, #12
 80078d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80078d4:	61fa      	str	r2, [r7, #28]
 80078d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d8:	69b9      	ldr	r1, [r7, #24]
 80078da:	69fa      	ldr	r2, [r7, #28]
 80078dc:	e841 2300 	strex	r3, r2, [r1]
 80078e0:	617b      	str	r3, [r7, #20]
   return(result);
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d1e3      	bne.n	80078b0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2202      	movs	r2, #2
 80078ec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80078ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80078f2:	4619      	mov	r1, r3
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f7fa fccb 	bl	8002290 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80078fa:	e023      	b.n	8007944 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80078fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007900:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007904:	2b00      	cmp	r3, #0
 8007906:	d009      	beq.n	800791c <HAL_UART_IRQHandler+0x4f4>
 8007908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800790c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007910:	2b00      	cmp	r3, #0
 8007912:	d003      	beq.n	800791c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 fad4 	bl	8007ec2 <UART_Transmit_IT>
    return;
 800791a:	e014      	b.n	8007946 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800791c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007924:	2b00      	cmp	r3, #0
 8007926:	d00e      	beq.n	8007946 <HAL_UART_IRQHandler+0x51e>
 8007928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800792c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007930:	2b00      	cmp	r3, #0
 8007932:	d008      	beq.n	8007946 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 fb14 	bl	8007f62 <UART_EndTransmit_IT>
    return;
 800793a:	e004      	b.n	8007946 <HAL_UART_IRQHandler+0x51e>
    return;
 800793c:	bf00      	nop
 800793e:	e002      	b.n	8007946 <HAL_UART_IRQHandler+0x51e>
      return;
 8007940:	bf00      	nop
 8007942:	e000      	b.n	8007946 <HAL_UART_IRQHandler+0x51e>
      return;
 8007944:	bf00      	nop
  }
}
 8007946:	37e8      	adds	r7, #232	@ 0xe8
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007954:	bf00      	nop
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007968:	bf00      	nop
 800796a:	370c      	adds	r7, #12
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800797c:	bf00      	nop
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007990:	bf00      	nop
 8007992:	370c      	adds	r7, #12
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b090      	sub	sp, #64	@ 0x40
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d137      	bne.n	8007a28 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80079b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079ba:	2200      	movs	r2, #0
 80079bc:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80079be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	3314      	adds	r3, #20
 80079c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c8:	e853 3f00 	ldrex	r3, [r3]
 80079cc:	623b      	str	r3, [r7, #32]
   return(result);
 80079ce:	6a3b      	ldr	r3, [r7, #32]
 80079d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80079d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80079d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	3314      	adds	r3, #20
 80079dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80079de:	633a      	str	r2, [r7, #48]	@ 0x30
 80079e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079e6:	e841 2300 	strex	r3, r2, [r1]
 80079ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80079ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d1e5      	bne.n	80079be <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80079f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	330c      	adds	r3, #12
 80079f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	e853 3f00 	ldrex	r3, [r3]
 8007a00:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a08:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	330c      	adds	r3, #12
 8007a10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007a12:	61fa      	str	r2, [r7, #28]
 8007a14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a16:	69b9      	ldr	r1, [r7, #24]
 8007a18:	69fa      	ldr	r2, [r7, #28]
 8007a1a:	e841 2300 	strex	r3, r2, [r1]
 8007a1e:	617b      	str	r3, [r7, #20]
   return(result);
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1e5      	bne.n	80079f2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007a26:	e002      	b.n	8007a2e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007a28:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007a2a:	f7f9 fd21 	bl	8001470 <HAL_UART_TxCpltCallback>
}
 8007a2e:	bf00      	nop
 8007a30:	3740      	adds	r7, #64	@ 0x40
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b084      	sub	sp, #16
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a42:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f7ff ff81 	bl	800794c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a4a:	bf00      	nop
 8007a4c:	3710      	adds	r7, #16
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b09c      	sub	sp, #112	@ 0x70
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a5e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d172      	bne.n	8007b54 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007a6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a70:	2200      	movs	r2, #0
 8007a72:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	330c      	adds	r3, #12
 8007a7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a7e:	e853 3f00 	ldrex	r3, [r3]
 8007a82:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007a84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a86:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a8a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	330c      	adds	r3, #12
 8007a92:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007a94:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007a96:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a98:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007a9a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007a9c:	e841 2300 	strex	r3, r2, [r1]
 8007aa0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007aa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d1e5      	bne.n	8007a74 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aa8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	3314      	adds	r3, #20
 8007aae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ab2:	e853 3f00 	ldrex	r3, [r3]
 8007ab6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aba:	f023 0301 	bic.w	r3, r3, #1
 8007abe:	667b      	str	r3, [r7, #100]	@ 0x64
 8007ac0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	3314      	adds	r3, #20
 8007ac6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007ac8:	647a      	str	r2, [r7, #68]	@ 0x44
 8007aca:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007acc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ace:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ad0:	e841 2300 	strex	r3, r2, [r1]
 8007ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d1e5      	bne.n	8007aa8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007adc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	3314      	adds	r3, #20
 8007ae2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae6:	e853 3f00 	ldrex	r3, [r3]
 8007aea:	623b      	str	r3, [r7, #32]
   return(result);
 8007aec:	6a3b      	ldr	r3, [r7, #32]
 8007aee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007af2:	663b      	str	r3, [r7, #96]	@ 0x60
 8007af4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	3314      	adds	r3, #20
 8007afa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007afc:	633a      	str	r2, [r7, #48]	@ 0x30
 8007afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b00:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b04:	e841 2300 	strex	r3, r2, [r1]
 8007b08:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d1e5      	bne.n	8007adc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007b10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b12:	2220      	movs	r2, #32
 8007b14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d119      	bne.n	8007b54 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	330c      	adds	r3, #12
 8007b26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	e853 3f00 	ldrex	r3, [r3]
 8007b2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f023 0310 	bic.w	r3, r3, #16
 8007b36:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	330c      	adds	r3, #12
 8007b3e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007b40:	61fa      	str	r2, [r7, #28]
 8007b42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b44:	69b9      	ldr	r1, [r7, #24]
 8007b46:	69fa      	ldr	r2, [r7, #28]
 8007b48:	e841 2300 	strex	r3, r2, [r1]
 8007b4c:	617b      	str	r3, [r7, #20]
   return(result);
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1e5      	bne.n	8007b20 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b56:	2200      	movs	r2, #0
 8007b58:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d106      	bne.n	8007b70 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b64:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007b66:	4619      	mov	r1, r3
 8007b68:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007b6a:	f7fa fb91 	bl	8002290 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007b6e:	e002      	b.n	8007b76 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007b70:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007b72:	f7ff fef5 	bl	8007960 <HAL_UART_RxCpltCallback>
}
 8007b76:	bf00      	nop
 8007b78:	3770      	adds	r7, #112	@ 0x70
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b084      	sub	sp, #16
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b8a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d108      	bne.n	8007bac <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007b9e:	085b      	lsrs	r3, r3, #1
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	f7fa fb73 	bl	8002290 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007baa:	e002      	b.n	8007bb2 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007bac:	68f8      	ldr	r0, [r7, #12]
 8007bae:	f7ff fee1 	bl	8007974 <HAL_UART_RxHalfCpltCallback>
}
 8007bb2:	bf00      	nop
 8007bb4:	3710      	adds	r7, #16
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b084      	sub	sp, #16
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bca:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	695b      	ldr	r3, [r3, #20]
 8007bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bd6:	2b80      	cmp	r3, #128	@ 0x80
 8007bd8:	bf0c      	ite	eq
 8007bda:	2301      	moveq	r3, #1
 8007bdc:	2300      	movne	r3, #0
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	2b21      	cmp	r3, #33	@ 0x21
 8007bec:	d108      	bne.n	8007c00 <UART_DMAError+0x46>
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d005      	beq.n	8007c00 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8007bfa:	68b8      	ldr	r0, [r7, #8]
 8007bfc:	f000 f8c2 	bl	8007d84 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	695b      	ldr	r3, [r3, #20]
 8007c06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c0a:	2b40      	cmp	r3, #64	@ 0x40
 8007c0c:	bf0c      	ite	eq
 8007c0e:	2301      	moveq	r3, #1
 8007c10:	2300      	movne	r3, #0
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	2b22      	cmp	r3, #34	@ 0x22
 8007c20:	d108      	bne.n	8007c34 <UART_DMAError+0x7a>
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d005      	beq.n	8007c34 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007c2e:	68b8      	ldr	r0, [r7, #8]
 8007c30:	f000 f8d0 	bl	8007dd4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c38:	f043 0210 	orr.w	r2, r3, #16
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c40:	68b8      	ldr	r0, [r7, #8]
 8007c42:	f7ff fea1 	bl	8007988 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c46:	bf00      	nop
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
	...

08007c50 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b098      	sub	sp, #96	@ 0x60
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	60b9      	str	r1, [r7, #8]
 8007c5a:	4613      	mov	r3, r2
 8007c5c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007c5e:	68ba      	ldr	r2, [r7, #8]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	88fa      	ldrh	r2, [r7, #6]
 8007c68:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2222      	movs	r2, #34	@ 0x22
 8007c74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c7c:	4a3e      	ldr	r2, [pc, #248]	@ (8007d78 <UART_Start_Receive_DMA+0x128>)
 8007c7e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c84:	4a3d      	ldr	r2, [pc, #244]	@ (8007d7c <UART_Start_Receive_DMA+0x12c>)
 8007c86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c8c:	4a3c      	ldr	r2, [pc, #240]	@ (8007d80 <UART_Start_Receive_DMA+0x130>)
 8007c8e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c94:	2200      	movs	r2, #0
 8007c96:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007c98:	f107 0308 	add.w	r3, r7, #8
 8007c9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	3304      	adds	r3, #4
 8007ca8:	4619      	mov	r1, r3
 8007caa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	88fb      	ldrh	r3, [r7, #6]
 8007cb0:	f7fb fd70 	bl	8003794 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	613b      	str	r3, [r7, #16]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	613b      	str	r3, [r7, #16]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	613b      	str	r3, [r7, #16]
 8007cc8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d019      	beq.n	8007d06 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	330c      	adds	r3, #12
 8007cd8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cdc:	e853 3f00 	ldrex	r3, [r3]
 8007ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ce4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ce8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	330c      	adds	r3, #12
 8007cf0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007cf2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007cf4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007cf8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007cfa:	e841 2300 	strex	r3, r2, [r1]
 8007cfe:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007d00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d1e5      	bne.n	8007cd2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	3314      	adds	r3, #20
 8007d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d10:	e853 3f00 	ldrex	r3, [r3]
 8007d14:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d18:	f043 0301 	orr.w	r3, r3, #1
 8007d1c:	657b      	str	r3, [r7, #84]	@ 0x54
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	3314      	adds	r3, #20
 8007d24:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007d26:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007d28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007d2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d2e:	e841 2300 	strex	r3, r2, [r1]
 8007d32:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d1e5      	bne.n	8007d06 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	3314      	adds	r3, #20
 8007d40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	e853 3f00 	ldrex	r3, [r3]
 8007d48:	617b      	str	r3, [r7, #20]
   return(result);
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d50:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	3314      	adds	r3, #20
 8007d58:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007d5a:	627a      	str	r2, [r7, #36]	@ 0x24
 8007d5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5e:	6a39      	ldr	r1, [r7, #32]
 8007d60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d62:	e841 2300 	strex	r3, r2, [r1]
 8007d66:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d68:	69fb      	ldr	r3, [r7, #28]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d1e5      	bne.n	8007d3a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3760      	adds	r7, #96	@ 0x60
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}
 8007d78:	08007a53 	.word	0x08007a53
 8007d7c:	08007b7f 	.word	0x08007b7f
 8007d80:	08007bbb 	.word	0x08007bbb

08007d84 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b089      	sub	sp, #36	@ 0x24
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	330c      	adds	r3, #12
 8007d92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	e853 3f00 	ldrex	r3, [r3]
 8007d9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007da2:	61fb      	str	r3, [r7, #28]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	330c      	adds	r3, #12
 8007daa:	69fa      	ldr	r2, [r7, #28]
 8007dac:	61ba      	str	r2, [r7, #24]
 8007dae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db0:	6979      	ldr	r1, [r7, #20]
 8007db2:	69ba      	ldr	r2, [r7, #24]
 8007db4:	e841 2300 	strex	r3, r2, [r1]
 8007db8:	613b      	str	r3, [r7, #16]
   return(result);
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d1e5      	bne.n	8007d8c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2220      	movs	r2, #32
 8007dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007dc8:	bf00      	nop
 8007dca:	3724      	adds	r7, #36	@ 0x24
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b095      	sub	sp, #84	@ 0x54
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	330c      	adds	r3, #12
 8007de2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007de6:	e853 3f00 	ldrex	r3, [r3]
 8007dea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007df2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	330c      	adds	r3, #12
 8007dfa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007dfc:	643a      	str	r2, [r7, #64]	@ 0x40
 8007dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e00:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e04:	e841 2300 	strex	r3, r2, [r1]
 8007e08:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d1e5      	bne.n	8007ddc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	3314      	adds	r3, #20
 8007e16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e18:	6a3b      	ldr	r3, [r7, #32]
 8007e1a:	e853 3f00 	ldrex	r3, [r3]
 8007e1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	f023 0301 	bic.w	r3, r3, #1
 8007e26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	3314      	adds	r3, #20
 8007e2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e30:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e38:	e841 2300 	strex	r3, r2, [r1]
 8007e3c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d1e5      	bne.n	8007e10 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d119      	bne.n	8007e80 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	330c      	adds	r3, #12
 8007e52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	e853 3f00 	ldrex	r3, [r3]
 8007e5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	f023 0310 	bic.w	r3, r3, #16
 8007e62:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	330c      	adds	r3, #12
 8007e6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e6c:	61ba      	str	r2, [r7, #24]
 8007e6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e70:	6979      	ldr	r1, [r7, #20]
 8007e72:	69ba      	ldr	r2, [r7, #24]
 8007e74:	e841 2300 	strex	r3, r2, [r1]
 8007e78:	613b      	str	r3, [r7, #16]
   return(result);
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d1e5      	bne.n	8007e4c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2220      	movs	r2, #32
 8007e84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007e8e:	bf00      	nop
 8007e90:	3754      	adds	r7, #84	@ 0x54
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr

08007e9a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b084      	sub	sp, #16
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ea6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007eb4:	68f8      	ldr	r0, [r7, #12]
 8007eb6:	f7ff fd67 	bl	8007988 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007eba:	bf00      	nop
 8007ebc:	3710      	adds	r7, #16
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007ec2:	b480      	push	{r7}
 8007ec4:	b085      	sub	sp, #20
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	2b21      	cmp	r3, #33	@ 0x21
 8007ed4:	d13e      	bne.n	8007f54 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ede:	d114      	bne.n	8007f0a <UART_Transmit_IT+0x48>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d110      	bne.n	8007f0a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6a1b      	ldr	r3, [r3, #32]
 8007eec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	881b      	ldrh	r3, [r3, #0]
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007efc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6a1b      	ldr	r3, [r3, #32]
 8007f02:	1c9a      	adds	r2, r3, #2
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	621a      	str	r2, [r3, #32]
 8007f08:	e008      	b.n	8007f1c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6a1b      	ldr	r3, [r3, #32]
 8007f0e:	1c59      	adds	r1, r3, #1
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	6211      	str	r1, [r2, #32]
 8007f14:	781a      	ldrb	r2, [r3, #0]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	3b01      	subs	r3, #1
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	4619      	mov	r1, r3
 8007f2a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d10f      	bne.n	8007f50 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	68da      	ldr	r2, [r3, #12]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007f3e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	68da      	ldr	r2, [r3, #12]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f4e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007f50:	2300      	movs	r3, #0
 8007f52:	e000      	b.n	8007f56 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007f54:	2302      	movs	r3, #2
  }
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3714      	adds	r7, #20
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr

08007f62 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f62:	b580      	push	{r7, lr}
 8007f64:	b082      	sub	sp, #8
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	68da      	ldr	r2, [r3, #12]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f78:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2220      	movs	r2, #32
 8007f7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f7f9 fa74 	bl	8001470 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f88:	2300      	movs	r3, #0
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3708      	adds	r7, #8
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}

08007f92 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f92:	b580      	push	{r7, lr}
 8007f94:	b08c      	sub	sp, #48	@ 0x30
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	2b22      	cmp	r3, #34	@ 0x22
 8007fa4:	f040 80ae 	bne.w	8008104 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fb0:	d117      	bne.n	8007fe2 <UART_Receive_IT+0x50>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d113      	bne.n	8007fe2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fd4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fda:	1c9a      	adds	r2, r3, #2
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	629a      	str	r2, [r3, #40]	@ 0x28
 8007fe0:	e026      	b.n	8008030 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ff4:	d007      	beq.n	8008006 <UART_Receive_IT+0x74>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d10a      	bne.n	8008014 <UART_Receive_IT+0x82>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d106      	bne.n	8008014 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	b2da      	uxtb	r2, r3
 800800e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008010:	701a      	strb	r2, [r3, #0]
 8008012:	e008      	b.n	8008026 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	b2db      	uxtb	r3, r3
 800801c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008020:	b2da      	uxtb	r2, r3
 8008022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008024:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800802a:	1c5a      	adds	r2, r3, #1
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008034:	b29b      	uxth	r3, r3
 8008036:	3b01      	subs	r3, #1
 8008038:	b29b      	uxth	r3, r3
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	4619      	mov	r1, r3
 800803e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008040:	2b00      	cmp	r3, #0
 8008042:	d15d      	bne.n	8008100 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	68da      	ldr	r2, [r3, #12]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f022 0220 	bic.w	r2, r2, #32
 8008052:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	68da      	ldr	r2, [r3, #12]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008062:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	695a      	ldr	r2, [r3, #20]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f022 0201 	bic.w	r2, r2, #1
 8008072:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2220      	movs	r2, #32
 8008078:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008086:	2b01      	cmp	r3, #1
 8008088:	d135      	bne.n	80080f6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	330c      	adds	r3, #12
 8008096:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	e853 3f00 	ldrex	r3, [r3]
 800809e:	613b      	str	r3, [r7, #16]
   return(result);
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	f023 0310 	bic.w	r3, r3, #16
 80080a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	330c      	adds	r3, #12
 80080ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080b0:	623a      	str	r2, [r7, #32]
 80080b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b4:	69f9      	ldr	r1, [r7, #28]
 80080b6:	6a3a      	ldr	r2, [r7, #32]
 80080b8:	e841 2300 	strex	r3, r2, [r1]
 80080bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d1e5      	bne.n	8008090 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f003 0310 	and.w	r3, r3, #16
 80080ce:	2b10      	cmp	r3, #16
 80080d0:	d10a      	bne.n	80080e8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80080d2:	2300      	movs	r3, #0
 80080d4:	60fb      	str	r3, [r7, #12]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	60fb      	str	r3, [r7, #12]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	60fb      	str	r3, [r7, #12]
 80080e6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80080ec:	4619      	mov	r1, r3
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f7fa f8ce 	bl	8002290 <HAL_UARTEx_RxEventCallback>
 80080f4:	e002      	b.n	80080fc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f7ff fc32 	bl	8007960 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80080fc:	2300      	movs	r3, #0
 80080fe:	e002      	b.n	8008106 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008100:	2300      	movs	r3, #0
 8008102:	e000      	b.n	8008106 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008104:	2302      	movs	r3, #2
  }
}
 8008106:	4618      	mov	r0, r3
 8008108:	3730      	adds	r7, #48	@ 0x30
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
	...

08008110 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008114:	b0c0      	sub	sp, #256	@ 0x100
 8008116:	af00      	add	r7, sp, #0
 8008118:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800811c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	691b      	ldr	r3, [r3, #16]
 8008124:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800812c:	68d9      	ldr	r1, [r3, #12]
 800812e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	ea40 0301 	orr.w	r3, r0, r1
 8008138:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800813a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800813e:	689a      	ldr	r2, [r3, #8]
 8008140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008144:	691b      	ldr	r3, [r3, #16]
 8008146:	431a      	orrs	r2, r3
 8008148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800814c:	695b      	ldr	r3, [r3, #20]
 800814e:	431a      	orrs	r2, r3
 8008150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008154:	69db      	ldr	r3, [r3, #28]
 8008156:	4313      	orrs	r3, r2
 8008158:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800815c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008168:	f021 010c 	bic.w	r1, r1, #12
 800816c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008176:	430b      	orrs	r3, r1
 8008178:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800817a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	695b      	ldr	r3, [r3, #20]
 8008182:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800818a:	6999      	ldr	r1, [r3, #24]
 800818c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008190:	681a      	ldr	r2, [r3, #0]
 8008192:	ea40 0301 	orr.w	r3, r0, r1
 8008196:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	4b8f      	ldr	r3, [pc, #572]	@ (80083dc <UART_SetConfig+0x2cc>)
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d005      	beq.n	80081b0 <UART_SetConfig+0xa0>
 80081a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	4b8d      	ldr	r3, [pc, #564]	@ (80083e0 <UART_SetConfig+0x2d0>)
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d104      	bne.n	80081ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80081b0:	f7fd fa2e 	bl	8005610 <HAL_RCC_GetPCLK2Freq>
 80081b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80081b8:	e003      	b.n	80081c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80081ba:	f7fd fa15 	bl	80055e8 <HAL_RCC_GetPCLK1Freq>
 80081be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081c6:	69db      	ldr	r3, [r3, #28]
 80081c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081cc:	f040 810c 	bne.w	80083e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80081d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081d4:	2200      	movs	r2, #0
 80081d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80081da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80081de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80081e2:	4622      	mov	r2, r4
 80081e4:	462b      	mov	r3, r5
 80081e6:	1891      	adds	r1, r2, r2
 80081e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80081ea:	415b      	adcs	r3, r3
 80081ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80081ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80081f2:	4621      	mov	r1, r4
 80081f4:	eb12 0801 	adds.w	r8, r2, r1
 80081f8:	4629      	mov	r1, r5
 80081fa:	eb43 0901 	adc.w	r9, r3, r1
 80081fe:	f04f 0200 	mov.w	r2, #0
 8008202:	f04f 0300 	mov.w	r3, #0
 8008206:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800820a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800820e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008212:	4690      	mov	r8, r2
 8008214:	4699      	mov	r9, r3
 8008216:	4623      	mov	r3, r4
 8008218:	eb18 0303 	adds.w	r3, r8, r3
 800821c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008220:	462b      	mov	r3, r5
 8008222:	eb49 0303 	adc.w	r3, r9, r3
 8008226:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800822a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008236:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800823a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800823e:	460b      	mov	r3, r1
 8008240:	18db      	adds	r3, r3, r3
 8008242:	653b      	str	r3, [r7, #80]	@ 0x50
 8008244:	4613      	mov	r3, r2
 8008246:	eb42 0303 	adc.w	r3, r2, r3
 800824a:	657b      	str	r3, [r7, #84]	@ 0x54
 800824c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008250:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008254:	f7f8 fd00 	bl	8000c58 <__aeabi_uldivmod>
 8008258:	4602      	mov	r2, r0
 800825a:	460b      	mov	r3, r1
 800825c:	4b61      	ldr	r3, [pc, #388]	@ (80083e4 <UART_SetConfig+0x2d4>)
 800825e:	fba3 2302 	umull	r2, r3, r3, r2
 8008262:	095b      	lsrs	r3, r3, #5
 8008264:	011c      	lsls	r4, r3, #4
 8008266:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800826a:	2200      	movs	r2, #0
 800826c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008270:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008274:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008278:	4642      	mov	r2, r8
 800827a:	464b      	mov	r3, r9
 800827c:	1891      	adds	r1, r2, r2
 800827e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008280:	415b      	adcs	r3, r3
 8008282:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008284:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008288:	4641      	mov	r1, r8
 800828a:	eb12 0a01 	adds.w	sl, r2, r1
 800828e:	4649      	mov	r1, r9
 8008290:	eb43 0b01 	adc.w	fp, r3, r1
 8008294:	f04f 0200 	mov.w	r2, #0
 8008298:	f04f 0300 	mov.w	r3, #0
 800829c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80082a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80082a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80082a8:	4692      	mov	sl, r2
 80082aa:	469b      	mov	fp, r3
 80082ac:	4643      	mov	r3, r8
 80082ae:	eb1a 0303 	adds.w	r3, sl, r3
 80082b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80082b6:	464b      	mov	r3, r9
 80082b8:	eb4b 0303 	adc.w	r3, fp, r3
 80082bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80082c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80082cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80082d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80082d4:	460b      	mov	r3, r1
 80082d6:	18db      	adds	r3, r3, r3
 80082d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80082da:	4613      	mov	r3, r2
 80082dc:	eb42 0303 	adc.w	r3, r2, r3
 80082e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80082e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80082e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80082ea:	f7f8 fcb5 	bl	8000c58 <__aeabi_uldivmod>
 80082ee:	4602      	mov	r2, r0
 80082f0:	460b      	mov	r3, r1
 80082f2:	4611      	mov	r1, r2
 80082f4:	4b3b      	ldr	r3, [pc, #236]	@ (80083e4 <UART_SetConfig+0x2d4>)
 80082f6:	fba3 2301 	umull	r2, r3, r3, r1
 80082fa:	095b      	lsrs	r3, r3, #5
 80082fc:	2264      	movs	r2, #100	@ 0x64
 80082fe:	fb02 f303 	mul.w	r3, r2, r3
 8008302:	1acb      	subs	r3, r1, r3
 8008304:	00db      	lsls	r3, r3, #3
 8008306:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800830a:	4b36      	ldr	r3, [pc, #216]	@ (80083e4 <UART_SetConfig+0x2d4>)
 800830c:	fba3 2302 	umull	r2, r3, r3, r2
 8008310:	095b      	lsrs	r3, r3, #5
 8008312:	005b      	lsls	r3, r3, #1
 8008314:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008318:	441c      	add	r4, r3
 800831a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800831e:	2200      	movs	r2, #0
 8008320:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008324:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008328:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800832c:	4642      	mov	r2, r8
 800832e:	464b      	mov	r3, r9
 8008330:	1891      	adds	r1, r2, r2
 8008332:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008334:	415b      	adcs	r3, r3
 8008336:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008338:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800833c:	4641      	mov	r1, r8
 800833e:	1851      	adds	r1, r2, r1
 8008340:	6339      	str	r1, [r7, #48]	@ 0x30
 8008342:	4649      	mov	r1, r9
 8008344:	414b      	adcs	r3, r1
 8008346:	637b      	str	r3, [r7, #52]	@ 0x34
 8008348:	f04f 0200 	mov.w	r2, #0
 800834c:	f04f 0300 	mov.w	r3, #0
 8008350:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008354:	4659      	mov	r1, fp
 8008356:	00cb      	lsls	r3, r1, #3
 8008358:	4651      	mov	r1, sl
 800835a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800835e:	4651      	mov	r1, sl
 8008360:	00ca      	lsls	r2, r1, #3
 8008362:	4610      	mov	r0, r2
 8008364:	4619      	mov	r1, r3
 8008366:	4603      	mov	r3, r0
 8008368:	4642      	mov	r2, r8
 800836a:	189b      	adds	r3, r3, r2
 800836c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008370:	464b      	mov	r3, r9
 8008372:	460a      	mov	r2, r1
 8008374:	eb42 0303 	adc.w	r3, r2, r3
 8008378:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800837c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008388:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800838c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008390:	460b      	mov	r3, r1
 8008392:	18db      	adds	r3, r3, r3
 8008394:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008396:	4613      	mov	r3, r2
 8008398:	eb42 0303 	adc.w	r3, r2, r3
 800839c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800839e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80083a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80083a6:	f7f8 fc57 	bl	8000c58 <__aeabi_uldivmod>
 80083aa:	4602      	mov	r2, r0
 80083ac:	460b      	mov	r3, r1
 80083ae:	4b0d      	ldr	r3, [pc, #52]	@ (80083e4 <UART_SetConfig+0x2d4>)
 80083b0:	fba3 1302 	umull	r1, r3, r3, r2
 80083b4:	095b      	lsrs	r3, r3, #5
 80083b6:	2164      	movs	r1, #100	@ 0x64
 80083b8:	fb01 f303 	mul.w	r3, r1, r3
 80083bc:	1ad3      	subs	r3, r2, r3
 80083be:	00db      	lsls	r3, r3, #3
 80083c0:	3332      	adds	r3, #50	@ 0x32
 80083c2:	4a08      	ldr	r2, [pc, #32]	@ (80083e4 <UART_SetConfig+0x2d4>)
 80083c4:	fba2 2303 	umull	r2, r3, r2, r3
 80083c8:	095b      	lsrs	r3, r3, #5
 80083ca:	f003 0207 	and.w	r2, r3, #7
 80083ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4422      	add	r2, r4
 80083d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80083d8:	e106      	b.n	80085e8 <UART_SetConfig+0x4d8>
 80083da:	bf00      	nop
 80083dc:	40011000 	.word	0x40011000
 80083e0:	40011400 	.word	0x40011400
 80083e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80083e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80083ec:	2200      	movs	r2, #0
 80083ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80083f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80083f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80083fa:	4642      	mov	r2, r8
 80083fc:	464b      	mov	r3, r9
 80083fe:	1891      	adds	r1, r2, r2
 8008400:	6239      	str	r1, [r7, #32]
 8008402:	415b      	adcs	r3, r3
 8008404:	627b      	str	r3, [r7, #36]	@ 0x24
 8008406:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800840a:	4641      	mov	r1, r8
 800840c:	1854      	adds	r4, r2, r1
 800840e:	4649      	mov	r1, r9
 8008410:	eb43 0501 	adc.w	r5, r3, r1
 8008414:	f04f 0200 	mov.w	r2, #0
 8008418:	f04f 0300 	mov.w	r3, #0
 800841c:	00eb      	lsls	r3, r5, #3
 800841e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008422:	00e2      	lsls	r2, r4, #3
 8008424:	4614      	mov	r4, r2
 8008426:	461d      	mov	r5, r3
 8008428:	4643      	mov	r3, r8
 800842a:	18e3      	adds	r3, r4, r3
 800842c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008430:	464b      	mov	r3, r9
 8008432:	eb45 0303 	adc.w	r3, r5, r3
 8008436:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800843a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008446:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800844a:	f04f 0200 	mov.w	r2, #0
 800844e:	f04f 0300 	mov.w	r3, #0
 8008452:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008456:	4629      	mov	r1, r5
 8008458:	008b      	lsls	r3, r1, #2
 800845a:	4621      	mov	r1, r4
 800845c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008460:	4621      	mov	r1, r4
 8008462:	008a      	lsls	r2, r1, #2
 8008464:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008468:	f7f8 fbf6 	bl	8000c58 <__aeabi_uldivmod>
 800846c:	4602      	mov	r2, r0
 800846e:	460b      	mov	r3, r1
 8008470:	4b60      	ldr	r3, [pc, #384]	@ (80085f4 <UART_SetConfig+0x4e4>)
 8008472:	fba3 2302 	umull	r2, r3, r3, r2
 8008476:	095b      	lsrs	r3, r3, #5
 8008478:	011c      	lsls	r4, r3, #4
 800847a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800847e:	2200      	movs	r2, #0
 8008480:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008484:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008488:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800848c:	4642      	mov	r2, r8
 800848e:	464b      	mov	r3, r9
 8008490:	1891      	adds	r1, r2, r2
 8008492:	61b9      	str	r1, [r7, #24]
 8008494:	415b      	adcs	r3, r3
 8008496:	61fb      	str	r3, [r7, #28]
 8008498:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800849c:	4641      	mov	r1, r8
 800849e:	1851      	adds	r1, r2, r1
 80084a0:	6139      	str	r1, [r7, #16]
 80084a2:	4649      	mov	r1, r9
 80084a4:	414b      	adcs	r3, r1
 80084a6:	617b      	str	r3, [r7, #20]
 80084a8:	f04f 0200 	mov.w	r2, #0
 80084ac:	f04f 0300 	mov.w	r3, #0
 80084b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80084b4:	4659      	mov	r1, fp
 80084b6:	00cb      	lsls	r3, r1, #3
 80084b8:	4651      	mov	r1, sl
 80084ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80084be:	4651      	mov	r1, sl
 80084c0:	00ca      	lsls	r2, r1, #3
 80084c2:	4610      	mov	r0, r2
 80084c4:	4619      	mov	r1, r3
 80084c6:	4603      	mov	r3, r0
 80084c8:	4642      	mov	r2, r8
 80084ca:	189b      	adds	r3, r3, r2
 80084cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80084d0:	464b      	mov	r3, r9
 80084d2:	460a      	mov	r2, r1
 80084d4:	eb42 0303 	adc.w	r3, r2, r3
 80084d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80084dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80084e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80084e8:	f04f 0200 	mov.w	r2, #0
 80084ec:	f04f 0300 	mov.w	r3, #0
 80084f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80084f4:	4649      	mov	r1, r9
 80084f6:	008b      	lsls	r3, r1, #2
 80084f8:	4641      	mov	r1, r8
 80084fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084fe:	4641      	mov	r1, r8
 8008500:	008a      	lsls	r2, r1, #2
 8008502:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008506:	f7f8 fba7 	bl	8000c58 <__aeabi_uldivmod>
 800850a:	4602      	mov	r2, r0
 800850c:	460b      	mov	r3, r1
 800850e:	4611      	mov	r1, r2
 8008510:	4b38      	ldr	r3, [pc, #224]	@ (80085f4 <UART_SetConfig+0x4e4>)
 8008512:	fba3 2301 	umull	r2, r3, r3, r1
 8008516:	095b      	lsrs	r3, r3, #5
 8008518:	2264      	movs	r2, #100	@ 0x64
 800851a:	fb02 f303 	mul.w	r3, r2, r3
 800851e:	1acb      	subs	r3, r1, r3
 8008520:	011b      	lsls	r3, r3, #4
 8008522:	3332      	adds	r3, #50	@ 0x32
 8008524:	4a33      	ldr	r2, [pc, #204]	@ (80085f4 <UART_SetConfig+0x4e4>)
 8008526:	fba2 2303 	umull	r2, r3, r2, r3
 800852a:	095b      	lsrs	r3, r3, #5
 800852c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008530:	441c      	add	r4, r3
 8008532:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008536:	2200      	movs	r2, #0
 8008538:	673b      	str	r3, [r7, #112]	@ 0x70
 800853a:	677a      	str	r2, [r7, #116]	@ 0x74
 800853c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008540:	4642      	mov	r2, r8
 8008542:	464b      	mov	r3, r9
 8008544:	1891      	adds	r1, r2, r2
 8008546:	60b9      	str	r1, [r7, #8]
 8008548:	415b      	adcs	r3, r3
 800854a:	60fb      	str	r3, [r7, #12]
 800854c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008550:	4641      	mov	r1, r8
 8008552:	1851      	adds	r1, r2, r1
 8008554:	6039      	str	r1, [r7, #0]
 8008556:	4649      	mov	r1, r9
 8008558:	414b      	adcs	r3, r1
 800855a:	607b      	str	r3, [r7, #4]
 800855c:	f04f 0200 	mov.w	r2, #0
 8008560:	f04f 0300 	mov.w	r3, #0
 8008564:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008568:	4659      	mov	r1, fp
 800856a:	00cb      	lsls	r3, r1, #3
 800856c:	4651      	mov	r1, sl
 800856e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008572:	4651      	mov	r1, sl
 8008574:	00ca      	lsls	r2, r1, #3
 8008576:	4610      	mov	r0, r2
 8008578:	4619      	mov	r1, r3
 800857a:	4603      	mov	r3, r0
 800857c:	4642      	mov	r2, r8
 800857e:	189b      	adds	r3, r3, r2
 8008580:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008582:	464b      	mov	r3, r9
 8008584:	460a      	mov	r2, r1
 8008586:	eb42 0303 	adc.w	r3, r2, r3
 800858a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800858c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	663b      	str	r3, [r7, #96]	@ 0x60
 8008596:	667a      	str	r2, [r7, #100]	@ 0x64
 8008598:	f04f 0200 	mov.w	r2, #0
 800859c:	f04f 0300 	mov.w	r3, #0
 80085a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80085a4:	4649      	mov	r1, r9
 80085a6:	008b      	lsls	r3, r1, #2
 80085a8:	4641      	mov	r1, r8
 80085aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80085ae:	4641      	mov	r1, r8
 80085b0:	008a      	lsls	r2, r1, #2
 80085b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80085b6:	f7f8 fb4f 	bl	8000c58 <__aeabi_uldivmod>
 80085ba:	4602      	mov	r2, r0
 80085bc:	460b      	mov	r3, r1
 80085be:	4b0d      	ldr	r3, [pc, #52]	@ (80085f4 <UART_SetConfig+0x4e4>)
 80085c0:	fba3 1302 	umull	r1, r3, r3, r2
 80085c4:	095b      	lsrs	r3, r3, #5
 80085c6:	2164      	movs	r1, #100	@ 0x64
 80085c8:	fb01 f303 	mul.w	r3, r1, r3
 80085cc:	1ad3      	subs	r3, r2, r3
 80085ce:	011b      	lsls	r3, r3, #4
 80085d0:	3332      	adds	r3, #50	@ 0x32
 80085d2:	4a08      	ldr	r2, [pc, #32]	@ (80085f4 <UART_SetConfig+0x4e4>)
 80085d4:	fba2 2303 	umull	r2, r3, r2, r3
 80085d8:	095b      	lsrs	r3, r3, #5
 80085da:	f003 020f 	and.w	r2, r3, #15
 80085de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4422      	add	r2, r4
 80085e6:	609a      	str	r2, [r3, #8]
}
 80085e8:	bf00      	nop
 80085ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80085ee:	46bd      	mov	sp, r7
 80085f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085f4:	51eb851f 	.word	0x51eb851f

080085f8 <__cvt>:
 80085f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085fc:	ec57 6b10 	vmov	r6, r7, d0
 8008600:	2f00      	cmp	r7, #0
 8008602:	460c      	mov	r4, r1
 8008604:	4619      	mov	r1, r3
 8008606:	463b      	mov	r3, r7
 8008608:	bfbb      	ittet	lt
 800860a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800860e:	461f      	movlt	r7, r3
 8008610:	2300      	movge	r3, #0
 8008612:	232d      	movlt	r3, #45	@ 0x2d
 8008614:	700b      	strb	r3, [r1, #0]
 8008616:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008618:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800861c:	4691      	mov	r9, r2
 800861e:	f023 0820 	bic.w	r8, r3, #32
 8008622:	bfbc      	itt	lt
 8008624:	4632      	movlt	r2, r6
 8008626:	4616      	movlt	r6, r2
 8008628:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800862c:	d005      	beq.n	800863a <__cvt+0x42>
 800862e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008632:	d100      	bne.n	8008636 <__cvt+0x3e>
 8008634:	3401      	adds	r4, #1
 8008636:	2102      	movs	r1, #2
 8008638:	e000      	b.n	800863c <__cvt+0x44>
 800863a:	2103      	movs	r1, #3
 800863c:	ab03      	add	r3, sp, #12
 800863e:	9301      	str	r3, [sp, #4]
 8008640:	ab02      	add	r3, sp, #8
 8008642:	9300      	str	r3, [sp, #0]
 8008644:	ec47 6b10 	vmov	d0, r6, r7
 8008648:	4653      	mov	r3, sl
 800864a:	4622      	mov	r2, r4
 800864c:	f000 fe5c 	bl	8009308 <_dtoa_r>
 8008650:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008654:	4605      	mov	r5, r0
 8008656:	d119      	bne.n	800868c <__cvt+0x94>
 8008658:	f019 0f01 	tst.w	r9, #1
 800865c:	d00e      	beq.n	800867c <__cvt+0x84>
 800865e:	eb00 0904 	add.w	r9, r0, r4
 8008662:	2200      	movs	r2, #0
 8008664:	2300      	movs	r3, #0
 8008666:	4630      	mov	r0, r6
 8008668:	4639      	mov	r1, r7
 800866a:	f7f8 fa35 	bl	8000ad8 <__aeabi_dcmpeq>
 800866e:	b108      	cbz	r0, 8008674 <__cvt+0x7c>
 8008670:	f8cd 900c 	str.w	r9, [sp, #12]
 8008674:	2230      	movs	r2, #48	@ 0x30
 8008676:	9b03      	ldr	r3, [sp, #12]
 8008678:	454b      	cmp	r3, r9
 800867a:	d31e      	bcc.n	80086ba <__cvt+0xc2>
 800867c:	9b03      	ldr	r3, [sp, #12]
 800867e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008680:	1b5b      	subs	r3, r3, r5
 8008682:	4628      	mov	r0, r5
 8008684:	6013      	str	r3, [r2, #0]
 8008686:	b004      	add	sp, #16
 8008688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800868c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008690:	eb00 0904 	add.w	r9, r0, r4
 8008694:	d1e5      	bne.n	8008662 <__cvt+0x6a>
 8008696:	7803      	ldrb	r3, [r0, #0]
 8008698:	2b30      	cmp	r3, #48	@ 0x30
 800869a:	d10a      	bne.n	80086b2 <__cvt+0xba>
 800869c:	2200      	movs	r2, #0
 800869e:	2300      	movs	r3, #0
 80086a0:	4630      	mov	r0, r6
 80086a2:	4639      	mov	r1, r7
 80086a4:	f7f8 fa18 	bl	8000ad8 <__aeabi_dcmpeq>
 80086a8:	b918      	cbnz	r0, 80086b2 <__cvt+0xba>
 80086aa:	f1c4 0401 	rsb	r4, r4, #1
 80086ae:	f8ca 4000 	str.w	r4, [sl]
 80086b2:	f8da 3000 	ldr.w	r3, [sl]
 80086b6:	4499      	add	r9, r3
 80086b8:	e7d3      	b.n	8008662 <__cvt+0x6a>
 80086ba:	1c59      	adds	r1, r3, #1
 80086bc:	9103      	str	r1, [sp, #12]
 80086be:	701a      	strb	r2, [r3, #0]
 80086c0:	e7d9      	b.n	8008676 <__cvt+0x7e>

080086c2 <__exponent>:
 80086c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086c4:	2900      	cmp	r1, #0
 80086c6:	bfba      	itte	lt
 80086c8:	4249      	neglt	r1, r1
 80086ca:	232d      	movlt	r3, #45	@ 0x2d
 80086cc:	232b      	movge	r3, #43	@ 0x2b
 80086ce:	2909      	cmp	r1, #9
 80086d0:	7002      	strb	r2, [r0, #0]
 80086d2:	7043      	strb	r3, [r0, #1]
 80086d4:	dd29      	ble.n	800872a <__exponent+0x68>
 80086d6:	f10d 0307 	add.w	r3, sp, #7
 80086da:	461d      	mov	r5, r3
 80086dc:	270a      	movs	r7, #10
 80086de:	461a      	mov	r2, r3
 80086e0:	fbb1 f6f7 	udiv	r6, r1, r7
 80086e4:	fb07 1416 	mls	r4, r7, r6, r1
 80086e8:	3430      	adds	r4, #48	@ 0x30
 80086ea:	f802 4c01 	strb.w	r4, [r2, #-1]
 80086ee:	460c      	mov	r4, r1
 80086f0:	2c63      	cmp	r4, #99	@ 0x63
 80086f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80086f6:	4631      	mov	r1, r6
 80086f8:	dcf1      	bgt.n	80086de <__exponent+0x1c>
 80086fa:	3130      	adds	r1, #48	@ 0x30
 80086fc:	1e94      	subs	r4, r2, #2
 80086fe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008702:	1c41      	adds	r1, r0, #1
 8008704:	4623      	mov	r3, r4
 8008706:	42ab      	cmp	r3, r5
 8008708:	d30a      	bcc.n	8008720 <__exponent+0x5e>
 800870a:	f10d 0309 	add.w	r3, sp, #9
 800870e:	1a9b      	subs	r3, r3, r2
 8008710:	42ac      	cmp	r4, r5
 8008712:	bf88      	it	hi
 8008714:	2300      	movhi	r3, #0
 8008716:	3302      	adds	r3, #2
 8008718:	4403      	add	r3, r0
 800871a:	1a18      	subs	r0, r3, r0
 800871c:	b003      	add	sp, #12
 800871e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008720:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008724:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008728:	e7ed      	b.n	8008706 <__exponent+0x44>
 800872a:	2330      	movs	r3, #48	@ 0x30
 800872c:	3130      	adds	r1, #48	@ 0x30
 800872e:	7083      	strb	r3, [r0, #2]
 8008730:	70c1      	strb	r1, [r0, #3]
 8008732:	1d03      	adds	r3, r0, #4
 8008734:	e7f1      	b.n	800871a <__exponent+0x58>
	...

08008738 <_printf_float>:
 8008738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800873c:	b08d      	sub	sp, #52	@ 0x34
 800873e:	460c      	mov	r4, r1
 8008740:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008744:	4616      	mov	r6, r2
 8008746:	461f      	mov	r7, r3
 8008748:	4605      	mov	r5, r0
 800874a:	f000 fcdb 	bl	8009104 <_localeconv_r>
 800874e:	6803      	ldr	r3, [r0, #0]
 8008750:	9304      	str	r3, [sp, #16]
 8008752:	4618      	mov	r0, r3
 8008754:	f7f7 fd94 	bl	8000280 <strlen>
 8008758:	2300      	movs	r3, #0
 800875a:	930a      	str	r3, [sp, #40]	@ 0x28
 800875c:	f8d8 3000 	ldr.w	r3, [r8]
 8008760:	9005      	str	r0, [sp, #20]
 8008762:	3307      	adds	r3, #7
 8008764:	f023 0307 	bic.w	r3, r3, #7
 8008768:	f103 0208 	add.w	r2, r3, #8
 800876c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008770:	f8d4 b000 	ldr.w	fp, [r4]
 8008774:	f8c8 2000 	str.w	r2, [r8]
 8008778:	e9d3 8900 	ldrd	r8, r9, [r3]
 800877c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008780:	9307      	str	r3, [sp, #28]
 8008782:	f8cd 8018 	str.w	r8, [sp, #24]
 8008786:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800878a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800878e:	4b9c      	ldr	r3, [pc, #624]	@ (8008a00 <_printf_float+0x2c8>)
 8008790:	f04f 32ff 	mov.w	r2, #4294967295
 8008794:	f7f8 f9d2 	bl	8000b3c <__aeabi_dcmpun>
 8008798:	bb70      	cbnz	r0, 80087f8 <_printf_float+0xc0>
 800879a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800879e:	4b98      	ldr	r3, [pc, #608]	@ (8008a00 <_printf_float+0x2c8>)
 80087a0:	f04f 32ff 	mov.w	r2, #4294967295
 80087a4:	f7f8 f9ac 	bl	8000b00 <__aeabi_dcmple>
 80087a8:	bb30      	cbnz	r0, 80087f8 <_printf_float+0xc0>
 80087aa:	2200      	movs	r2, #0
 80087ac:	2300      	movs	r3, #0
 80087ae:	4640      	mov	r0, r8
 80087b0:	4649      	mov	r1, r9
 80087b2:	f7f8 f99b 	bl	8000aec <__aeabi_dcmplt>
 80087b6:	b110      	cbz	r0, 80087be <_printf_float+0x86>
 80087b8:	232d      	movs	r3, #45	@ 0x2d
 80087ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087be:	4a91      	ldr	r2, [pc, #580]	@ (8008a04 <_printf_float+0x2cc>)
 80087c0:	4b91      	ldr	r3, [pc, #580]	@ (8008a08 <_printf_float+0x2d0>)
 80087c2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80087c6:	bf94      	ite	ls
 80087c8:	4690      	movls	r8, r2
 80087ca:	4698      	movhi	r8, r3
 80087cc:	2303      	movs	r3, #3
 80087ce:	6123      	str	r3, [r4, #16]
 80087d0:	f02b 0304 	bic.w	r3, fp, #4
 80087d4:	6023      	str	r3, [r4, #0]
 80087d6:	f04f 0900 	mov.w	r9, #0
 80087da:	9700      	str	r7, [sp, #0]
 80087dc:	4633      	mov	r3, r6
 80087de:	aa0b      	add	r2, sp, #44	@ 0x2c
 80087e0:	4621      	mov	r1, r4
 80087e2:	4628      	mov	r0, r5
 80087e4:	f000 f9d2 	bl	8008b8c <_printf_common>
 80087e8:	3001      	adds	r0, #1
 80087ea:	f040 808d 	bne.w	8008908 <_printf_float+0x1d0>
 80087ee:	f04f 30ff 	mov.w	r0, #4294967295
 80087f2:	b00d      	add	sp, #52	@ 0x34
 80087f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f8:	4642      	mov	r2, r8
 80087fa:	464b      	mov	r3, r9
 80087fc:	4640      	mov	r0, r8
 80087fe:	4649      	mov	r1, r9
 8008800:	f7f8 f99c 	bl	8000b3c <__aeabi_dcmpun>
 8008804:	b140      	cbz	r0, 8008818 <_printf_float+0xe0>
 8008806:	464b      	mov	r3, r9
 8008808:	2b00      	cmp	r3, #0
 800880a:	bfbc      	itt	lt
 800880c:	232d      	movlt	r3, #45	@ 0x2d
 800880e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008812:	4a7e      	ldr	r2, [pc, #504]	@ (8008a0c <_printf_float+0x2d4>)
 8008814:	4b7e      	ldr	r3, [pc, #504]	@ (8008a10 <_printf_float+0x2d8>)
 8008816:	e7d4      	b.n	80087c2 <_printf_float+0x8a>
 8008818:	6863      	ldr	r3, [r4, #4]
 800881a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800881e:	9206      	str	r2, [sp, #24]
 8008820:	1c5a      	adds	r2, r3, #1
 8008822:	d13b      	bne.n	800889c <_printf_float+0x164>
 8008824:	2306      	movs	r3, #6
 8008826:	6063      	str	r3, [r4, #4]
 8008828:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800882c:	2300      	movs	r3, #0
 800882e:	6022      	str	r2, [r4, #0]
 8008830:	9303      	str	r3, [sp, #12]
 8008832:	ab0a      	add	r3, sp, #40	@ 0x28
 8008834:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008838:	ab09      	add	r3, sp, #36	@ 0x24
 800883a:	9300      	str	r3, [sp, #0]
 800883c:	6861      	ldr	r1, [r4, #4]
 800883e:	ec49 8b10 	vmov	d0, r8, r9
 8008842:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008846:	4628      	mov	r0, r5
 8008848:	f7ff fed6 	bl	80085f8 <__cvt>
 800884c:	9b06      	ldr	r3, [sp, #24]
 800884e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008850:	2b47      	cmp	r3, #71	@ 0x47
 8008852:	4680      	mov	r8, r0
 8008854:	d129      	bne.n	80088aa <_printf_float+0x172>
 8008856:	1cc8      	adds	r0, r1, #3
 8008858:	db02      	blt.n	8008860 <_printf_float+0x128>
 800885a:	6863      	ldr	r3, [r4, #4]
 800885c:	4299      	cmp	r1, r3
 800885e:	dd41      	ble.n	80088e4 <_printf_float+0x1ac>
 8008860:	f1aa 0a02 	sub.w	sl, sl, #2
 8008864:	fa5f fa8a 	uxtb.w	sl, sl
 8008868:	3901      	subs	r1, #1
 800886a:	4652      	mov	r2, sl
 800886c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008870:	9109      	str	r1, [sp, #36]	@ 0x24
 8008872:	f7ff ff26 	bl	80086c2 <__exponent>
 8008876:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008878:	1813      	adds	r3, r2, r0
 800887a:	2a01      	cmp	r2, #1
 800887c:	4681      	mov	r9, r0
 800887e:	6123      	str	r3, [r4, #16]
 8008880:	dc02      	bgt.n	8008888 <_printf_float+0x150>
 8008882:	6822      	ldr	r2, [r4, #0]
 8008884:	07d2      	lsls	r2, r2, #31
 8008886:	d501      	bpl.n	800888c <_printf_float+0x154>
 8008888:	3301      	adds	r3, #1
 800888a:	6123      	str	r3, [r4, #16]
 800888c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008890:	2b00      	cmp	r3, #0
 8008892:	d0a2      	beq.n	80087da <_printf_float+0xa2>
 8008894:	232d      	movs	r3, #45	@ 0x2d
 8008896:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800889a:	e79e      	b.n	80087da <_printf_float+0xa2>
 800889c:	9a06      	ldr	r2, [sp, #24]
 800889e:	2a47      	cmp	r2, #71	@ 0x47
 80088a0:	d1c2      	bne.n	8008828 <_printf_float+0xf0>
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d1c0      	bne.n	8008828 <_printf_float+0xf0>
 80088a6:	2301      	movs	r3, #1
 80088a8:	e7bd      	b.n	8008826 <_printf_float+0xee>
 80088aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80088ae:	d9db      	bls.n	8008868 <_printf_float+0x130>
 80088b0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80088b4:	d118      	bne.n	80088e8 <_printf_float+0x1b0>
 80088b6:	2900      	cmp	r1, #0
 80088b8:	6863      	ldr	r3, [r4, #4]
 80088ba:	dd0b      	ble.n	80088d4 <_printf_float+0x19c>
 80088bc:	6121      	str	r1, [r4, #16]
 80088be:	b913      	cbnz	r3, 80088c6 <_printf_float+0x18e>
 80088c0:	6822      	ldr	r2, [r4, #0]
 80088c2:	07d0      	lsls	r0, r2, #31
 80088c4:	d502      	bpl.n	80088cc <_printf_float+0x194>
 80088c6:	3301      	adds	r3, #1
 80088c8:	440b      	add	r3, r1
 80088ca:	6123      	str	r3, [r4, #16]
 80088cc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80088ce:	f04f 0900 	mov.w	r9, #0
 80088d2:	e7db      	b.n	800888c <_printf_float+0x154>
 80088d4:	b913      	cbnz	r3, 80088dc <_printf_float+0x1a4>
 80088d6:	6822      	ldr	r2, [r4, #0]
 80088d8:	07d2      	lsls	r2, r2, #31
 80088da:	d501      	bpl.n	80088e0 <_printf_float+0x1a8>
 80088dc:	3302      	adds	r3, #2
 80088de:	e7f4      	b.n	80088ca <_printf_float+0x192>
 80088e0:	2301      	movs	r3, #1
 80088e2:	e7f2      	b.n	80088ca <_printf_float+0x192>
 80088e4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80088e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088ea:	4299      	cmp	r1, r3
 80088ec:	db05      	blt.n	80088fa <_printf_float+0x1c2>
 80088ee:	6823      	ldr	r3, [r4, #0]
 80088f0:	6121      	str	r1, [r4, #16]
 80088f2:	07d8      	lsls	r0, r3, #31
 80088f4:	d5ea      	bpl.n	80088cc <_printf_float+0x194>
 80088f6:	1c4b      	adds	r3, r1, #1
 80088f8:	e7e7      	b.n	80088ca <_printf_float+0x192>
 80088fa:	2900      	cmp	r1, #0
 80088fc:	bfd4      	ite	le
 80088fe:	f1c1 0202 	rsble	r2, r1, #2
 8008902:	2201      	movgt	r2, #1
 8008904:	4413      	add	r3, r2
 8008906:	e7e0      	b.n	80088ca <_printf_float+0x192>
 8008908:	6823      	ldr	r3, [r4, #0]
 800890a:	055a      	lsls	r2, r3, #21
 800890c:	d407      	bmi.n	800891e <_printf_float+0x1e6>
 800890e:	6923      	ldr	r3, [r4, #16]
 8008910:	4642      	mov	r2, r8
 8008912:	4631      	mov	r1, r6
 8008914:	4628      	mov	r0, r5
 8008916:	47b8      	blx	r7
 8008918:	3001      	adds	r0, #1
 800891a:	d12b      	bne.n	8008974 <_printf_float+0x23c>
 800891c:	e767      	b.n	80087ee <_printf_float+0xb6>
 800891e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008922:	f240 80dd 	bls.w	8008ae0 <_printf_float+0x3a8>
 8008926:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800892a:	2200      	movs	r2, #0
 800892c:	2300      	movs	r3, #0
 800892e:	f7f8 f8d3 	bl	8000ad8 <__aeabi_dcmpeq>
 8008932:	2800      	cmp	r0, #0
 8008934:	d033      	beq.n	800899e <_printf_float+0x266>
 8008936:	4a37      	ldr	r2, [pc, #220]	@ (8008a14 <_printf_float+0x2dc>)
 8008938:	2301      	movs	r3, #1
 800893a:	4631      	mov	r1, r6
 800893c:	4628      	mov	r0, r5
 800893e:	47b8      	blx	r7
 8008940:	3001      	adds	r0, #1
 8008942:	f43f af54 	beq.w	80087ee <_printf_float+0xb6>
 8008946:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800894a:	4543      	cmp	r3, r8
 800894c:	db02      	blt.n	8008954 <_printf_float+0x21c>
 800894e:	6823      	ldr	r3, [r4, #0]
 8008950:	07d8      	lsls	r0, r3, #31
 8008952:	d50f      	bpl.n	8008974 <_printf_float+0x23c>
 8008954:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008958:	4631      	mov	r1, r6
 800895a:	4628      	mov	r0, r5
 800895c:	47b8      	blx	r7
 800895e:	3001      	adds	r0, #1
 8008960:	f43f af45 	beq.w	80087ee <_printf_float+0xb6>
 8008964:	f04f 0900 	mov.w	r9, #0
 8008968:	f108 38ff 	add.w	r8, r8, #4294967295
 800896c:	f104 0a1a 	add.w	sl, r4, #26
 8008970:	45c8      	cmp	r8, r9
 8008972:	dc09      	bgt.n	8008988 <_printf_float+0x250>
 8008974:	6823      	ldr	r3, [r4, #0]
 8008976:	079b      	lsls	r3, r3, #30
 8008978:	f100 8103 	bmi.w	8008b82 <_printf_float+0x44a>
 800897c:	68e0      	ldr	r0, [r4, #12]
 800897e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008980:	4298      	cmp	r0, r3
 8008982:	bfb8      	it	lt
 8008984:	4618      	movlt	r0, r3
 8008986:	e734      	b.n	80087f2 <_printf_float+0xba>
 8008988:	2301      	movs	r3, #1
 800898a:	4652      	mov	r2, sl
 800898c:	4631      	mov	r1, r6
 800898e:	4628      	mov	r0, r5
 8008990:	47b8      	blx	r7
 8008992:	3001      	adds	r0, #1
 8008994:	f43f af2b 	beq.w	80087ee <_printf_float+0xb6>
 8008998:	f109 0901 	add.w	r9, r9, #1
 800899c:	e7e8      	b.n	8008970 <_printf_float+0x238>
 800899e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	dc39      	bgt.n	8008a18 <_printf_float+0x2e0>
 80089a4:	4a1b      	ldr	r2, [pc, #108]	@ (8008a14 <_printf_float+0x2dc>)
 80089a6:	2301      	movs	r3, #1
 80089a8:	4631      	mov	r1, r6
 80089aa:	4628      	mov	r0, r5
 80089ac:	47b8      	blx	r7
 80089ae:	3001      	adds	r0, #1
 80089b0:	f43f af1d 	beq.w	80087ee <_printf_float+0xb6>
 80089b4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80089b8:	ea59 0303 	orrs.w	r3, r9, r3
 80089bc:	d102      	bne.n	80089c4 <_printf_float+0x28c>
 80089be:	6823      	ldr	r3, [r4, #0]
 80089c0:	07d9      	lsls	r1, r3, #31
 80089c2:	d5d7      	bpl.n	8008974 <_printf_float+0x23c>
 80089c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089c8:	4631      	mov	r1, r6
 80089ca:	4628      	mov	r0, r5
 80089cc:	47b8      	blx	r7
 80089ce:	3001      	adds	r0, #1
 80089d0:	f43f af0d 	beq.w	80087ee <_printf_float+0xb6>
 80089d4:	f04f 0a00 	mov.w	sl, #0
 80089d8:	f104 0b1a 	add.w	fp, r4, #26
 80089dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089de:	425b      	negs	r3, r3
 80089e0:	4553      	cmp	r3, sl
 80089e2:	dc01      	bgt.n	80089e8 <_printf_float+0x2b0>
 80089e4:	464b      	mov	r3, r9
 80089e6:	e793      	b.n	8008910 <_printf_float+0x1d8>
 80089e8:	2301      	movs	r3, #1
 80089ea:	465a      	mov	r2, fp
 80089ec:	4631      	mov	r1, r6
 80089ee:	4628      	mov	r0, r5
 80089f0:	47b8      	blx	r7
 80089f2:	3001      	adds	r0, #1
 80089f4:	f43f aefb 	beq.w	80087ee <_printf_float+0xb6>
 80089f8:	f10a 0a01 	add.w	sl, sl, #1
 80089fc:	e7ee      	b.n	80089dc <_printf_float+0x2a4>
 80089fe:	bf00      	nop
 8008a00:	7fefffff 	.word	0x7fefffff
 8008a04:	0800b3a8 	.word	0x0800b3a8
 8008a08:	0800b3ac 	.word	0x0800b3ac
 8008a0c:	0800b3b0 	.word	0x0800b3b0
 8008a10:	0800b3b4 	.word	0x0800b3b4
 8008a14:	0800b3b8 	.word	0x0800b3b8
 8008a18:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008a1a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008a1e:	4553      	cmp	r3, sl
 8008a20:	bfa8      	it	ge
 8008a22:	4653      	movge	r3, sl
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	4699      	mov	r9, r3
 8008a28:	dc36      	bgt.n	8008a98 <_printf_float+0x360>
 8008a2a:	f04f 0b00 	mov.w	fp, #0
 8008a2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a32:	f104 021a 	add.w	r2, r4, #26
 8008a36:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008a38:	9306      	str	r3, [sp, #24]
 8008a3a:	eba3 0309 	sub.w	r3, r3, r9
 8008a3e:	455b      	cmp	r3, fp
 8008a40:	dc31      	bgt.n	8008aa6 <_printf_float+0x36e>
 8008a42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a44:	459a      	cmp	sl, r3
 8008a46:	dc3a      	bgt.n	8008abe <_printf_float+0x386>
 8008a48:	6823      	ldr	r3, [r4, #0]
 8008a4a:	07da      	lsls	r2, r3, #31
 8008a4c:	d437      	bmi.n	8008abe <_printf_float+0x386>
 8008a4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a50:	ebaa 0903 	sub.w	r9, sl, r3
 8008a54:	9b06      	ldr	r3, [sp, #24]
 8008a56:	ebaa 0303 	sub.w	r3, sl, r3
 8008a5a:	4599      	cmp	r9, r3
 8008a5c:	bfa8      	it	ge
 8008a5e:	4699      	movge	r9, r3
 8008a60:	f1b9 0f00 	cmp.w	r9, #0
 8008a64:	dc33      	bgt.n	8008ace <_printf_float+0x396>
 8008a66:	f04f 0800 	mov.w	r8, #0
 8008a6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a6e:	f104 0b1a 	add.w	fp, r4, #26
 8008a72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a74:	ebaa 0303 	sub.w	r3, sl, r3
 8008a78:	eba3 0309 	sub.w	r3, r3, r9
 8008a7c:	4543      	cmp	r3, r8
 8008a7e:	f77f af79 	ble.w	8008974 <_printf_float+0x23c>
 8008a82:	2301      	movs	r3, #1
 8008a84:	465a      	mov	r2, fp
 8008a86:	4631      	mov	r1, r6
 8008a88:	4628      	mov	r0, r5
 8008a8a:	47b8      	blx	r7
 8008a8c:	3001      	adds	r0, #1
 8008a8e:	f43f aeae 	beq.w	80087ee <_printf_float+0xb6>
 8008a92:	f108 0801 	add.w	r8, r8, #1
 8008a96:	e7ec      	b.n	8008a72 <_printf_float+0x33a>
 8008a98:	4642      	mov	r2, r8
 8008a9a:	4631      	mov	r1, r6
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	47b8      	blx	r7
 8008aa0:	3001      	adds	r0, #1
 8008aa2:	d1c2      	bne.n	8008a2a <_printf_float+0x2f2>
 8008aa4:	e6a3      	b.n	80087ee <_printf_float+0xb6>
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	4631      	mov	r1, r6
 8008aaa:	4628      	mov	r0, r5
 8008aac:	9206      	str	r2, [sp, #24]
 8008aae:	47b8      	blx	r7
 8008ab0:	3001      	adds	r0, #1
 8008ab2:	f43f ae9c 	beq.w	80087ee <_printf_float+0xb6>
 8008ab6:	9a06      	ldr	r2, [sp, #24]
 8008ab8:	f10b 0b01 	add.w	fp, fp, #1
 8008abc:	e7bb      	b.n	8008a36 <_printf_float+0x2fe>
 8008abe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ac2:	4631      	mov	r1, r6
 8008ac4:	4628      	mov	r0, r5
 8008ac6:	47b8      	blx	r7
 8008ac8:	3001      	adds	r0, #1
 8008aca:	d1c0      	bne.n	8008a4e <_printf_float+0x316>
 8008acc:	e68f      	b.n	80087ee <_printf_float+0xb6>
 8008ace:	9a06      	ldr	r2, [sp, #24]
 8008ad0:	464b      	mov	r3, r9
 8008ad2:	4442      	add	r2, r8
 8008ad4:	4631      	mov	r1, r6
 8008ad6:	4628      	mov	r0, r5
 8008ad8:	47b8      	blx	r7
 8008ada:	3001      	adds	r0, #1
 8008adc:	d1c3      	bne.n	8008a66 <_printf_float+0x32e>
 8008ade:	e686      	b.n	80087ee <_printf_float+0xb6>
 8008ae0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008ae4:	f1ba 0f01 	cmp.w	sl, #1
 8008ae8:	dc01      	bgt.n	8008aee <_printf_float+0x3b6>
 8008aea:	07db      	lsls	r3, r3, #31
 8008aec:	d536      	bpl.n	8008b5c <_printf_float+0x424>
 8008aee:	2301      	movs	r3, #1
 8008af0:	4642      	mov	r2, r8
 8008af2:	4631      	mov	r1, r6
 8008af4:	4628      	mov	r0, r5
 8008af6:	47b8      	blx	r7
 8008af8:	3001      	adds	r0, #1
 8008afa:	f43f ae78 	beq.w	80087ee <_printf_float+0xb6>
 8008afe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b02:	4631      	mov	r1, r6
 8008b04:	4628      	mov	r0, r5
 8008b06:	47b8      	blx	r7
 8008b08:	3001      	adds	r0, #1
 8008b0a:	f43f ae70 	beq.w	80087ee <_printf_float+0xb6>
 8008b0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008b12:	2200      	movs	r2, #0
 8008b14:	2300      	movs	r3, #0
 8008b16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b1a:	f7f7 ffdd 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b1e:	b9c0      	cbnz	r0, 8008b52 <_printf_float+0x41a>
 8008b20:	4653      	mov	r3, sl
 8008b22:	f108 0201 	add.w	r2, r8, #1
 8008b26:	4631      	mov	r1, r6
 8008b28:	4628      	mov	r0, r5
 8008b2a:	47b8      	blx	r7
 8008b2c:	3001      	adds	r0, #1
 8008b2e:	d10c      	bne.n	8008b4a <_printf_float+0x412>
 8008b30:	e65d      	b.n	80087ee <_printf_float+0xb6>
 8008b32:	2301      	movs	r3, #1
 8008b34:	465a      	mov	r2, fp
 8008b36:	4631      	mov	r1, r6
 8008b38:	4628      	mov	r0, r5
 8008b3a:	47b8      	blx	r7
 8008b3c:	3001      	adds	r0, #1
 8008b3e:	f43f ae56 	beq.w	80087ee <_printf_float+0xb6>
 8008b42:	f108 0801 	add.w	r8, r8, #1
 8008b46:	45d0      	cmp	r8, sl
 8008b48:	dbf3      	blt.n	8008b32 <_printf_float+0x3fa>
 8008b4a:	464b      	mov	r3, r9
 8008b4c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008b50:	e6df      	b.n	8008912 <_printf_float+0x1da>
 8008b52:	f04f 0800 	mov.w	r8, #0
 8008b56:	f104 0b1a 	add.w	fp, r4, #26
 8008b5a:	e7f4      	b.n	8008b46 <_printf_float+0x40e>
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	4642      	mov	r2, r8
 8008b60:	e7e1      	b.n	8008b26 <_printf_float+0x3ee>
 8008b62:	2301      	movs	r3, #1
 8008b64:	464a      	mov	r2, r9
 8008b66:	4631      	mov	r1, r6
 8008b68:	4628      	mov	r0, r5
 8008b6a:	47b8      	blx	r7
 8008b6c:	3001      	adds	r0, #1
 8008b6e:	f43f ae3e 	beq.w	80087ee <_printf_float+0xb6>
 8008b72:	f108 0801 	add.w	r8, r8, #1
 8008b76:	68e3      	ldr	r3, [r4, #12]
 8008b78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008b7a:	1a5b      	subs	r3, r3, r1
 8008b7c:	4543      	cmp	r3, r8
 8008b7e:	dcf0      	bgt.n	8008b62 <_printf_float+0x42a>
 8008b80:	e6fc      	b.n	800897c <_printf_float+0x244>
 8008b82:	f04f 0800 	mov.w	r8, #0
 8008b86:	f104 0919 	add.w	r9, r4, #25
 8008b8a:	e7f4      	b.n	8008b76 <_printf_float+0x43e>

08008b8c <_printf_common>:
 8008b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b90:	4616      	mov	r6, r2
 8008b92:	4698      	mov	r8, r3
 8008b94:	688a      	ldr	r2, [r1, #8]
 8008b96:	690b      	ldr	r3, [r1, #16]
 8008b98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	bfb8      	it	lt
 8008ba0:	4613      	movlt	r3, r2
 8008ba2:	6033      	str	r3, [r6, #0]
 8008ba4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008ba8:	4607      	mov	r7, r0
 8008baa:	460c      	mov	r4, r1
 8008bac:	b10a      	cbz	r2, 8008bb2 <_printf_common+0x26>
 8008bae:	3301      	adds	r3, #1
 8008bb0:	6033      	str	r3, [r6, #0]
 8008bb2:	6823      	ldr	r3, [r4, #0]
 8008bb4:	0699      	lsls	r1, r3, #26
 8008bb6:	bf42      	ittt	mi
 8008bb8:	6833      	ldrmi	r3, [r6, #0]
 8008bba:	3302      	addmi	r3, #2
 8008bbc:	6033      	strmi	r3, [r6, #0]
 8008bbe:	6825      	ldr	r5, [r4, #0]
 8008bc0:	f015 0506 	ands.w	r5, r5, #6
 8008bc4:	d106      	bne.n	8008bd4 <_printf_common+0x48>
 8008bc6:	f104 0a19 	add.w	sl, r4, #25
 8008bca:	68e3      	ldr	r3, [r4, #12]
 8008bcc:	6832      	ldr	r2, [r6, #0]
 8008bce:	1a9b      	subs	r3, r3, r2
 8008bd0:	42ab      	cmp	r3, r5
 8008bd2:	dc26      	bgt.n	8008c22 <_printf_common+0x96>
 8008bd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008bd8:	6822      	ldr	r2, [r4, #0]
 8008bda:	3b00      	subs	r3, #0
 8008bdc:	bf18      	it	ne
 8008bde:	2301      	movne	r3, #1
 8008be0:	0692      	lsls	r2, r2, #26
 8008be2:	d42b      	bmi.n	8008c3c <_printf_common+0xb0>
 8008be4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008be8:	4641      	mov	r1, r8
 8008bea:	4638      	mov	r0, r7
 8008bec:	47c8      	blx	r9
 8008bee:	3001      	adds	r0, #1
 8008bf0:	d01e      	beq.n	8008c30 <_printf_common+0xa4>
 8008bf2:	6823      	ldr	r3, [r4, #0]
 8008bf4:	6922      	ldr	r2, [r4, #16]
 8008bf6:	f003 0306 	and.w	r3, r3, #6
 8008bfa:	2b04      	cmp	r3, #4
 8008bfc:	bf02      	ittt	eq
 8008bfe:	68e5      	ldreq	r5, [r4, #12]
 8008c00:	6833      	ldreq	r3, [r6, #0]
 8008c02:	1aed      	subeq	r5, r5, r3
 8008c04:	68a3      	ldr	r3, [r4, #8]
 8008c06:	bf0c      	ite	eq
 8008c08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c0c:	2500      	movne	r5, #0
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	bfc4      	itt	gt
 8008c12:	1a9b      	subgt	r3, r3, r2
 8008c14:	18ed      	addgt	r5, r5, r3
 8008c16:	2600      	movs	r6, #0
 8008c18:	341a      	adds	r4, #26
 8008c1a:	42b5      	cmp	r5, r6
 8008c1c:	d11a      	bne.n	8008c54 <_printf_common+0xc8>
 8008c1e:	2000      	movs	r0, #0
 8008c20:	e008      	b.n	8008c34 <_printf_common+0xa8>
 8008c22:	2301      	movs	r3, #1
 8008c24:	4652      	mov	r2, sl
 8008c26:	4641      	mov	r1, r8
 8008c28:	4638      	mov	r0, r7
 8008c2a:	47c8      	blx	r9
 8008c2c:	3001      	adds	r0, #1
 8008c2e:	d103      	bne.n	8008c38 <_printf_common+0xac>
 8008c30:	f04f 30ff 	mov.w	r0, #4294967295
 8008c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c38:	3501      	adds	r5, #1
 8008c3a:	e7c6      	b.n	8008bca <_printf_common+0x3e>
 8008c3c:	18e1      	adds	r1, r4, r3
 8008c3e:	1c5a      	adds	r2, r3, #1
 8008c40:	2030      	movs	r0, #48	@ 0x30
 8008c42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008c46:	4422      	add	r2, r4
 8008c48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008c4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008c50:	3302      	adds	r3, #2
 8008c52:	e7c7      	b.n	8008be4 <_printf_common+0x58>
 8008c54:	2301      	movs	r3, #1
 8008c56:	4622      	mov	r2, r4
 8008c58:	4641      	mov	r1, r8
 8008c5a:	4638      	mov	r0, r7
 8008c5c:	47c8      	blx	r9
 8008c5e:	3001      	adds	r0, #1
 8008c60:	d0e6      	beq.n	8008c30 <_printf_common+0xa4>
 8008c62:	3601      	adds	r6, #1
 8008c64:	e7d9      	b.n	8008c1a <_printf_common+0x8e>
	...

08008c68 <_printf_i>:
 8008c68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c6c:	7e0f      	ldrb	r7, [r1, #24]
 8008c6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008c70:	2f78      	cmp	r7, #120	@ 0x78
 8008c72:	4691      	mov	r9, r2
 8008c74:	4680      	mov	r8, r0
 8008c76:	460c      	mov	r4, r1
 8008c78:	469a      	mov	sl, r3
 8008c7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008c7e:	d807      	bhi.n	8008c90 <_printf_i+0x28>
 8008c80:	2f62      	cmp	r7, #98	@ 0x62
 8008c82:	d80a      	bhi.n	8008c9a <_printf_i+0x32>
 8008c84:	2f00      	cmp	r7, #0
 8008c86:	f000 80d2 	beq.w	8008e2e <_printf_i+0x1c6>
 8008c8a:	2f58      	cmp	r7, #88	@ 0x58
 8008c8c:	f000 80b9 	beq.w	8008e02 <_printf_i+0x19a>
 8008c90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008c98:	e03a      	b.n	8008d10 <_printf_i+0xa8>
 8008c9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008c9e:	2b15      	cmp	r3, #21
 8008ca0:	d8f6      	bhi.n	8008c90 <_printf_i+0x28>
 8008ca2:	a101      	add	r1, pc, #4	@ (adr r1, 8008ca8 <_printf_i+0x40>)
 8008ca4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ca8:	08008d01 	.word	0x08008d01
 8008cac:	08008d15 	.word	0x08008d15
 8008cb0:	08008c91 	.word	0x08008c91
 8008cb4:	08008c91 	.word	0x08008c91
 8008cb8:	08008c91 	.word	0x08008c91
 8008cbc:	08008c91 	.word	0x08008c91
 8008cc0:	08008d15 	.word	0x08008d15
 8008cc4:	08008c91 	.word	0x08008c91
 8008cc8:	08008c91 	.word	0x08008c91
 8008ccc:	08008c91 	.word	0x08008c91
 8008cd0:	08008c91 	.word	0x08008c91
 8008cd4:	08008e15 	.word	0x08008e15
 8008cd8:	08008d3f 	.word	0x08008d3f
 8008cdc:	08008dcf 	.word	0x08008dcf
 8008ce0:	08008c91 	.word	0x08008c91
 8008ce4:	08008c91 	.word	0x08008c91
 8008ce8:	08008e37 	.word	0x08008e37
 8008cec:	08008c91 	.word	0x08008c91
 8008cf0:	08008d3f 	.word	0x08008d3f
 8008cf4:	08008c91 	.word	0x08008c91
 8008cf8:	08008c91 	.word	0x08008c91
 8008cfc:	08008dd7 	.word	0x08008dd7
 8008d00:	6833      	ldr	r3, [r6, #0]
 8008d02:	1d1a      	adds	r2, r3, #4
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	6032      	str	r2, [r6, #0]
 8008d08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008d10:	2301      	movs	r3, #1
 8008d12:	e09d      	b.n	8008e50 <_printf_i+0x1e8>
 8008d14:	6833      	ldr	r3, [r6, #0]
 8008d16:	6820      	ldr	r0, [r4, #0]
 8008d18:	1d19      	adds	r1, r3, #4
 8008d1a:	6031      	str	r1, [r6, #0]
 8008d1c:	0606      	lsls	r6, r0, #24
 8008d1e:	d501      	bpl.n	8008d24 <_printf_i+0xbc>
 8008d20:	681d      	ldr	r5, [r3, #0]
 8008d22:	e003      	b.n	8008d2c <_printf_i+0xc4>
 8008d24:	0645      	lsls	r5, r0, #25
 8008d26:	d5fb      	bpl.n	8008d20 <_printf_i+0xb8>
 8008d28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008d2c:	2d00      	cmp	r5, #0
 8008d2e:	da03      	bge.n	8008d38 <_printf_i+0xd0>
 8008d30:	232d      	movs	r3, #45	@ 0x2d
 8008d32:	426d      	negs	r5, r5
 8008d34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d38:	4859      	ldr	r0, [pc, #356]	@ (8008ea0 <_printf_i+0x238>)
 8008d3a:	230a      	movs	r3, #10
 8008d3c:	e011      	b.n	8008d62 <_printf_i+0xfa>
 8008d3e:	6821      	ldr	r1, [r4, #0]
 8008d40:	6833      	ldr	r3, [r6, #0]
 8008d42:	0608      	lsls	r0, r1, #24
 8008d44:	f853 5b04 	ldr.w	r5, [r3], #4
 8008d48:	d402      	bmi.n	8008d50 <_printf_i+0xe8>
 8008d4a:	0649      	lsls	r1, r1, #25
 8008d4c:	bf48      	it	mi
 8008d4e:	b2ad      	uxthmi	r5, r5
 8008d50:	2f6f      	cmp	r7, #111	@ 0x6f
 8008d52:	4853      	ldr	r0, [pc, #332]	@ (8008ea0 <_printf_i+0x238>)
 8008d54:	6033      	str	r3, [r6, #0]
 8008d56:	bf14      	ite	ne
 8008d58:	230a      	movne	r3, #10
 8008d5a:	2308      	moveq	r3, #8
 8008d5c:	2100      	movs	r1, #0
 8008d5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008d62:	6866      	ldr	r6, [r4, #4]
 8008d64:	60a6      	str	r6, [r4, #8]
 8008d66:	2e00      	cmp	r6, #0
 8008d68:	bfa2      	ittt	ge
 8008d6a:	6821      	ldrge	r1, [r4, #0]
 8008d6c:	f021 0104 	bicge.w	r1, r1, #4
 8008d70:	6021      	strge	r1, [r4, #0]
 8008d72:	b90d      	cbnz	r5, 8008d78 <_printf_i+0x110>
 8008d74:	2e00      	cmp	r6, #0
 8008d76:	d04b      	beq.n	8008e10 <_printf_i+0x1a8>
 8008d78:	4616      	mov	r6, r2
 8008d7a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008d7e:	fb03 5711 	mls	r7, r3, r1, r5
 8008d82:	5dc7      	ldrb	r7, [r0, r7]
 8008d84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008d88:	462f      	mov	r7, r5
 8008d8a:	42bb      	cmp	r3, r7
 8008d8c:	460d      	mov	r5, r1
 8008d8e:	d9f4      	bls.n	8008d7a <_printf_i+0x112>
 8008d90:	2b08      	cmp	r3, #8
 8008d92:	d10b      	bne.n	8008dac <_printf_i+0x144>
 8008d94:	6823      	ldr	r3, [r4, #0]
 8008d96:	07df      	lsls	r7, r3, #31
 8008d98:	d508      	bpl.n	8008dac <_printf_i+0x144>
 8008d9a:	6923      	ldr	r3, [r4, #16]
 8008d9c:	6861      	ldr	r1, [r4, #4]
 8008d9e:	4299      	cmp	r1, r3
 8008da0:	bfde      	ittt	le
 8008da2:	2330      	movle	r3, #48	@ 0x30
 8008da4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008da8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008dac:	1b92      	subs	r2, r2, r6
 8008dae:	6122      	str	r2, [r4, #16]
 8008db0:	f8cd a000 	str.w	sl, [sp]
 8008db4:	464b      	mov	r3, r9
 8008db6:	aa03      	add	r2, sp, #12
 8008db8:	4621      	mov	r1, r4
 8008dba:	4640      	mov	r0, r8
 8008dbc:	f7ff fee6 	bl	8008b8c <_printf_common>
 8008dc0:	3001      	adds	r0, #1
 8008dc2:	d14a      	bne.n	8008e5a <_printf_i+0x1f2>
 8008dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8008dc8:	b004      	add	sp, #16
 8008dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dce:	6823      	ldr	r3, [r4, #0]
 8008dd0:	f043 0320 	orr.w	r3, r3, #32
 8008dd4:	6023      	str	r3, [r4, #0]
 8008dd6:	4833      	ldr	r0, [pc, #204]	@ (8008ea4 <_printf_i+0x23c>)
 8008dd8:	2778      	movs	r7, #120	@ 0x78
 8008dda:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008dde:	6823      	ldr	r3, [r4, #0]
 8008de0:	6831      	ldr	r1, [r6, #0]
 8008de2:	061f      	lsls	r7, r3, #24
 8008de4:	f851 5b04 	ldr.w	r5, [r1], #4
 8008de8:	d402      	bmi.n	8008df0 <_printf_i+0x188>
 8008dea:	065f      	lsls	r7, r3, #25
 8008dec:	bf48      	it	mi
 8008dee:	b2ad      	uxthmi	r5, r5
 8008df0:	6031      	str	r1, [r6, #0]
 8008df2:	07d9      	lsls	r1, r3, #31
 8008df4:	bf44      	itt	mi
 8008df6:	f043 0320 	orrmi.w	r3, r3, #32
 8008dfa:	6023      	strmi	r3, [r4, #0]
 8008dfc:	b11d      	cbz	r5, 8008e06 <_printf_i+0x19e>
 8008dfe:	2310      	movs	r3, #16
 8008e00:	e7ac      	b.n	8008d5c <_printf_i+0xf4>
 8008e02:	4827      	ldr	r0, [pc, #156]	@ (8008ea0 <_printf_i+0x238>)
 8008e04:	e7e9      	b.n	8008dda <_printf_i+0x172>
 8008e06:	6823      	ldr	r3, [r4, #0]
 8008e08:	f023 0320 	bic.w	r3, r3, #32
 8008e0c:	6023      	str	r3, [r4, #0]
 8008e0e:	e7f6      	b.n	8008dfe <_printf_i+0x196>
 8008e10:	4616      	mov	r6, r2
 8008e12:	e7bd      	b.n	8008d90 <_printf_i+0x128>
 8008e14:	6833      	ldr	r3, [r6, #0]
 8008e16:	6825      	ldr	r5, [r4, #0]
 8008e18:	6961      	ldr	r1, [r4, #20]
 8008e1a:	1d18      	adds	r0, r3, #4
 8008e1c:	6030      	str	r0, [r6, #0]
 8008e1e:	062e      	lsls	r6, r5, #24
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	d501      	bpl.n	8008e28 <_printf_i+0x1c0>
 8008e24:	6019      	str	r1, [r3, #0]
 8008e26:	e002      	b.n	8008e2e <_printf_i+0x1c6>
 8008e28:	0668      	lsls	r0, r5, #25
 8008e2a:	d5fb      	bpl.n	8008e24 <_printf_i+0x1bc>
 8008e2c:	8019      	strh	r1, [r3, #0]
 8008e2e:	2300      	movs	r3, #0
 8008e30:	6123      	str	r3, [r4, #16]
 8008e32:	4616      	mov	r6, r2
 8008e34:	e7bc      	b.n	8008db0 <_printf_i+0x148>
 8008e36:	6833      	ldr	r3, [r6, #0]
 8008e38:	1d1a      	adds	r2, r3, #4
 8008e3a:	6032      	str	r2, [r6, #0]
 8008e3c:	681e      	ldr	r6, [r3, #0]
 8008e3e:	6862      	ldr	r2, [r4, #4]
 8008e40:	2100      	movs	r1, #0
 8008e42:	4630      	mov	r0, r6
 8008e44:	f7f7 f9cc 	bl	80001e0 <memchr>
 8008e48:	b108      	cbz	r0, 8008e4e <_printf_i+0x1e6>
 8008e4a:	1b80      	subs	r0, r0, r6
 8008e4c:	6060      	str	r0, [r4, #4]
 8008e4e:	6863      	ldr	r3, [r4, #4]
 8008e50:	6123      	str	r3, [r4, #16]
 8008e52:	2300      	movs	r3, #0
 8008e54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e58:	e7aa      	b.n	8008db0 <_printf_i+0x148>
 8008e5a:	6923      	ldr	r3, [r4, #16]
 8008e5c:	4632      	mov	r2, r6
 8008e5e:	4649      	mov	r1, r9
 8008e60:	4640      	mov	r0, r8
 8008e62:	47d0      	blx	sl
 8008e64:	3001      	adds	r0, #1
 8008e66:	d0ad      	beq.n	8008dc4 <_printf_i+0x15c>
 8008e68:	6823      	ldr	r3, [r4, #0]
 8008e6a:	079b      	lsls	r3, r3, #30
 8008e6c:	d413      	bmi.n	8008e96 <_printf_i+0x22e>
 8008e6e:	68e0      	ldr	r0, [r4, #12]
 8008e70:	9b03      	ldr	r3, [sp, #12]
 8008e72:	4298      	cmp	r0, r3
 8008e74:	bfb8      	it	lt
 8008e76:	4618      	movlt	r0, r3
 8008e78:	e7a6      	b.n	8008dc8 <_printf_i+0x160>
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	4632      	mov	r2, r6
 8008e7e:	4649      	mov	r1, r9
 8008e80:	4640      	mov	r0, r8
 8008e82:	47d0      	blx	sl
 8008e84:	3001      	adds	r0, #1
 8008e86:	d09d      	beq.n	8008dc4 <_printf_i+0x15c>
 8008e88:	3501      	adds	r5, #1
 8008e8a:	68e3      	ldr	r3, [r4, #12]
 8008e8c:	9903      	ldr	r1, [sp, #12]
 8008e8e:	1a5b      	subs	r3, r3, r1
 8008e90:	42ab      	cmp	r3, r5
 8008e92:	dcf2      	bgt.n	8008e7a <_printf_i+0x212>
 8008e94:	e7eb      	b.n	8008e6e <_printf_i+0x206>
 8008e96:	2500      	movs	r5, #0
 8008e98:	f104 0619 	add.w	r6, r4, #25
 8008e9c:	e7f5      	b.n	8008e8a <_printf_i+0x222>
 8008e9e:	bf00      	nop
 8008ea0:	0800b3ba 	.word	0x0800b3ba
 8008ea4:	0800b3cb 	.word	0x0800b3cb

08008ea8 <std>:
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	b510      	push	{r4, lr}
 8008eac:	4604      	mov	r4, r0
 8008eae:	e9c0 3300 	strd	r3, r3, [r0]
 8008eb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008eb6:	6083      	str	r3, [r0, #8]
 8008eb8:	8181      	strh	r1, [r0, #12]
 8008eba:	6643      	str	r3, [r0, #100]	@ 0x64
 8008ebc:	81c2      	strh	r2, [r0, #14]
 8008ebe:	6183      	str	r3, [r0, #24]
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	2208      	movs	r2, #8
 8008ec4:	305c      	adds	r0, #92	@ 0x5c
 8008ec6:	f000 f914 	bl	80090f2 <memset>
 8008eca:	4b0d      	ldr	r3, [pc, #52]	@ (8008f00 <std+0x58>)
 8008ecc:	6263      	str	r3, [r4, #36]	@ 0x24
 8008ece:	4b0d      	ldr	r3, [pc, #52]	@ (8008f04 <std+0x5c>)
 8008ed0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8008f08 <std+0x60>)
 8008ed4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8008f0c <std+0x64>)
 8008ed8:	6323      	str	r3, [r4, #48]	@ 0x30
 8008eda:	4b0d      	ldr	r3, [pc, #52]	@ (8008f10 <std+0x68>)
 8008edc:	6224      	str	r4, [r4, #32]
 8008ede:	429c      	cmp	r4, r3
 8008ee0:	d006      	beq.n	8008ef0 <std+0x48>
 8008ee2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008ee6:	4294      	cmp	r4, r2
 8008ee8:	d002      	beq.n	8008ef0 <std+0x48>
 8008eea:	33d0      	adds	r3, #208	@ 0xd0
 8008eec:	429c      	cmp	r4, r3
 8008eee:	d105      	bne.n	8008efc <std+0x54>
 8008ef0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ef8:	f000 b978 	b.w	80091ec <__retarget_lock_init_recursive>
 8008efc:	bd10      	pop	{r4, pc}
 8008efe:	bf00      	nop
 8008f00:	0800906d 	.word	0x0800906d
 8008f04:	0800908f 	.word	0x0800908f
 8008f08:	080090c7 	.word	0x080090c7
 8008f0c:	080090eb 	.word	0x080090eb
 8008f10:	200004f0 	.word	0x200004f0

08008f14 <stdio_exit_handler>:
 8008f14:	4a02      	ldr	r2, [pc, #8]	@ (8008f20 <stdio_exit_handler+0xc>)
 8008f16:	4903      	ldr	r1, [pc, #12]	@ (8008f24 <stdio_exit_handler+0x10>)
 8008f18:	4803      	ldr	r0, [pc, #12]	@ (8008f28 <stdio_exit_handler+0x14>)
 8008f1a:	f000 b869 	b.w	8008ff0 <_fwalk_sglue>
 8008f1e:	bf00      	nop
 8008f20:	2000000c 	.word	0x2000000c
 8008f24:	0800ab4d 	.word	0x0800ab4d
 8008f28:	2000001c 	.word	0x2000001c

08008f2c <cleanup_stdio>:
 8008f2c:	6841      	ldr	r1, [r0, #4]
 8008f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8008f60 <cleanup_stdio+0x34>)
 8008f30:	4299      	cmp	r1, r3
 8008f32:	b510      	push	{r4, lr}
 8008f34:	4604      	mov	r4, r0
 8008f36:	d001      	beq.n	8008f3c <cleanup_stdio+0x10>
 8008f38:	f001 fe08 	bl	800ab4c <_fflush_r>
 8008f3c:	68a1      	ldr	r1, [r4, #8]
 8008f3e:	4b09      	ldr	r3, [pc, #36]	@ (8008f64 <cleanup_stdio+0x38>)
 8008f40:	4299      	cmp	r1, r3
 8008f42:	d002      	beq.n	8008f4a <cleanup_stdio+0x1e>
 8008f44:	4620      	mov	r0, r4
 8008f46:	f001 fe01 	bl	800ab4c <_fflush_r>
 8008f4a:	68e1      	ldr	r1, [r4, #12]
 8008f4c:	4b06      	ldr	r3, [pc, #24]	@ (8008f68 <cleanup_stdio+0x3c>)
 8008f4e:	4299      	cmp	r1, r3
 8008f50:	d004      	beq.n	8008f5c <cleanup_stdio+0x30>
 8008f52:	4620      	mov	r0, r4
 8008f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f58:	f001 bdf8 	b.w	800ab4c <_fflush_r>
 8008f5c:	bd10      	pop	{r4, pc}
 8008f5e:	bf00      	nop
 8008f60:	200004f0 	.word	0x200004f0
 8008f64:	20000558 	.word	0x20000558
 8008f68:	200005c0 	.word	0x200005c0

08008f6c <global_stdio_init.part.0>:
 8008f6c:	b510      	push	{r4, lr}
 8008f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8008f9c <global_stdio_init.part.0+0x30>)
 8008f70:	4c0b      	ldr	r4, [pc, #44]	@ (8008fa0 <global_stdio_init.part.0+0x34>)
 8008f72:	4a0c      	ldr	r2, [pc, #48]	@ (8008fa4 <global_stdio_init.part.0+0x38>)
 8008f74:	601a      	str	r2, [r3, #0]
 8008f76:	4620      	mov	r0, r4
 8008f78:	2200      	movs	r2, #0
 8008f7a:	2104      	movs	r1, #4
 8008f7c:	f7ff ff94 	bl	8008ea8 <std>
 8008f80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008f84:	2201      	movs	r2, #1
 8008f86:	2109      	movs	r1, #9
 8008f88:	f7ff ff8e 	bl	8008ea8 <std>
 8008f8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008f90:	2202      	movs	r2, #2
 8008f92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f96:	2112      	movs	r1, #18
 8008f98:	f7ff bf86 	b.w	8008ea8 <std>
 8008f9c:	20000628 	.word	0x20000628
 8008fa0:	200004f0 	.word	0x200004f0
 8008fa4:	08008f15 	.word	0x08008f15

08008fa8 <__sfp_lock_acquire>:
 8008fa8:	4801      	ldr	r0, [pc, #4]	@ (8008fb0 <__sfp_lock_acquire+0x8>)
 8008faa:	f000 b920 	b.w	80091ee <__retarget_lock_acquire_recursive>
 8008fae:	bf00      	nop
 8008fb0:	20000631 	.word	0x20000631

08008fb4 <__sfp_lock_release>:
 8008fb4:	4801      	ldr	r0, [pc, #4]	@ (8008fbc <__sfp_lock_release+0x8>)
 8008fb6:	f000 b91b 	b.w	80091f0 <__retarget_lock_release_recursive>
 8008fba:	bf00      	nop
 8008fbc:	20000631 	.word	0x20000631

08008fc0 <__sinit>:
 8008fc0:	b510      	push	{r4, lr}
 8008fc2:	4604      	mov	r4, r0
 8008fc4:	f7ff fff0 	bl	8008fa8 <__sfp_lock_acquire>
 8008fc8:	6a23      	ldr	r3, [r4, #32]
 8008fca:	b11b      	cbz	r3, 8008fd4 <__sinit+0x14>
 8008fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fd0:	f7ff bff0 	b.w	8008fb4 <__sfp_lock_release>
 8008fd4:	4b04      	ldr	r3, [pc, #16]	@ (8008fe8 <__sinit+0x28>)
 8008fd6:	6223      	str	r3, [r4, #32]
 8008fd8:	4b04      	ldr	r3, [pc, #16]	@ (8008fec <__sinit+0x2c>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d1f5      	bne.n	8008fcc <__sinit+0xc>
 8008fe0:	f7ff ffc4 	bl	8008f6c <global_stdio_init.part.0>
 8008fe4:	e7f2      	b.n	8008fcc <__sinit+0xc>
 8008fe6:	bf00      	nop
 8008fe8:	08008f2d 	.word	0x08008f2d
 8008fec:	20000628 	.word	0x20000628

08008ff0 <_fwalk_sglue>:
 8008ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ff4:	4607      	mov	r7, r0
 8008ff6:	4688      	mov	r8, r1
 8008ff8:	4614      	mov	r4, r2
 8008ffa:	2600      	movs	r6, #0
 8008ffc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009000:	f1b9 0901 	subs.w	r9, r9, #1
 8009004:	d505      	bpl.n	8009012 <_fwalk_sglue+0x22>
 8009006:	6824      	ldr	r4, [r4, #0]
 8009008:	2c00      	cmp	r4, #0
 800900a:	d1f7      	bne.n	8008ffc <_fwalk_sglue+0xc>
 800900c:	4630      	mov	r0, r6
 800900e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009012:	89ab      	ldrh	r3, [r5, #12]
 8009014:	2b01      	cmp	r3, #1
 8009016:	d907      	bls.n	8009028 <_fwalk_sglue+0x38>
 8009018:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800901c:	3301      	adds	r3, #1
 800901e:	d003      	beq.n	8009028 <_fwalk_sglue+0x38>
 8009020:	4629      	mov	r1, r5
 8009022:	4638      	mov	r0, r7
 8009024:	47c0      	blx	r8
 8009026:	4306      	orrs	r6, r0
 8009028:	3568      	adds	r5, #104	@ 0x68
 800902a:	e7e9      	b.n	8009000 <_fwalk_sglue+0x10>

0800902c <siprintf>:
 800902c:	b40e      	push	{r1, r2, r3}
 800902e:	b500      	push	{lr}
 8009030:	b09c      	sub	sp, #112	@ 0x70
 8009032:	ab1d      	add	r3, sp, #116	@ 0x74
 8009034:	9002      	str	r0, [sp, #8]
 8009036:	9006      	str	r0, [sp, #24]
 8009038:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800903c:	4809      	ldr	r0, [pc, #36]	@ (8009064 <siprintf+0x38>)
 800903e:	9107      	str	r1, [sp, #28]
 8009040:	9104      	str	r1, [sp, #16]
 8009042:	4909      	ldr	r1, [pc, #36]	@ (8009068 <siprintf+0x3c>)
 8009044:	f853 2b04 	ldr.w	r2, [r3], #4
 8009048:	9105      	str	r1, [sp, #20]
 800904a:	6800      	ldr	r0, [r0, #0]
 800904c:	9301      	str	r3, [sp, #4]
 800904e:	a902      	add	r1, sp, #8
 8009050:	f001 fbfc 	bl	800a84c <_svfiprintf_r>
 8009054:	9b02      	ldr	r3, [sp, #8]
 8009056:	2200      	movs	r2, #0
 8009058:	701a      	strb	r2, [r3, #0]
 800905a:	b01c      	add	sp, #112	@ 0x70
 800905c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009060:	b003      	add	sp, #12
 8009062:	4770      	bx	lr
 8009064:	20000018 	.word	0x20000018
 8009068:	ffff0208 	.word	0xffff0208

0800906c <__sread>:
 800906c:	b510      	push	{r4, lr}
 800906e:	460c      	mov	r4, r1
 8009070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009074:	f000 f86c 	bl	8009150 <_read_r>
 8009078:	2800      	cmp	r0, #0
 800907a:	bfab      	itete	ge
 800907c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800907e:	89a3      	ldrhlt	r3, [r4, #12]
 8009080:	181b      	addge	r3, r3, r0
 8009082:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009086:	bfac      	ite	ge
 8009088:	6563      	strge	r3, [r4, #84]	@ 0x54
 800908a:	81a3      	strhlt	r3, [r4, #12]
 800908c:	bd10      	pop	{r4, pc}

0800908e <__swrite>:
 800908e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009092:	461f      	mov	r7, r3
 8009094:	898b      	ldrh	r3, [r1, #12]
 8009096:	05db      	lsls	r3, r3, #23
 8009098:	4605      	mov	r5, r0
 800909a:	460c      	mov	r4, r1
 800909c:	4616      	mov	r6, r2
 800909e:	d505      	bpl.n	80090ac <__swrite+0x1e>
 80090a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090a4:	2302      	movs	r3, #2
 80090a6:	2200      	movs	r2, #0
 80090a8:	f000 f840 	bl	800912c <_lseek_r>
 80090ac:	89a3      	ldrh	r3, [r4, #12]
 80090ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80090b6:	81a3      	strh	r3, [r4, #12]
 80090b8:	4632      	mov	r2, r6
 80090ba:	463b      	mov	r3, r7
 80090bc:	4628      	mov	r0, r5
 80090be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090c2:	f000 b857 	b.w	8009174 <_write_r>

080090c6 <__sseek>:
 80090c6:	b510      	push	{r4, lr}
 80090c8:	460c      	mov	r4, r1
 80090ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090ce:	f000 f82d 	bl	800912c <_lseek_r>
 80090d2:	1c43      	adds	r3, r0, #1
 80090d4:	89a3      	ldrh	r3, [r4, #12]
 80090d6:	bf15      	itete	ne
 80090d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80090da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80090de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80090e2:	81a3      	strheq	r3, [r4, #12]
 80090e4:	bf18      	it	ne
 80090e6:	81a3      	strhne	r3, [r4, #12]
 80090e8:	bd10      	pop	{r4, pc}

080090ea <__sclose>:
 80090ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090ee:	f000 b80d 	b.w	800910c <_close_r>

080090f2 <memset>:
 80090f2:	4402      	add	r2, r0
 80090f4:	4603      	mov	r3, r0
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d100      	bne.n	80090fc <memset+0xa>
 80090fa:	4770      	bx	lr
 80090fc:	f803 1b01 	strb.w	r1, [r3], #1
 8009100:	e7f9      	b.n	80090f6 <memset+0x4>
	...

08009104 <_localeconv_r>:
 8009104:	4800      	ldr	r0, [pc, #0]	@ (8009108 <_localeconv_r+0x4>)
 8009106:	4770      	bx	lr
 8009108:	20000158 	.word	0x20000158

0800910c <_close_r>:
 800910c:	b538      	push	{r3, r4, r5, lr}
 800910e:	4d06      	ldr	r5, [pc, #24]	@ (8009128 <_close_r+0x1c>)
 8009110:	2300      	movs	r3, #0
 8009112:	4604      	mov	r4, r0
 8009114:	4608      	mov	r0, r1
 8009116:	602b      	str	r3, [r5, #0]
 8009118:	f7f9 fc5e 	bl	80029d8 <_close>
 800911c:	1c43      	adds	r3, r0, #1
 800911e:	d102      	bne.n	8009126 <_close_r+0x1a>
 8009120:	682b      	ldr	r3, [r5, #0]
 8009122:	b103      	cbz	r3, 8009126 <_close_r+0x1a>
 8009124:	6023      	str	r3, [r4, #0]
 8009126:	bd38      	pop	{r3, r4, r5, pc}
 8009128:	2000062c 	.word	0x2000062c

0800912c <_lseek_r>:
 800912c:	b538      	push	{r3, r4, r5, lr}
 800912e:	4d07      	ldr	r5, [pc, #28]	@ (800914c <_lseek_r+0x20>)
 8009130:	4604      	mov	r4, r0
 8009132:	4608      	mov	r0, r1
 8009134:	4611      	mov	r1, r2
 8009136:	2200      	movs	r2, #0
 8009138:	602a      	str	r2, [r5, #0]
 800913a:	461a      	mov	r2, r3
 800913c:	f7f9 fc73 	bl	8002a26 <_lseek>
 8009140:	1c43      	adds	r3, r0, #1
 8009142:	d102      	bne.n	800914a <_lseek_r+0x1e>
 8009144:	682b      	ldr	r3, [r5, #0]
 8009146:	b103      	cbz	r3, 800914a <_lseek_r+0x1e>
 8009148:	6023      	str	r3, [r4, #0]
 800914a:	bd38      	pop	{r3, r4, r5, pc}
 800914c:	2000062c 	.word	0x2000062c

08009150 <_read_r>:
 8009150:	b538      	push	{r3, r4, r5, lr}
 8009152:	4d07      	ldr	r5, [pc, #28]	@ (8009170 <_read_r+0x20>)
 8009154:	4604      	mov	r4, r0
 8009156:	4608      	mov	r0, r1
 8009158:	4611      	mov	r1, r2
 800915a:	2200      	movs	r2, #0
 800915c:	602a      	str	r2, [r5, #0]
 800915e:	461a      	mov	r2, r3
 8009160:	f7f9 fc01 	bl	8002966 <_read>
 8009164:	1c43      	adds	r3, r0, #1
 8009166:	d102      	bne.n	800916e <_read_r+0x1e>
 8009168:	682b      	ldr	r3, [r5, #0]
 800916a:	b103      	cbz	r3, 800916e <_read_r+0x1e>
 800916c:	6023      	str	r3, [r4, #0]
 800916e:	bd38      	pop	{r3, r4, r5, pc}
 8009170:	2000062c 	.word	0x2000062c

08009174 <_write_r>:
 8009174:	b538      	push	{r3, r4, r5, lr}
 8009176:	4d07      	ldr	r5, [pc, #28]	@ (8009194 <_write_r+0x20>)
 8009178:	4604      	mov	r4, r0
 800917a:	4608      	mov	r0, r1
 800917c:	4611      	mov	r1, r2
 800917e:	2200      	movs	r2, #0
 8009180:	602a      	str	r2, [r5, #0]
 8009182:	461a      	mov	r2, r3
 8009184:	f7f9 fc0c 	bl	80029a0 <_write>
 8009188:	1c43      	adds	r3, r0, #1
 800918a:	d102      	bne.n	8009192 <_write_r+0x1e>
 800918c:	682b      	ldr	r3, [r5, #0]
 800918e:	b103      	cbz	r3, 8009192 <_write_r+0x1e>
 8009190:	6023      	str	r3, [r4, #0]
 8009192:	bd38      	pop	{r3, r4, r5, pc}
 8009194:	2000062c 	.word	0x2000062c

08009198 <__errno>:
 8009198:	4b01      	ldr	r3, [pc, #4]	@ (80091a0 <__errno+0x8>)
 800919a:	6818      	ldr	r0, [r3, #0]
 800919c:	4770      	bx	lr
 800919e:	bf00      	nop
 80091a0:	20000018 	.word	0x20000018

080091a4 <__libc_init_array>:
 80091a4:	b570      	push	{r4, r5, r6, lr}
 80091a6:	4d0d      	ldr	r5, [pc, #52]	@ (80091dc <__libc_init_array+0x38>)
 80091a8:	4c0d      	ldr	r4, [pc, #52]	@ (80091e0 <__libc_init_array+0x3c>)
 80091aa:	1b64      	subs	r4, r4, r5
 80091ac:	10a4      	asrs	r4, r4, #2
 80091ae:	2600      	movs	r6, #0
 80091b0:	42a6      	cmp	r6, r4
 80091b2:	d109      	bne.n	80091c8 <__libc_init_array+0x24>
 80091b4:	4d0b      	ldr	r5, [pc, #44]	@ (80091e4 <__libc_init_array+0x40>)
 80091b6:	4c0c      	ldr	r4, [pc, #48]	@ (80091e8 <__libc_init_array+0x44>)
 80091b8:	f002 f866 	bl	800b288 <_init>
 80091bc:	1b64      	subs	r4, r4, r5
 80091be:	10a4      	asrs	r4, r4, #2
 80091c0:	2600      	movs	r6, #0
 80091c2:	42a6      	cmp	r6, r4
 80091c4:	d105      	bne.n	80091d2 <__libc_init_array+0x2e>
 80091c6:	bd70      	pop	{r4, r5, r6, pc}
 80091c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80091cc:	4798      	blx	r3
 80091ce:	3601      	adds	r6, #1
 80091d0:	e7ee      	b.n	80091b0 <__libc_init_array+0xc>
 80091d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80091d6:	4798      	blx	r3
 80091d8:	3601      	adds	r6, #1
 80091da:	e7f2      	b.n	80091c2 <__libc_init_array+0x1e>
 80091dc:	0800b720 	.word	0x0800b720
 80091e0:	0800b720 	.word	0x0800b720
 80091e4:	0800b720 	.word	0x0800b720
 80091e8:	0800b724 	.word	0x0800b724

080091ec <__retarget_lock_init_recursive>:
 80091ec:	4770      	bx	lr

080091ee <__retarget_lock_acquire_recursive>:
 80091ee:	4770      	bx	lr

080091f0 <__retarget_lock_release_recursive>:
 80091f0:	4770      	bx	lr

080091f2 <quorem>:
 80091f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091f6:	6903      	ldr	r3, [r0, #16]
 80091f8:	690c      	ldr	r4, [r1, #16]
 80091fa:	42a3      	cmp	r3, r4
 80091fc:	4607      	mov	r7, r0
 80091fe:	db7e      	blt.n	80092fe <quorem+0x10c>
 8009200:	3c01      	subs	r4, #1
 8009202:	f101 0814 	add.w	r8, r1, #20
 8009206:	00a3      	lsls	r3, r4, #2
 8009208:	f100 0514 	add.w	r5, r0, #20
 800920c:	9300      	str	r3, [sp, #0]
 800920e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009212:	9301      	str	r3, [sp, #4]
 8009214:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009218:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800921c:	3301      	adds	r3, #1
 800921e:	429a      	cmp	r2, r3
 8009220:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009224:	fbb2 f6f3 	udiv	r6, r2, r3
 8009228:	d32e      	bcc.n	8009288 <quorem+0x96>
 800922a:	f04f 0a00 	mov.w	sl, #0
 800922e:	46c4      	mov	ip, r8
 8009230:	46ae      	mov	lr, r5
 8009232:	46d3      	mov	fp, sl
 8009234:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009238:	b298      	uxth	r0, r3
 800923a:	fb06 a000 	mla	r0, r6, r0, sl
 800923e:	0c02      	lsrs	r2, r0, #16
 8009240:	0c1b      	lsrs	r3, r3, #16
 8009242:	fb06 2303 	mla	r3, r6, r3, r2
 8009246:	f8de 2000 	ldr.w	r2, [lr]
 800924a:	b280      	uxth	r0, r0
 800924c:	b292      	uxth	r2, r2
 800924e:	1a12      	subs	r2, r2, r0
 8009250:	445a      	add	r2, fp
 8009252:	f8de 0000 	ldr.w	r0, [lr]
 8009256:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800925a:	b29b      	uxth	r3, r3
 800925c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009260:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009264:	b292      	uxth	r2, r2
 8009266:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800926a:	45e1      	cmp	r9, ip
 800926c:	f84e 2b04 	str.w	r2, [lr], #4
 8009270:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009274:	d2de      	bcs.n	8009234 <quorem+0x42>
 8009276:	9b00      	ldr	r3, [sp, #0]
 8009278:	58eb      	ldr	r3, [r5, r3]
 800927a:	b92b      	cbnz	r3, 8009288 <quorem+0x96>
 800927c:	9b01      	ldr	r3, [sp, #4]
 800927e:	3b04      	subs	r3, #4
 8009280:	429d      	cmp	r5, r3
 8009282:	461a      	mov	r2, r3
 8009284:	d32f      	bcc.n	80092e6 <quorem+0xf4>
 8009286:	613c      	str	r4, [r7, #16]
 8009288:	4638      	mov	r0, r7
 800928a:	f001 f97b 	bl	800a584 <__mcmp>
 800928e:	2800      	cmp	r0, #0
 8009290:	db25      	blt.n	80092de <quorem+0xec>
 8009292:	4629      	mov	r1, r5
 8009294:	2000      	movs	r0, #0
 8009296:	f858 2b04 	ldr.w	r2, [r8], #4
 800929a:	f8d1 c000 	ldr.w	ip, [r1]
 800929e:	fa1f fe82 	uxth.w	lr, r2
 80092a2:	fa1f f38c 	uxth.w	r3, ip
 80092a6:	eba3 030e 	sub.w	r3, r3, lr
 80092aa:	4403      	add	r3, r0
 80092ac:	0c12      	lsrs	r2, r2, #16
 80092ae:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80092b2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092bc:	45c1      	cmp	r9, r8
 80092be:	f841 3b04 	str.w	r3, [r1], #4
 80092c2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80092c6:	d2e6      	bcs.n	8009296 <quorem+0xa4>
 80092c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80092cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80092d0:	b922      	cbnz	r2, 80092dc <quorem+0xea>
 80092d2:	3b04      	subs	r3, #4
 80092d4:	429d      	cmp	r5, r3
 80092d6:	461a      	mov	r2, r3
 80092d8:	d30b      	bcc.n	80092f2 <quorem+0x100>
 80092da:	613c      	str	r4, [r7, #16]
 80092dc:	3601      	adds	r6, #1
 80092de:	4630      	mov	r0, r6
 80092e0:	b003      	add	sp, #12
 80092e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092e6:	6812      	ldr	r2, [r2, #0]
 80092e8:	3b04      	subs	r3, #4
 80092ea:	2a00      	cmp	r2, #0
 80092ec:	d1cb      	bne.n	8009286 <quorem+0x94>
 80092ee:	3c01      	subs	r4, #1
 80092f0:	e7c6      	b.n	8009280 <quorem+0x8e>
 80092f2:	6812      	ldr	r2, [r2, #0]
 80092f4:	3b04      	subs	r3, #4
 80092f6:	2a00      	cmp	r2, #0
 80092f8:	d1ef      	bne.n	80092da <quorem+0xe8>
 80092fa:	3c01      	subs	r4, #1
 80092fc:	e7ea      	b.n	80092d4 <quorem+0xe2>
 80092fe:	2000      	movs	r0, #0
 8009300:	e7ee      	b.n	80092e0 <quorem+0xee>
 8009302:	0000      	movs	r0, r0
 8009304:	0000      	movs	r0, r0
	...

08009308 <_dtoa_r>:
 8009308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800930c:	69c7      	ldr	r7, [r0, #28]
 800930e:	b099      	sub	sp, #100	@ 0x64
 8009310:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009314:	ec55 4b10 	vmov	r4, r5, d0
 8009318:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800931a:	9109      	str	r1, [sp, #36]	@ 0x24
 800931c:	4683      	mov	fp, r0
 800931e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009320:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009322:	b97f      	cbnz	r7, 8009344 <_dtoa_r+0x3c>
 8009324:	2010      	movs	r0, #16
 8009326:	f000 fdfd 	bl	8009f24 <malloc>
 800932a:	4602      	mov	r2, r0
 800932c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009330:	b920      	cbnz	r0, 800933c <_dtoa_r+0x34>
 8009332:	4ba7      	ldr	r3, [pc, #668]	@ (80095d0 <_dtoa_r+0x2c8>)
 8009334:	21ef      	movs	r1, #239	@ 0xef
 8009336:	48a7      	ldr	r0, [pc, #668]	@ (80095d4 <_dtoa_r+0x2cc>)
 8009338:	f001 fc68 	bl	800ac0c <__assert_func>
 800933c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009340:	6007      	str	r7, [r0, #0]
 8009342:	60c7      	str	r7, [r0, #12]
 8009344:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009348:	6819      	ldr	r1, [r3, #0]
 800934a:	b159      	cbz	r1, 8009364 <_dtoa_r+0x5c>
 800934c:	685a      	ldr	r2, [r3, #4]
 800934e:	604a      	str	r2, [r1, #4]
 8009350:	2301      	movs	r3, #1
 8009352:	4093      	lsls	r3, r2
 8009354:	608b      	str	r3, [r1, #8]
 8009356:	4658      	mov	r0, fp
 8009358:	f000 feda 	bl	800a110 <_Bfree>
 800935c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009360:	2200      	movs	r2, #0
 8009362:	601a      	str	r2, [r3, #0]
 8009364:	1e2b      	subs	r3, r5, #0
 8009366:	bfb9      	ittee	lt
 8009368:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800936c:	9303      	strlt	r3, [sp, #12]
 800936e:	2300      	movge	r3, #0
 8009370:	6033      	strge	r3, [r6, #0]
 8009372:	9f03      	ldr	r7, [sp, #12]
 8009374:	4b98      	ldr	r3, [pc, #608]	@ (80095d8 <_dtoa_r+0x2d0>)
 8009376:	bfbc      	itt	lt
 8009378:	2201      	movlt	r2, #1
 800937a:	6032      	strlt	r2, [r6, #0]
 800937c:	43bb      	bics	r3, r7
 800937e:	d112      	bne.n	80093a6 <_dtoa_r+0x9e>
 8009380:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009382:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009386:	6013      	str	r3, [r2, #0]
 8009388:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800938c:	4323      	orrs	r3, r4
 800938e:	f000 854d 	beq.w	8009e2c <_dtoa_r+0xb24>
 8009392:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009394:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80095ec <_dtoa_r+0x2e4>
 8009398:	2b00      	cmp	r3, #0
 800939a:	f000 854f 	beq.w	8009e3c <_dtoa_r+0xb34>
 800939e:	f10a 0303 	add.w	r3, sl, #3
 80093a2:	f000 bd49 	b.w	8009e38 <_dtoa_r+0xb30>
 80093a6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80093aa:	2200      	movs	r2, #0
 80093ac:	ec51 0b17 	vmov	r0, r1, d7
 80093b0:	2300      	movs	r3, #0
 80093b2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80093b6:	f7f7 fb8f 	bl	8000ad8 <__aeabi_dcmpeq>
 80093ba:	4680      	mov	r8, r0
 80093bc:	b158      	cbz	r0, 80093d6 <_dtoa_r+0xce>
 80093be:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80093c0:	2301      	movs	r3, #1
 80093c2:	6013      	str	r3, [r2, #0]
 80093c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80093c6:	b113      	cbz	r3, 80093ce <_dtoa_r+0xc6>
 80093c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80093ca:	4b84      	ldr	r3, [pc, #528]	@ (80095dc <_dtoa_r+0x2d4>)
 80093cc:	6013      	str	r3, [r2, #0]
 80093ce:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80095f0 <_dtoa_r+0x2e8>
 80093d2:	f000 bd33 	b.w	8009e3c <_dtoa_r+0xb34>
 80093d6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80093da:	aa16      	add	r2, sp, #88	@ 0x58
 80093dc:	a917      	add	r1, sp, #92	@ 0x5c
 80093de:	4658      	mov	r0, fp
 80093e0:	f001 f980 	bl	800a6e4 <__d2b>
 80093e4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80093e8:	4681      	mov	r9, r0
 80093ea:	2e00      	cmp	r6, #0
 80093ec:	d077      	beq.n	80094de <_dtoa_r+0x1d6>
 80093ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80093f0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80093f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80093fc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009400:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009404:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009408:	4619      	mov	r1, r3
 800940a:	2200      	movs	r2, #0
 800940c:	4b74      	ldr	r3, [pc, #464]	@ (80095e0 <_dtoa_r+0x2d8>)
 800940e:	f7f6 ff43 	bl	8000298 <__aeabi_dsub>
 8009412:	a369      	add	r3, pc, #420	@ (adr r3, 80095b8 <_dtoa_r+0x2b0>)
 8009414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009418:	f7f7 f8f6 	bl	8000608 <__aeabi_dmul>
 800941c:	a368      	add	r3, pc, #416	@ (adr r3, 80095c0 <_dtoa_r+0x2b8>)
 800941e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009422:	f7f6 ff3b 	bl	800029c <__adddf3>
 8009426:	4604      	mov	r4, r0
 8009428:	4630      	mov	r0, r6
 800942a:	460d      	mov	r5, r1
 800942c:	f7f7 f882 	bl	8000534 <__aeabi_i2d>
 8009430:	a365      	add	r3, pc, #404	@ (adr r3, 80095c8 <_dtoa_r+0x2c0>)
 8009432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009436:	f7f7 f8e7 	bl	8000608 <__aeabi_dmul>
 800943a:	4602      	mov	r2, r0
 800943c:	460b      	mov	r3, r1
 800943e:	4620      	mov	r0, r4
 8009440:	4629      	mov	r1, r5
 8009442:	f7f6 ff2b 	bl	800029c <__adddf3>
 8009446:	4604      	mov	r4, r0
 8009448:	460d      	mov	r5, r1
 800944a:	f7f7 fb8d 	bl	8000b68 <__aeabi_d2iz>
 800944e:	2200      	movs	r2, #0
 8009450:	4607      	mov	r7, r0
 8009452:	2300      	movs	r3, #0
 8009454:	4620      	mov	r0, r4
 8009456:	4629      	mov	r1, r5
 8009458:	f7f7 fb48 	bl	8000aec <__aeabi_dcmplt>
 800945c:	b140      	cbz	r0, 8009470 <_dtoa_r+0x168>
 800945e:	4638      	mov	r0, r7
 8009460:	f7f7 f868 	bl	8000534 <__aeabi_i2d>
 8009464:	4622      	mov	r2, r4
 8009466:	462b      	mov	r3, r5
 8009468:	f7f7 fb36 	bl	8000ad8 <__aeabi_dcmpeq>
 800946c:	b900      	cbnz	r0, 8009470 <_dtoa_r+0x168>
 800946e:	3f01      	subs	r7, #1
 8009470:	2f16      	cmp	r7, #22
 8009472:	d851      	bhi.n	8009518 <_dtoa_r+0x210>
 8009474:	4b5b      	ldr	r3, [pc, #364]	@ (80095e4 <_dtoa_r+0x2dc>)
 8009476:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800947a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800947e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009482:	f7f7 fb33 	bl	8000aec <__aeabi_dcmplt>
 8009486:	2800      	cmp	r0, #0
 8009488:	d048      	beq.n	800951c <_dtoa_r+0x214>
 800948a:	3f01      	subs	r7, #1
 800948c:	2300      	movs	r3, #0
 800948e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009490:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009492:	1b9b      	subs	r3, r3, r6
 8009494:	1e5a      	subs	r2, r3, #1
 8009496:	bf44      	itt	mi
 8009498:	f1c3 0801 	rsbmi	r8, r3, #1
 800949c:	2300      	movmi	r3, #0
 800949e:	9208      	str	r2, [sp, #32]
 80094a0:	bf54      	ite	pl
 80094a2:	f04f 0800 	movpl.w	r8, #0
 80094a6:	9308      	strmi	r3, [sp, #32]
 80094a8:	2f00      	cmp	r7, #0
 80094aa:	db39      	blt.n	8009520 <_dtoa_r+0x218>
 80094ac:	9b08      	ldr	r3, [sp, #32]
 80094ae:	970f      	str	r7, [sp, #60]	@ 0x3c
 80094b0:	443b      	add	r3, r7
 80094b2:	9308      	str	r3, [sp, #32]
 80094b4:	2300      	movs	r3, #0
 80094b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80094b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094ba:	2b09      	cmp	r3, #9
 80094bc:	d864      	bhi.n	8009588 <_dtoa_r+0x280>
 80094be:	2b05      	cmp	r3, #5
 80094c0:	bfc4      	itt	gt
 80094c2:	3b04      	subgt	r3, #4
 80094c4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80094c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094c8:	f1a3 0302 	sub.w	r3, r3, #2
 80094cc:	bfcc      	ite	gt
 80094ce:	2400      	movgt	r4, #0
 80094d0:	2401      	movle	r4, #1
 80094d2:	2b03      	cmp	r3, #3
 80094d4:	d863      	bhi.n	800959e <_dtoa_r+0x296>
 80094d6:	e8df f003 	tbb	[pc, r3]
 80094da:	372a      	.short	0x372a
 80094dc:	5535      	.short	0x5535
 80094de:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80094e2:	441e      	add	r6, r3
 80094e4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80094e8:	2b20      	cmp	r3, #32
 80094ea:	bfc1      	itttt	gt
 80094ec:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80094f0:	409f      	lslgt	r7, r3
 80094f2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80094f6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80094fa:	bfd6      	itet	le
 80094fc:	f1c3 0320 	rsble	r3, r3, #32
 8009500:	ea47 0003 	orrgt.w	r0, r7, r3
 8009504:	fa04 f003 	lslle.w	r0, r4, r3
 8009508:	f7f7 f804 	bl	8000514 <__aeabi_ui2d>
 800950c:	2201      	movs	r2, #1
 800950e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009512:	3e01      	subs	r6, #1
 8009514:	9214      	str	r2, [sp, #80]	@ 0x50
 8009516:	e777      	b.n	8009408 <_dtoa_r+0x100>
 8009518:	2301      	movs	r3, #1
 800951a:	e7b8      	b.n	800948e <_dtoa_r+0x186>
 800951c:	9012      	str	r0, [sp, #72]	@ 0x48
 800951e:	e7b7      	b.n	8009490 <_dtoa_r+0x188>
 8009520:	427b      	negs	r3, r7
 8009522:	930a      	str	r3, [sp, #40]	@ 0x28
 8009524:	2300      	movs	r3, #0
 8009526:	eba8 0807 	sub.w	r8, r8, r7
 800952a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800952c:	e7c4      	b.n	80094b8 <_dtoa_r+0x1b0>
 800952e:	2300      	movs	r3, #0
 8009530:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009532:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009534:	2b00      	cmp	r3, #0
 8009536:	dc35      	bgt.n	80095a4 <_dtoa_r+0x29c>
 8009538:	2301      	movs	r3, #1
 800953a:	9300      	str	r3, [sp, #0]
 800953c:	9307      	str	r3, [sp, #28]
 800953e:	461a      	mov	r2, r3
 8009540:	920e      	str	r2, [sp, #56]	@ 0x38
 8009542:	e00b      	b.n	800955c <_dtoa_r+0x254>
 8009544:	2301      	movs	r3, #1
 8009546:	e7f3      	b.n	8009530 <_dtoa_r+0x228>
 8009548:	2300      	movs	r3, #0
 800954a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800954c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800954e:	18fb      	adds	r3, r7, r3
 8009550:	9300      	str	r3, [sp, #0]
 8009552:	3301      	adds	r3, #1
 8009554:	2b01      	cmp	r3, #1
 8009556:	9307      	str	r3, [sp, #28]
 8009558:	bfb8      	it	lt
 800955a:	2301      	movlt	r3, #1
 800955c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009560:	2100      	movs	r1, #0
 8009562:	2204      	movs	r2, #4
 8009564:	f102 0514 	add.w	r5, r2, #20
 8009568:	429d      	cmp	r5, r3
 800956a:	d91f      	bls.n	80095ac <_dtoa_r+0x2a4>
 800956c:	6041      	str	r1, [r0, #4]
 800956e:	4658      	mov	r0, fp
 8009570:	f000 fd8e 	bl	800a090 <_Balloc>
 8009574:	4682      	mov	sl, r0
 8009576:	2800      	cmp	r0, #0
 8009578:	d13c      	bne.n	80095f4 <_dtoa_r+0x2ec>
 800957a:	4b1b      	ldr	r3, [pc, #108]	@ (80095e8 <_dtoa_r+0x2e0>)
 800957c:	4602      	mov	r2, r0
 800957e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009582:	e6d8      	b.n	8009336 <_dtoa_r+0x2e>
 8009584:	2301      	movs	r3, #1
 8009586:	e7e0      	b.n	800954a <_dtoa_r+0x242>
 8009588:	2401      	movs	r4, #1
 800958a:	2300      	movs	r3, #0
 800958c:	9309      	str	r3, [sp, #36]	@ 0x24
 800958e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009590:	f04f 33ff 	mov.w	r3, #4294967295
 8009594:	9300      	str	r3, [sp, #0]
 8009596:	9307      	str	r3, [sp, #28]
 8009598:	2200      	movs	r2, #0
 800959a:	2312      	movs	r3, #18
 800959c:	e7d0      	b.n	8009540 <_dtoa_r+0x238>
 800959e:	2301      	movs	r3, #1
 80095a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80095a2:	e7f5      	b.n	8009590 <_dtoa_r+0x288>
 80095a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095a6:	9300      	str	r3, [sp, #0]
 80095a8:	9307      	str	r3, [sp, #28]
 80095aa:	e7d7      	b.n	800955c <_dtoa_r+0x254>
 80095ac:	3101      	adds	r1, #1
 80095ae:	0052      	lsls	r2, r2, #1
 80095b0:	e7d8      	b.n	8009564 <_dtoa_r+0x25c>
 80095b2:	bf00      	nop
 80095b4:	f3af 8000 	nop.w
 80095b8:	636f4361 	.word	0x636f4361
 80095bc:	3fd287a7 	.word	0x3fd287a7
 80095c0:	8b60c8b3 	.word	0x8b60c8b3
 80095c4:	3fc68a28 	.word	0x3fc68a28
 80095c8:	509f79fb 	.word	0x509f79fb
 80095cc:	3fd34413 	.word	0x3fd34413
 80095d0:	0800b3e9 	.word	0x0800b3e9
 80095d4:	0800b400 	.word	0x0800b400
 80095d8:	7ff00000 	.word	0x7ff00000
 80095dc:	0800b3b9 	.word	0x0800b3b9
 80095e0:	3ff80000 	.word	0x3ff80000
 80095e4:	0800b4f8 	.word	0x0800b4f8
 80095e8:	0800b458 	.word	0x0800b458
 80095ec:	0800b3e5 	.word	0x0800b3e5
 80095f0:	0800b3b8 	.word	0x0800b3b8
 80095f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80095f8:	6018      	str	r0, [r3, #0]
 80095fa:	9b07      	ldr	r3, [sp, #28]
 80095fc:	2b0e      	cmp	r3, #14
 80095fe:	f200 80a4 	bhi.w	800974a <_dtoa_r+0x442>
 8009602:	2c00      	cmp	r4, #0
 8009604:	f000 80a1 	beq.w	800974a <_dtoa_r+0x442>
 8009608:	2f00      	cmp	r7, #0
 800960a:	dd33      	ble.n	8009674 <_dtoa_r+0x36c>
 800960c:	4bad      	ldr	r3, [pc, #692]	@ (80098c4 <_dtoa_r+0x5bc>)
 800960e:	f007 020f 	and.w	r2, r7, #15
 8009612:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009616:	ed93 7b00 	vldr	d7, [r3]
 800961a:	05f8      	lsls	r0, r7, #23
 800961c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009620:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009624:	d516      	bpl.n	8009654 <_dtoa_r+0x34c>
 8009626:	4ba8      	ldr	r3, [pc, #672]	@ (80098c8 <_dtoa_r+0x5c0>)
 8009628:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800962c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009630:	f7f7 f914 	bl	800085c <__aeabi_ddiv>
 8009634:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009638:	f004 040f 	and.w	r4, r4, #15
 800963c:	2603      	movs	r6, #3
 800963e:	4da2      	ldr	r5, [pc, #648]	@ (80098c8 <_dtoa_r+0x5c0>)
 8009640:	b954      	cbnz	r4, 8009658 <_dtoa_r+0x350>
 8009642:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009646:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800964a:	f7f7 f907 	bl	800085c <__aeabi_ddiv>
 800964e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009652:	e028      	b.n	80096a6 <_dtoa_r+0x39e>
 8009654:	2602      	movs	r6, #2
 8009656:	e7f2      	b.n	800963e <_dtoa_r+0x336>
 8009658:	07e1      	lsls	r1, r4, #31
 800965a:	d508      	bpl.n	800966e <_dtoa_r+0x366>
 800965c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009660:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009664:	f7f6 ffd0 	bl	8000608 <__aeabi_dmul>
 8009668:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800966c:	3601      	adds	r6, #1
 800966e:	1064      	asrs	r4, r4, #1
 8009670:	3508      	adds	r5, #8
 8009672:	e7e5      	b.n	8009640 <_dtoa_r+0x338>
 8009674:	f000 80d2 	beq.w	800981c <_dtoa_r+0x514>
 8009678:	427c      	negs	r4, r7
 800967a:	4b92      	ldr	r3, [pc, #584]	@ (80098c4 <_dtoa_r+0x5bc>)
 800967c:	4d92      	ldr	r5, [pc, #584]	@ (80098c8 <_dtoa_r+0x5c0>)
 800967e:	f004 020f 	and.w	r2, r4, #15
 8009682:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800968a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800968e:	f7f6 ffbb 	bl	8000608 <__aeabi_dmul>
 8009692:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009696:	1124      	asrs	r4, r4, #4
 8009698:	2300      	movs	r3, #0
 800969a:	2602      	movs	r6, #2
 800969c:	2c00      	cmp	r4, #0
 800969e:	f040 80b2 	bne.w	8009806 <_dtoa_r+0x4fe>
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d1d3      	bne.n	800964e <_dtoa_r+0x346>
 80096a6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80096a8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	f000 80b7 	beq.w	8009820 <_dtoa_r+0x518>
 80096b2:	4b86      	ldr	r3, [pc, #536]	@ (80098cc <_dtoa_r+0x5c4>)
 80096b4:	2200      	movs	r2, #0
 80096b6:	4620      	mov	r0, r4
 80096b8:	4629      	mov	r1, r5
 80096ba:	f7f7 fa17 	bl	8000aec <__aeabi_dcmplt>
 80096be:	2800      	cmp	r0, #0
 80096c0:	f000 80ae 	beq.w	8009820 <_dtoa_r+0x518>
 80096c4:	9b07      	ldr	r3, [sp, #28]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	f000 80aa 	beq.w	8009820 <_dtoa_r+0x518>
 80096cc:	9b00      	ldr	r3, [sp, #0]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	dd37      	ble.n	8009742 <_dtoa_r+0x43a>
 80096d2:	1e7b      	subs	r3, r7, #1
 80096d4:	9304      	str	r3, [sp, #16]
 80096d6:	4620      	mov	r0, r4
 80096d8:	4b7d      	ldr	r3, [pc, #500]	@ (80098d0 <_dtoa_r+0x5c8>)
 80096da:	2200      	movs	r2, #0
 80096dc:	4629      	mov	r1, r5
 80096de:	f7f6 ff93 	bl	8000608 <__aeabi_dmul>
 80096e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096e6:	9c00      	ldr	r4, [sp, #0]
 80096e8:	3601      	adds	r6, #1
 80096ea:	4630      	mov	r0, r6
 80096ec:	f7f6 ff22 	bl	8000534 <__aeabi_i2d>
 80096f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80096f4:	f7f6 ff88 	bl	8000608 <__aeabi_dmul>
 80096f8:	4b76      	ldr	r3, [pc, #472]	@ (80098d4 <_dtoa_r+0x5cc>)
 80096fa:	2200      	movs	r2, #0
 80096fc:	f7f6 fdce 	bl	800029c <__adddf3>
 8009700:	4605      	mov	r5, r0
 8009702:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009706:	2c00      	cmp	r4, #0
 8009708:	f040 808d 	bne.w	8009826 <_dtoa_r+0x51e>
 800970c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009710:	4b71      	ldr	r3, [pc, #452]	@ (80098d8 <_dtoa_r+0x5d0>)
 8009712:	2200      	movs	r2, #0
 8009714:	f7f6 fdc0 	bl	8000298 <__aeabi_dsub>
 8009718:	4602      	mov	r2, r0
 800971a:	460b      	mov	r3, r1
 800971c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009720:	462a      	mov	r2, r5
 8009722:	4633      	mov	r3, r6
 8009724:	f7f7 fa00 	bl	8000b28 <__aeabi_dcmpgt>
 8009728:	2800      	cmp	r0, #0
 800972a:	f040 828b 	bne.w	8009c44 <_dtoa_r+0x93c>
 800972e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009732:	462a      	mov	r2, r5
 8009734:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009738:	f7f7 f9d8 	bl	8000aec <__aeabi_dcmplt>
 800973c:	2800      	cmp	r0, #0
 800973e:	f040 8128 	bne.w	8009992 <_dtoa_r+0x68a>
 8009742:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009746:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800974a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800974c:	2b00      	cmp	r3, #0
 800974e:	f2c0 815a 	blt.w	8009a06 <_dtoa_r+0x6fe>
 8009752:	2f0e      	cmp	r7, #14
 8009754:	f300 8157 	bgt.w	8009a06 <_dtoa_r+0x6fe>
 8009758:	4b5a      	ldr	r3, [pc, #360]	@ (80098c4 <_dtoa_r+0x5bc>)
 800975a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800975e:	ed93 7b00 	vldr	d7, [r3]
 8009762:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009764:	2b00      	cmp	r3, #0
 8009766:	ed8d 7b00 	vstr	d7, [sp]
 800976a:	da03      	bge.n	8009774 <_dtoa_r+0x46c>
 800976c:	9b07      	ldr	r3, [sp, #28]
 800976e:	2b00      	cmp	r3, #0
 8009770:	f340 8101 	ble.w	8009976 <_dtoa_r+0x66e>
 8009774:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009778:	4656      	mov	r6, sl
 800977a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800977e:	4620      	mov	r0, r4
 8009780:	4629      	mov	r1, r5
 8009782:	f7f7 f86b 	bl	800085c <__aeabi_ddiv>
 8009786:	f7f7 f9ef 	bl	8000b68 <__aeabi_d2iz>
 800978a:	4680      	mov	r8, r0
 800978c:	f7f6 fed2 	bl	8000534 <__aeabi_i2d>
 8009790:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009794:	f7f6 ff38 	bl	8000608 <__aeabi_dmul>
 8009798:	4602      	mov	r2, r0
 800979a:	460b      	mov	r3, r1
 800979c:	4620      	mov	r0, r4
 800979e:	4629      	mov	r1, r5
 80097a0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80097a4:	f7f6 fd78 	bl	8000298 <__aeabi_dsub>
 80097a8:	f806 4b01 	strb.w	r4, [r6], #1
 80097ac:	9d07      	ldr	r5, [sp, #28]
 80097ae:	eba6 040a 	sub.w	r4, r6, sl
 80097b2:	42a5      	cmp	r5, r4
 80097b4:	4602      	mov	r2, r0
 80097b6:	460b      	mov	r3, r1
 80097b8:	f040 8117 	bne.w	80099ea <_dtoa_r+0x6e2>
 80097bc:	f7f6 fd6e 	bl	800029c <__adddf3>
 80097c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097c4:	4604      	mov	r4, r0
 80097c6:	460d      	mov	r5, r1
 80097c8:	f7f7 f9ae 	bl	8000b28 <__aeabi_dcmpgt>
 80097cc:	2800      	cmp	r0, #0
 80097ce:	f040 80f9 	bne.w	80099c4 <_dtoa_r+0x6bc>
 80097d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097d6:	4620      	mov	r0, r4
 80097d8:	4629      	mov	r1, r5
 80097da:	f7f7 f97d 	bl	8000ad8 <__aeabi_dcmpeq>
 80097de:	b118      	cbz	r0, 80097e8 <_dtoa_r+0x4e0>
 80097e0:	f018 0f01 	tst.w	r8, #1
 80097e4:	f040 80ee 	bne.w	80099c4 <_dtoa_r+0x6bc>
 80097e8:	4649      	mov	r1, r9
 80097ea:	4658      	mov	r0, fp
 80097ec:	f000 fc90 	bl	800a110 <_Bfree>
 80097f0:	2300      	movs	r3, #0
 80097f2:	7033      	strb	r3, [r6, #0]
 80097f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80097f6:	3701      	adds	r7, #1
 80097f8:	601f      	str	r7, [r3, #0]
 80097fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	f000 831d 	beq.w	8009e3c <_dtoa_r+0xb34>
 8009802:	601e      	str	r6, [r3, #0]
 8009804:	e31a      	b.n	8009e3c <_dtoa_r+0xb34>
 8009806:	07e2      	lsls	r2, r4, #31
 8009808:	d505      	bpl.n	8009816 <_dtoa_r+0x50e>
 800980a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800980e:	f7f6 fefb 	bl	8000608 <__aeabi_dmul>
 8009812:	3601      	adds	r6, #1
 8009814:	2301      	movs	r3, #1
 8009816:	1064      	asrs	r4, r4, #1
 8009818:	3508      	adds	r5, #8
 800981a:	e73f      	b.n	800969c <_dtoa_r+0x394>
 800981c:	2602      	movs	r6, #2
 800981e:	e742      	b.n	80096a6 <_dtoa_r+0x39e>
 8009820:	9c07      	ldr	r4, [sp, #28]
 8009822:	9704      	str	r7, [sp, #16]
 8009824:	e761      	b.n	80096ea <_dtoa_r+0x3e2>
 8009826:	4b27      	ldr	r3, [pc, #156]	@ (80098c4 <_dtoa_r+0x5bc>)
 8009828:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800982a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800982e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009832:	4454      	add	r4, sl
 8009834:	2900      	cmp	r1, #0
 8009836:	d053      	beq.n	80098e0 <_dtoa_r+0x5d8>
 8009838:	4928      	ldr	r1, [pc, #160]	@ (80098dc <_dtoa_r+0x5d4>)
 800983a:	2000      	movs	r0, #0
 800983c:	f7f7 f80e 	bl	800085c <__aeabi_ddiv>
 8009840:	4633      	mov	r3, r6
 8009842:	462a      	mov	r2, r5
 8009844:	f7f6 fd28 	bl	8000298 <__aeabi_dsub>
 8009848:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800984c:	4656      	mov	r6, sl
 800984e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009852:	f7f7 f989 	bl	8000b68 <__aeabi_d2iz>
 8009856:	4605      	mov	r5, r0
 8009858:	f7f6 fe6c 	bl	8000534 <__aeabi_i2d>
 800985c:	4602      	mov	r2, r0
 800985e:	460b      	mov	r3, r1
 8009860:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009864:	f7f6 fd18 	bl	8000298 <__aeabi_dsub>
 8009868:	3530      	adds	r5, #48	@ 0x30
 800986a:	4602      	mov	r2, r0
 800986c:	460b      	mov	r3, r1
 800986e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009872:	f806 5b01 	strb.w	r5, [r6], #1
 8009876:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800987a:	f7f7 f937 	bl	8000aec <__aeabi_dcmplt>
 800987e:	2800      	cmp	r0, #0
 8009880:	d171      	bne.n	8009966 <_dtoa_r+0x65e>
 8009882:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009886:	4911      	ldr	r1, [pc, #68]	@ (80098cc <_dtoa_r+0x5c4>)
 8009888:	2000      	movs	r0, #0
 800988a:	f7f6 fd05 	bl	8000298 <__aeabi_dsub>
 800988e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009892:	f7f7 f92b 	bl	8000aec <__aeabi_dcmplt>
 8009896:	2800      	cmp	r0, #0
 8009898:	f040 8095 	bne.w	80099c6 <_dtoa_r+0x6be>
 800989c:	42a6      	cmp	r6, r4
 800989e:	f43f af50 	beq.w	8009742 <_dtoa_r+0x43a>
 80098a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80098a6:	4b0a      	ldr	r3, [pc, #40]	@ (80098d0 <_dtoa_r+0x5c8>)
 80098a8:	2200      	movs	r2, #0
 80098aa:	f7f6 fead 	bl	8000608 <__aeabi_dmul>
 80098ae:	4b08      	ldr	r3, [pc, #32]	@ (80098d0 <_dtoa_r+0x5c8>)
 80098b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80098b4:	2200      	movs	r2, #0
 80098b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098ba:	f7f6 fea5 	bl	8000608 <__aeabi_dmul>
 80098be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098c2:	e7c4      	b.n	800984e <_dtoa_r+0x546>
 80098c4:	0800b4f8 	.word	0x0800b4f8
 80098c8:	0800b4d0 	.word	0x0800b4d0
 80098cc:	3ff00000 	.word	0x3ff00000
 80098d0:	40240000 	.word	0x40240000
 80098d4:	401c0000 	.word	0x401c0000
 80098d8:	40140000 	.word	0x40140000
 80098dc:	3fe00000 	.word	0x3fe00000
 80098e0:	4631      	mov	r1, r6
 80098e2:	4628      	mov	r0, r5
 80098e4:	f7f6 fe90 	bl	8000608 <__aeabi_dmul>
 80098e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80098ec:	9415      	str	r4, [sp, #84]	@ 0x54
 80098ee:	4656      	mov	r6, sl
 80098f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098f4:	f7f7 f938 	bl	8000b68 <__aeabi_d2iz>
 80098f8:	4605      	mov	r5, r0
 80098fa:	f7f6 fe1b 	bl	8000534 <__aeabi_i2d>
 80098fe:	4602      	mov	r2, r0
 8009900:	460b      	mov	r3, r1
 8009902:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009906:	f7f6 fcc7 	bl	8000298 <__aeabi_dsub>
 800990a:	3530      	adds	r5, #48	@ 0x30
 800990c:	f806 5b01 	strb.w	r5, [r6], #1
 8009910:	4602      	mov	r2, r0
 8009912:	460b      	mov	r3, r1
 8009914:	42a6      	cmp	r6, r4
 8009916:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800991a:	f04f 0200 	mov.w	r2, #0
 800991e:	d124      	bne.n	800996a <_dtoa_r+0x662>
 8009920:	4bac      	ldr	r3, [pc, #688]	@ (8009bd4 <_dtoa_r+0x8cc>)
 8009922:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009926:	f7f6 fcb9 	bl	800029c <__adddf3>
 800992a:	4602      	mov	r2, r0
 800992c:	460b      	mov	r3, r1
 800992e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009932:	f7f7 f8f9 	bl	8000b28 <__aeabi_dcmpgt>
 8009936:	2800      	cmp	r0, #0
 8009938:	d145      	bne.n	80099c6 <_dtoa_r+0x6be>
 800993a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800993e:	49a5      	ldr	r1, [pc, #660]	@ (8009bd4 <_dtoa_r+0x8cc>)
 8009940:	2000      	movs	r0, #0
 8009942:	f7f6 fca9 	bl	8000298 <__aeabi_dsub>
 8009946:	4602      	mov	r2, r0
 8009948:	460b      	mov	r3, r1
 800994a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800994e:	f7f7 f8cd 	bl	8000aec <__aeabi_dcmplt>
 8009952:	2800      	cmp	r0, #0
 8009954:	f43f aef5 	beq.w	8009742 <_dtoa_r+0x43a>
 8009958:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800995a:	1e73      	subs	r3, r6, #1
 800995c:	9315      	str	r3, [sp, #84]	@ 0x54
 800995e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009962:	2b30      	cmp	r3, #48	@ 0x30
 8009964:	d0f8      	beq.n	8009958 <_dtoa_r+0x650>
 8009966:	9f04      	ldr	r7, [sp, #16]
 8009968:	e73e      	b.n	80097e8 <_dtoa_r+0x4e0>
 800996a:	4b9b      	ldr	r3, [pc, #620]	@ (8009bd8 <_dtoa_r+0x8d0>)
 800996c:	f7f6 fe4c 	bl	8000608 <__aeabi_dmul>
 8009970:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009974:	e7bc      	b.n	80098f0 <_dtoa_r+0x5e8>
 8009976:	d10c      	bne.n	8009992 <_dtoa_r+0x68a>
 8009978:	4b98      	ldr	r3, [pc, #608]	@ (8009bdc <_dtoa_r+0x8d4>)
 800997a:	2200      	movs	r2, #0
 800997c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009980:	f7f6 fe42 	bl	8000608 <__aeabi_dmul>
 8009984:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009988:	f7f7 f8c4 	bl	8000b14 <__aeabi_dcmpge>
 800998c:	2800      	cmp	r0, #0
 800998e:	f000 8157 	beq.w	8009c40 <_dtoa_r+0x938>
 8009992:	2400      	movs	r4, #0
 8009994:	4625      	mov	r5, r4
 8009996:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009998:	43db      	mvns	r3, r3
 800999a:	9304      	str	r3, [sp, #16]
 800999c:	4656      	mov	r6, sl
 800999e:	2700      	movs	r7, #0
 80099a0:	4621      	mov	r1, r4
 80099a2:	4658      	mov	r0, fp
 80099a4:	f000 fbb4 	bl	800a110 <_Bfree>
 80099a8:	2d00      	cmp	r5, #0
 80099aa:	d0dc      	beq.n	8009966 <_dtoa_r+0x65e>
 80099ac:	b12f      	cbz	r7, 80099ba <_dtoa_r+0x6b2>
 80099ae:	42af      	cmp	r7, r5
 80099b0:	d003      	beq.n	80099ba <_dtoa_r+0x6b2>
 80099b2:	4639      	mov	r1, r7
 80099b4:	4658      	mov	r0, fp
 80099b6:	f000 fbab 	bl	800a110 <_Bfree>
 80099ba:	4629      	mov	r1, r5
 80099bc:	4658      	mov	r0, fp
 80099be:	f000 fba7 	bl	800a110 <_Bfree>
 80099c2:	e7d0      	b.n	8009966 <_dtoa_r+0x65e>
 80099c4:	9704      	str	r7, [sp, #16]
 80099c6:	4633      	mov	r3, r6
 80099c8:	461e      	mov	r6, r3
 80099ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80099ce:	2a39      	cmp	r2, #57	@ 0x39
 80099d0:	d107      	bne.n	80099e2 <_dtoa_r+0x6da>
 80099d2:	459a      	cmp	sl, r3
 80099d4:	d1f8      	bne.n	80099c8 <_dtoa_r+0x6c0>
 80099d6:	9a04      	ldr	r2, [sp, #16]
 80099d8:	3201      	adds	r2, #1
 80099da:	9204      	str	r2, [sp, #16]
 80099dc:	2230      	movs	r2, #48	@ 0x30
 80099de:	f88a 2000 	strb.w	r2, [sl]
 80099e2:	781a      	ldrb	r2, [r3, #0]
 80099e4:	3201      	adds	r2, #1
 80099e6:	701a      	strb	r2, [r3, #0]
 80099e8:	e7bd      	b.n	8009966 <_dtoa_r+0x65e>
 80099ea:	4b7b      	ldr	r3, [pc, #492]	@ (8009bd8 <_dtoa_r+0x8d0>)
 80099ec:	2200      	movs	r2, #0
 80099ee:	f7f6 fe0b 	bl	8000608 <__aeabi_dmul>
 80099f2:	2200      	movs	r2, #0
 80099f4:	2300      	movs	r3, #0
 80099f6:	4604      	mov	r4, r0
 80099f8:	460d      	mov	r5, r1
 80099fa:	f7f7 f86d 	bl	8000ad8 <__aeabi_dcmpeq>
 80099fe:	2800      	cmp	r0, #0
 8009a00:	f43f aebb 	beq.w	800977a <_dtoa_r+0x472>
 8009a04:	e6f0      	b.n	80097e8 <_dtoa_r+0x4e0>
 8009a06:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009a08:	2a00      	cmp	r2, #0
 8009a0a:	f000 80db 	beq.w	8009bc4 <_dtoa_r+0x8bc>
 8009a0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a10:	2a01      	cmp	r2, #1
 8009a12:	f300 80bf 	bgt.w	8009b94 <_dtoa_r+0x88c>
 8009a16:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009a18:	2a00      	cmp	r2, #0
 8009a1a:	f000 80b7 	beq.w	8009b8c <_dtoa_r+0x884>
 8009a1e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009a22:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009a24:	4646      	mov	r6, r8
 8009a26:	9a08      	ldr	r2, [sp, #32]
 8009a28:	2101      	movs	r1, #1
 8009a2a:	441a      	add	r2, r3
 8009a2c:	4658      	mov	r0, fp
 8009a2e:	4498      	add	r8, r3
 8009a30:	9208      	str	r2, [sp, #32]
 8009a32:	f000 fc21 	bl	800a278 <__i2b>
 8009a36:	4605      	mov	r5, r0
 8009a38:	b15e      	cbz	r6, 8009a52 <_dtoa_r+0x74a>
 8009a3a:	9b08      	ldr	r3, [sp, #32]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	dd08      	ble.n	8009a52 <_dtoa_r+0x74a>
 8009a40:	42b3      	cmp	r3, r6
 8009a42:	9a08      	ldr	r2, [sp, #32]
 8009a44:	bfa8      	it	ge
 8009a46:	4633      	movge	r3, r6
 8009a48:	eba8 0803 	sub.w	r8, r8, r3
 8009a4c:	1af6      	subs	r6, r6, r3
 8009a4e:	1ad3      	subs	r3, r2, r3
 8009a50:	9308      	str	r3, [sp, #32]
 8009a52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a54:	b1f3      	cbz	r3, 8009a94 <_dtoa_r+0x78c>
 8009a56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	f000 80b7 	beq.w	8009bcc <_dtoa_r+0x8c4>
 8009a5e:	b18c      	cbz	r4, 8009a84 <_dtoa_r+0x77c>
 8009a60:	4629      	mov	r1, r5
 8009a62:	4622      	mov	r2, r4
 8009a64:	4658      	mov	r0, fp
 8009a66:	f000 fcc7 	bl	800a3f8 <__pow5mult>
 8009a6a:	464a      	mov	r2, r9
 8009a6c:	4601      	mov	r1, r0
 8009a6e:	4605      	mov	r5, r0
 8009a70:	4658      	mov	r0, fp
 8009a72:	f000 fc17 	bl	800a2a4 <__multiply>
 8009a76:	4649      	mov	r1, r9
 8009a78:	9004      	str	r0, [sp, #16]
 8009a7a:	4658      	mov	r0, fp
 8009a7c:	f000 fb48 	bl	800a110 <_Bfree>
 8009a80:	9b04      	ldr	r3, [sp, #16]
 8009a82:	4699      	mov	r9, r3
 8009a84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a86:	1b1a      	subs	r2, r3, r4
 8009a88:	d004      	beq.n	8009a94 <_dtoa_r+0x78c>
 8009a8a:	4649      	mov	r1, r9
 8009a8c:	4658      	mov	r0, fp
 8009a8e:	f000 fcb3 	bl	800a3f8 <__pow5mult>
 8009a92:	4681      	mov	r9, r0
 8009a94:	2101      	movs	r1, #1
 8009a96:	4658      	mov	r0, fp
 8009a98:	f000 fbee 	bl	800a278 <__i2b>
 8009a9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a9e:	4604      	mov	r4, r0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	f000 81cf 	beq.w	8009e44 <_dtoa_r+0xb3c>
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	4601      	mov	r1, r0
 8009aaa:	4658      	mov	r0, fp
 8009aac:	f000 fca4 	bl	800a3f8 <__pow5mult>
 8009ab0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	4604      	mov	r4, r0
 8009ab6:	f300 8095 	bgt.w	8009be4 <_dtoa_r+0x8dc>
 8009aba:	9b02      	ldr	r3, [sp, #8]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	f040 8087 	bne.w	8009bd0 <_dtoa_r+0x8c8>
 8009ac2:	9b03      	ldr	r3, [sp, #12]
 8009ac4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	f040 8089 	bne.w	8009be0 <_dtoa_r+0x8d8>
 8009ace:	9b03      	ldr	r3, [sp, #12]
 8009ad0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009ad4:	0d1b      	lsrs	r3, r3, #20
 8009ad6:	051b      	lsls	r3, r3, #20
 8009ad8:	b12b      	cbz	r3, 8009ae6 <_dtoa_r+0x7de>
 8009ada:	9b08      	ldr	r3, [sp, #32]
 8009adc:	3301      	adds	r3, #1
 8009ade:	9308      	str	r3, [sp, #32]
 8009ae0:	f108 0801 	add.w	r8, r8, #1
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ae8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	f000 81b0 	beq.w	8009e50 <_dtoa_r+0xb48>
 8009af0:	6923      	ldr	r3, [r4, #16]
 8009af2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009af6:	6918      	ldr	r0, [r3, #16]
 8009af8:	f000 fb72 	bl	800a1e0 <__hi0bits>
 8009afc:	f1c0 0020 	rsb	r0, r0, #32
 8009b00:	9b08      	ldr	r3, [sp, #32]
 8009b02:	4418      	add	r0, r3
 8009b04:	f010 001f 	ands.w	r0, r0, #31
 8009b08:	d077      	beq.n	8009bfa <_dtoa_r+0x8f2>
 8009b0a:	f1c0 0320 	rsb	r3, r0, #32
 8009b0e:	2b04      	cmp	r3, #4
 8009b10:	dd6b      	ble.n	8009bea <_dtoa_r+0x8e2>
 8009b12:	9b08      	ldr	r3, [sp, #32]
 8009b14:	f1c0 001c 	rsb	r0, r0, #28
 8009b18:	4403      	add	r3, r0
 8009b1a:	4480      	add	r8, r0
 8009b1c:	4406      	add	r6, r0
 8009b1e:	9308      	str	r3, [sp, #32]
 8009b20:	f1b8 0f00 	cmp.w	r8, #0
 8009b24:	dd05      	ble.n	8009b32 <_dtoa_r+0x82a>
 8009b26:	4649      	mov	r1, r9
 8009b28:	4642      	mov	r2, r8
 8009b2a:	4658      	mov	r0, fp
 8009b2c:	f000 fcbe 	bl	800a4ac <__lshift>
 8009b30:	4681      	mov	r9, r0
 8009b32:	9b08      	ldr	r3, [sp, #32]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	dd05      	ble.n	8009b44 <_dtoa_r+0x83c>
 8009b38:	4621      	mov	r1, r4
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	4658      	mov	r0, fp
 8009b3e:	f000 fcb5 	bl	800a4ac <__lshift>
 8009b42:	4604      	mov	r4, r0
 8009b44:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d059      	beq.n	8009bfe <_dtoa_r+0x8f6>
 8009b4a:	4621      	mov	r1, r4
 8009b4c:	4648      	mov	r0, r9
 8009b4e:	f000 fd19 	bl	800a584 <__mcmp>
 8009b52:	2800      	cmp	r0, #0
 8009b54:	da53      	bge.n	8009bfe <_dtoa_r+0x8f6>
 8009b56:	1e7b      	subs	r3, r7, #1
 8009b58:	9304      	str	r3, [sp, #16]
 8009b5a:	4649      	mov	r1, r9
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	220a      	movs	r2, #10
 8009b60:	4658      	mov	r0, fp
 8009b62:	f000 faf7 	bl	800a154 <__multadd>
 8009b66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b68:	4681      	mov	r9, r0
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	f000 8172 	beq.w	8009e54 <_dtoa_r+0xb4c>
 8009b70:	2300      	movs	r3, #0
 8009b72:	4629      	mov	r1, r5
 8009b74:	220a      	movs	r2, #10
 8009b76:	4658      	mov	r0, fp
 8009b78:	f000 faec 	bl	800a154 <__multadd>
 8009b7c:	9b00      	ldr	r3, [sp, #0]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	4605      	mov	r5, r0
 8009b82:	dc67      	bgt.n	8009c54 <_dtoa_r+0x94c>
 8009b84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b86:	2b02      	cmp	r3, #2
 8009b88:	dc41      	bgt.n	8009c0e <_dtoa_r+0x906>
 8009b8a:	e063      	b.n	8009c54 <_dtoa_r+0x94c>
 8009b8c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009b8e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009b92:	e746      	b.n	8009a22 <_dtoa_r+0x71a>
 8009b94:	9b07      	ldr	r3, [sp, #28]
 8009b96:	1e5c      	subs	r4, r3, #1
 8009b98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b9a:	42a3      	cmp	r3, r4
 8009b9c:	bfbf      	itttt	lt
 8009b9e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009ba0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009ba2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009ba4:	1ae3      	sublt	r3, r4, r3
 8009ba6:	bfb4      	ite	lt
 8009ba8:	18d2      	addlt	r2, r2, r3
 8009baa:	1b1c      	subge	r4, r3, r4
 8009bac:	9b07      	ldr	r3, [sp, #28]
 8009bae:	bfbc      	itt	lt
 8009bb0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009bb2:	2400      	movlt	r4, #0
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	bfb5      	itete	lt
 8009bb8:	eba8 0603 	sublt.w	r6, r8, r3
 8009bbc:	9b07      	ldrge	r3, [sp, #28]
 8009bbe:	2300      	movlt	r3, #0
 8009bc0:	4646      	movge	r6, r8
 8009bc2:	e730      	b.n	8009a26 <_dtoa_r+0x71e>
 8009bc4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009bc6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009bc8:	4646      	mov	r6, r8
 8009bca:	e735      	b.n	8009a38 <_dtoa_r+0x730>
 8009bcc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009bce:	e75c      	b.n	8009a8a <_dtoa_r+0x782>
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	e788      	b.n	8009ae6 <_dtoa_r+0x7de>
 8009bd4:	3fe00000 	.word	0x3fe00000
 8009bd8:	40240000 	.word	0x40240000
 8009bdc:	40140000 	.word	0x40140000
 8009be0:	9b02      	ldr	r3, [sp, #8]
 8009be2:	e780      	b.n	8009ae6 <_dtoa_r+0x7de>
 8009be4:	2300      	movs	r3, #0
 8009be6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009be8:	e782      	b.n	8009af0 <_dtoa_r+0x7e8>
 8009bea:	d099      	beq.n	8009b20 <_dtoa_r+0x818>
 8009bec:	9a08      	ldr	r2, [sp, #32]
 8009bee:	331c      	adds	r3, #28
 8009bf0:	441a      	add	r2, r3
 8009bf2:	4498      	add	r8, r3
 8009bf4:	441e      	add	r6, r3
 8009bf6:	9208      	str	r2, [sp, #32]
 8009bf8:	e792      	b.n	8009b20 <_dtoa_r+0x818>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	e7f6      	b.n	8009bec <_dtoa_r+0x8e4>
 8009bfe:	9b07      	ldr	r3, [sp, #28]
 8009c00:	9704      	str	r7, [sp, #16]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	dc20      	bgt.n	8009c48 <_dtoa_r+0x940>
 8009c06:	9300      	str	r3, [sp, #0]
 8009c08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c0a:	2b02      	cmp	r3, #2
 8009c0c:	dd1e      	ble.n	8009c4c <_dtoa_r+0x944>
 8009c0e:	9b00      	ldr	r3, [sp, #0]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	f47f aec0 	bne.w	8009996 <_dtoa_r+0x68e>
 8009c16:	4621      	mov	r1, r4
 8009c18:	2205      	movs	r2, #5
 8009c1a:	4658      	mov	r0, fp
 8009c1c:	f000 fa9a 	bl	800a154 <__multadd>
 8009c20:	4601      	mov	r1, r0
 8009c22:	4604      	mov	r4, r0
 8009c24:	4648      	mov	r0, r9
 8009c26:	f000 fcad 	bl	800a584 <__mcmp>
 8009c2a:	2800      	cmp	r0, #0
 8009c2c:	f77f aeb3 	ble.w	8009996 <_dtoa_r+0x68e>
 8009c30:	4656      	mov	r6, sl
 8009c32:	2331      	movs	r3, #49	@ 0x31
 8009c34:	f806 3b01 	strb.w	r3, [r6], #1
 8009c38:	9b04      	ldr	r3, [sp, #16]
 8009c3a:	3301      	adds	r3, #1
 8009c3c:	9304      	str	r3, [sp, #16]
 8009c3e:	e6ae      	b.n	800999e <_dtoa_r+0x696>
 8009c40:	9c07      	ldr	r4, [sp, #28]
 8009c42:	9704      	str	r7, [sp, #16]
 8009c44:	4625      	mov	r5, r4
 8009c46:	e7f3      	b.n	8009c30 <_dtoa_r+0x928>
 8009c48:	9b07      	ldr	r3, [sp, #28]
 8009c4a:	9300      	str	r3, [sp, #0]
 8009c4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	f000 8104 	beq.w	8009e5c <_dtoa_r+0xb54>
 8009c54:	2e00      	cmp	r6, #0
 8009c56:	dd05      	ble.n	8009c64 <_dtoa_r+0x95c>
 8009c58:	4629      	mov	r1, r5
 8009c5a:	4632      	mov	r2, r6
 8009c5c:	4658      	mov	r0, fp
 8009c5e:	f000 fc25 	bl	800a4ac <__lshift>
 8009c62:	4605      	mov	r5, r0
 8009c64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d05a      	beq.n	8009d20 <_dtoa_r+0xa18>
 8009c6a:	6869      	ldr	r1, [r5, #4]
 8009c6c:	4658      	mov	r0, fp
 8009c6e:	f000 fa0f 	bl	800a090 <_Balloc>
 8009c72:	4606      	mov	r6, r0
 8009c74:	b928      	cbnz	r0, 8009c82 <_dtoa_r+0x97a>
 8009c76:	4b84      	ldr	r3, [pc, #528]	@ (8009e88 <_dtoa_r+0xb80>)
 8009c78:	4602      	mov	r2, r0
 8009c7a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009c7e:	f7ff bb5a 	b.w	8009336 <_dtoa_r+0x2e>
 8009c82:	692a      	ldr	r2, [r5, #16]
 8009c84:	3202      	adds	r2, #2
 8009c86:	0092      	lsls	r2, r2, #2
 8009c88:	f105 010c 	add.w	r1, r5, #12
 8009c8c:	300c      	adds	r0, #12
 8009c8e:	f000 ffaf 	bl	800abf0 <memcpy>
 8009c92:	2201      	movs	r2, #1
 8009c94:	4631      	mov	r1, r6
 8009c96:	4658      	mov	r0, fp
 8009c98:	f000 fc08 	bl	800a4ac <__lshift>
 8009c9c:	f10a 0301 	add.w	r3, sl, #1
 8009ca0:	9307      	str	r3, [sp, #28]
 8009ca2:	9b00      	ldr	r3, [sp, #0]
 8009ca4:	4453      	add	r3, sl
 8009ca6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ca8:	9b02      	ldr	r3, [sp, #8]
 8009caa:	f003 0301 	and.w	r3, r3, #1
 8009cae:	462f      	mov	r7, r5
 8009cb0:	930a      	str	r3, [sp, #40]	@ 0x28
 8009cb2:	4605      	mov	r5, r0
 8009cb4:	9b07      	ldr	r3, [sp, #28]
 8009cb6:	4621      	mov	r1, r4
 8009cb8:	3b01      	subs	r3, #1
 8009cba:	4648      	mov	r0, r9
 8009cbc:	9300      	str	r3, [sp, #0]
 8009cbe:	f7ff fa98 	bl	80091f2 <quorem>
 8009cc2:	4639      	mov	r1, r7
 8009cc4:	9002      	str	r0, [sp, #8]
 8009cc6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009cca:	4648      	mov	r0, r9
 8009ccc:	f000 fc5a 	bl	800a584 <__mcmp>
 8009cd0:	462a      	mov	r2, r5
 8009cd2:	9008      	str	r0, [sp, #32]
 8009cd4:	4621      	mov	r1, r4
 8009cd6:	4658      	mov	r0, fp
 8009cd8:	f000 fc70 	bl	800a5bc <__mdiff>
 8009cdc:	68c2      	ldr	r2, [r0, #12]
 8009cde:	4606      	mov	r6, r0
 8009ce0:	bb02      	cbnz	r2, 8009d24 <_dtoa_r+0xa1c>
 8009ce2:	4601      	mov	r1, r0
 8009ce4:	4648      	mov	r0, r9
 8009ce6:	f000 fc4d 	bl	800a584 <__mcmp>
 8009cea:	4602      	mov	r2, r0
 8009cec:	4631      	mov	r1, r6
 8009cee:	4658      	mov	r0, fp
 8009cf0:	920e      	str	r2, [sp, #56]	@ 0x38
 8009cf2:	f000 fa0d 	bl	800a110 <_Bfree>
 8009cf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cf8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009cfa:	9e07      	ldr	r6, [sp, #28]
 8009cfc:	ea43 0102 	orr.w	r1, r3, r2
 8009d00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d02:	4319      	orrs	r1, r3
 8009d04:	d110      	bne.n	8009d28 <_dtoa_r+0xa20>
 8009d06:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009d0a:	d029      	beq.n	8009d60 <_dtoa_r+0xa58>
 8009d0c:	9b08      	ldr	r3, [sp, #32]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	dd02      	ble.n	8009d18 <_dtoa_r+0xa10>
 8009d12:	9b02      	ldr	r3, [sp, #8]
 8009d14:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009d18:	9b00      	ldr	r3, [sp, #0]
 8009d1a:	f883 8000 	strb.w	r8, [r3]
 8009d1e:	e63f      	b.n	80099a0 <_dtoa_r+0x698>
 8009d20:	4628      	mov	r0, r5
 8009d22:	e7bb      	b.n	8009c9c <_dtoa_r+0x994>
 8009d24:	2201      	movs	r2, #1
 8009d26:	e7e1      	b.n	8009cec <_dtoa_r+0x9e4>
 8009d28:	9b08      	ldr	r3, [sp, #32]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	db04      	blt.n	8009d38 <_dtoa_r+0xa30>
 8009d2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009d30:	430b      	orrs	r3, r1
 8009d32:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009d34:	430b      	orrs	r3, r1
 8009d36:	d120      	bne.n	8009d7a <_dtoa_r+0xa72>
 8009d38:	2a00      	cmp	r2, #0
 8009d3a:	dded      	ble.n	8009d18 <_dtoa_r+0xa10>
 8009d3c:	4649      	mov	r1, r9
 8009d3e:	2201      	movs	r2, #1
 8009d40:	4658      	mov	r0, fp
 8009d42:	f000 fbb3 	bl	800a4ac <__lshift>
 8009d46:	4621      	mov	r1, r4
 8009d48:	4681      	mov	r9, r0
 8009d4a:	f000 fc1b 	bl	800a584 <__mcmp>
 8009d4e:	2800      	cmp	r0, #0
 8009d50:	dc03      	bgt.n	8009d5a <_dtoa_r+0xa52>
 8009d52:	d1e1      	bne.n	8009d18 <_dtoa_r+0xa10>
 8009d54:	f018 0f01 	tst.w	r8, #1
 8009d58:	d0de      	beq.n	8009d18 <_dtoa_r+0xa10>
 8009d5a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009d5e:	d1d8      	bne.n	8009d12 <_dtoa_r+0xa0a>
 8009d60:	9a00      	ldr	r2, [sp, #0]
 8009d62:	2339      	movs	r3, #57	@ 0x39
 8009d64:	7013      	strb	r3, [r2, #0]
 8009d66:	4633      	mov	r3, r6
 8009d68:	461e      	mov	r6, r3
 8009d6a:	3b01      	subs	r3, #1
 8009d6c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009d70:	2a39      	cmp	r2, #57	@ 0x39
 8009d72:	d052      	beq.n	8009e1a <_dtoa_r+0xb12>
 8009d74:	3201      	adds	r2, #1
 8009d76:	701a      	strb	r2, [r3, #0]
 8009d78:	e612      	b.n	80099a0 <_dtoa_r+0x698>
 8009d7a:	2a00      	cmp	r2, #0
 8009d7c:	dd07      	ble.n	8009d8e <_dtoa_r+0xa86>
 8009d7e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009d82:	d0ed      	beq.n	8009d60 <_dtoa_r+0xa58>
 8009d84:	9a00      	ldr	r2, [sp, #0]
 8009d86:	f108 0301 	add.w	r3, r8, #1
 8009d8a:	7013      	strb	r3, [r2, #0]
 8009d8c:	e608      	b.n	80099a0 <_dtoa_r+0x698>
 8009d8e:	9b07      	ldr	r3, [sp, #28]
 8009d90:	9a07      	ldr	r2, [sp, #28]
 8009d92:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009d96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d028      	beq.n	8009dee <_dtoa_r+0xae6>
 8009d9c:	4649      	mov	r1, r9
 8009d9e:	2300      	movs	r3, #0
 8009da0:	220a      	movs	r2, #10
 8009da2:	4658      	mov	r0, fp
 8009da4:	f000 f9d6 	bl	800a154 <__multadd>
 8009da8:	42af      	cmp	r7, r5
 8009daa:	4681      	mov	r9, r0
 8009dac:	f04f 0300 	mov.w	r3, #0
 8009db0:	f04f 020a 	mov.w	r2, #10
 8009db4:	4639      	mov	r1, r7
 8009db6:	4658      	mov	r0, fp
 8009db8:	d107      	bne.n	8009dca <_dtoa_r+0xac2>
 8009dba:	f000 f9cb 	bl	800a154 <__multadd>
 8009dbe:	4607      	mov	r7, r0
 8009dc0:	4605      	mov	r5, r0
 8009dc2:	9b07      	ldr	r3, [sp, #28]
 8009dc4:	3301      	adds	r3, #1
 8009dc6:	9307      	str	r3, [sp, #28]
 8009dc8:	e774      	b.n	8009cb4 <_dtoa_r+0x9ac>
 8009dca:	f000 f9c3 	bl	800a154 <__multadd>
 8009dce:	4629      	mov	r1, r5
 8009dd0:	4607      	mov	r7, r0
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	220a      	movs	r2, #10
 8009dd6:	4658      	mov	r0, fp
 8009dd8:	f000 f9bc 	bl	800a154 <__multadd>
 8009ddc:	4605      	mov	r5, r0
 8009dde:	e7f0      	b.n	8009dc2 <_dtoa_r+0xaba>
 8009de0:	9b00      	ldr	r3, [sp, #0]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	bfcc      	ite	gt
 8009de6:	461e      	movgt	r6, r3
 8009de8:	2601      	movle	r6, #1
 8009dea:	4456      	add	r6, sl
 8009dec:	2700      	movs	r7, #0
 8009dee:	4649      	mov	r1, r9
 8009df0:	2201      	movs	r2, #1
 8009df2:	4658      	mov	r0, fp
 8009df4:	f000 fb5a 	bl	800a4ac <__lshift>
 8009df8:	4621      	mov	r1, r4
 8009dfa:	4681      	mov	r9, r0
 8009dfc:	f000 fbc2 	bl	800a584 <__mcmp>
 8009e00:	2800      	cmp	r0, #0
 8009e02:	dcb0      	bgt.n	8009d66 <_dtoa_r+0xa5e>
 8009e04:	d102      	bne.n	8009e0c <_dtoa_r+0xb04>
 8009e06:	f018 0f01 	tst.w	r8, #1
 8009e0a:	d1ac      	bne.n	8009d66 <_dtoa_r+0xa5e>
 8009e0c:	4633      	mov	r3, r6
 8009e0e:	461e      	mov	r6, r3
 8009e10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e14:	2a30      	cmp	r2, #48	@ 0x30
 8009e16:	d0fa      	beq.n	8009e0e <_dtoa_r+0xb06>
 8009e18:	e5c2      	b.n	80099a0 <_dtoa_r+0x698>
 8009e1a:	459a      	cmp	sl, r3
 8009e1c:	d1a4      	bne.n	8009d68 <_dtoa_r+0xa60>
 8009e1e:	9b04      	ldr	r3, [sp, #16]
 8009e20:	3301      	adds	r3, #1
 8009e22:	9304      	str	r3, [sp, #16]
 8009e24:	2331      	movs	r3, #49	@ 0x31
 8009e26:	f88a 3000 	strb.w	r3, [sl]
 8009e2a:	e5b9      	b.n	80099a0 <_dtoa_r+0x698>
 8009e2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009e2e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009e8c <_dtoa_r+0xb84>
 8009e32:	b11b      	cbz	r3, 8009e3c <_dtoa_r+0xb34>
 8009e34:	f10a 0308 	add.w	r3, sl, #8
 8009e38:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009e3a:	6013      	str	r3, [r2, #0]
 8009e3c:	4650      	mov	r0, sl
 8009e3e:	b019      	add	sp, #100	@ 0x64
 8009e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	f77f ae37 	ble.w	8009aba <_dtoa_r+0x7b2>
 8009e4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e50:	2001      	movs	r0, #1
 8009e52:	e655      	b.n	8009b00 <_dtoa_r+0x7f8>
 8009e54:	9b00      	ldr	r3, [sp, #0]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	f77f aed6 	ble.w	8009c08 <_dtoa_r+0x900>
 8009e5c:	4656      	mov	r6, sl
 8009e5e:	4621      	mov	r1, r4
 8009e60:	4648      	mov	r0, r9
 8009e62:	f7ff f9c6 	bl	80091f2 <quorem>
 8009e66:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009e6a:	f806 8b01 	strb.w	r8, [r6], #1
 8009e6e:	9b00      	ldr	r3, [sp, #0]
 8009e70:	eba6 020a 	sub.w	r2, r6, sl
 8009e74:	4293      	cmp	r3, r2
 8009e76:	ddb3      	ble.n	8009de0 <_dtoa_r+0xad8>
 8009e78:	4649      	mov	r1, r9
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	220a      	movs	r2, #10
 8009e7e:	4658      	mov	r0, fp
 8009e80:	f000 f968 	bl	800a154 <__multadd>
 8009e84:	4681      	mov	r9, r0
 8009e86:	e7ea      	b.n	8009e5e <_dtoa_r+0xb56>
 8009e88:	0800b458 	.word	0x0800b458
 8009e8c:	0800b3dc 	.word	0x0800b3dc

08009e90 <_free_r>:
 8009e90:	b538      	push	{r3, r4, r5, lr}
 8009e92:	4605      	mov	r5, r0
 8009e94:	2900      	cmp	r1, #0
 8009e96:	d041      	beq.n	8009f1c <_free_r+0x8c>
 8009e98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e9c:	1f0c      	subs	r4, r1, #4
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	bfb8      	it	lt
 8009ea2:	18e4      	addlt	r4, r4, r3
 8009ea4:	f000 f8e8 	bl	800a078 <__malloc_lock>
 8009ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8009f20 <_free_r+0x90>)
 8009eaa:	6813      	ldr	r3, [r2, #0]
 8009eac:	b933      	cbnz	r3, 8009ebc <_free_r+0x2c>
 8009eae:	6063      	str	r3, [r4, #4]
 8009eb0:	6014      	str	r4, [r2, #0]
 8009eb2:	4628      	mov	r0, r5
 8009eb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009eb8:	f000 b8e4 	b.w	800a084 <__malloc_unlock>
 8009ebc:	42a3      	cmp	r3, r4
 8009ebe:	d908      	bls.n	8009ed2 <_free_r+0x42>
 8009ec0:	6820      	ldr	r0, [r4, #0]
 8009ec2:	1821      	adds	r1, r4, r0
 8009ec4:	428b      	cmp	r3, r1
 8009ec6:	bf01      	itttt	eq
 8009ec8:	6819      	ldreq	r1, [r3, #0]
 8009eca:	685b      	ldreq	r3, [r3, #4]
 8009ecc:	1809      	addeq	r1, r1, r0
 8009ece:	6021      	streq	r1, [r4, #0]
 8009ed0:	e7ed      	b.n	8009eae <_free_r+0x1e>
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	b10b      	cbz	r3, 8009edc <_free_r+0x4c>
 8009ed8:	42a3      	cmp	r3, r4
 8009eda:	d9fa      	bls.n	8009ed2 <_free_r+0x42>
 8009edc:	6811      	ldr	r1, [r2, #0]
 8009ede:	1850      	adds	r0, r2, r1
 8009ee0:	42a0      	cmp	r0, r4
 8009ee2:	d10b      	bne.n	8009efc <_free_r+0x6c>
 8009ee4:	6820      	ldr	r0, [r4, #0]
 8009ee6:	4401      	add	r1, r0
 8009ee8:	1850      	adds	r0, r2, r1
 8009eea:	4283      	cmp	r3, r0
 8009eec:	6011      	str	r1, [r2, #0]
 8009eee:	d1e0      	bne.n	8009eb2 <_free_r+0x22>
 8009ef0:	6818      	ldr	r0, [r3, #0]
 8009ef2:	685b      	ldr	r3, [r3, #4]
 8009ef4:	6053      	str	r3, [r2, #4]
 8009ef6:	4408      	add	r0, r1
 8009ef8:	6010      	str	r0, [r2, #0]
 8009efa:	e7da      	b.n	8009eb2 <_free_r+0x22>
 8009efc:	d902      	bls.n	8009f04 <_free_r+0x74>
 8009efe:	230c      	movs	r3, #12
 8009f00:	602b      	str	r3, [r5, #0]
 8009f02:	e7d6      	b.n	8009eb2 <_free_r+0x22>
 8009f04:	6820      	ldr	r0, [r4, #0]
 8009f06:	1821      	adds	r1, r4, r0
 8009f08:	428b      	cmp	r3, r1
 8009f0a:	bf04      	itt	eq
 8009f0c:	6819      	ldreq	r1, [r3, #0]
 8009f0e:	685b      	ldreq	r3, [r3, #4]
 8009f10:	6063      	str	r3, [r4, #4]
 8009f12:	bf04      	itt	eq
 8009f14:	1809      	addeq	r1, r1, r0
 8009f16:	6021      	streq	r1, [r4, #0]
 8009f18:	6054      	str	r4, [r2, #4]
 8009f1a:	e7ca      	b.n	8009eb2 <_free_r+0x22>
 8009f1c:	bd38      	pop	{r3, r4, r5, pc}
 8009f1e:	bf00      	nop
 8009f20:	20000638 	.word	0x20000638

08009f24 <malloc>:
 8009f24:	4b02      	ldr	r3, [pc, #8]	@ (8009f30 <malloc+0xc>)
 8009f26:	4601      	mov	r1, r0
 8009f28:	6818      	ldr	r0, [r3, #0]
 8009f2a:	f000 b825 	b.w	8009f78 <_malloc_r>
 8009f2e:	bf00      	nop
 8009f30:	20000018 	.word	0x20000018

08009f34 <sbrk_aligned>:
 8009f34:	b570      	push	{r4, r5, r6, lr}
 8009f36:	4e0f      	ldr	r6, [pc, #60]	@ (8009f74 <sbrk_aligned+0x40>)
 8009f38:	460c      	mov	r4, r1
 8009f3a:	6831      	ldr	r1, [r6, #0]
 8009f3c:	4605      	mov	r5, r0
 8009f3e:	b911      	cbnz	r1, 8009f46 <sbrk_aligned+0x12>
 8009f40:	f000 fe46 	bl	800abd0 <_sbrk_r>
 8009f44:	6030      	str	r0, [r6, #0]
 8009f46:	4621      	mov	r1, r4
 8009f48:	4628      	mov	r0, r5
 8009f4a:	f000 fe41 	bl	800abd0 <_sbrk_r>
 8009f4e:	1c43      	adds	r3, r0, #1
 8009f50:	d103      	bne.n	8009f5a <sbrk_aligned+0x26>
 8009f52:	f04f 34ff 	mov.w	r4, #4294967295
 8009f56:	4620      	mov	r0, r4
 8009f58:	bd70      	pop	{r4, r5, r6, pc}
 8009f5a:	1cc4      	adds	r4, r0, #3
 8009f5c:	f024 0403 	bic.w	r4, r4, #3
 8009f60:	42a0      	cmp	r0, r4
 8009f62:	d0f8      	beq.n	8009f56 <sbrk_aligned+0x22>
 8009f64:	1a21      	subs	r1, r4, r0
 8009f66:	4628      	mov	r0, r5
 8009f68:	f000 fe32 	bl	800abd0 <_sbrk_r>
 8009f6c:	3001      	adds	r0, #1
 8009f6e:	d1f2      	bne.n	8009f56 <sbrk_aligned+0x22>
 8009f70:	e7ef      	b.n	8009f52 <sbrk_aligned+0x1e>
 8009f72:	bf00      	nop
 8009f74:	20000634 	.word	0x20000634

08009f78 <_malloc_r>:
 8009f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f7c:	1ccd      	adds	r5, r1, #3
 8009f7e:	f025 0503 	bic.w	r5, r5, #3
 8009f82:	3508      	adds	r5, #8
 8009f84:	2d0c      	cmp	r5, #12
 8009f86:	bf38      	it	cc
 8009f88:	250c      	movcc	r5, #12
 8009f8a:	2d00      	cmp	r5, #0
 8009f8c:	4606      	mov	r6, r0
 8009f8e:	db01      	blt.n	8009f94 <_malloc_r+0x1c>
 8009f90:	42a9      	cmp	r1, r5
 8009f92:	d904      	bls.n	8009f9e <_malloc_r+0x26>
 8009f94:	230c      	movs	r3, #12
 8009f96:	6033      	str	r3, [r6, #0]
 8009f98:	2000      	movs	r0, #0
 8009f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a074 <_malloc_r+0xfc>
 8009fa2:	f000 f869 	bl	800a078 <__malloc_lock>
 8009fa6:	f8d8 3000 	ldr.w	r3, [r8]
 8009faa:	461c      	mov	r4, r3
 8009fac:	bb44      	cbnz	r4, 800a000 <_malloc_r+0x88>
 8009fae:	4629      	mov	r1, r5
 8009fb0:	4630      	mov	r0, r6
 8009fb2:	f7ff ffbf 	bl	8009f34 <sbrk_aligned>
 8009fb6:	1c43      	adds	r3, r0, #1
 8009fb8:	4604      	mov	r4, r0
 8009fba:	d158      	bne.n	800a06e <_malloc_r+0xf6>
 8009fbc:	f8d8 4000 	ldr.w	r4, [r8]
 8009fc0:	4627      	mov	r7, r4
 8009fc2:	2f00      	cmp	r7, #0
 8009fc4:	d143      	bne.n	800a04e <_malloc_r+0xd6>
 8009fc6:	2c00      	cmp	r4, #0
 8009fc8:	d04b      	beq.n	800a062 <_malloc_r+0xea>
 8009fca:	6823      	ldr	r3, [r4, #0]
 8009fcc:	4639      	mov	r1, r7
 8009fce:	4630      	mov	r0, r6
 8009fd0:	eb04 0903 	add.w	r9, r4, r3
 8009fd4:	f000 fdfc 	bl	800abd0 <_sbrk_r>
 8009fd8:	4581      	cmp	r9, r0
 8009fda:	d142      	bne.n	800a062 <_malloc_r+0xea>
 8009fdc:	6821      	ldr	r1, [r4, #0]
 8009fde:	1a6d      	subs	r5, r5, r1
 8009fe0:	4629      	mov	r1, r5
 8009fe2:	4630      	mov	r0, r6
 8009fe4:	f7ff ffa6 	bl	8009f34 <sbrk_aligned>
 8009fe8:	3001      	adds	r0, #1
 8009fea:	d03a      	beq.n	800a062 <_malloc_r+0xea>
 8009fec:	6823      	ldr	r3, [r4, #0]
 8009fee:	442b      	add	r3, r5
 8009ff0:	6023      	str	r3, [r4, #0]
 8009ff2:	f8d8 3000 	ldr.w	r3, [r8]
 8009ff6:	685a      	ldr	r2, [r3, #4]
 8009ff8:	bb62      	cbnz	r2, 800a054 <_malloc_r+0xdc>
 8009ffa:	f8c8 7000 	str.w	r7, [r8]
 8009ffe:	e00f      	b.n	800a020 <_malloc_r+0xa8>
 800a000:	6822      	ldr	r2, [r4, #0]
 800a002:	1b52      	subs	r2, r2, r5
 800a004:	d420      	bmi.n	800a048 <_malloc_r+0xd0>
 800a006:	2a0b      	cmp	r2, #11
 800a008:	d917      	bls.n	800a03a <_malloc_r+0xc2>
 800a00a:	1961      	adds	r1, r4, r5
 800a00c:	42a3      	cmp	r3, r4
 800a00e:	6025      	str	r5, [r4, #0]
 800a010:	bf18      	it	ne
 800a012:	6059      	strne	r1, [r3, #4]
 800a014:	6863      	ldr	r3, [r4, #4]
 800a016:	bf08      	it	eq
 800a018:	f8c8 1000 	streq.w	r1, [r8]
 800a01c:	5162      	str	r2, [r4, r5]
 800a01e:	604b      	str	r3, [r1, #4]
 800a020:	4630      	mov	r0, r6
 800a022:	f000 f82f 	bl	800a084 <__malloc_unlock>
 800a026:	f104 000b 	add.w	r0, r4, #11
 800a02a:	1d23      	adds	r3, r4, #4
 800a02c:	f020 0007 	bic.w	r0, r0, #7
 800a030:	1ac2      	subs	r2, r0, r3
 800a032:	bf1c      	itt	ne
 800a034:	1a1b      	subne	r3, r3, r0
 800a036:	50a3      	strne	r3, [r4, r2]
 800a038:	e7af      	b.n	8009f9a <_malloc_r+0x22>
 800a03a:	6862      	ldr	r2, [r4, #4]
 800a03c:	42a3      	cmp	r3, r4
 800a03e:	bf0c      	ite	eq
 800a040:	f8c8 2000 	streq.w	r2, [r8]
 800a044:	605a      	strne	r2, [r3, #4]
 800a046:	e7eb      	b.n	800a020 <_malloc_r+0xa8>
 800a048:	4623      	mov	r3, r4
 800a04a:	6864      	ldr	r4, [r4, #4]
 800a04c:	e7ae      	b.n	8009fac <_malloc_r+0x34>
 800a04e:	463c      	mov	r4, r7
 800a050:	687f      	ldr	r7, [r7, #4]
 800a052:	e7b6      	b.n	8009fc2 <_malloc_r+0x4a>
 800a054:	461a      	mov	r2, r3
 800a056:	685b      	ldr	r3, [r3, #4]
 800a058:	42a3      	cmp	r3, r4
 800a05a:	d1fb      	bne.n	800a054 <_malloc_r+0xdc>
 800a05c:	2300      	movs	r3, #0
 800a05e:	6053      	str	r3, [r2, #4]
 800a060:	e7de      	b.n	800a020 <_malloc_r+0xa8>
 800a062:	230c      	movs	r3, #12
 800a064:	6033      	str	r3, [r6, #0]
 800a066:	4630      	mov	r0, r6
 800a068:	f000 f80c 	bl	800a084 <__malloc_unlock>
 800a06c:	e794      	b.n	8009f98 <_malloc_r+0x20>
 800a06e:	6005      	str	r5, [r0, #0]
 800a070:	e7d6      	b.n	800a020 <_malloc_r+0xa8>
 800a072:	bf00      	nop
 800a074:	20000638 	.word	0x20000638

0800a078 <__malloc_lock>:
 800a078:	4801      	ldr	r0, [pc, #4]	@ (800a080 <__malloc_lock+0x8>)
 800a07a:	f7ff b8b8 	b.w	80091ee <__retarget_lock_acquire_recursive>
 800a07e:	bf00      	nop
 800a080:	20000630 	.word	0x20000630

0800a084 <__malloc_unlock>:
 800a084:	4801      	ldr	r0, [pc, #4]	@ (800a08c <__malloc_unlock+0x8>)
 800a086:	f7ff b8b3 	b.w	80091f0 <__retarget_lock_release_recursive>
 800a08a:	bf00      	nop
 800a08c:	20000630 	.word	0x20000630

0800a090 <_Balloc>:
 800a090:	b570      	push	{r4, r5, r6, lr}
 800a092:	69c6      	ldr	r6, [r0, #28]
 800a094:	4604      	mov	r4, r0
 800a096:	460d      	mov	r5, r1
 800a098:	b976      	cbnz	r6, 800a0b8 <_Balloc+0x28>
 800a09a:	2010      	movs	r0, #16
 800a09c:	f7ff ff42 	bl	8009f24 <malloc>
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	61e0      	str	r0, [r4, #28]
 800a0a4:	b920      	cbnz	r0, 800a0b0 <_Balloc+0x20>
 800a0a6:	4b18      	ldr	r3, [pc, #96]	@ (800a108 <_Balloc+0x78>)
 800a0a8:	4818      	ldr	r0, [pc, #96]	@ (800a10c <_Balloc+0x7c>)
 800a0aa:	216b      	movs	r1, #107	@ 0x6b
 800a0ac:	f000 fdae 	bl	800ac0c <__assert_func>
 800a0b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a0b4:	6006      	str	r6, [r0, #0]
 800a0b6:	60c6      	str	r6, [r0, #12]
 800a0b8:	69e6      	ldr	r6, [r4, #28]
 800a0ba:	68f3      	ldr	r3, [r6, #12]
 800a0bc:	b183      	cbz	r3, 800a0e0 <_Balloc+0x50>
 800a0be:	69e3      	ldr	r3, [r4, #28]
 800a0c0:	68db      	ldr	r3, [r3, #12]
 800a0c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a0c6:	b9b8      	cbnz	r0, 800a0f8 <_Balloc+0x68>
 800a0c8:	2101      	movs	r1, #1
 800a0ca:	fa01 f605 	lsl.w	r6, r1, r5
 800a0ce:	1d72      	adds	r2, r6, #5
 800a0d0:	0092      	lsls	r2, r2, #2
 800a0d2:	4620      	mov	r0, r4
 800a0d4:	f000 fdb8 	bl	800ac48 <_calloc_r>
 800a0d8:	b160      	cbz	r0, 800a0f4 <_Balloc+0x64>
 800a0da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a0de:	e00e      	b.n	800a0fe <_Balloc+0x6e>
 800a0e0:	2221      	movs	r2, #33	@ 0x21
 800a0e2:	2104      	movs	r1, #4
 800a0e4:	4620      	mov	r0, r4
 800a0e6:	f000 fdaf 	bl	800ac48 <_calloc_r>
 800a0ea:	69e3      	ldr	r3, [r4, #28]
 800a0ec:	60f0      	str	r0, [r6, #12]
 800a0ee:	68db      	ldr	r3, [r3, #12]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d1e4      	bne.n	800a0be <_Balloc+0x2e>
 800a0f4:	2000      	movs	r0, #0
 800a0f6:	bd70      	pop	{r4, r5, r6, pc}
 800a0f8:	6802      	ldr	r2, [r0, #0]
 800a0fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a0fe:	2300      	movs	r3, #0
 800a100:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a104:	e7f7      	b.n	800a0f6 <_Balloc+0x66>
 800a106:	bf00      	nop
 800a108:	0800b3e9 	.word	0x0800b3e9
 800a10c:	0800b469 	.word	0x0800b469

0800a110 <_Bfree>:
 800a110:	b570      	push	{r4, r5, r6, lr}
 800a112:	69c6      	ldr	r6, [r0, #28]
 800a114:	4605      	mov	r5, r0
 800a116:	460c      	mov	r4, r1
 800a118:	b976      	cbnz	r6, 800a138 <_Bfree+0x28>
 800a11a:	2010      	movs	r0, #16
 800a11c:	f7ff ff02 	bl	8009f24 <malloc>
 800a120:	4602      	mov	r2, r0
 800a122:	61e8      	str	r0, [r5, #28]
 800a124:	b920      	cbnz	r0, 800a130 <_Bfree+0x20>
 800a126:	4b09      	ldr	r3, [pc, #36]	@ (800a14c <_Bfree+0x3c>)
 800a128:	4809      	ldr	r0, [pc, #36]	@ (800a150 <_Bfree+0x40>)
 800a12a:	218f      	movs	r1, #143	@ 0x8f
 800a12c:	f000 fd6e 	bl	800ac0c <__assert_func>
 800a130:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a134:	6006      	str	r6, [r0, #0]
 800a136:	60c6      	str	r6, [r0, #12]
 800a138:	b13c      	cbz	r4, 800a14a <_Bfree+0x3a>
 800a13a:	69eb      	ldr	r3, [r5, #28]
 800a13c:	6862      	ldr	r2, [r4, #4]
 800a13e:	68db      	ldr	r3, [r3, #12]
 800a140:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a144:	6021      	str	r1, [r4, #0]
 800a146:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a14a:	bd70      	pop	{r4, r5, r6, pc}
 800a14c:	0800b3e9 	.word	0x0800b3e9
 800a150:	0800b469 	.word	0x0800b469

0800a154 <__multadd>:
 800a154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a158:	690d      	ldr	r5, [r1, #16]
 800a15a:	4607      	mov	r7, r0
 800a15c:	460c      	mov	r4, r1
 800a15e:	461e      	mov	r6, r3
 800a160:	f101 0c14 	add.w	ip, r1, #20
 800a164:	2000      	movs	r0, #0
 800a166:	f8dc 3000 	ldr.w	r3, [ip]
 800a16a:	b299      	uxth	r1, r3
 800a16c:	fb02 6101 	mla	r1, r2, r1, r6
 800a170:	0c1e      	lsrs	r6, r3, #16
 800a172:	0c0b      	lsrs	r3, r1, #16
 800a174:	fb02 3306 	mla	r3, r2, r6, r3
 800a178:	b289      	uxth	r1, r1
 800a17a:	3001      	adds	r0, #1
 800a17c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a180:	4285      	cmp	r5, r0
 800a182:	f84c 1b04 	str.w	r1, [ip], #4
 800a186:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a18a:	dcec      	bgt.n	800a166 <__multadd+0x12>
 800a18c:	b30e      	cbz	r6, 800a1d2 <__multadd+0x7e>
 800a18e:	68a3      	ldr	r3, [r4, #8]
 800a190:	42ab      	cmp	r3, r5
 800a192:	dc19      	bgt.n	800a1c8 <__multadd+0x74>
 800a194:	6861      	ldr	r1, [r4, #4]
 800a196:	4638      	mov	r0, r7
 800a198:	3101      	adds	r1, #1
 800a19a:	f7ff ff79 	bl	800a090 <_Balloc>
 800a19e:	4680      	mov	r8, r0
 800a1a0:	b928      	cbnz	r0, 800a1ae <__multadd+0x5a>
 800a1a2:	4602      	mov	r2, r0
 800a1a4:	4b0c      	ldr	r3, [pc, #48]	@ (800a1d8 <__multadd+0x84>)
 800a1a6:	480d      	ldr	r0, [pc, #52]	@ (800a1dc <__multadd+0x88>)
 800a1a8:	21ba      	movs	r1, #186	@ 0xba
 800a1aa:	f000 fd2f 	bl	800ac0c <__assert_func>
 800a1ae:	6922      	ldr	r2, [r4, #16]
 800a1b0:	3202      	adds	r2, #2
 800a1b2:	f104 010c 	add.w	r1, r4, #12
 800a1b6:	0092      	lsls	r2, r2, #2
 800a1b8:	300c      	adds	r0, #12
 800a1ba:	f000 fd19 	bl	800abf0 <memcpy>
 800a1be:	4621      	mov	r1, r4
 800a1c0:	4638      	mov	r0, r7
 800a1c2:	f7ff ffa5 	bl	800a110 <_Bfree>
 800a1c6:	4644      	mov	r4, r8
 800a1c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a1cc:	3501      	adds	r5, #1
 800a1ce:	615e      	str	r6, [r3, #20]
 800a1d0:	6125      	str	r5, [r4, #16]
 800a1d2:	4620      	mov	r0, r4
 800a1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1d8:	0800b458 	.word	0x0800b458
 800a1dc:	0800b469 	.word	0x0800b469

0800a1e0 <__hi0bits>:
 800a1e0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	bf36      	itet	cc
 800a1e8:	0403      	lslcc	r3, r0, #16
 800a1ea:	2000      	movcs	r0, #0
 800a1ec:	2010      	movcc	r0, #16
 800a1ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a1f2:	bf3c      	itt	cc
 800a1f4:	021b      	lslcc	r3, r3, #8
 800a1f6:	3008      	addcc	r0, #8
 800a1f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a1fc:	bf3c      	itt	cc
 800a1fe:	011b      	lslcc	r3, r3, #4
 800a200:	3004      	addcc	r0, #4
 800a202:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a206:	bf3c      	itt	cc
 800a208:	009b      	lslcc	r3, r3, #2
 800a20a:	3002      	addcc	r0, #2
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	db05      	blt.n	800a21c <__hi0bits+0x3c>
 800a210:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a214:	f100 0001 	add.w	r0, r0, #1
 800a218:	bf08      	it	eq
 800a21a:	2020      	moveq	r0, #32
 800a21c:	4770      	bx	lr

0800a21e <__lo0bits>:
 800a21e:	6803      	ldr	r3, [r0, #0]
 800a220:	4602      	mov	r2, r0
 800a222:	f013 0007 	ands.w	r0, r3, #7
 800a226:	d00b      	beq.n	800a240 <__lo0bits+0x22>
 800a228:	07d9      	lsls	r1, r3, #31
 800a22a:	d421      	bmi.n	800a270 <__lo0bits+0x52>
 800a22c:	0798      	lsls	r0, r3, #30
 800a22e:	bf49      	itett	mi
 800a230:	085b      	lsrmi	r3, r3, #1
 800a232:	089b      	lsrpl	r3, r3, #2
 800a234:	2001      	movmi	r0, #1
 800a236:	6013      	strmi	r3, [r2, #0]
 800a238:	bf5c      	itt	pl
 800a23a:	6013      	strpl	r3, [r2, #0]
 800a23c:	2002      	movpl	r0, #2
 800a23e:	4770      	bx	lr
 800a240:	b299      	uxth	r1, r3
 800a242:	b909      	cbnz	r1, 800a248 <__lo0bits+0x2a>
 800a244:	0c1b      	lsrs	r3, r3, #16
 800a246:	2010      	movs	r0, #16
 800a248:	b2d9      	uxtb	r1, r3
 800a24a:	b909      	cbnz	r1, 800a250 <__lo0bits+0x32>
 800a24c:	3008      	adds	r0, #8
 800a24e:	0a1b      	lsrs	r3, r3, #8
 800a250:	0719      	lsls	r1, r3, #28
 800a252:	bf04      	itt	eq
 800a254:	091b      	lsreq	r3, r3, #4
 800a256:	3004      	addeq	r0, #4
 800a258:	0799      	lsls	r1, r3, #30
 800a25a:	bf04      	itt	eq
 800a25c:	089b      	lsreq	r3, r3, #2
 800a25e:	3002      	addeq	r0, #2
 800a260:	07d9      	lsls	r1, r3, #31
 800a262:	d403      	bmi.n	800a26c <__lo0bits+0x4e>
 800a264:	085b      	lsrs	r3, r3, #1
 800a266:	f100 0001 	add.w	r0, r0, #1
 800a26a:	d003      	beq.n	800a274 <__lo0bits+0x56>
 800a26c:	6013      	str	r3, [r2, #0]
 800a26e:	4770      	bx	lr
 800a270:	2000      	movs	r0, #0
 800a272:	4770      	bx	lr
 800a274:	2020      	movs	r0, #32
 800a276:	4770      	bx	lr

0800a278 <__i2b>:
 800a278:	b510      	push	{r4, lr}
 800a27a:	460c      	mov	r4, r1
 800a27c:	2101      	movs	r1, #1
 800a27e:	f7ff ff07 	bl	800a090 <_Balloc>
 800a282:	4602      	mov	r2, r0
 800a284:	b928      	cbnz	r0, 800a292 <__i2b+0x1a>
 800a286:	4b05      	ldr	r3, [pc, #20]	@ (800a29c <__i2b+0x24>)
 800a288:	4805      	ldr	r0, [pc, #20]	@ (800a2a0 <__i2b+0x28>)
 800a28a:	f240 1145 	movw	r1, #325	@ 0x145
 800a28e:	f000 fcbd 	bl	800ac0c <__assert_func>
 800a292:	2301      	movs	r3, #1
 800a294:	6144      	str	r4, [r0, #20]
 800a296:	6103      	str	r3, [r0, #16]
 800a298:	bd10      	pop	{r4, pc}
 800a29a:	bf00      	nop
 800a29c:	0800b458 	.word	0x0800b458
 800a2a0:	0800b469 	.word	0x0800b469

0800a2a4 <__multiply>:
 800a2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2a8:	4614      	mov	r4, r2
 800a2aa:	690a      	ldr	r2, [r1, #16]
 800a2ac:	6923      	ldr	r3, [r4, #16]
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	bfa8      	it	ge
 800a2b2:	4623      	movge	r3, r4
 800a2b4:	460f      	mov	r7, r1
 800a2b6:	bfa4      	itt	ge
 800a2b8:	460c      	movge	r4, r1
 800a2ba:	461f      	movge	r7, r3
 800a2bc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a2c0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a2c4:	68a3      	ldr	r3, [r4, #8]
 800a2c6:	6861      	ldr	r1, [r4, #4]
 800a2c8:	eb0a 0609 	add.w	r6, sl, r9
 800a2cc:	42b3      	cmp	r3, r6
 800a2ce:	b085      	sub	sp, #20
 800a2d0:	bfb8      	it	lt
 800a2d2:	3101      	addlt	r1, #1
 800a2d4:	f7ff fedc 	bl	800a090 <_Balloc>
 800a2d8:	b930      	cbnz	r0, 800a2e8 <__multiply+0x44>
 800a2da:	4602      	mov	r2, r0
 800a2dc:	4b44      	ldr	r3, [pc, #272]	@ (800a3f0 <__multiply+0x14c>)
 800a2de:	4845      	ldr	r0, [pc, #276]	@ (800a3f4 <__multiply+0x150>)
 800a2e0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a2e4:	f000 fc92 	bl	800ac0c <__assert_func>
 800a2e8:	f100 0514 	add.w	r5, r0, #20
 800a2ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a2f0:	462b      	mov	r3, r5
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	4543      	cmp	r3, r8
 800a2f6:	d321      	bcc.n	800a33c <__multiply+0x98>
 800a2f8:	f107 0114 	add.w	r1, r7, #20
 800a2fc:	f104 0214 	add.w	r2, r4, #20
 800a300:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a304:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a308:	9302      	str	r3, [sp, #8]
 800a30a:	1b13      	subs	r3, r2, r4
 800a30c:	3b15      	subs	r3, #21
 800a30e:	f023 0303 	bic.w	r3, r3, #3
 800a312:	3304      	adds	r3, #4
 800a314:	f104 0715 	add.w	r7, r4, #21
 800a318:	42ba      	cmp	r2, r7
 800a31a:	bf38      	it	cc
 800a31c:	2304      	movcc	r3, #4
 800a31e:	9301      	str	r3, [sp, #4]
 800a320:	9b02      	ldr	r3, [sp, #8]
 800a322:	9103      	str	r1, [sp, #12]
 800a324:	428b      	cmp	r3, r1
 800a326:	d80c      	bhi.n	800a342 <__multiply+0x9e>
 800a328:	2e00      	cmp	r6, #0
 800a32a:	dd03      	ble.n	800a334 <__multiply+0x90>
 800a32c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a330:	2b00      	cmp	r3, #0
 800a332:	d05b      	beq.n	800a3ec <__multiply+0x148>
 800a334:	6106      	str	r6, [r0, #16]
 800a336:	b005      	add	sp, #20
 800a338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a33c:	f843 2b04 	str.w	r2, [r3], #4
 800a340:	e7d8      	b.n	800a2f4 <__multiply+0x50>
 800a342:	f8b1 a000 	ldrh.w	sl, [r1]
 800a346:	f1ba 0f00 	cmp.w	sl, #0
 800a34a:	d024      	beq.n	800a396 <__multiply+0xf2>
 800a34c:	f104 0e14 	add.w	lr, r4, #20
 800a350:	46a9      	mov	r9, r5
 800a352:	f04f 0c00 	mov.w	ip, #0
 800a356:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a35a:	f8d9 3000 	ldr.w	r3, [r9]
 800a35e:	fa1f fb87 	uxth.w	fp, r7
 800a362:	b29b      	uxth	r3, r3
 800a364:	fb0a 330b 	mla	r3, sl, fp, r3
 800a368:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a36c:	f8d9 7000 	ldr.w	r7, [r9]
 800a370:	4463      	add	r3, ip
 800a372:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a376:	fb0a c70b 	mla	r7, sl, fp, ip
 800a37a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a37e:	b29b      	uxth	r3, r3
 800a380:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a384:	4572      	cmp	r2, lr
 800a386:	f849 3b04 	str.w	r3, [r9], #4
 800a38a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a38e:	d8e2      	bhi.n	800a356 <__multiply+0xb2>
 800a390:	9b01      	ldr	r3, [sp, #4]
 800a392:	f845 c003 	str.w	ip, [r5, r3]
 800a396:	9b03      	ldr	r3, [sp, #12]
 800a398:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a39c:	3104      	adds	r1, #4
 800a39e:	f1b9 0f00 	cmp.w	r9, #0
 800a3a2:	d021      	beq.n	800a3e8 <__multiply+0x144>
 800a3a4:	682b      	ldr	r3, [r5, #0]
 800a3a6:	f104 0c14 	add.w	ip, r4, #20
 800a3aa:	46ae      	mov	lr, r5
 800a3ac:	f04f 0a00 	mov.w	sl, #0
 800a3b0:	f8bc b000 	ldrh.w	fp, [ip]
 800a3b4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a3b8:	fb09 770b 	mla	r7, r9, fp, r7
 800a3bc:	4457      	add	r7, sl
 800a3be:	b29b      	uxth	r3, r3
 800a3c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a3c4:	f84e 3b04 	str.w	r3, [lr], #4
 800a3c8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a3cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a3d0:	f8be 3000 	ldrh.w	r3, [lr]
 800a3d4:	fb09 330a 	mla	r3, r9, sl, r3
 800a3d8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a3dc:	4562      	cmp	r2, ip
 800a3de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a3e2:	d8e5      	bhi.n	800a3b0 <__multiply+0x10c>
 800a3e4:	9f01      	ldr	r7, [sp, #4]
 800a3e6:	51eb      	str	r3, [r5, r7]
 800a3e8:	3504      	adds	r5, #4
 800a3ea:	e799      	b.n	800a320 <__multiply+0x7c>
 800a3ec:	3e01      	subs	r6, #1
 800a3ee:	e79b      	b.n	800a328 <__multiply+0x84>
 800a3f0:	0800b458 	.word	0x0800b458
 800a3f4:	0800b469 	.word	0x0800b469

0800a3f8 <__pow5mult>:
 800a3f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3fc:	4615      	mov	r5, r2
 800a3fe:	f012 0203 	ands.w	r2, r2, #3
 800a402:	4607      	mov	r7, r0
 800a404:	460e      	mov	r6, r1
 800a406:	d007      	beq.n	800a418 <__pow5mult+0x20>
 800a408:	4c25      	ldr	r4, [pc, #148]	@ (800a4a0 <__pow5mult+0xa8>)
 800a40a:	3a01      	subs	r2, #1
 800a40c:	2300      	movs	r3, #0
 800a40e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a412:	f7ff fe9f 	bl	800a154 <__multadd>
 800a416:	4606      	mov	r6, r0
 800a418:	10ad      	asrs	r5, r5, #2
 800a41a:	d03d      	beq.n	800a498 <__pow5mult+0xa0>
 800a41c:	69fc      	ldr	r4, [r7, #28]
 800a41e:	b97c      	cbnz	r4, 800a440 <__pow5mult+0x48>
 800a420:	2010      	movs	r0, #16
 800a422:	f7ff fd7f 	bl	8009f24 <malloc>
 800a426:	4602      	mov	r2, r0
 800a428:	61f8      	str	r0, [r7, #28]
 800a42a:	b928      	cbnz	r0, 800a438 <__pow5mult+0x40>
 800a42c:	4b1d      	ldr	r3, [pc, #116]	@ (800a4a4 <__pow5mult+0xac>)
 800a42e:	481e      	ldr	r0, [pc, #120]	@ (800a4a8 <__pow5mult+0xb0>)
 800a430:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a434:	f000 fbea 	bl	800ac0c <__assert_func>
 800a438:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a43c:	6004      	str	r4, [r0, #0]
 800a43e:	60c4      	str	r4, [r0, #12]
 800a440:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a444:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a448:	b94c      	cbnz	r4, 800a45e <__pow5mult+0x66>
 800a44a:	f240 2171 	movw	r1, #625	@ 0x271
 800a44e:	4638      	mov	r0, r7
 800a450:	f7ff ff12 	bl	800a278 <__i2b>
 800a454:	2300      	movs	r3, #0
 800a456:	f8c8 0008 	str.w	r0, [r8, #8]
 800a45a:	4604      	mov	r4, r0
 800a45c:	6003      	str	r3, [r0, #0]
 800a45e:	f04f 0900 	mov.w	r9, #0
 800a462:	07eb      	lsls	r3, r5, #31
 800a464:	d50a      	bpl.n	800a47c <__pow5mult+0x84>
 800a466:	4631      	mov	r1, r6
 800a468:	4622      	mov	r2, r4
 800a46a:	4638      	mov	r0, r7
 800a46c:	f7ff ff1a 	bl	800a2a4 <__multiply>
 800a470:	4631      	mov	r1, r6
 800a472:	4680      	mov	r8, r0
 800a474:	4638      	mov	r0, r7
 800a476:	f7ff fe4b 	bl	800a110 <_Bfree>
 800a47a:	4646      	mov	r6, r8
 800a47c:	106d      	asrs	r5, r5, #1
 800a47e:	d00b      	beq.n	800a498 <__pow5mult+0xa0>
 800a480:	6820      	ldr	r0, [r4, #0]
 800a482:	b938      	cbnz	r0, 800a494 <__pow5mult+0x9c>
 800a484:	4622      	mov	r2, r4
 800a486:	4621      	mov	r1, r4
 800a488:	4638      	mov	r0, r7
 800a48a:	f7ff ff0b 	bl	800a2a4 <__multiply>
 800a48e:	6020      	str	r0, [r4, #0]
 800a490:	f8c0 9000 	str.w	r9, [r0]
 800a494:	4604      	mov	r4, r0
 800a496:	e7e4      	b.n	800a462 <__pow5mult+0x6a>
 800a498:	4630      	mov	r0, r6
 800a49a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a49e:	bf00      	nop
 800a4a0:	0800b4c4 	.word	0x0800b4c4
 800a4a4:	0800b3e9 	.word	0x0800b3e9
 800a4a8:	0800b469 	.word	0x0800b469

0800a4ac <__lshift>:
 800a4ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4b0:	460c      	mov	r4, r1
 800a4b2:	6849      	ldr	r1, [r1, #4]
 800a4b4:	6923      	ldr	r3, [r4, #16]
 800a4b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a4ba:	68a3      	ldr	r3, [r4, #8]
 800a4bc:	4607      	mov	r7, r0
 800a4be:	4691      	mov	r9, r2
 800a4c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a4c4:	f108 0601 	add.w	r6, r8, #1
 800a4c8:	42b3      	cmp	r3, r6
 800a4ca:	db0b      	blt.n	800a4e4 <__lshift+0x38>
 800a4cc:	4638      	mov	r0, r7
 800a4ce:	f7ff fddf 	bl	800a090 <_Balloc>
 800a4d2:	4605      	mov	r5, r0
 800a4d4:	b948      	cbnz	r0, 800a4ea <__lshift+0x3e>
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	4b28      	ldr	r3, [pc, #160]	@ (800a57c <__lshift+0xd0>)
 800a4da:	4829      	ldr	r0, [pc, #164]	@ (800a580 <__lshift+0xd4>)
 800a4dc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a4e0:	f000 fb94 	bl	800ac0c <__assert_func>
 800a4e4:	3101      	adds	r1, #1
 800a4e6:	005b      	lsls	r3, r3, #1
 800a4e8:	e7ee      	b.n	800a4c8 <__lshift+0x1c>
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	f100 0114 	add.w	r1, r0, #20
 800a4f0:	f100 0210 	add.w	r2, r0, #16
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	4553      	cmp	r3, sl
 800a4f8:	db33      	blt.n	800a562 <__lshift+0xb6>
 800a4fa:	6920      	ldr	r0, [r4, #16]
 800a4fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a500:	f104 0314 	add.w	r3, r4, #20
 800a504:	f019 091f 	ands.w	r9, r9, #31
 800a508:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a50c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a510:	d02b      	beq.n	800a56a <__lshift+0xbe>
 800a512:	f1c9 0e20 	rsb	lr, r9, #32
 800a516:	468a      	mov	sl, r1
 800a518:	2200      	movs	r2, #0
 800a51a:	6818      	ldr	r0, [r3, #0]
 800a51c:	fa00 f009 	lsl.w	r0, r0, r9
 800a520:	4310      	orrs	r0, r2
 800a522:	f84a 0b04 	str.w	r0, [sl], #4
 800a526:	f853 2b04 	ldr.w	r2, [r3], #4
 800a52a:	459c      	cmp	ip, r3
 800a52c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a530:	d8f3      	bhi.n	800a51a <__lshift+0x6e>
 800a532:	ebac 0304 	sub.w	r3, ip, r4
 800a536:	3b15      	subs	r3, #21
 800a538:	f023 0303 	bic.w	r3, r3, #3
 800a53c:	3304      	adds	r3, #4
 800a53e:	f104 0015 	add.w	r0, r4, #21
 800a542:	4584      	cmp	ip, r0
 800a544:	bf38      	it	cc
 800a546:	2304      	movcc	r3, #4
 800a548:	50ca      	str	r2, [r1, r3]
 800a54a:	b10a      	cbz	r2, 800a550 <__lshift+0xa4>
 800a54c:	f108 0602 	add.w	r6, r8, #2
 800a550:	3e01      	subs	r6, #1
 800a552:	4638      	mov	r0, r7
 800a554:	612e      	str	r6, [r5, #16]
 800a556:	4621      	mov	r1, r4
 800a558:	f7ff fdda 	bl	800a110 <_Bfree>
 800a55c:	4628      	mov	r0, r5
 800a55e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a562:	f842 0f04 	str.w	r0, [r2, #4]!
 800a566:	3301      	adds	r3, #1
 800a568:	e7c5      	b.n	800a4f6 <__lshift+0x4a>
 800a56a:	3904      	subs	r1, #4
 800a56c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a570:	f841 2f04 	str.w	r2, [r1, #4]!
 800a574:	459c      	cmp	ip, r3
 800a576:	d8f9      	bhi.n	800a56c <__lshift+0xc0>
 800a578:	e7ea      	b.n	800a550 <__lshift+0xa4>
 800a57a:	bf00      	nop
 800a57c:	0800b458 	.word	0x0800b458
 800a580:	0800b469 	.word	0x0800b469

0800a584 <__mcmp>:
 800a584:	690a      	ldr	r2, [r1, #16]
 800a586:	4603      	mov	r3, r0
 800a588:	6900      	ldr	r0, [r0, #16]
 800a58a:	1a80      	subs	r0, r0, r2
 800a58c:	b530      	push	{r4, r5, lr}
 800a58e:	d10e      	bne.n	800a5ae <__mcmp+0x2a>
 800a590:	3314      	adds	r3, #20
 800a592:	3114      	adds	r1, #20
 800a594:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a598:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a59c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a5a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a5a4:	4295      	cmp	r5, r2
 800a5a6:	d003      	beq.n	800a5b0 <__mcmp+0x2c>
 800a5a8:	d205      	bcs.n	800a5b6 <__mcmp+0x32>
 800a5aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a5ae:	bd30      	pop	{r4, r5, pc}
 800a5b0:	42a3      	cmp	r3, r4
 800a5b2:	d3f3      	bcc.n	800a59c <__mcmp+0x18>
 800a5b4:	e7fb      	b.n	800a5ae <__mcmp+0x2a>
 800a5b6:	2001      	movs	r0, #1
 800a5b8:	e7f9      	b.n	800a5ae <__mcmp+0x2a>
	...

0800a5bc <__mdiff>:
 800a5bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c0:	4689      	mov	r9, r1
 800a5c2:	4606      	mov	r6, r0
 800a5c4:	4611      	mov	r1, r2
 800a5c6:	4648      	mov	r0, r9
 800a5c8:	4614      	mov	r4, r2
 800a5ca:	f7ff ffdb 	bl	800a584 <__mcmp>
 800a5ce:	1e05      	subs	r5, r0, #0
 800a5d0:	d112      	bne.n	800a5f8 <__mdiff+0x3c>
 800a5d2:	4629      	mov	r1, r5
 800a5d4:	4630      	mov	r0, r6
 800a5d6:	f7ff fd5b 	bl	800a090 <_Balloc>
 800a5da:	4602      	mov	r2, r0
 800a5dc:	b928      	cbnz	r0, 800a5ea <__mdiff+0x2e>
 800a5de:	4b3f      	ldr	r3, [pc, #252]	@ (800a6dc <__mdiff+0x120>)
 800a5e0:	f240 2137 	movw	r1, #567	@ 0x237
 800a5e4:	483e      	ldr	r0, [pc, #248]	@ (800a6e0 <__mdiff+0x124>)
 800a5e6:	f000 fb11 	bl	800ac0c <__assert_func>
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a5f0:	4610      	mov	r0, r2
 800a5f2:	b003      	add	sp, #12
 800a5f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5f8:	bfbc      	itt	lt
 800a5fa:	464b      	movlt	r3, r9
 800a5fc:	46a1      	movlt	r9, r4
 800a5fe:	4630      	mov	r0, r6
 800a600:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a604:	bfba      	itte	lt
 800a606:	461c      	movlt	r4, r3
 800a608:	2501      	movlt	r5, #1
 800a60a:	2500      	movge	r5, #0
 800a60c:	f7ff fd40 	bl	800a090 <_Balloc>
 800a610:	4602      	mov	r2, r0
 800a612:	b918      	cbnz	r0, 800a61c <__mdiff+0x60>
 800a614:	4b31      	ldr	r3, [pc, #196]	@ (800a6dc <__mdiff+0x120>)
 800a616:	f240 2145 	movw	r1, #581	@ 0x245
 800a61a:	e7e3      	b.n	800a5e4 <__mdiff+0x28>
 800a61c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a620:	6926      	ldr	r6, [r4, #16]
 800a622:	60c5      	str	r5, [r0, #12]
 800a624:	f109 0310 	add.w	r3, r9, #16
 800a628:	f109 0514 	add.w	r5, r9, #20
 800a62c:	f104 0e14 	add.w	lr, r4, #20
 800a630:	f100 0b14 	add.w	fp, r0, #20
 800a634:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a638:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a63c:	9301      	str	r3, [sp, #4]
 800a63e:	46d9      	mov	r9, fp
 800a640:	f04f 0c00 	mov.w	ip, #0
 800a644:	9b01      	ldr	r3, [sp, #4]
 800a646:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a64a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a64e:	9301      	str	r3, [sp, #4]
 800a650:	fa1f f38a 	uxth.w	r3, sl
 800a654:	4619      	mov	r1, r3
 800a656:	b283      	uxth	r3, r0
 800a658:	1acb      	subs	r3, r1, r3
 800a65a:	0c00      	lsrs	r0, r0, #16
 800a65c:	4463      	add	r3, ip
 800a65e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a662:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a666:	b29b      	uxth	r3, r3
 800a668:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a66c:	4576      	cmp	r6, lr
 800a66e:	f849 3b04 	str.w	r3, [r9], #4
 800a672:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a676:	d8e5      	bhi.n	800a644 <__mdiff+0x88>
 800a678:	1b33      	subs	r3, r6, r4
 800a67a:	3b15      	subs	r3, #21
 800a67c:	f023 0303 	bic.w	r3, r3, #3
 800a680:	3415      	adds	r4, #21
 800a682:	3304      	adds	r3, #4
 800a684:	42a6      	cmp	r6, r4
 800a686:	bf38      	it	cc
 800a688:	2304      	movcc	r3, #4
 800a68a:	441d      	add	r5, r3
 800a68c:	445b      	add	r3, fp
 800a68e:	461e      	mov	r6, r3
 800a690:	462c      	mov	r4, r5
 800a692:	4544      	cmp	r4, r8
 800a694:	d30e      	bcc.n	800a6b4 <__mdiff+0xf8>
 800a696:	f108 0103 	add.w	r1, r8, #3
 800a69a:	1b49      	subs	r1, r1, r5
 800a69c:	f021 0103 	bic.w	r1, r1, #3
 800a6a0:	3d03      	subs	r5, #3
 800a6a2:	45a8      	cmp	r8, r5
 800a6a4:	bf38      	it	cc
 800a6a6:	2100      	movcc	r1, #0
 800a6a8:	440b      	add	r3, r1
 800a6aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a6ae:	b191      	cbz	r1, 800a6d6 <__mdiff+0x11a>
 800a6b0:	6117      	str	r7, [r2, #16]
 800a6b2:	e79d      	b.n	800a5f0 <__mdiff+0x34>
 800a6b4:	f854 1b04 	ldr.w	r1, [r4], #4
 800a6b8:	46e6      	mov	lr, ip
 800a6ba:	0c08      	lsrs	r0, r1, #16
 800a6bc:	fa1c fc81 	uxtah	ip, ip, r1
 800a6c0:	4471      	add	r1, lr
 800a6c2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a6c6:	b289      	uxth	r1, r1
 800a6c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a6cc:	f846 1b04 	str.w	r1, [r6], #4
 800a6d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a6d4:	e7dd      	b.n	800a692 <__mdiff+0xd6>
 800a6d6:	3f01      	subs	r7, #1
 800a6d8:	e7e7      	b.n	800a6aa <__mdiff+0xee>
 800a6da:	bf00      	nop
 800a6dc:	0800b458 	.word	0x0800b458
 800a6e0:	0800b469 	.word	0x0800b469

0800a6e4 <__d2b>:
 800a6e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a6e8:	460f      	mov	r7, r1
 800a6ea:	2101      	movs	r1, #1
 800a6ec:	ec59 8b10 	vmov	r8, r9, d0
 800a6f0:	4616      	mov	r6, r2
 800a6f2:	f7ff fccd 	bl	800a090 <_Balloc>
 800a6f6:	4604      	mov	r4, r0
 800a6f8:	b930      	cbnz	r0, 800a708 <__d2b+0x24>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	4b23      	ldr	r3, [pc, #140]	@ (800a78c <__d2b+0xa8>)
 800a6fe:	4824      	ldr	r0, [pc, #144]	@ (800a790 <__d2b+0xac>)
 800a700:	f240 310f 	movw	r1, #783	@ 0x30f
 800a704:	f000 fa82 	bl	800ac0c <__assert_func>
 800a708:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a70c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a710:	b10d      	cbz	r5, 800a716 <__d2b+0x32>
 800a712:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a716:	9301      	str	r3, [sp, #4]
 800a718:	f1b8 0300 	subs.w	r3, r8, #0
 800a71c:	d023      	beq.n	800a766 <__d2b+0x82>
 800a71e:	4668      	mov	r0, sp
 800a720:	9300      	str	r3, [sp, #0]
 800a722:	f7ff fd7c 	bl	800a21e <__lo0bits>
 800a726:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a72a:	b1d0      	cbz	r0, 800a762 <__d2b+0x7e>
 800a72c:	f1c0 0320 	rsb	r3, r0, #32
 800a730:	fa02 f303 	lsl.w	r3, r2, r3
 800a734:	430b      	orrs	r3, r1
 800a736:	40c2      	lsrs	r2, r0
 800a738:	6163      	str	r3, [r4, #20]
 800a73a:	9201      	str	r2, [sp, #4]
 800a73c:	9b01      	ldr	r3, [sp, #4]
 800a73e:	61a3      	str	r3, [r4, #24]
 800a740:	2b00      	cmp	r3, #0
 800a742:	bf0c      	ite	eq
 800a744:	2201      	moveq	r2, #1
 800a746:	2202      	movne	r2, #2
 800a748:	6122      	str	r2, [r4, #16]
 800a74a:	b1a5      	cbz	r5, 800a776 <__d2b+0x92>
 800a74c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a750:	4405      	add	r5, r0
 800a752:	603d      	str	r5, [r7, #0]
 800a754:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a758:	6030      	str	r0, [r6, #0]
 800a75a:	4620      	mov	r0, r4
 800a75c:	b003      	add	sp, #12
 800a75e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a762:	6161      	str	r1, [r4, #20]
 800a764:	e7ea      	b.n	800a73c <__d2b+0x58>
 800a766:	a801      	add	r0, sp, #4
 800a768:	f7ff fd59 	bl	800a21e <__lo0bits>
 800a76c:	9b01      	ldr	r3, [sp, #4]
 800a76e:	6163      	str	r3, [r4, #20]
 800a770:	3020      	adds	r0, #32
 800a772:	2201      	movs	r2, #1
 800a774:	e7e8      	b.n	800a748 <__d2b+0x64>
 800a776:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a77a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a77e:	6038      	str	r0, [r7, #0]
 800a780:	6918      	ldr	r0, [r3, #16]
 800a782:	f7ff fd2d 	bl	800a1e0 <__hi0bits>
 800a786:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a78a:	e7e5      	b.n	800a758 <__d2b+0x74>
 800a78c:	0800b458 	.word	0x0800b458
 800a790:	0800b469 	.word	0x0800b469

0800a794 <__ssputs_r>:
 800a794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a798:	688e      	ldr	r6, [r1, #8]
 800a79a:	461f      	mov	r7, r3
 800a79c:	42be      	cmp	r6, r7
 800a79e:	680b      	ldr	r3, [r1, #0]
 800a7a0:	4682      	mov	sl, r0
 800a7a2:	460c      	mov	r4, r1
 800a7a4:	4690      	mov	r8, r2
 800a7a6:	d82d      	bhi.n	800a804 <__ssputs_r+0x70>
 800a7a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a7ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a7b0:	d026      	beq.n	800a800 <__ssputs_r+0x6c>
 800a7b2:	6965      	ldr	r5, [r4, #20]
 800a7b4:	6909      	ldr	r1, [r1, #16]
 800a7b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a7ba:	eba3 0901 	sub.w	r9, r3, r1
 800a7be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a7c2:	1c7b      	adds	r3, r7, #1
 800a7c4:	444b      	add	r3, r9
 800a7c6:	106d      	asrs	r5, r5, #1
 800a7c8:	429d      	cmp	r5, r3
 800a7ca:	bf38      	it	cc
 800a7cc:	461d      	movcc	r5, r3
 800a7ce:	0553      	lsls	r3, r2, #21
 800a7d0:	d527      	bpl.n	800a822 <__ssputs_r+0x8e>
 800a7d2:	4629      	mov	r1, r5
 800a7d4:	f7ff fbd0 	bl	8009f78 <_malloc_r>
 800a7d8:	4606      	mov	r6, r0
 800a7da:	b360      	cbz	r0, 800a836 <__ssputs_r+0xa2>
 800a7dc:	6921      	ldr	r1, [r4, #16]
 800a7de:	464a      	mov	r2, r9
 800a7e0:	f000 fa06 	bl	800abf0 <memcpy>
 800a7e4:	89a3      	ldrh	r3, [r4, #12]
 800a7e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a7ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a7ee:	81a3      	strh	r3, [r4, #12]
 800a7f0:	6126      	str	r6, [r4, #16]
 800a7f2:	6165      	str	r5, [r4, #20]
 800a7f4:	444e      	add	r6, r9
 800a7f6:	eba5 0509 	sub.w	r5, r5, r9
 800a7fa:	6026      	str	r6, [r4, #0]
 800a7fc:	60a5      	str	r5, [r4, #8]
 800a7fe:	463e      	mov	r6, r7
 800a800:	42be      	cmp	r6, r7
 800a802:	d900      	bls.n	800a806 <__ssputs_r+0x72>
 800a804:	463e      	mov	r6, r7
 800a806:	6820      	ldr	r0, [r4, #0]
 800a808:	4632      	mov	r2, r6
 800a80a:	4641      	mov	r1, r8
 800a80c:	f000 f9c6 	bl	800ab9c <memmove>
 800a810:	68a3      	ldr	r3, [r4, #8]
 800a812:	1b9b      	subs	r3, r3, r6
 800a814:	60a3      	str	r3, [r4, #8]
 800a816:	6823      	ldr	r3, [r4, #0]
 800a818:	4433      	add	r3, r6
 800a81a:	6023      	str	r3, [r4, #0]
 800a81c:	2000      	movs	r0, #0
 800a81e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a822:	462a      	mov	r2, r5
 800a824:	f000 fa36 	bl	800ac94 <_realloc_r>
 800a828:	4606      	mov	r6, r0
 800a82a:	2800      	cmp	r0, #0
 800a82c:	d1e0      	bne.n	800a7f0 <__ssputs_r+0x5c>
 800a82e:	6921      	ldr	r1, [r4, #16]
 800a830:	4650      	mov	r0, sl
 800a832:	f7ff fb2d 	bl	8009e90 <_free_r>
 800a836:	230c      	movs	r3, #12
 800a838:	f8ca 3000 	str.w	r3, [sl]
 800a83c:	89a3      	ldrh	r3, [r4, #12]
 800a83e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a842:	81a3      	strh	r3, [r4, #12]
 800a844:	f04f 30ff 	mov.w	r0, #4294967295
 800a848:	e7e9      	b.n	800a81e <__ssputs_r+0x8a>
	...

0800a84c <_svfiprintf_r>:
 800a84c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a850:	4698      	mov	r8, r3
 800a852:	898b      	ldrh	r3, [r1, #12]
 800a854:	061b      	lsls	r3, r3, #24
 800a856:	b09d      	sub	sp, #116	@ 0x74
 800a858:	4607      	mov	r7, r0
 800a85a:	460d      	mov	r5, r1
 800a85c:	4614      	mov	r4, r2
 800a85e:	d510      	bpl.n	800a882 <_svfiprintf_r+0x36>
 800a860:	690b      	ldr	r3, [r1, #16]
 800a862:	b973      	cbnz	r3, 800a882 <_svfiprintf_r+0x36>
 800a864:	2140      	movs	r1, #64	@ 0x40
 800a866:	f7ff fb87 	bl	8009f78 <_malloc_r>
 800a86a:	6028      	str	r0, [r5, #0]
 800a86c:	6128      	str	r0, [r5, #16]
 800a86e:	b930      	cbnz	r0, 800a87e <_svfiprintf_r+0x32>
 800a870:	230c      	movs	r3, #12
 800a872:	603b      	str	r3, [r7, #0]
 800a874:	f04f 30ff 	mov.w	r0, #4294967295
 800a878:	b01d      	add	sp, #116	@ 0x74
 800a87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a87e:	2340      	movs	r3, #64	@ 0x40
 800a880:	616b      	str	r3, [r5, #20]
 800a882:	2300      	movs	r3, #0
 800a884:	9309      	str	r3, [sp, #36]	@ 0x24
 800a886:	2320      	movs	r3, #32
 800a888:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a88c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a890:	2330      	movs	r3, #48	@ 0x30
 800a892:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800aa30 <_svfiprintf_r+0x1e4>
 800a896:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a89a:	f04f 0901 	mov.w	r9, #1
 800a89e:	4623      	mov	r3, r4
 800a8a0:	469a      	mov	sl, r3
 800a8a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8a6:	b10a      	cbz	r2, 800a8ac <_svfiprintf_r+0x60>
 800a8a8:	2a25      	cmp	r2, #37	@ 0x25
 800a8aa:	d1f9      	bne.n	800a8a0 <_svfiprintf_r+0x54>
 800a8ac:	ebba 0b04 	subs.w	fp, sl, r4
 800a8b0:	d00b      	beq.n	800a8ca <_svfiprintf_r+0x7e>
 800a8b2:	465b      	mov	r3, fp
 800a8b4:	4622      	mov	r2, r4
 800a8b6:	4629      	mov	r1, r5
 800a8b8:	4638      	mov	r0, r7
 800a8ba:	f7ff ff6b 	bl	800a794 <__ssputs_r>
 800a8be:	3001      	adds	r0, #1
 800a8c0:	f000 80a7 	beq.w	800aa12 <_svfiprintf_r+0x1c6>
 800a8c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a8c6:	445a      	add	r2, fp
 800a8c8:	9209      	str	r2, [sp, #36]	@ 0x24
 800a8ca:	f89a 3000 	ldrb.w	r3, [sl]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	f000 809f 	beq.w	800aa12 <_svfiprintf_r+0x1c6>
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	f04f 32ff 	mov.w	r2, #4294967295
 800a8da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8de:	f10a 0a01 	add.w	sl, sl, #1
 800a8e2:	9304      	str	r3, [sp, #16]
 800a8e4:	9307      	str	r3, [sp, #28]
 800a8e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a8ea:	931a      	str	r3, [sp, #104]	@ 0x68
 800a8ec:	4654      	mov	r4, sl
 800a8ee:	2205      	movs	r2, #5
 800a8f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8f4:	484e      	ldr	r0, [pc, #312]	@ (800aa30 <_svfiprintf_r+0x1e4>)
 800a8f6:	f7f5 fc73 	bl	80001e0 <memchr>
 800a8fa:	9a04      	ldr	r2, [sp, #16]
 800a8fc:	b9d8      	cbnz	r0, 800a936 <_svfiprintf_r+0xea>
 800a8fe:	06d0      	lsls	r0, r2, #27
 800a900:	bf44      	itt	mi
 800a902:	2320      	movmi	r3, #32
 800a904:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a908:	0711      	lsls	r1, r2, #28
 800a90a:	bf44      	itt	mi
 800a90c:	232b      	movmi	r3, #43	@ 0x2b
 800a90e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a912:	f89a 3000 	ldrb.w	r3, [sl]
 800a916:	2b2a      	cmp	r3, #42	@ 0x2a
 800a918:	d015      	beq.n	800a946 <_svfiprintf_r+0xfa>
 800a91a:	9a07      	ldr	r2, [sp, #28]
 800a91c:	4654      	mov	r4, sl
 800a91e:	2000      	movs	r0, #0
 800a920:	f04f 0c0a 	mov.w	ip, #10
 800a924:	4621      	mov	r1, r4
 800a926:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a92a:	3b30      	subs	r3, #48	@ 0x30
 800a92c:	2b09      	cmp	r3, #9
 800a92e:	d94b      	bls.n	800a9c8 <_svfiprintf_r+0x17c>
 800a930:	b1b0      	cbz	r0, 800a960 <_svfiprintf_r+0x114>
 800a932:	9207      	str	r2, [sp, #28]
 800a934:	e014      	b.n	800a960 <_svfiprintf_r+0x114>
 800a936:	eba0 0308 	sub.w	r3, r0, r8
 800a93a:	fa09 f303 	lsl.w	r3, r9, r3
 800a93e:	4313      	orrs	r3, r2
 800a940:	9304      	str	r3, [sp, #16]
 800a942:	46a2      	mov	sl, r4
 800a944:	e7d2      	b.n	800a8ec <_svfiprintf_r+0xa0>
 800a946:	9b03      	ldr	r3, [sp, #12]
 800a948:	1d19      	adds	r1, r3, #4
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	9103      	str	r1, [sp, #12]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	bfbb      	ittet	lt
 800a952:	425b      	neglt	r3, r3
 800a954:	f042 0202 	orrlt.w	r2, r2, #2
 800a958:	9307      	strge	r3, [sp, #28]
 800a95a:	9307      	strlt	r3, [sp, #28]
 800a95c:	bfb8      	it	lt
 800a95e:	9204      	strlt	r2, [sp, #16]
 800a960:	7823      	ldrb	r3, [r4, #0]
 800a962:	2b2e      	cmp	r3, #46	@ 0x2e
 800a964:	d10a      	bne.n	800a97c <_svfiprintf_r+0x130>
 800a966:	7863      	ldrb	r3, [r4, #1]
 800a968:	2b2a      	cmp	r3, #42	@ 0x2a
 800a96a:	d132      	bne.n	800a9d2 <_svfiprintf_r+0x186>
 800a96c:	9b03      	ldr	r3, [sp, #12]
 800a96e:	1d1a      	adds	r2, r3, #4
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	9203      	str	r2, [sp, #12]
 800a974:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a978:	3402      	adds	r4, #2
 800a97a:	9305      	str	r3, [sp, #20]
 800a97c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800aa40 <_svfiprintf_r+0x1f4>
 800a980:	7821      	ldrb	r1, [r4, #0]
 800a982:	2203      	movs	r2, #3
 800a984:	4650      	mov	r0, sl
 800a986:	f7f5 fc2b 	bl	80001e0 <memchr>
 800a98a:	b138      	cbz	r0, 800a99c <_svfiprintf_r+0x150>
 800a98c:	9b04      	ldr	r3, [sp, #16]
 800a98e:	eba0 000a 	sub.w	r0, r0, sl
 800a992:	2240      	movs	r2, #64	@ 0x40
 800a994:	4082      	lsls	r2, r0
 800a996:	4313      	orrs	r3, r2
 800a998:	3401      	adds	r4, #1
 800a99a:	9304      	str	r3, [sp, #16]
 800a99c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9a0:	4824      	ldr	r0, [pc, #144]	@ (800aa34 <_svfiprintf_r+0x1e8>)
 800a9a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a9a6:	2206      	movs	r2, #6
 800a9a8:	f7f5 fc1a 	bl	80001e0 <memchr>
 800a9ac:	2800      	cmp	r0, #0
 800a9ae:	d036      	beq.n	800aa1e <_svfiprintf_r+0x1d2>
 800a9b0:	4b21      	ldr	r3, [pc, #132]	@ (800aa38 <_svfiprintf_r+0x1ec>)
 800a9b2:	bb1b      	cbnz	r3, 800a9fc <_svfiprintf_r+0x1b0>
 800a9b4:	9b03      	ldr	r3, [sp, #12]
 800a9b6:	3307      	adds	r3, #7
 800a9b8:	f023 0307 	bic.w	r3, r3, #7
 800a9bc:	3308      	adds	r3, #8
 800a9be:	9303      	str	r3, [sp, #12]
 800a9c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9c2:	4433      	add	r3, r6
 800a9c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9c6:	e76a      	b.n	800a89e <_svfiprintf_r+0x52>
 800a9c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9cc:	460c      	mov	r4, r1
 800a9ce:	2001      	movs	r0, #1
 800a9d0:	e7a8      	b.n	800a924 <_svfiprintf_r+0xd8>
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	3401      	adds	r4, #1
 800a9d6:	9305      	str	r3, [sp, #20]
 800a9d8:	4619      	mov	r1, r3
 800a9da:	f04f 0c0a 	mov.w	ip, #10
 800a9de:	4620      	mov	r0, r4
 800a9e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9e4:	3a30      	subs	r2, #48	@ 0x30
 800a9e6:	2a09      	cmp	r2, #9
 800a9e8:	d903      	bls.n	800a9f2 <_svfiprintf_r+0x1a6>
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d0c6      	beq.n	800a97c <_svfiprintf_r+0x130>
 800a9ee:	9105      	str	r1, [sp, #20]
 800a9f0:	e7c4      	b.n	800a97c <_svfiprintf_r+0x130>
 800a9f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9f6:	4604      	mov	r4, r0
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	e7f0      	b.n	800a9de <_svfiprintf_r+0x192>
 800a9fc:	ab03      	add	r3, sp, #12
 800a9fe:	9300      	str	r3, [sp, #0]
 800aa00:	462a      	mov	r2, r5
 800aa02:	4b0e      	ldr	r3, [pc, #56]	@ (800aa3c <_svfiprintf_r+0x1f0>)
 800aa04:	a904      	add	r1, sp, #16
 800aa06:	4638      	mov	r0, r7
 800aa08:	f7fd fe96 	bl	8008738 <_printf_float>
 800aa0c:	1c42      	adds	r2, r0, #1
 800aa0e:	4606      	mov	r6, r0
 800aa10:	d1d6      	bne.n	800a9c0 <_svfiprintf_r+0x174>
 800aa12:	89ab      	ldrh	r3, [r5, #12]
 800aa14:	065b      	lsls	r3, r3, #25
 800aa16:	f53f af2d 	bmi.w	800a874 <_svfiprintf_r+0x28>
 800aa1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aa1c:	e72c      	b.n	800a878 <_svfiprintf_r+0x2c>
 800aa1e:	ab03      	add	r3, sp, #12
 800aa20:	9300      	str	r3, [sp, #0]
 800aa22:	462a      	mov	r2, r5
 800aa24:	4b05      	ldr	r3, [pc, #20]	@ (800aa3c <_svfiprintf_r+0x1f0>)
 800aa26:	a904      	add	r1, sp, #16
 800aa28:	4638      	mov	r0, r7
 800aa2a:	f7fe f91d 	bl	8008c68 <_printf_i>
 800aa2e:	e7ed      	b.n	800aa0c <_svfiprintf_r+0x1c0>
 800aa30:	0800b5c0 	.word	0x0800b5c0
 800aa34:	0800b5ca 	.word	0x0800b5ca
 800aa38:	08008739 	.word	0x08008739
 800aa3c:	0800a795 	.word	0x0800a795
 800aa40:	0800b5c6 	.word	0x0800b5c6

0800aa44 <__sflush_r>:
 800aa44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aa48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa4c:	0716      	lsls	r6, r2, #28
 800aa4e:	4605      	mov	r5, r0
 800aa50:	460c      	mov	r4, r1
 800aa52:	d454      	bmi.n	800aafe <__sflush_r+0xba>
 800aa54:	684b      	ldr	r3, [r1, #4]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	dc02      	bgt.n	800aa60 <__sflush_r+0x1c>
 800aa5a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	dd48      	ble.n	800aaf2 <__sflush_r+0xae>
 800aa60:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aa62:	2e00      	cmp	r6, #0
 800aa64:	d045      	beq.n	800aaf2 <__sflush_r+0xae>
 800aa66:	2300      	movs	r3, #0
 800aa68:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aa6c:	682f      	ldr	r7, [r5, #0]
 800aa6e:	6a21      	ldr	r1, [r4, #32]
 800aa70:	602b      	str	r3, [r5, #0]
 800aa72:	d030      	beq.n	800aad6 <__sflush_r+0x92>
 800aa74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aa76:	89a3      	ldrh	r3, [r4, #12]
 800aa78:	0759      	lsls	r1, r3, #29
 800aa7a:	d505      	bpl.n	800aa88 <__sflush_r+0x44>
 800aa7c:	6863      	ldr	r3, [r4, #4]
 800aa7e:	1ad2      	subs	r2, r2, r3
 800aa80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aa82:	b10b      	cbz	r3, 800aa88 <__sflush_r+0x44>
 800aa84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aa86:	1ad2      	subs	r2, r2, r3
 800aa88:	2300      	movs	r3, #0
 800aa8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aa8c:	6a21      	ldr	r1, [r4, #32]
 800aa8e:	4628      	mov	r0, r5
 800aa90:	47b0      	blx	r6
 800aa92:	1c43      	adds	r3, r0, #1
 800aa94:	89a3      	ldrh	r3, [r4, #12]
 800aa96:	d106      	bne.n	800aaa6 <__sflush_r+0x62>
 800aa98:	6829      	ldr	r1, [r5, #0]
 800aa9a:	291d      	cmp	r1, #29
 800aa9c:	d82b      	bhi.n	800aaf6 <__sflush_r+0xb2>
 800aa9e:	4a2a      	ldr	r2, [pc, #168]	@ (800ab48 <__sflush_r+0x104>)
 800aaa0:	410a      	asrs	r2, r1
 800aaa2:	07d6      	lsls	r6, r2, #31
 800aaa4:	d427      	bmi.n	800aaf6 <__sflush_r+0xb2>
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	6062      	str	r2, [r4, #4]
 800aaaa:	04d9      	lsls	r1, r3, #19
 800aaac:	6922      	ldr	r2, [r4, #16]
 800aaae:	6022      	str	r2, [r4, #0]
 800aab0:	d504      	bpl.n	800aabc <__sflush_r+0x78>
 800aab2:	1c42      	adds	r2, r0, #1
 800aab4:	d101      	bne.n	800aaba <__sflush_r+0x76>
 800aab6:	682b      	ldr	r3, [r5, #0]
 800aab8:	b903      	cbnz	r3, 800aabc <__sflush_r+0x78>
 800aaba:	6560      	str	r0, [r4, #84]	@ 0x54
 800aabc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aabe:	602f      	str	r7, [r5, #0]
 800aac0:	b1b9      	cbz	r1, 800aaf2 <__sflush_r+0xae>
 800aac2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aac6:	4299      	cmp	r1, r3
 800aac8:	d002      	beq.n	800aad0 <__sflush_r+0x8c>
 800aaca:	4628      	mov	r0, r5
 800aacc:	f7ff f9e0 	bl	8009e90 <_free_r>
 800aad0:	2300      	movs	r3, #0
 800aad2:	6363      	str	r3, [r4, #52]	@ 0x34
 800aad4:	e00d      	b.n	800aaf2 <__sflush_r+0xae>
 800aad6:	2301      	movs	r3, #1
 800aad8:	4628      	mov	r0, r5
 800aada:	47b0      	blx	r6
 800aadc:	4602      	mov	r2, r0
 800aade:	1c50      	adds	r0, r2, #1
 800aae0:	d1c9      	bne.n	800aa76 <__sflush_r+0x32>
 800aae2:	682b      	ldr	r3, [r5, #0]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d0c6      	beq.n	800aa76 <__sflush_r+0x32>
 800aae8:	2b1d      	cmp	r3, #29
 800aaea:	d001      	beq.n	800aaf0 <__sflush_r+0xac>
 800aaec:	2b16      	cmp	r3, #22
 800aaee:	d11e      	bne.n	800ab2e <__sflush_r+0xea>
 800aaf0:	602f      	str	r7, [r5, #0]
 800aaf2:	2000      	movs	r0, #0
 800aaf4:	e022      	b.n	800ab3c <__sflush_r+0xf8>
 800aaf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aafa:	b21b      	sxth	r3, r3
 800aafc:	e01b      	b.n	800ab36 <__sflush_r+0xf2>
 800aafe:	690f      	ldr	r7, [r1, #16]
 800ab00:	2f00      	cmp	r7, #0
 800ab02:	d0f6      	beq.n	800aaf2 <__sflush_r+0xae>
 800ab04:	0793      	lsls	r3, r2, #30
 800ab06:	680e      	ldr	r6, [r1, #0]
 800ab08:	bf08      	it	eq
 800ab0a:	694b      	ldreq	r3, [r1, #20]
 800ab0c:	600f      	str	r7, [r1, #0]
 800ab0e:	bf18      	it	ne
 800ab10:	2300      	movne	r3, #0
 800ab12:	eba6 0807 	sub.w	r8, r6, r7
 800ab16:	608b      	str	r3, [r1, #8]
 800ab18:	f1b8 0f00 	cmp.w	r8, #0
 800ab1c:	dde9      	ble.n	800aaf2 <__sflush_r+0xae>
 800ab1e:	6a21      	ldr	r1, [r4, #32]
 800ab20:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ab22:	4643      	mov	r3, r8
 800ab24:	463a      	mov	r2, r7
 800ab26:	4628      	mov	r0, r5
 800ab28:	47b0      	blx	r6
 800ab2a:	2800      	cmp	r0, #0
 800ab2c:	dc08      	bgt.n	800ab40 <__sflush_r+0xfc>
 800ab2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab36:	81a3      	strh	r3, [r4, #12]
 800ab38:	f04f 30ff 	mov.w	r0, #4294967295
 800ab3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab40:	4407      	add	r7, r0
 800ab42:	eba8 0800 	sub.w	r8, r8, r0
 800ab46:	e7e7      	b.n	800ab18 <__sflush_r+0xd4>
 800ab48:	dfbffffe 	.word	0xdfbffffe

0800ab4c <_fflush_r>:
 800ab4c:	b538      	push	{r3, r4, r5, lr}
 800ab4e:	690b      	ldr	r3, [r1, #16]
 800ab50:	4605      	mov	r5, r0
 800ab52:	460c      	mov	r4, r1
 800ab54:	b913      	cbnz	r3, 800ab5c <_fflush_r+0x10>
 800ab56:	2500      	movs	r5, #0
 800ab58:	4628      	mov	r0, r5
 800ab5a:	bd38      	pop	{r3, r4, r5, pc}
 800ab5c:	b118      	cbz	r0, 800ab66 <_fflush_r+0x1a>
 800ab5e:	6a03      	ldr	r3, [r0, #32]
 800ab60:	b90b      	cbnz	r3, 800ab66 <_fflush_r+0x1a>
 800ab62:	f7fe fa2d 	bl	8008fc0 <__sinit>
 800ab66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d0f3      	beq.n	800ab56 <_fflush_r+0xa>
 800ab6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ab70:	07d0      	lsls	r0, r2, #31
 800ab72:	d404      	bmi.n	800ab7e <_fflush_r+0x32>
 800ab74:	0599      	lsls	r1, r3, #22
 800ab76:	d402      	bmi.n	800ab7e <_fflush_r+0x32>
 800ab78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab7a:	f7fe fb38 	bl	80091ee <__retarget_lock_acquire_recursive>
 800ab7e:	4628      	mov	r0, r5
 800ab80:	4621      	mov	r1, r4
 800ab82:	f7ff ff5f 	bl	800aa44 <__sflush_r>
 800ab86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ab88:	07da      	lsls	r2, r3, #31
 800ab8a:	4605      	mov	r5, r0
 800ab8c:	d4e4      	bmi.n	800ab58 <_fflush_r+0xc>
 800ab8e:	89a3      	ldrh	r3, [r4, #12]
 800ab90:	059b      	lsls	r3, r3, #22
 800ab92:	d4e1      	bmi.n	800ab58 <_fflush_r+0xc>
 800ab94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab96:	f7fe fb2b 	bl	80091f0 <__retarget_lock_release_recursive>
 800ab9a:	e7dd      	b.n	800ab58 <_fflush_r+0xc>

0800ab9c <memmove>:
 800ab9c:	4288      	cmp	r0, r1
 800ab9e:	b510      	push	{r4, lr}
 800aba0:	eb01 0402 	add.w	r4, r1, r2
 800aba4:	d902      	bls.n	800abac <memmove+0x10>
 800aba6:	4284      	cmp	r4, r0
 800aba8:	4623      	mov	r3, r4
 800abaa:	d807      	bhi.n	800abbc <memmove+0x20>
 800abac:	1e43      	subs	r3, r0, #1
 800abae:	42a1      	cmp	r1, r4
 800abb0:	d008      	beq.n	800abc4 <memmove+0x28>
 800abb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800abb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800abba:	e7f8      	b.n	800abae <memmove+0x12>
 800abbc:	4402      	add	r2, r0
 800abbe:	4601      	mov	r1, r0
 800abc0:	428a      	cmp	r2, r1
 800abc2:	d100      	bne.n	800abc6 <memmove+0x2a>
 800abc4:	bd10      	pop	{r4, pc}
 800abc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800abca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800abce:	e7f7      	b.n	800abc0 <memmove+0x24>

0800abd0 <_sbrk_r>:
 800abd0:	b538      	push	{r3, r4, r5, lr}
 800abd2:	4d06      	ldr	r5, [pc, #24]	@ (800abec <_sbrk_r+0x1c>)
 800abd4:	2300      	movs	r3, #0
 800abd6:	4604      	mov	r4, r0
 800abd8:	4608      	mov	r0, r1
 800abda:	602b      	str	r3, [r5, #0]
 800abdc:	f7f7 ff30 	bl	8002a40 <_sbrk>
 800abe0:	1c43      	adds	r3, r0, #1
 800abe2:	d102      	bne.n	800abea <_sbrk_r+0x1a>
 800abe4:	682b      	ldr	r3, [r5, #0]
 800abe6:	b103      	cbz	r3, 800abea <_sbrk_r+0x1a>
 800abe8:	6023      	str	r3, [r4, #0]
 800abea:	bd38      	pop	{r3, r4, r5, pc}
 800abec:	2000062c 	.word	0x2000062c

0800abf0 <memcpy>:
 800abf0:	440a      	add	r2, r1
 800abf2:	4291      	cmp	r1, r2
 800abf4:	f100 33ff 	add.w	r3, r0, #4294967295
 800abf8:	d100      	bne.n	800abfc <memcpy+0xc>
 800abfa:	4770      	bx	lr
 800abfc:	b510      	push	{r4, lr}
 800abfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac02:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac06:	4291      	cmp	r1, r2
 800ac08:	d1f9      	bne.n	800abfe <memcpy+0xe>
 800ac0a:	bd10      	pop	{r4, pc}

0800ac0c <__assert_func>:
 800ac0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac0e:	4614      	mov	r4, r2
 800ac10:	461a      	mov	r2, r3
 800ac12:	4b09      	ldr	r3, [pc, #36]	@ (800ac38 <__assert_func+0x2c>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	4605      	mov	r5, r0
 800ac18:	68d8      	ldr	r0, [r3, #12]
 800ac1a:	b954      	cbnz	r4, 800ac32 <__assert_func+0x26>
 800ac1c:	4b07      	ldr	r3, [pc, #28]	@ (800ac3c <__assert_func+0x30>)
 800ac1e:	461c      	mov	r4, r3
 800ac20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac24:	9100      	str	r1, [sp, #0]
 800ac26:	462b      	mov	r3, r5
 800ac28:	4905      	ldr	r1, [pc, #20]	@ (800ac40 <__assert_func+0x34>)
 800ac2a:	f000 f86f 	bl	800ad0c <fiprintf>
 800ac2e:	f000 f87f 	bl	800ad30 <abort>
 800ac32:	4b04      	ldr	r3, [pc, #16]	@ (800ac44 <__assert_func+0x38>)
 800ac34:	e7f4      	b.n	800ac20 <__assert_func+0x14>
 800ac36:	bf00      	nop
 800ac38:	20000018 	.word	0x20000018
 800ac3c:	0800b616 	.word	0x0800b616
 800ac40:	0800b5e8 	.word	0x0800b5e8
 800ac44:	0800b5db 	.word	0x0800b5db

0800ac48 <_calloc_r>:
 800ac48:	b570      	push	{r4, r5, r6, lr}
 800ac4a:	fba1 5402 	umull	r5, r4, r1, r2
 800ac4e:	b93c      	cbnz	r4, 800ac60 <_calloc_r+0x18>
 800ac50:	4629      	mov	r1, r5
 800ac52:	f7ff f991 	bl	8009f78 <_malloc_r>
 800ac56:	4606      	mov	r6, r0
 800ac58:	b928      	cbnz	r0, 800ac66 <_calloc_r+0x1e>
 800ac5a:	2600      	movs	r6, #0
 800ac5c:	4630      	mov	r0, r6
 800ac5e:	bd70      	pop	{r4, r5, r6, pc}
 800ac60:	220c      	movs	r2, #12
 800ac62:	6002      	str	r2, [r0, #0]
 800ac64:	e7f9      	b.n	800ac5a <_calloc_r+0x12>
 800ac66:	462a      	mov	r2, r5
 800ac68:	4621      	mov	r1, r4
 800ac6a:	f7fe fa42 	bl	80090f2 <memset>
 800ac6e:	e7f5      	b.n	800ac5c <_calloc_r+0x14>

0800ac70 <__ascii_mbtowc>:
 800ac70:	b082      	sub	sp, #8
 800ac72:	b901      	cbnz	r1, 800ac76 <__ascii_mbtowc+0x6>
 800ac74:	a901      	add	r1, sp, #4
 800ac76:	b142      	cbz	r2, 800ac8a <__ascii_mbtowc+0x1a>
 800ac78:	b14b      	cbz	r3, 800ac8e <__ascii_mbtowc+0x1e>
 800ac7a:	7813      	ldrb	r3, [r2, #0]
 800ac7c:	600b      	str	r3, [r1, #0]
 800ac7e:	7812      	ldrb	r2, [r2, #0]
 800ac80:	1e10      	subs	r0, r2, #0
 800ac82:	bf18      	it	ne
 800ac84:	2001      	movne	r0, #1
 800ac86:	b002      	add	sp, #8
 800ac88:	4770      	bx	lr
 800ac8a:	4610      	mov	r0, r2
 800ac8c:	e7fb      	b.n	800ac86 <__ascii_mbtowc+0x16>
 800ac8e:	f06f 0001 	mvn.w	r0, #1
 800ac92:	e7f8      	b.n	800ac86 <__ascii_mbtowc+0x16>

0800ac94 <_realloc_r>:
 800ac94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac98:	4680      	mov	r8, r0
 800ac9a:	4615      	mov	r5, r2
 800ac9c:	460c      	mov	r4, r1
 800ac9e:	b921      	cbnz	r1, 800acaa <_realloc_r+0x16>
 800aca0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aca4:	4611      	mov	r1, r2
 800aca6:	f7ff b967 	b.w	8009f78 <_malloc_r>
 800acaa:	b92a      	cbnz	r2, 800acb8 <_realloc_r+0x24>
 800acac:	f7ff f8f0 	bl	8009e90 <_free_r>
 800acb0:	2400      	movs	r4, #0
 800acb2:	4620      	mov	r0, r4
 800acb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acb8:	f000 f841 	bl	800ad3e <_malloc_usable_size_r>
 800acbc:	4285      	cmp	r5, r0
 800acbe:	4606      	mov	r6, r0
 800acc0:	d802      	bhi.n	800acc8 <_realloc_r+0x34>
 800acc2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800acc6:	d8f4      	bhi.n	800acb2 <_realloc_r+0x1e>
 800acc8:	4629      	mov	r1, r5
 800acca:	4640      	mov	r0, r8
 800accc:	f7ff f954 	bl	8009f78 <_malloc_r>
 800acd0:	4607      	mov	r7, r0
 800acd2:	2800      	cmp	r0, #0
 800acd4:	d0ec      	beq.n	800acb0 <_realloc_r+0x1c>
 800acd6:	42b5      	cmp	r5, r6
 800acd8:	462a      	mov	r2, r5
 800acda:	4621      	mov	r1, r4
 800acdc:	bf28      	it	cs
 800acde:	4632      	movcs	r2, r6
 800ace0:	f7ff ff86 	bl	800abf0 <memcpy>
 800ace4:	4621      	mov	r1, r4
 800ace6:	4640      	mov	r0, r8
 800ace8:	f7ff f8d2 	bl	8009e90 <_free_r>
 800acec:	463c      	mov	r4, r7
 800acee:	e7e0      	b.n	800acb2 <_realloc_r+0x1e>

0800acf0 <__ascii_wctomb>:
 800acf0:	4603      	mov	r3, r0
 800acf2:	4608      	mov	r0, r1
 800acf4:	b141      	cbz	r1, 800ad08 <__ascii_wctomb+0x18>
 800acf6:	2aff      	cmp	r2, #255	@ 0xff
 800acf8:	d904      	bls.n	800ad04 <__ascii_wctomb+0x14>
 800acfa:	228a      	movs	r2, #138	@ 0x8a
 800acfc:	601a      	str	r2, [r3, #0]
 800acfe:	f04f 30ff 	mov.w	r0, #4294967295
 800ad02:	4770      	bx	lr
 800ad04:	700a      	strb	r2, [r1, #0]
 800ad06:	2001      	movs	r0, #1
 800ad08:	4770      	bx	lr
	...

0800ad0c <fiprintf>:
 800ad0c:	b40e      	push	{r1, r2, r3}
 800ad0e:	b503      	push	{r0, r1, lr}
 800ad10:	4601      	mov	r1, r0
 800ad12:	ab03      	add	r3, sp, #12
 800ad14:	4805      	ldr	r0, [pc, #20]	@ (800ad2c <fiprintf+0x20>)
 800ad16:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad1a:	6800      	ldr	r0, [r0, #0]
 800ad1c:	9301      	str	r3, [sp, #4]
 800ad1e:	f000 f83f 	bl	800ada0 <_vfiprintf_r>
 800ad22:	b002      	add	sp, #8
 800ad24:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad28:	b003      	add	sp, #12
 800ad2a:	4770      	bx	lr
 800ad2c:	20000018 	.word	0x20000018

0800ad30 <abort>:
 800ad30:	b508      	push	{r3, lr}
 800ad32:	2006      	movs	r0, #6
 800ad34:	f000 fa08 	bl	800b148 <raise>
 800ad38:	2001      	movs	r0, #1
 800ad3a:	f7f7 fe09 	bl	8002950 <_exit>

0800ad3e <_malloc_usable_size_r>:
 800ad3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad42:	1f18      	subs	r0, r3, #4
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	bfbc      	itt	lt
 800ad48:	580b      	ldrlt	r3, [r1, r0]
 800ad4a:	18c0      	addlt	r0, r0, r3
 800ad4c:	4770      	bx	lr

0800ad4e <__sfputc_r>:
 800ad4e:	6893      	ldr	r3, [r2, #8]
 800ad50:	3b01      	subs	r3, #1
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	b410      	push	{r4}
 800ad56:	6093      	str	r3, [r2, #8]
 800ad58:	da08      	bge.n	800ad6c <__sfputc_r+0x1e>
 800ad5a:	6994      	ldr	r4, [r2, #24]
 800ad5c:	42a3      	cmp	r3, r4
 800ad5e:	db01      	blt.n	800ad64 <__sfputc_r+0x16>
 800ad60:	290a      	cmp	r1, #10
 800ad62:	d103      	bne.n	800ad6c <__sfputc_r+0x1e>
 800ad64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad68:	f000 b932 	b.w	800afd0 <__swbuf_r>
 800ad6c:	6813      	ldr	r3, [r2, #0]
 800ad6e:	1c58      	adds	r0, r3, #1
 800ad70:	6010      	str	r0, [r2, #0]
 800ad72:	7019      	strb	r1, [r3, #0]
 800ad74:	4608      	mov	r0, r1
 800ad76:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad7a:	4770      	bx	lr

0800ad7c <__sfputs_r>:
 800ad7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad7e:	4606      	mov	r6, r0
 800ad80:	460f      	mov	r7, r1
 800ad82:	4614      	mov	r4, r2
 800ad84:	18d5      	adds	r5, r2, r3
 800ad86:	42ac      	cmp	r4, r5
 800ad88:	d101      	bne.n	800ad8e <__sfputs_r+0x12>
 800ad8a:	2000      	movs	r0, #0
 800ad8c:	e007      	b.n	800ad9e <__sfputs_r+0x22>
 800ad8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad92:	463a      	mov	r2, r7
 800ad94:	4630      	mov	r0, r6
 800ad96:	f7ff ffda 	bl	800ad4e <__sfputc_r>
 800ad9a:	1c43      	adds	r3, r0, #1
 800ad9c:	d1f3      	bne.n	800ad86 <__sfputs_r+0xa>
 800ad9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ada0 <_vfiprintf_r>:
 800ada0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ada4:	460d      	mov	r5, r1
 800ada6:	b09d      	sub	sp, #116	@ 0x74
 800ada8:	4614      	mov	r4, r2
 800adaa:	4698      	mov	r8, r3
 800adac:	4606      	mov	r6, r0
 800adae:	b118      	cbz	r0, 800adb8 <_vfiprintf_r+0x18>
 800adb0:	6a03      	ldr	r3, [r0, #32]
 800adb2:	b90b      	cbnz	r3, 800adb8 <_vfiprintf_r+0x18>
 800adb4:	f7fe f904 	bl	8008fc0 <__sinit>
 800adb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800adba:	07d9      	lsls	r1, r3, #31
 800adbc:	d405      	bmi.n	800adca <_vfiprintf_r+0x2a>
 800adbe:	89ab      	ldrh	r3, [r5, #12]
 800adc0:	059a      	lsls	r2, r3, #22
 800adc2:	d402      	bmi.n	800adca <_vfiprintf_r+0x2a>
 800adc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800adc6:	f7fe fa12 	bl	80091ee <__retarget_lock_acquire_recursive>
 800adca:	89ab      	ldrh	r3, [r5, #12]
 800adcc:	071b      	lsls	r3, r3, #28
 800adce:	d501      	bpl.n	800add4 <_vfiprintf_r+0x34>
 800add0:	692b      	ldr	r3, [r5, #16]
 800add2:	b99b      	cbnz	r3, 800adfc <_vfiprintf_r+0x5c>
 800add4:	4629      	mov	r1, r5
 800add6:	4630      	mov	r0, r6
 800add8:	f000 f938 	bl	800b04c <__swsetup_r>
 800addc:	b170      	cbz	r0, 800adfc <_vfiprintf_r+0x5c>
 800adde:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ade0:	07dc      	lsls	r4, r3, #31
 800ade2:	d504      	bpl.n	800adee <_vfiprintf_r+0x4e>
 800ade4:	f04f 30ff 	mov.w	r0, #4294967295
 800ade8:	b01d      	add	sp, #116	@ 0x74
 800adea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adee:	89ab      	ldrh	r3, [r5, #12]
 800adf0:	0598      	lsls	r0, r3, #22
 800adf2:	d4f7      	bmi.n	800ade4 <_vfiprintf_r+0x44>
 800adf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800adf6:	f7fe f9fb 	bl	80091f0 <__retarget_lock_release_recursive>
 800adfa:	e7f3      	b.n	800ade4 <_vfiprintf_r+0x44>
 800adfc:	2300      	movs	r3, #0
 800adfe:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae00:	2320      	movs	r3, #32
 800ae02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ae06:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae0a:	2330      	movs	r3, #48	@ 0x30
 800ae0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800afbc <_vfiprintf_r+0x21c>
 800ae10:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ae14:	f04f 0901 	mov.w	r9, #1
 800ae18:	4623      	mov	r3, r4
 800ae1a:	469a      	mov	sl, r3
 800ae1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae20:	b10a      	cbz	r2, 800ae26 <_vfiprintf_r+0x86>
 800ae22:	2a25      	cmp	r2, #37	@ 0x25
 800ae24:	d1f9      	bne.n	800ae1a <_vfiprintf_r+0x7a>
 800ae26:	ebba 0b04 	subs.w	fp, sl, r4
 800ae2a:	d00b      	beq.n	800ae44 <_vfiprintf_r+0xa4>
 800ae2c:	465b      	mov	r3, fp
 800ae2e:	4622      	mov	r2, r4
 800ae30:	4629      	mov	r1, r5
 800ae32:	4630      	mov	r0, r6
 800ae34:	f7ff ffa2 	bl	800ad7c <__sfputs_r>
 800ae38:	3001      	adds	r0, #1
 800ae3a:	f000 80a7 	beq.w	800af8c <_vfiprintf_r+0x1ec>
 800ae3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae40:	445a      	add	r2, fp
 800ae42:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae44:	f89a 3000 	ldrb.w	r3, [sl]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	f000 809f 	beq.w	800af8c <_vfiprintf_r+0x1ec>
 800ae4e:	2300      	movs	r3, #0
 800ae50:	f04f 32ff 	mov.w	r2, #4294967295
 800ae54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae58:	f10a 0a01 	add.w	sl, sl, #1
 800ae5c:	9304      	str	r3, [sp, #16]
 800ae5e:	9307      	str	r3, [sp, #28]
 800ae60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae64:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae66:	4654      	mov	r4, sl
 800ae68:	2205      	movs	r2, #5
 800ae6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae6e:	4853      	ldr	r0, [pc, #332]	@ (800afbc <_vfiprintf_r+0x21c>)
 800ae70:	f7f5 f9b6 	bl	80001e0 <memchr>
 800ae74:	9a04      	ldr	r2, [sp, #16]
 800ae76:	b9d8      	cbnz	r0, 800aeb0 <_vfiprintf_r+0x110>
 800ae78:	06d1      	lsls	r1, r2, #27
 800ae7a:	bf44      	itt	mi
 800ae7c:	2320      	movmi	r3, #32
 800ae7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae82:	0713      	lsls	r3, r2, #28
 800ae84:	bf44      	itt	mi
 800ae86:	232b      	movmi	r3, #43	@ 0x2b
 800ae88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae8c:	f89a 3000 	ldrb.w	r3, [sl]
 800ae90:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae92:	d015      	beq.n	800aec0 <_vfiprintf_r+0x120>
 800ae94:	9a07      	ldr	r2, [sp, #28]
 800ae96:	4654      	mov	r4, sl
 800ae98:	2000      	movs	r0, #0
 800ae9a:	f04f 0c0a 	mov.w	ip, #10
 800ae9e:	4621      	mov	r1, r4
 800aea0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aea4:	3b30      	subs	r3, #48	@ 0x30
 800aea6:	2b09      	cmp	r3, #9
 800aea8:	d94b      	bls.n	800af42 <_vfiprintf_r+0x1a2>
 800aeaa:	b1b0      	cbz	r0, 800aeda <_vfiprintf_r+0x13a>
 800aeac:	9207      	str	r2, [sp, #28]
 800aeae:	e014      	b.n	800aeda <_vfiprintf_r+0x13a>
 800aeb0:	eba0 0308 	sub.w	r3, r0, r8
 800aeb4:	fa09 f303 	lsl.w	r3, r9, r3
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	9304      	str	r3, [sp, #16]
 800aebc:	46a2      	mov	sl, r4
 800aebe:	e7d2      	b.n	800ae66 <_vfiprintf_r+0xc6>
 800aec0:	9b03      	ldr	r3, [sp, #12]
 800aec2:	1d19      	adds	r1, r3, #4
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	9103      	str	r1, [sp, #12]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	bfbb      	ittet	lt
 800aecc:	425b      	neglt	r3, r3
 800aece:	f042 0202 	orrlt.w	r2, r2, #2
 800aed2:	9307      	strge	r3, [sp, #28]
 800aed4:	9307      	strlt	r3, [sp, #28]
 800aed6:	bfb8      	it	lt
 800aed8:	9204      	strlt	r2, [sp, #16]
 800aeda:	7823      	ldrb	r3, [r4, #0]
 800aedc:	2b2e      	cmp	r3, #46	@ 0x2e
 800aede:	d10a      	bne.n	800aef6 <_vfiprintf_r+0x156>
 800aee0:	7863      	ldrb	r3, [r4, #1]
 800aee2:	2b2a      	cmp	r3, #42	@ 0x2a
 800aee4:	d132      	bne.n	800af4c <_vfiprintf_r+0x1ac>
 800aee6:	9b03      	ldr	r3, [sp, #12]
 800aee8:	1d1a      	adds	r2, r3, #4
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	9203      	str	r2, [sp, #12]
 800aeee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aef2:	3402      	adds	r4, #2
 800aef4:	9305      	str	r3, [sp, #20]
 800aef6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800afcc <_vfiprintf_r+0x22c>
 800aefa:	7821      	ldrb	r1, [r4, #0]
 800aefc:	2203      	movs	r2, #3
 800aefe:	4650      	mov	r0, sl
 800af00:	f7f5 f96e 	bl	80001e0 <memchr>
 800af04:	b138      	cbz	r0, 800af16 <_vfiprintf_r+0x176>
 800af06:	9b04      	ldr	r3, [sp, #16]
 800af08:	eba0 000a 	sub.w	r0, r0, sl
 800af0c:	2240      	movs	r2, #64	@ 0x40
 800af0e:	4082      	lsls	r2, r0
 800af10:	4313      	orrs	r3, r2
 800af12:	3401      	adds	r4, #1
 800af14:	9304      	str	r3, [sp, #16]
 800af16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af1a:	4829      	ldr	r0, [pc, #164]	@ (800afc0 <_vfiprintf_r+0x220>)
 800af1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800af20:	2206      	movs	r2, #6
 800af22:	f7f5 f95d 	bl	80001e0 <memchr>
 800af26:	2800      	cmp	r0, #0
 800af28:	d03f      	beq.n	800afaa <_vfiprintf_r+0x20a>
 800af2a:	4b26      	ldr	r3, [pc, #152]	@ (800afc4 <_vfiprintf_r+0x224>)
 800af2c:	bb1b      	cbnz	r3, 800af76 <_vfiprintf_r+0x1d6>
 800af2e:	9b03      	ldr	r3, [sp, #12]
 800af30:	3307      	adds	r3, #7
 800af32:	f023 0307 	bic.w	r3, r3, #7
 800af36:	3308      	adds	r3, #8
 800af38:	9303      	str	r3, [sp, #12]
 800af3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af3c:	443b      	add	r3, r7
 800af3e:	9309      	str	r3, [sp, #36]	@ 0x24
 800af40:	e76a      	b.n	800ae18 <_vfiprintf_r+0x78>
 800af42:	fb0c 3202 	mla	r2, ip, r2, r3
 800af46:	460c      	mov	r4, r1
 800af48:	2001      	movs	r0, #1
 800af4a:	e7a8      	b.n	800ae9e <_vfiprintf_r+0xfe>
 800af4c:	2300      	movs	r3, #0
 800af4e:	3401      	adds	r4, #1
 800af50:	9305      	str	r3, [sp, #20]
 800af52:	4619      	mov	r1, r3
 800af54:	f04f 0c0a 	mov.w	ip, #10
 800af58:	4620      	mov	r0, r4
 800af5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af5e:	3a30      	subs	r2, #48	@ 0x30
 800af60:	2a09      	cmp	r2, #9
 800af62:	d903      	bls.n	800af6c <_vfiprintf_r+0x1cc>
 800af64:	2b00      	cmp	r3, #0
 800af66:	d0c6      	beq.n	800aef6 <_vfiprintf_r+0x156>
 800af68:	9105      	str	r1, [sp, #20]
 800af6a:	e7c4      	b.n	800aef6 <_vfiprintf_r+0x156>
 800af6c:	fb0c 2101 	mla	r1, ip, r1, r2
 800af70:	4604      	mov	r4, r0
 800af72:	2301      	movs	r3, #1
 800af74:	e7f0      	b.n	800af58 <_vfiprintf_r+0x1b8>
 800af76:	ab03      	add	r3, sp, #12
 800af78:	9300      	str	r3, [sp, #0]
 800af7a:	462a      	mov	r2, r5
 800af7c:	4b12      	ldr	r3, [pc, #72]	@ (800afc8 <_vfiprintf_r+0x228>)
 800af7e:	a904      	add	r1, sp, #16
 800af80:	4630      	mov	r0, r6
 800af82:	f7fd fbd9 	bl	8008738 <_printf_float>
 800af86:	4607      	mov	r7, r0
 800af88:	1c78      	adds	r0, r7, #1
 800af8a:	d1d6      	bne.n	800af3a <_vfiprintf_r+0x19a>
 800af8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af8e:	07d9      	lsls	r1, r3, #31
 800af90:	d405      	bmi.n	800af9e <_vfiprintf_r+0x1fe>
 800af92:	89ab      	ldrh	r3, [r5, #12]
 800af94:	059a      	lsls	r2, r3, #22
 800af96:	d402      	bmi.n	800af9e <_vfiprintf_r+0x1fe>
 800af98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af9a:	f7fe f929 	bl	80091f0 <__retarget_lock_release_recursive>
 800af9e:	89ab      	ldrh	r3, [r5, #12]
 800afa0:	065b      	lsls	r3, r3, #25
 800afa2:	f53f af1f 	bmi.w	800ade4 <_vfiprintf_r+0x44>
 800afa6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800afa8:	e71e      	b.n	800ade8 <_vfiprintf_r+0x48>
 800afaa:	ab03      	add	r3, sp, #12
 800afac:	9300      	str	r3, [sp, #0]
 800afae:	462a      	mov	r2, r5
 800afb0:	4b05      	ldr	r3, [pc, #20]	@ (800afc8 <_vfiprintf_r+0x228>)
 800afb2:	a904      	add	r1, sp, #16
 800afb4:	4630      	mov	r0, r6
 800afb6:	f7fd fe57 	bl	8008c68 <_printf_i>
 800afba:	e7e4      	b.n	800af86 <_vfiprintf_r+0x1e6>
 800afbc:	0800b5c0 	.word	0x0800b5c0
 800afc0:	0800b5ca 	.word	0x0800b5ca
 800afc4:	08008739 	.word	0x08008739
 800afc8:	0800ad7d 	.word	0x0800ad7d
 800afcc:	0800b5c6 	.word	0x0800b5c6

0800afd0 <__swbuf_r>:
 800afd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afd2:	460e      	mov	r6, r1
 800afd4:	4614      	mov	r4, r2
 800afd6:	4605      	mov	r5, r0
 800afd8:	b118      	cbz	r0, 800afe2 <__swbuf_r+0x12>
 800afda:	6a03      	ldr	r3, [r0, #32]
 800afdc:	b90b      	cbnz	r3, 800afe2 <__swbuf_r+0x12>
 800afde:	f7fd ffef 	bl	8008fc0 <__sinit>
 800afe2:	69a3      	ldr	r3, [r4, #24]
 800afe4:	60a3      	str	r3, [r4, #8]
 800afe6:	89a3      	ldrh	r3, [r4, #12]
 800afe8:	071a      	lsls	r2, r3, #28
 800afea:	d501      	bpl.n	800aff0 <__swbuf_r+0x20>
 800afec:	6923      	ldr	r3, [r4, #16]
 800afee:	b943      	cbnz	r3, 800b002 <__swbuf_r+0x32>
 800aff0:	4621      	mov	r1, r4
 800aff2:	4628      	mov	r0, r5
 800aff4:	f000 f82a 	bl	800b04c <__swsetup_r>
 800aff8:	b118      	cbz	r0, 800b002 <__swbuf_r+0x32>
 800affa:	f04f 37ff 	mov.w	r7, #4294967295
 800affe:	4638      	mov	r0, r7
 800b000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b002:	6823      	ldr	r3, [r4, #0]
 800b004:	6922      	ldr	r2, [r4, #16]
 800b006:	1a98      	subs	r0, r3, r2
 800b008:	6963      	ldr	r3, [r4, #20]
 800b00a:	b2f6      	uxtb	r6, r6
 800b00c:	4283      	cmp	r3, r0
 800b00e:	4637      	mov	r7, r6
 800b010:	dc05      	bgt.n	800b01e <__swbuf_r+0x4e>
 800b012:	4621      	mov	r1, r4
 800b014:	4628      	mov	r0, r5
 800b016:	f7ff fd99 	bl	800ab4c <_fflush_r>
 800b01a:	2800      	cmp	r0, #0
 800b01c:	d1ed      	bne.n	800affa <__swbuf_r+0x2a>
 800b01e:	68a3      	ldr	r3, [r4, #8]
 800b020:	3b01      	subs	r3, #1
 800b022:	60a3      	str	r3, [r4, #8]
 800b024:	6823      	ldr	r3, [r4, #0]
 800b026:	1c5a      	adds	r2, r3, #1
 800b028:	6022      	str	r2, [r4, #0]
 800b02a:	701e      	strb	r6, [r3, #0]
 800b02c:	6962      	ldr	r2, [r4, #20]
 800b02e:	1c43      	adds	r3, r0, #1
 800b030:	429a      	cmp	r2, r3
 800b032:	d004      	beq.n	800b03e <__swbuf_r+0x6e>
 800b034:	89a3      	ldrh	r3, [r4, #12]
 800b036:	07db      	lsls	r3, r3, #31
 800b038:	d5e1      	bpl.n	800affe <__swbuf_r+0x2e>
 800b03a:	2e0a      	cmp	r6, #10
 800b03c:	d1df      	bne.n	800affe <__swbuf_r+0x2e>
 800b03e:	4621      	mov	r1, r4
 800b040:	4628      	mov	r0, r5
 800b042:	f7ff fd83 	bl	800ab4c <_fflush_r>
 800b046:	2800      	cmp	r0, #0
 800b048:	d0d9      	beq.n	800affe <__swbuf_r+0x2e>
 800b04a:	e7d6      	b.n	800affa <__swbuf_r+0x2a>

0800b04c <__swsetup_r>:
 800b04c:	b538      	push	{r3, r4, r5, lr}
 800b04e:	4b29      	ldr	r3, [pc, #164]	@ (800b0f4 <__swsetup_r+0xa8>)
 800b050:	4605      	mov	r5, r0
 800b052:	6818      	ldr	r0, [r3, #0]
 800b054:	460c      	mov	r4, r1
 800b056:	b118      	cbz	r0, 800b060 <__swsetup_r+0x14>
 800b058:	6a03      	ldr	r3, [r0, #32]
 800b05a:	b90b      	cbnz	r3, 800b060 <__swsetup_r+0x14>
 800b05c:	f7fd ffb0 	bl	8008fc0 <__sinit>
 800b060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b064:	0719      	lsls	r1, r3, #28
 800b066:	d422      	bmi.n	800b0ae <__swsetup_r+0x62>
 800b068:	06da      	lsls	r2, r3, #27
 800b06a:	d407      	bmi.n	800b07c <__swsetup_r+0x30>
 800b06c:	2209      	movs	r2, #9
 800b06e:	602a      	str	r2, [r5, #0]
 800b070:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b074:	81a3      	strh	r3, [r4, #12]
 800b076:	f04f 30ff 	mov.w	r0, #4294967295
 800b07a:	e033      	b.n	800b0e4 <__swsetup_r+0x98>
 800b07c:	0758      	lsls	r0, r3, #29
 800b07e:	d512      	bpl.n	800b0a6 <__swsetup_r+0x5a>
 800b080:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b082:	b141      	cbz	r1, 800b096 <__swsetup_r+0x4a>
 800b084:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b088:	4299      	cmp	r1, r3
 800b08a:	d002      	beq.n	800b092 <__swsetup_r+0x46>
 800b08c:	4628      	mov	r0, r5
 800b08e:	f7fe feff 	bl	8009e90 <_free_r>
 800b092:	2300      	movs	r3, #0
 800b094:	6363      	str	r3, [r4, #52]	@ 0x34
 800b096:	89a3      	ldrh	r3, [r4, #12]
 800b098:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b09c:	81a3      	strh	r3, [r4, #12]
 800b09e:	2300      	movs	r3, #0
 800b0a0:	6063      	str	r3, [r4, #4]
 800b0a2:	6923      	ldr	r3, [r4, #16]
 800b0a4:	6023      	str	r3, [r4, #0]
 800b0a6:	89a3      	ldrh	r3, [r4, #12]
 800b0a8:	f043 0308 	orr.w	r3, r3, #8
 800b0ac:	81a3      	strh	r3, [r4, #12]
 800b0ae:	6923      	ldr	r3, [r4, #16]
 800b0b0:	b94b      	cbnz	r3, 800b0c6 <__swsetup_r+0x7a>
 800b0b2:	89a3      	ldrh	r3, [r4, #12]
 800b0b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b0b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b0bc:	d003      	beq.n	800b0c6 <__swsetup_r+0x7a>
 800b0be:	4621      	mov	r1, r4
 800b0c0:	4628      	mov	r0, r5
 800b0c2:	f000 f883 	bl	800b1cc <__smakebuf_r>
 800b0c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0ca:	f013 0201 	ands.w	r2, r3, #1
 800b0ce:	d00a      	beq.n	800b0e6 <__swsetup_r+0x9a>
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	60a2      	str	r2, [r4, #8]
 800b0d4:	6962      	ldr	r2, [r4, #20]
 800b0d6:	4252      	negs	r2, r2
 800b0d8:	61a2      	str	r2, [r4, #24]
 800b0da:	6922      	ldr	r2, [r4, #16]
 800b0dc:	b942      	cbnz	r2, 800b0f0 <__swsetup_r+0xa4>
 800b0de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b0e2:	d1c5      	bne.n	800b070 <__swsetup_r+0x24>
 800b0e4:	bd38      	pop	{r3, r4, r5, pc}
 800b0e6:	0799      	lsls	r1, r3, #30
 800b0e8:	bf58      	it	pl
 800b0ea:	6962      	ldrpl	r2, [r4, #20]
 800b0ec:	60a2      	str	r2, [r4, #8]
 800b0ee:	e7f4      	b.n	800b0da <__swsetup_r+0x8e>
 800b0f0:	2000      	movs	r0, #0
 800b0f2:	e7f7      	b.n	800b0e4 <__swsetup_r+0x98>
 800b0f4:	20000018 	.word	0x20000018

0800b0f8 <_raise_r>:
 800b0f8:	291f      	cmp	r1, #31
 800b0fa:	b538      	push	{r3, r4, r5, lr}
 800b0fc:	4605      	mov	r5, r0
 800b0fe:	460c      	mov	r4, r1
 800b100:	d904      	bls.n	800b10c <_raise_r+0x14>
 800b102:	2316      	movs	r3, #22
 800b104:	6003      	str	r3, [r0, #0]
 800b106:	f04f 30ff 	mov.w	r0, #4294967295
 800b10a:	bd38      	pop	{r3, r4, r5, pc}
 800b10c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b10e:	b112      	cbz	r2, 800b116 <_raise_r+0x1e>
 800b110:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b114:	b94b      	cbnz	r3, 800b12a <_raise_r+0x32>
 800b116:	4628      	mov	r0, r5
 800b118:	f000 f830 	bl	800b17c <_getpid_r>
 800b11c:	4622      	mov	r2, r4
 800b11e:	4601      	mov	r1, r0
 800b120:	4628      	mov	r0, r5
 800b122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b126:	f000 b817 	b.w	800b158 <_kill_r>
 800b12a:	2b01      	cmp	r3, #1
 800b12c:	d00a      	beq.n	800b144 <_raise_r+0x4c>
 800b12e:	1c59      	adds	r1, r3, #1
 800b130:	d103      	bne.n	800b13a <_raise_r+0x42>
 800b132:	2316      	movs	r3, #22
 800b134:	6003      	str	r3, [r0, #0]
 800b136:	2001      	movs	r0, #1
 800b138:	e7e7      	b.n	800b10a <_raise_r+0x12>
 800b13a:	2100      	movs	r1, #0
 800b13c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b140:	4620      	mov	r0, r4
 800b142:	4798      	blx	r3
 800b144:	2000      	movs	r0, #0
 800b146:	e7e0      	b.n	800b10a <_raise_r+0x12>

0800b148 <raise>:
 800b148:	4b02      	ldr	r3, [pc, #8]	@ (800b154 <raise+0xc>)
 800b14a:	4601      	mov	r1, r0
 800b14c:	6818      	ldr	r0, [r3, #0]
 800b14e:	f7ff bfd3 	b.w	800b0f8 <_raise_r>
 800b152:	bf00      	nop
 800b154:	20000018 	.word	0x20000018

0800b158 <_kill_r>:
 800b158:	b538      	push	{r3, r4, r5, lr}
 800b15a:	4d07      	ldr	r5, [pc, #28]	@ (800b178 <_kill_r+0x20>)
 800b15c:	2300      	movs	r3, #0
 800b15e:	4604      	mov	r4, r0
 800b160:	4608      	mov	r0, r1
 800b162:	4611      	mov	r1, r2
 800b164:	602b      	str	r3, [r5, #0]
 800b166:	f7f7 fbe3 	bl	8002930 <_kill>
 800b16a:	1c43      	adds	r3, r0, #1
 800b16c:	d102      	bne.n	800b174 <_kill_r+0x1c>
 800b16e:	682b      	ldr	r3, [r5, #0]
 800b170:	b103      	cbz	r3, 800b174 <_kill_r+0x1c>
 800b172:	6023      	str	r3, [r4, #0]
 800b174:	bd38      	pop	{r3, r4, r5, pc}
 800b176:	bf00      	nop
 800b178:	2000062c 	.word	0x2000062c

0800b17c <_getpid_r>:
 800b17c:	f7f7 bbd0 	b.w	8002920 <_getpid>

0800b180 <__swhatbuf_r>:
 800b180:	b570      	push	{r4, r5, r6, lr}
 800b182:	460c      	mov	r4, r1
 800b184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b188:	2900      	cmp	r1, #0
 800b18a:	b096      	sub	sp, #88	@ 0x58
 800b18c:	4615      	mov	r5, r2
 800b18e:	461e      	mov	r6, r3
 800b190:	da0d      	bge.n	800b1ae <__swhatbuf_r+0x2e>
 800b192:	89a3      	ldrh	r3, [r4, #12]
 800b194:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b198:	f04f 0100 	mov.w	r1, #0
 800b19c:	bf14      	ite	ne
 800b19e:	2340      	movne	r3, #64	@ 0x40
 800b1a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b1a4:	2000      	movs	r0, #0
 800b1a6:	6031      	str	r1, [r6, #0]
 800b1a8:	602b      	str	r3, [r5, #0]
 800b1aa:	b016      	add	sp, #88	@ 0x58
 800b1ac:	bd70      	pop	{r4, r5, r6, pc}
 800b1ae:	466a      	mov	r2, sp
 800b1b0:	f000 f848 	bl	800b244 <_fstat_r>
 800b1b4:	2800      	cmp	r0, #0
 800b1b6:	dbec      	blt.n	800b192 <__swhatbuf_r+0x12>
 800b1b8:	9901      	ldr	r1, [sp, #4]
 800b1ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b1be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b1c2:	4259      	negs	r1, r3
 800b1c4:	4159      	adcs	r1, r3
 800b1c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b1ca:	e7eb      	b.n	800b1a4 <__swhatbuf_r+0x24>

0800b1cc <__smakebuf_r>:
 800b1cc:	898b      	ldrh	r3, [r1, #12]
 800b1ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1d0:	079d      	lsls	r5, r3, #30
 800b1d2:	4606      	mov	r6, r0
 800b1d4:	460c      	mov	r4, r1
 800b1d6:	d507      	bpl.n	800b1e8 <__smakebuf_r+0x1c>
 800b1d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b1dc:	6023      	str	r3, [r4, #0]
 800b1de:	6123      	str	r3, [r4, #16]
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	6163      	str	r3, [r4, #20]
 800b1e4:	b003      	add	sp, #12
 800b1e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1e8:	ab01      	add	r3, sp, #4
 800b1ea:	466a      	mov	r2, sp
 800b1ec:	f7ff ffc8 	bl	800b180 <__swhatbuf_r>
 800b1f0:	9f00      	ldr	r7, [sp, #0]
 800b1f2:	4605      	mov	r5, r0
 800b1f4:	4639      	mov	r1, r7
 800b1f6:	4630      	mov	r0, r6
 800b1f8:	f7fe febe 	bl	8009f78 <_malloc_r>
 800b1fc:	b948      	cbnz	r0, 800b212 <__smakebuf_r+0x46>
 800b1fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b202:	059a      	lsls	r2, r3, #22
 800b204:	d4ee      	bmi.n	800b1e4 <__smakebuf_r+0x18>
 800b206:	f023 0303 	bic.w	r3, r3, #3
 800b20a:	f043 0302 	orr.w	r3, r3, #2
 800b20e:	81a3      	strh	r3, [r4, #12]
 800b210:	e7e2      	b.n	800b1d8 <__smakebuf_r+0xc>
 800b212:	89a3      	ldrh	r3, [r4, #12]
 800b214:	6020      	str	r0, [r4, #0]
 800b216:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b21a:	81a3      	strh	r3, [r4, #12]
 800b21c:	9b01      	ldr	r3, [sp, #4]
 800b21e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b222:	b15b      	cbz	r3, 800b23c <__smakebuf_r+0x70>
 800b224:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b228:	4630      	mov	r0, r6
 800b22a:	f000 f81d 	bl	800b268 <_isatty_r>
 800b22e:	b128      	cbz	r0, 800b23c <__smakebuf_r+0x70>
 800b230:	89a3      	ldrh	r3, [r4, #12]
 800b232:	f023 0303 	bic.w	r3, r3, #3
 800b236:	f043 0301 	orr.w	r3, r3, #1
 800b23a:	81a3      	strh	r3, [r4, #12]
 800b23c:	89a3      	ldrh	r3, [r4, #12]
 800b23e:	431d      	orrs	r5, r3
 800b240:	81a5      	strh	r5, [r4, #12]
 800b242:	e7cf      	b.n	800b1e4 <__smakebuf_r+0x18>

0800b244 <_fstat_r>:
 800b244:	b538      	push	{r3, r4, r5, lr}
 800b246:	4d07      	ldr	r5, [pc, #28]	@ (800b264 <_fstat_r+0x20>)
 800b248:	2300      	movs	r3, #0
 800b24a:	4604      	mov	r4, r0
 800b24c:	4608      	mov	r0, r1
 800b24e:	4611      	mov	r1, r2
 800b250:	602b      	str	r3, [r5, #0]
 800b252:	f7f7 fbcd 	bl	80029f0 <_fstat>
 800b256:	1c43      	adds	r3, r0, #1
 800b258:	d102      	bne.n	800b260 <_fstat_r+0x1c>
 800b25a:	682b      	ldr	r3, [r5, #0]
 800b25c:	b103      	cbz	r3, 800b260 <_fstat_r+0x1c>
 800b25e:	6023      	str	r3, [r4, #0]
 800b260:	bd38      	pop	{r3, r4, r5, pc}
 800b262:	bf00      	nop
 800b264:	2000062c 	.word	0x2000062c

0800b268 <_isatty_r>:
 800b268:	b538      	push	{r3, r4, r5, lr}
 800b26a:	4d06      	ldr	r5, [pc, #24]	@ (800b284 <_isatty_r+0x1c>)
 800b26c:	2300      	movs	r3, #0
 800b26e:	4604      	mov	r4, r0
 800b270:	4608      	mov	r0, r1
 800b272:	602b      	str	r3, [r5, #0]
 800b274:	f7f7 fbcc 	bl	8002a10 <_isatty>
 800b278:	1c43      	adds	r3, r0, #1
 800b27a:	d102      	bne.n	800b282 <_isatty_r+0x1a>
 800b27c:	682b      	ldr	r3, [r5, #0]
 800b27e:	b103      	cbz	r3, 800b282 <_isatty_r+0x1a>
 800b280:	6023      	str	r3, [r4, #0]
 800b282:	bd38      	pop	{r3, r4, r5, pc}
 800b284:	2000062c 	.word	0x2000062c

0800b288 <_init>:
 800b288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b28a:	bf00      	nop
 800b28c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b28e:	bc08      	pop	{r3}
 800b290:	469e      	mov	lr, r3
 800b292:	4770      	bx	lr

0800b294 <_fini>:
 800b294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b296:	bf00      	nop
 800b298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b29a:	bc08      	pop	{r3}
 800b29c:	469e      	mov	lr, r3
 800b29e:	4770      	bx	lr
