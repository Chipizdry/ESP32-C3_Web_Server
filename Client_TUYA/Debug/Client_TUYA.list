
Client_TUYA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a934  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  0800aad8  0800aad8  0000bad8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af50  0800af50  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800af50  0800af50  0000bf50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af58  0800af58  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af58  0800af58  0000bf58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800af5c  0800af5c  0000bf5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800af60  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c8  200001d4  0800b134  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000069c  0800b134  0000c69c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013df5  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a30  00000000  00000000  0001fff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001280  00000000  00000000  00022a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e97  00000000  00000000  00023cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003bd5  00000000  00000000  00024b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000173d8  00000000  00000000  0002871c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4444  00000000  00000000  0003faf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e3f38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006058  00000000  00000000  000e3f7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  000e9fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800aabc 	.word	0x0800aabc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	0800aabc 	.word	0x0800aabc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <HAL_UART_TxCpltCallback>:
            break;
    }
}

// Колбэк завершения передачи данных по DMA
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
    if (huart == &huart1) {
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a0e      	ldr	r2, [pc, #56]	@ (8000eec <HAL_UART_TxCpltCallback+0x44>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d114      	bne.n	8000ee2 <HAL_UART_TxCpltCallback+0x3a>
        // Запускаем прием данных через DMA
        // Включаем прерывание по IDLE для отслеживания завершения приема данных
        HAL_UARTEx_ReceiveToIdle_DMA(&huart1,rx_buffer, RX_BUFFER_SIZE);
 8000eb8:	2280      	movs	r2, #128	@ 0x80
 8000eba:	490d      	ldr	r1, [pc, #52]	@ (8000ef0 <HAL_UART_TxCpltCallback+0x48>)
 8000ebc:	480b      	ldr	r0, [pc, #44]	@ (8000eec <HAL_UART_TxCpltCallback+0x44>)
 8000ebe:	f005 fec8 	bl	8006c52 <HAL_UARTEx_ReceiveToIdle_DMA>
             __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8000eec <HAL_UART_TxCpltCallback+0x44>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	68da      	ldr	r2, [r3, #12]
 8000ec8:	4b08      	ldr	r3, [pc, #32]	@ (8000eec <HAL_UART_TxCpltCallback+0x44>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f042 0210 	orr.w	r2, r2, #16
 8000ed0:	60da      	str	r2, [r3, #12]
             __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000ed2:	4b08      	ldr	r3, [pc, #32]	@ (8000ef4 <HAL_UART_TxCpltCallback+0x4c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <HAL_UART_TxCpltCallback+0x4c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f022 0208 	bic.w	r2, r2, #8
 8000ee0:	601a      	str	r2, [r3, #0]

    }
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000404 	.word	0x20000404
 8000ef0:	200001f0 	.word	0x200001f0
 8000ef4:	2000044c 	.word	0x2000044c

08000ef8 <I2C_send>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void I2C_send(uint8_t data, uint8_t flags)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af02      	add	r7, sp, #8
 8000efe:	4603      	mov	r3, r0
 8000f00:	460a      	mov	r2, r1
 8000f02:	71fb      	strb	r3, [r7, #7]
 8000f04:	4613      	mov	r3, r2
 8000f06:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef res;
	    for(;;) {                                                                     // бесконечный цикл
	        res = HAL_I2C_IsDeviceReady(&hi2c1, LCD_ADDR, 1, HAL_MAX_DELAY);          // проверяем, готово ли устройство по адресу lcd_addr для связи
 8000f08:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	214e      	movs	r1, #78	@ 0x4e
 8000f10:	4820      	ldr	r0, [pc, #128]	@ (8000f94 <I2C_send+0x9c>)
 8000f12:	f003 f893 	bl	800403c <HAL_I2C_IsDeviceReady>
 8000f16:	4603      	mov	r3, r0
 8000f18:	73fb      	strb	r3, [r7, #15]
	        if(res == HAL_OK) break;                                                  // если да, то выходим из бесконечного цикла
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d000      	beq.n	8000f22 <I2C_send+0x2a>
	        res = HAL_I2C_IsDeviceReady(&hi2c1, LCD_ADDR, 1, HAL_MAX_DELAY);          // проверяем, готово ли устройство по адресу lcd_addr для связи
 8000f20:	e7f2      	b.n	8000f08 <I2C_send+0x10>
	        if(res == HAL_OK) break;                                                  // если да, то выходим из бесконечного цикла
 8000f22:	bf00      	nop
	    }

	uint8_t up = data & 0xF0;                 // операция �? с 1111 0000, приводит к обнулению последних бит с 0 по 3, остаются биты с 4 по 7
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	f023 030f 	bic.w	r3, r3, #15
 8000f2a:	73bb      	strb	r3, [r7, #14]
	uint8_t lo = (data << 4) & 0xF0;          // тоже самое, но data сдвигается на 4 бита влево, т.е. в этой
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	011b      	lsls	r3, r3, #4
 8000f30:	737b      	strb	r3, [r7, #13]
	                                           // переменной остаются  биты с 0 по 3
	uint8_t data_arr[4];
	data_arr[0] = up|flags|BACKLIGHT|PIN_EN;  // 4-7 биты содержат информацию, биты 0-3 конфигурируют работу
 8000f32:	7bba      	ldrb	r2, [r7, #14]
 8000f34:	79bb      	ldrb	r3, [r7, #6]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	f043 030c 	orr.w	r3, r3, #12
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	723b      	strb	r3, [r7, #8]
	data_arr[1] = up|flags|BACKLIGHT;         // ублирование сигнала, на выводе Е в этот раз 0
 8000f42:	7bba      	ldrb	r2, [r7, #14]
 8000f44:	79bb      	ldrb	r3, [r7, #6]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	f043 0308 	orr.w	r3, r3, #8
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	727b      	strb	r3, [r7, #9]
	data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 8000f52:	7b7a      	ldrb	r2, [r7, #13]
 8000f54:	79bb      	ldrb	r3, [r7, #6]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	f043 030c 	orr.w	r3, r3, #12
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	72bb      	strb	r3, [r7, #10]
	data_arr[3] = lo|flags|BACKLIGHT;
 8000f62:	7b7a      	ldrb	r2, [r7, #13]
 8000f64:	79bb      	ldrb	r3, [r7, #6]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	f043 0308 	orr.w	r3, r3, #8
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 8000f72:	f107 0208 	add.w	r2, r7, #8
 8000f76:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	2304      	movs	r3, #4
 8000f7e:	214e      	movs	r1, #78	@ 0x4e
 8000f80:	4804      	ldr	r0, [pc, #16]	@ (8000f94 <I2C_send+0x9c>)
 8000f82:	f002 ff5d 	bl	8003e40 <HAL_I2C_Master_Transmit>
	HAL_Delay(LCD_DELAY_MS);
 8000f86:	2005      	movs	r0, #5
 8000f88:	f001 fb22 	bl	80025d0 <HAL_Delay>
}
 8000f8c:	bf00      	nop
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	200002b8 	.word	0x200002b8

08000f98 <LCD_SendString>:


void LCD_SendString(char *str)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]

	while(*str) {                                   // пока строчка не закончится
 8000fa0:	e008      	b.n	8000fb4 <LCD_SendString+0x1c>
		I2C_send((uint8_t)(*str), 1);               // передача первого символа строки
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff ffa5 	bl	8000ef8 <I2C_send>
        str++;                                      // сдвиг строки налево на 1 символ
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	607b      	str	r3, [r7, #4]
	while(*str) {                                   // пока строчка не закончится
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d1f2      	bne.n	8000fa2 <LCD_SendString+0xa>
    }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc8:	b5b0      	push	{r4, r5, r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fce:	f001 fa8d 	bl	80024ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd2:	f000 faa9 	bl	8001528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd6:	f000 fdd5 	bl	8001b84 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fda:	f000 fdab 	bl	8001b34 <MX_DMA_Init>
  MX_I2C1_Init();
 8000fde:	f000 fb61 	bl	80016a4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000fe2:	f000 fd7d 	bl	8001ae0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000fe6:	f000 fbe5 	bl	80017b4 <MX_TIM1_Init>
  MX_RTC_Init();
 8000fea:	f000 fb89 	bl	8001700 <MX_RTC_Init>
  MX_ADC1_Init();
 8000fee:	f000 fb07 	bl	8001600 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000ff2:	f000 fc81 	bl	80018f8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ff6:	f000 fcfd 	bl	80019f4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  LED_1_ON;
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001000:	48ad      	ldr	r0, [pc, #692]	@ (80012b8 <main+0x2f0>)
 8001002:	f002 fd9b 	bl	8003b3c <HAL_GPIO_WritePin>
  I2C_send(0b00110000,0);   // 8ми битный интерфейс
 8001006:	2100      	movs	r1, #0
 8001008:	2030      	movs	r0, #48	@ 0x30
 800100a:	f7ff ff75 	bl	8000ef8 <I2C_send>
   I2C_send(0b00000010,0);   // установка курсора в начале строки
 800100e:	2100      	movs	r1, #0
 8001010:	2002      	movs	r0, #2
 8001012:	f7ff ff71 	bl	8000ef8 <I2C_send>
   I2C_send(0b00001100,0);   // нормальный режим работы
 8001016:	2100      	movs	r1, #0
 8001018:	200c      	movs	r0, #12
 800101a:	f7ff ff6d 	bl	8000ef8 <I2C_send>
   I2C_send(0b00000001,0);   // очистка дисплея
 800101e:	2100      	movs	r1, #0
 8001020:	2001      	movs	r0, #1
 8001022:	f7ff ff69 	bl	8000ef8 <I2C_send>
   //  LCD_SendString("  Hello ");
   //  I2C_send(0b11000000,0);   // переход на 2 строку

   //  I2C_send(0b10010100,0);   // переход на 3 строку

     I2C_send(0b11010100,0);   // переход на 4 строку
 8001026:	2100      	movs	r1, #0
 8001028:	20d4      	movs	r0, #212	@ 0xd4
 800102a:	f7ff ff65 	bl	8000ef8 <I2C_send>

     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800102e:	2100      	movs	r1, #0
 8001030:	48a2      	ldr	r0, [pc, #648]	@ (80012bc <main+0x2f4>)
 8001032:	f004 fbbd 	bl	80057b0 <HAL_TIM_PWM_Start>

     // Запускаем прием по DMA с буфером для приема данных
     HAL_UARTEx_ReceiveToIdle_DMA(&huart1,rx_buffer, RX_BUFFER_SIZE);
 8001036:	2280      	movs	r2, #128	@ 0x80
 8001038:	49a1      	ldr	r1, [pc, #644]	@ (80012c0 <main+0x2f8>)
 800103a:	48a2      	ldr	r0, [pc, #648]	@ (80012c4 <main+0x2fc>)
 800103c:	f005 fe09 	bl	8006c52 <HAL_UARTEx_ReceiveToIdle_DMA>
       __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8001040:	4ba0      	ldr	r3, [pc, #640]	@ (80012c4 <main+0x2fc>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	68da      	ldr	r2, [r3, #12]
 8001046:	4b9f      	ldr	r3, [pc, #636]	@ (80012c4 <main+0x2fc>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f042 0210 	orr.w	r2, r2, #16
 800104e:	60da      	str	r2, [r3, #12]
       __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001050:	4b9d      	ldr	r3, [pc, #628]	@ (80012c8 <main+0x300>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	4b9c      	ldr	r3, [pc, #624]	@ (80012c8 <main+0x300>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f022 0208 	bic.w	r2, r2, #8
 800105e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)==0)&&(flag==0)){
 8001060:	2110      	movs	r1, #16
 8001062:	489a      	ldr	r0, [pc, #616]	@ (80012cc <main+0x304>)
 8001064:	f002 fd52 	bl	8003b0c <HAL_GPIO_ReadPin>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d11c      	bne.n	80010a8 <main+0xe0>
 800106e:	4b98      	ldr	r3, [pc, #608]	@ (80012d0 <main+0x308>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d118      	bne.n	80010a8 <main+0xe0>
		  regim++;
 8001076:	4b97      	ldr	r3, [pc, #604]	@ (80012d4 <main+0x30c>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	3301      	adds	r3, #1
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4b95      	ldr	r3, [pc, #596]	@ (80012d4 <main+0x30c>)
 8001080:	701a      	strb	r2, [r3, #0]
		  flag=1;
 8001082:	4b93      	ldr	r3, [pc, #588]	@ (80012d0 <main+0x308>)
 8001084:	2201      	movs	r2, #1
 8001086:	701a      	strb	r2, [r3, #0]
		  arm=0;
 8001088:	4b93      	ldr	r3, [pc, #588]	@ (80012d8 <main+0x310>)
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]
		  run=0;
 800108e:	4b93      	ldr	r3, [pc, #588]	@ (80012dc <main+0x314>)
 8001090:	2200      	movs	r2, #0
 8001092:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(150);
 8001094:	2096      	movs	r0, #150	@ 0x96
 8001096:	f001 fa9b 	bl	80025d0 <HAL_Delay>
		  if(regim>3){regim=1;}
 800109a:	4b8e      	ldr	r3, [pc, #568]	@ (80012d4 <main+0x30c>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b03      	cmp	r3, #3
 80010a0:	d902      	bls.n	80010a8 <main+0xe0>
 80010a2:	4b8c      	ldr	r3, [pc, #560]	@ (80012d4 <main+0x30c>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	701a      	strb	r2, [r3, #0]
         }


	  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)==1)&&(flag==1)){
 80010a8:	2110      	movs	r1, #16
 80010aa:	4888      	ldr	r0, [pc, #544]	@ (80012cc <main+0x304>)
 80010ac:	f002 fd2e 	bl	8003b0c <HAL_GPIO_ReadPin>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d109      	bne.n	80010ca <main+0x102>
 80010b6:	4b86      	ldr	r3, [pc, #536]	@ (80012d0 <main+0x308>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d105      	bne.n	80010ca <main+0x102>

		  flag=0;
 80010be:	4b84      	ldr	r3, [pc, #528]	@ (80012d0 <main+0x308>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(150);
 80010c4:	2096      	movs	r0, #150	@ 0x96
 80010c6:	f001 fa83 	bl	80025d0 <HAL_Delay>

	  }

	  sprintf(time_buffer,"%04d-%02d-%02d  %02d:%02d:%02d",year, month, date,hour, minute, second);
 80010ca:	4b85      	ldr	r3, [pc, #532]	@ (80012e0 <main+0x318>)
 80010cc:	881b      	ldrh	r3, [r3, #0]
 80010ce:	461c      	mov	r4, r3
 80010d0:	4b84      	ldr	r3, [pc, #528]	@ (80012e4 <main+0x31c>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	461d      	mov	r5, r3
 80010d6:	4b84      	ldr	r3, [pc, #528]	@ (80012e8 <main+0x320>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	461a      	mov	r2, r3
 80010dc:	4b83      	ldr	r3, [pc, #524]	@ (80012ec <main+0x324>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	4619      	mov	r1, r3
 80010e2:	4b83      	ldr	r3, [pc, #524]	@ (80012f0 <main+0x328>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	4b82      	ldr	r3, [pc, #520]	@ (80012f4 <main+0x32c>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	9303      	str	r3, [sp, #12]
 80010ee:	9002      	str	r0, [sp, #8]
 80010f0:	9101      	str	r1, [sp, #4]
 80010f2:	9200      	str	r2, [sp, #0]
 80010f4:	462b      	mov	r3, r5
 80010f6:	4622      	mov	r2, r4
 80010f8:	497f      	ldr	r1, [pc, #508]	@ (80012f8 <main+0x330>)
 80010fa:	4880      	ldr	r0, [pc, #512]	@ (80012fc <main+0x334>)
 80010fc:	f007 fbae 	bl	800885c <siprintf>
	  	  		//I2C_send(0b00000001,0);   // очистка дисплея
	  	  	    I2C_send(0b11010100,0);   // переход на 4 строку
 8001100:	2100      	movs	r1, #0
 8001102:	20d4      	movs	r0, #212	@ 0xd4
 8001104:	f7ff fef8 	bl	8000ef8 <I2C_send>
	  	  		LCD_SendString(time_buffer);
 8001108:	487c      	ldr	r0, [pc, #496]	@ (80012fc <main+0x334>)
 800110a:	f7ff ff45 	bl	8000f98 <LCD_SendString>




	  if(regim==1){
 800110e:	4b71      	ldr	r3, [pc, #452]	@ (80012d4 <main+0x30c>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b01      	cmp	r3, #1
 8001114:	f040 8117 	bne.w	8001346 <main+0x37e>
		  I2C_send(0b10000000,0);   // переход на 1 строку
 8001118:	2100      	movs	r1, #0
 800111a:	2080      	movs	r0, #128	@ 0x80
 800111c:	f7ff feec 	bl	8000ef8 <I2C_send>
		  LCD_SendString("RUN MODE-           ");
 8001120:	4877      	ldr	r0, [pc, #476]	@ (8001300 <main+0x338>)
 8001122:	f7ff ff39 	bl	8000f98 <LCD_SendString>
		  I2C_send(0b11000000,0);   // переход на 2 строку
 8001126:	2100      	movs	r1, #0
 8001128:	20c0      	movs	r0, #192	@ 0xc0
 800112a:	f7ff fee5 	bl	8000ef8 <I2C_send>
		  sprintf(info_buffer,"Turns=%04d      ",cmd_in);
 800112e:	4b75      	ldr	r3, [pc, #468]	@ (8001304 <main+0x33c>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	461a      	mov	r2, r3
 8001134:	4974      	ldr	r1, [pc, #464]	@ (8001308 <main+0x340>)
 8001136:	4875      	ldr	r0, [pc, #468]	@ (800130c <main+0x344>)
 8001138:	f007 fb90 	bl	800885c <siprintf>
		  LCD_SendString(info_buffer);
 800113c:	4873      	ldr	r0, [pc, #460]	@ (800130c <main+0x344>)
 800113e:	f7ff ff2b 	bl	8000f98 <LCD_SendString>
		  FORVARD;
 8001142:	2200      	movs	r2, #0
 8001144:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001148:	4871      	ldr	r0, [pc, #452]	@ (8001310 <main+0x348>)
 800114a:	f002 fcf7 	bl	8003b3c <HAL_GPIO_WritePin>
		  I2C_send(0b10010100,0);   // переход на 3 строку
 800114e:	2100      	movs	r1, #0
 8001150:	2094      	movs	r0, #148	@ 0x94
 8001152:	f7ff fed1 	bl	8000ef8 <I2C_send>
		  sprintf(info_buffer,"Speed=%04d RPM     ",speed);
 8001156:	4b6f      	ldr	r3, [pc, #444]	@ (8001314 <main+0x34c>)
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	461a      	mov	r2, r3
 800115c:	496e      	ldr	r1, [pc, #440]	@ (8001318 <main+0x350>)
 800115e:	486b      	ldr	r0, [pc, #428]	@ (800130c <main+0x344>)
 8001160:	f007 fb7c 	bl	800885c <siprintf>
		  		  LCD_SendString(info_buffer);
 8001164:	4869      	ldr	r0, [pc, #420]	@ (800130c <main+0x344>)
 8001166:	f7ff ff17 	bl	8000f98 <LCD_SendString>



		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==1)&&(arm==0)&&(run==0)){
 800116a:	2108      	movs	r1, #8
 800116c:	4857      	ldr	r0, [pc, #348]	@ (80012cc <main+0x304>)
 800116e:	f002 fccd 	bl	8003b0c <HAL_GPIO_ReadPin>
 8001172:	4603      	mov	r3, r0
 8001174:	2b01      	cmp	r3, #1
 8001176:	d119      	bne.n	80011ac <main+0x1e4>
 8001178:	4b57      	ldr	r3, [pc, #348]	@ (80012d8 <main+0x310>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d115      	bne.n	80011ac <main+0x1e4>
 8001180:	4b56      	ldr	r3, [pc, #344]	@ (80012dc <main+0x314>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d111      	bne.n	80011ac <main+0x1e4>
			  HAL_Delay(50);
 8001188:	2032      	movs	r0, #50	@ 0x32
 800118a:	f001 fa21 	bl	80025d0 <HAL_Delay>
			  I2C_send(0b10000000,0);   // переход на 1 строку
 800118e:	2100      	movs	r1, #0
 8001190:	2080      	movs	r0, #128	@ 0x80
 8001192:	f7ff feb1 	bl	8000ef8 <I2C_send>
			  		  LCD_SendString("RUN MODE- READY...  ");
 8001196:	4861      	ldr	r0, [pc, #388]	@ (800131c <main+0x354>)
 8001198:	f7ff fefe 	bl	8000f98 <LCD_SendString>
			  		 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800119c:	2100      	movs	r1, #0
 800119e:	4847      	ldr	r0, [pc, #284]	@ (80012bc <main+0x2f4>)
 80011a0:	f004 fbb6 	bl	8005910 <HAL_TIM_PWM_Stop>
			  		 HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80011a4:	2100      	movs	r1, #0
 80011a6:	4845      	ldr	r0, [pc, #276]	@ (80012bc <main+0x2f4>)
 80011a8:	f005 fbad 	bl	8006906 <HAL_TIMEx_PWMN_Stop>
		  }

		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==0)&&(arm==0)&&(run==0)){
 80011ac:	2108      	movs	r1, #8
 80011ae:	4847      	ldr	r0, [pc, #284]	@ (80012cc <main+0x304>)
 80011b0:	f002 fcac 	bl	8003b0c <HAL_GPIO_ReadPin>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d10d      	bne.n	80011d6 <main+0x20e>
 80011ba:	4b47      	ldr	r3, [pc, #284]	@ (80012d8 <main+0x310>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d109      	bne.n	80011d6 <main+0x20e>
 80011c2:	4b46      	ldr	r3, [pc, #280]	@ (80012dc <main+0x314>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d105      	bne.n	80011d6 <main+0x20e>
                 arm=1;
 80011ca:	4b43      	ldr	r3, [pc, #268]	@ (80012d8 <main+0x310>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	701a      	strb	r2, [r3, #0]
					  HAL_Delay(150); }
 80011d0:	2096      	movs	r0, #150	@ 0x96
 80011d2:	f001 f9fd 	bl	80025d0 <HAL_Delay>

		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==1)&&(arm==1)&&(run==0)){
 80011d6:	2108      	movs	r1, #8
 80011d8:	483c      	ldr	r0, [pc, #240]	@ (80012cc <main+0x304>)
 80011da:	f002 fc97 	bl	8003b0c <HAL_GPIO_ReadPin>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d114      	bne.n	800120e <main+0x246>
 80011e4:	4b3c      	ldr	r3, [pc, #240]	@ (80012d8 <main+0x310>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d110      	bne.n	800120e <main+0x246>
 80011ec:	4b3b      	ldr	r3, [pc, #236]	@ (80012dc <main+0x314>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d10c      	bne.n	800120e <main+0x246>
		 			  HAL_Delay(50);
 80011f4:	2032      	movs	r0, #50	@ 0x32
 80011f6:	f001 f9eb 	bl	80025d0 <HAL_Delay>
		 			  run=1;
 80011fa:	4b38      	ldr	r3, [pc, #224]	@ (80012dc <main+0x314>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	701a      	strb	r2, [r3, #0]
		 			  I2C_send(0b10000000,0);   // переход на 1 строку
 8001200:	2100      	movs	r1, #0
 8001202:	2080      	movs	r0, #128	@ 0x80
 8001204:	f7ff fe78 	bl	8000ef8 <I2C_send>
		 			  		  LCD_SendString("RUN MODE- RUNING    ");
 8001208:	4845      	ldr	r0, [pc, #276]	@ (8001320 <main+0x358>)
 800120a:	f7ff fec5 	bl	8000f98 <LCD_SendString>

                }


		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==1)&&(arm==1)&&(run==1)){
 800120e:	2108      	movs	r1, #8
 8001210:	482e      	ldr	r0, [pc, #184]	@ (80012cc <main+0x304>)
 8001212:	f002 fc7b 	bl	8003b0c <HAL_GPIO_ReadPin>
 8001216:	4603      	mov	r3, r0
 8001218:	2b01      	cmp	r3, #1
 800121a:	d125      	bne.n	8001268 <main+0x2a0>
 800121c:	4b2e      	ldr	r3, [pc, #184]	@ (80012d8 <main+0x310>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d121      	bne.n	8001268 <main+0x2a0>
 8001224:	4b2d      	ldr	r3, [pc, #180]	@ (80012dc <main+0x314>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d11d      	bne.n	8001268 <main+0x2a0>

		 		                      I2C_send(0b10000000,0);   // переход на 1 строку
 800122c:	2100      	movs	r1, #0
 800122e:	2080      	movs	r0, #128	@ 0x80
 8001230:	f7ff fe62 	bl	8000ef8 <I2C_send>
		 		                      LCD_SendString("RUN MODE- RUNING    ");
 8001234:	483a      	ldr	r0, [pc, #232]	@ (8001320 <main+0x358>)
 8001236:	f7ff feaf 	bl	8000f98 <LCD_SendString>

		 		                     HAL_ADC_Start(&hadc1); // запускаем преобразование сигнала АЦП
 800123a:	483a      	ldr	r0, [pc, #232]	@ (8001324 <main+0x35c>)
 800123c:	f001 fa30 	bl	80026a0 <HAL_ADC_Start>
		 		                     HAL_ADC_PollForConversion(&hadc1, 100); // ожидаем окончания преобразования
 8001240:	2164      	movs	r1, #100	@ 0x64
 8001242:	4838      	ldr	r0, [pc, #224]	@ (8001324 <main+0x35c>)
 8001244:	f001 fb13 	bl	800286e <HAL_ADC_PollForConversion>
		 		                     adc = HAL_ADC_GetValue(&hadc1); // читаем полученное значение в переменную adc
 8001248:	4836      	ldr	r0, [pc, #216]	@ (8001324 <main+0x35c>)
 800124a:	f001 fb9b 	bl	8002984 <HAL_ADC_GetValue>
 800124e:	4603      	mov	r3, r0
 8001250:	b29a      	uxth	r2, r3
 8001252:	4b35      	ldr	r3, [pc, #212]	@ (8001328 <main+0x360>)
 8001254:	801a      	strh	r2, [r3, #0]
		 		                     HAL_ADC_Stop(&hadc1); // останавливаем АЦП (не обязательно)
 8001256:	4833      	ldr	r0, [pc, #204]	@ (8001324 <main+0x35c>)
 8001258:	f001 fad6 	bl	8002808 <HAL_ADC_Stop>
		 		                     speed=adc-230;
 800125c:	4b32      	ldr	r3, [pc, #200]	@ (8001328 <main+0x360>)
 800125e:	881b      	ldrh	r3, [r3, #0]
 8001260:	3be6      	subs	r3, #230	@ 0xe6
 8001262:	b29a      	uxth	r2, r3
 8001264:	4b2b      	ldr	r3, [pc, #172]	@ (8001314 <main+0x34c>)
 8001266:	801a      	strh	r2, [r3, #0]
		 	*/

		 		 					}


		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==0)&&(arm==1)&&(run==1)){
 8001268:	2108      	movs	r1, #8
 800126a:	4818      	ldr	r0, [pc, #96]	@ (80012cc <main+0x304>)
 800126c:	f002 fc4e 	bl	8003b0c <HAL_GPIO_ReadPin>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d114      	bne.n	80012a0 <main+0x2d8>
 8001276:	4b18      	ldr	r3, [pc, #96]	@ (80012d8 <main+0x310>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d110      	bne.n	80012a0 <main+0x2d8>
 800127e:	4b17      	ldr	r3, [pc, #92]	@ (80012dc <main+0x314>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d10c      	bne.n	80012a0 <main+0x2d8>
		                       arm=0;
 8001286:	4b14      	ldr	r3, [pc, #80]	@ (80012d8 <main+0x310>)
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]
		                       I2C_send(0b10000000,0);   // переход на 1 строку
 800128c:	2100      	movs	r1, #0
 800128e:	2080      	movs	r0, #128	@ 0x80
 8001290:	f7ff fe32 	bl	8000ef8 <I2C_send>
		                        LCD_SendString("RUN MODE- RUNING    ");
 8001294:	4822      	ldr	r0, [pc, #136]	@ (8001320 <main+0x358>)
 8001296:	f7ff fe7f 	bl	8000f98 <LCD_SendString>
		 					  HAL_Delay(150); }
 800129a:	2096      	movs	r0, #150	@ 0x96
 800129c:	f001 f998 	bl	80025d0 <HAL_Delay>

		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==1)&&(arm==0)&&(run==1)){
 80012a0:	2108      	movs	r1, #8
 80012a2:	480a      	ldr	r0, [pc, #40]	@ (80012cc <main+0x304>)
 80012a4:	f002 fc32 	bl	8003b0c <HAL_GPIO_ReadPin>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d14b      	bne.n	8001346 <main+0x37e>
 80012ae:	4b0a      	ldr	r3, [pc, #40]	@ (80012d8 <main+0x310>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d147      	bne.n	8001346 <main+0x37e>
 80012b6:	e039      	b.n	800132c <main+0x364>
 80012b8:	40020800 	.word	0x40020800
 80012bc:	2000032c 	.word	0x2000032c
 80012c0:	200001f0 	.word	0x200001f0
 80012c4:	20000404 	.word	0x20000404
 80012c8:	2000044c 	.word	0x2000044c
 80012cc:	40020400 	.word	0x40020400
 80012d0:	2000053b 	.word	0x2000053b
 80012d4:	2000053c 	.word	0x2000053c
 80012d8:	2000053d 	.word	0x2000053d
 80012dc:	2000053e 	.word	0x2000053e
 80012e0:	20000534 	.word	0x20000534
 80012e4:	20000536 	.word	0x20000536
 80012e8:	20000537 	.word	0x20000537
 80012ec:	20000538 	.word	0x20000538
 80012f0:	20000539 	.word	0x20000539
 80012f4:	2000053a 	.word	0x2000053a
 80012f8:	0800aad8 	.word	0x0800aad8
 80012fc:	2000050c 	.word	0x2000050c
 8001300:	0800aaf8 	.word	0x0800aaf8
 8001304:	20000544 	.word	0x20000544
 8001308:	0800ab10 	.word	0x0800ab10
 800130c:	20000520 	.word	0x20000520
 8001310:	40020000 	.word	0x40020000
 8001314:	20000540 	.word	0x20000540
 8001318:	0800ab24 	.word	0x0800ab24
 800131c:	0800ab38 	.word	0x0800ab38
 8001320:	0800ab50 	.word	0x0800ab50
 8001324:	20000270 	.word	0x20000270
 8001328:	20000542 	.word	0x20000542
 800132c:	4b72      	ldr	r3, [pc, #456]	@ (80014f8 <main+0x530>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d108      	bne.n	8001346 <main+0x37e>
				                       arm=0;
 8001334:	4b71      	ldr	r3, [pc, #452]	@ (80014fc <main+0x534>)
 8001336:	2200      	movs	r2, #0
 8001338:	701a      	strb	r2, [r3, #0]
				                       run=0;
 800133a:	4b6f      	ldr	r3, [pc, #444]	@ (80014f8 <main+0x530>)
 800133c:	2200      	movs	r2, #0
 800133e:	701a      	strb	r2, [r3, #0]
				 					  HAL_Delay(150); }
 8001340:	2096      	movs	r0, #150	@ 0x96
 8001342:	f001 f945 	bl	80025d0 <HAL_Delay>

	  }

	  if(regim==2){
 8001346:	4b6e      	ldr	r3, [pc, #440]	@ (8001500 <main+0x538>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b02      	cmp	r3, #2
 800134c:	f040 80c7 	bne.w	80014de <main+0x516>
	 		  I2C_send(0b10000000,0);   // переход на 1 строку
 8001350:	2100      	movs	r1, #0
 8001352:	2080      	movs	r0, #128	@ 0x80
 8001354:	f7ff fdd0 	bl	8000ef8 <I2C_send>
	 		  LCD_SendString("REVERS MODE         ");
 8001358:	486a      	ldr	r0, [pc, #424]	@ (8001504 <main+0x53c>)
 800135a:	f7ff fe1d 	bl	8000f98 <LCD_SendString>
	 		  REVERS;
 800135e:	2201      	movs	r2, #1
 8001360:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001364:	4868      	ldr	r0, [pc, #416]	@ (8001508 <main+0x540>)
 8001366:	f002 fbe9 	bl	8003b3c <HAL_GPIO_WritePin>
	/////////////////////////////////////REVERS/////////////////////////////////////////////
	 		 if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==1)&&(arm==0)&&(run==0)){
 800136a:	2108      	movs	r1, #8
 800136c:	4867      	ldr	r0, [pc, #412]	@ (800150c <main+0x544>)
 800136e:	f002 fbcd 	bl	8003b0c <HAL_GPIO_ReadPin>
 8001372:	4603      	mov	r3, r0
 8001374:	2b01      	cmp	r3, #1
 8001376:	d111      	bne.n	800139c <main+0x3d4>
 8001378:	4b60      	ldr	r3, [pc, #384]	@ (80014fc <main+0x534>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d10d      	bne.n	800139c <main+0x3d4>
 8001380:	4b5d      	ldr	r3, [pc, #372]	@ (80014f8 <main+0x530>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d109      	bne.n	800139c <main+0x3d4>
	 		 			  HAL_Delay(50);
 8001388:	2032      	movs	r0, #50	@ 0x32
 800138a:	f001 f921 	bl	80025d0 <HAL_Delay>
	 		 			  I2C_send(0b10000000,0);   // переход на 1 строку
 800138e:	2100      	movs	r1, #0
 8001390:	2080      	movs	r0, #128	@ 0x80
 8001392:	f7ff fdb1 	bl	8000ef8 <I2C_send>
	 		 			  		  LCD_SendString("REVERS MODE- READY...  ");
 8001396:	485e      	ldr	r0, [pc, #376]	@ (8001510 <main+0x548>)
 8001398:	f7ff fdfe 	bl	8000f98 <LCD_SendString>
	 		 			  	//	 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
	 		 			  	//	 HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
	 		 		  }

	 		 		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==0)&&(arm==0)&&(run==0)){
 800139c:	2108      	movs	r1, #8
 800139e:	485b      	ldr	r0, [pc, #364]	@ (800150c <main+0x544>)
 80013a0:	f002 fbb4 	bl	8003b0c <HAL_GPIO_ReadPin>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d10d      	bne.n	80013c6 <main+0x3fe>
 80013aa:	4b54      	ldr	r3, [pc, #336]	@ (80014fc <main+0x534>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d109      	bne.n	80013c6 <main+0x3fe>
 80013b2:	4b51      	ldr	r3, [pc, #324]	@ (80014f8 <main+0x530>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d105      	bne.n	80013c6 <main+0x3fe>
	 		                       arm=1;
 80013ba:	4b50      	ldr	r3, [pc, #320]	@ (80014fc <main+0x534>)
 80013bc:	2201      	movs	r2, #1
 80013be:	701a      	strb	r2, [r3, #0]
	 		 					  HAL_Delay(150); }
 80013c0:	2096      	movs	r0, #150	@ 0x96
 80013c2:	f001 f905 	bl	80025d0 <HAL_Delay>

	 		 		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==1)&&(arm==1)&&(run==0)){
 80013c6:	2108      	movs	r1, #8
 80013c8:	4850      	ldr	r0, [pc, #320]	@ (800150c <main+0x544>)
 80013ca:	f002 fb9f 	bl	8003b0c <HAL_GPIO_ReadPin>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d125      	bne.n	8001420 <main+0x458>
 80013d4:	4b49      	ldr	r3, [pc, #292]	@ (80014fc <main+0x534>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d121      	bne.n	8001420 <main+0x458>
 80013dc:	4b46      	ldr	r3, [pc, #280]	@ (80014f8 <main+0x530>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d11d      	bne.n	8001420 <main+0x458>
	 		 		 			  HAL_Delay(50);
 80013e4:	2032      	movs	r0, #50	@ 0x32
 80013e6:	f001 f8f3 	bl	80025d0 <HAL_Delay>
	 		 		 			  run=1;
 80013ea:	4b43      	ldr	r3, [pc, #268]	@ (80014f8 <main+0x530>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	701a      	strb	r2, [r3, #0]
	 		 		 			  I2C_send(0b10000000,0);   // переход на 1 строку
 80013f0:	2100      	movs	r1, #0
 80013f2:	2080      	movs	r0, #128	@ 0x80
 80013f4:	f7ff fd80 	bl	8000ef8 <I2C_send>
	 		 		 			  		  LCD_SendString("REVERS MODE- RUNING    ");
 80013f8:	4846      	ldr	r0, [pc, #280]	@ (8001514 <main+0x54c>)
 80013fa:	f7ff fdcd 	bl	8000f98 <LCD_SendString>

	 		 		 			  	  HAL_ADC_Start(&hadc1); // запускаем преобразование сигнала АЦП
 80013fe:	4846      	ldr	r0, [pc, #280]	@ (8001518 <main+0x550>)
 8001400:	f001 f94e 	bl	80026a0 <HAL_ADC_Start>
	 		 		 			      HAL_ADC_PollForConversion(&hadc1, 100); // ожидаем окончания преобразования
 8001404:	2164      	movs	r1, #100	@ 0x64
 8001406:	4844      	ldr	r0, [pc, #272]	@ (8001518 <main+0x550>)
 8001408:	f001 fa31 	bl	800286e <HAL_ADC_PollForConversion>
	 		 		 			      adc = HAL_ADC_GetValue(&hadc1); // читаем полученное значение в переменную adc
 800140c:	4842      	ldr	r0, [pc, #264]	@ (8001518 <main+0x550>)
 800140e:	f001 fab9 	bl	8002984 <HAL_ADC_GetValue>
 8001412:	4603      	mov	r3, r0
 8001414:	b29a      	uxth	r2, r3
 8001416:	4b41      	ldr	r3, [pc, #260]	@ (800151c <main+0x554>)
 8001418:	801a      	strh	r2, [r3, #0]
	 		 		 			      HAL_ADC_Stop(&hadc1); // останавливаем АЦП (не обязательно)
 800141a:	483f      	ldr	r0, [pc, #252]	@ (8001518 <main+0x550>)
 800141c:	f001 f9f4 	bl	8002808 <HAL_ADC_Stop>

	 		                      }


	 		 		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==1)&&(arm==1)&&(run==1)){
 8001420:	2108      	movs	r1, #8
 8001422:	483a      	ldr	r0, [pc, #232]	@ (800150c <main+0x544>)
 8001424:	f002 fb72 	bl	8003b0c <HAL_GPIO_ReadPin>
 8001428:	4603      	mov	r3, r0
 800142a:	2b01      	cmp	r3, #1
 800142c:	d123      	bne.n	8001476 <main+0x4ae>
 800142e:	4b33      	ldr	r3, [pc, #204]	@ (80014fc <main+0x534>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d11f      	bne.n	8001476 <main+0x4ae>
 8001436:	4b30      	ldr	r3, [pc, #192]	@ (80014f8 <main+0x530>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d11b      	bne.n	8001476 <main+0x4ae>

	 		 		 		                      I2C_send(0b10000000,0);   // переход на 1 строку
 800143e:	2100      	movs	r1, #0
 8001440:	2080      	movs	r0, #128	@ 0x80
 8001442:	f7ff fd59 	bl	8000ef8 <I2C_send>
	 		 		 		                      LCD_SendString("REVERS MODE- RUNING    ");
 8001446:	4833      	ldr	r0, [pc, #204]	@ (8001514 <main+0x54c>)
 8001448:	f7ff fda6 	bl	8000f98 <LCD_SendString>
	 		 		 		                    //   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	 		 		 		                    //   HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);

	 		 		 		                    HAL_ADC_Start(&hadc1); // запускаем преобразование сигнала АЦП
 800144c:	4832      	ldr	r0, [pc, #200]	@ (8001518 <main+0x550>)
 800144e:	f001 f927 	bl	80026a0 <HAL_ADC_Start>
	 		 		 		                    HAL_ADC_PollForConversion(&hadc1, 100); // ожидаем окончания преобразования
 8001452:	2164      	movs	r1, #100	@ 0x64
 8001454:	4830      	ldr	r0, [pc, #192]	@ (8001518 <main+0x550>)
 8001456:	f001 fa0a 	bl	800286e <HAL_ADC_PollForConversion>
	 		 		 		                    adc = HAL_ADC_GetValue(&hadc1); // читаем полученное значение в переменную adc
 800145a:	482f      	ldr	r0, [pc, #188]	@ (8001518 <main+0x550>)
 800145c:	f001 fa92 	bl	8002984 <HAL_ADC_GetValue>
 8001460:	4603      	mov	r3, r0
 8001462:	b29a      	uxth	r2, r3
 8001464:	4b2d      	ldr	r3, [pc, #180]	@ (800151c <main+0x554>)
 8001466:	801a      	strh	r2, [r3, #0]
	 		 		 		                     HAL_ADC_Stop(&hadc1); // останавливаем АЦП (не обязательно)
 8001468:	482b      	ldr	r0, [pc, #172]	@ (8001518 <main+0x550>)
 800146a:	f001 f9cd 	bl	8002808 <HAL_ADC_Stop>
	 		 		 		                     speed=adc;
 800146e:	4b2b      	ldr	r3, [pc, #172]	@ (800151c <main+0x554>)
 8001470:	881a      	ldrh	r2, [r3, #0]
 8001472:	4b2b      	ldr	r3, [pc, #172]	@ (8001520 <main+0x558>)
 8001474:	801a      	strh	r2, [r3, #0]
	 		 		 		 					}


	 		 		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==0)&&(arm==1)&&(run==1)){
 8001476:	2108      	movs	r1, #8
 8001478:	4824      	ldr	r0, [pc, #144]	@ (800150c <main+0x544>)
 800147a:	f002 fb47 	bl	8003b0c <HAL_GPIO_ReadPin>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d114      	bne.n	80014ae <main+0x4e6>
 8001484:	4b1d      	ldr	r3, [pc, #116]	@ (80014fc <main+0x534>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d110      	bne.n	80014ae <main+0x4e6>
 800148c:	4b1a      	ldr	r3, [pc, #104]	@ (80014f8 <main+0x530>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d10c      	bne.n	80014ae <main+0x4e6>
	 		 		                       arm=0;
 8001494:	4b19      	ldr	r3, [pc, #100]	@ (80014fc <main+0x534>)
 8001496:	2200      	movs	r2, #0
 8001498:	701a      	strb	r2, [r3, #0]
	 		 		                       I2C_send(0b10000000,0);   // переход на 1 строку
 800149a:	2100      	movs	r1, #0
 800149c:	2080      	movs	r0, #128	@ 0x80
 800149e:	f7ff fd2b 	bl	8000ef8 <I2C_send>
	 		 		                        LCD_SendString("REVERS MODE- RUNING    ");
 80014a2:	481c      	ldr	r0, [pc, #112]	@ (8001514 <main+0x54c>)
 80014a4:	f7ff fd78 	bl	8000f98 <LCD_SendString>
	 		 		 					  HAL_Delay(150); }
 80014a8:	2096      	movs	r0, #150	@ 0x96
 80014aa:	f001 f891 	bl	80025d0 <HAL_Delay>

	 		 		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==1)&&(arm==0)&&(run==1)){
 80014ae:	2108      	movs	r1, #8
 80014b0:	4816      	ldr	r0, [pc, #88]	@ (800150c <main+0x544>)
 80014b2:	f002 fb2b 	bl	8003b0c <HAL_GPIO_ReadPin>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d110      	bne.n	80014de <main+0x516>
 80014bc:	4b0f      	ldr	r3, [pc, #60]	@ (80014fc <main+0x534>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d10c      	bne.n	80014de <main+0x516>
 80014c4:	4b0c      	ldr	r3, [pc, #48]	@ (80014f8 <main+0x530>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d108      	bne.n	80014de <main+0x516>
	 		 				                       arm=0;
 80014cc:	4b0b      	ldr	r3, [pc, #44]	@ (80014fc <main+0x534>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	701a      	strb	r2, [r3, #0]
	 		 				                       run=0;
 80014d2:	4b09      	ldr	r3, [pc, #36]	@ (80014f8 <main+0x530>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	701a      	strb	r2, [r3, #0]
	 		 				 					  HAL_Delay(150); }
 80014d8:	2096      	movs	r0, #150	@ 0x96
 80014da:	f001 f879 	bl	80025d0 <HAL_Delay>


	 	  }

	  if(regim==3){
 80014de:	4b08      	ldr	r3, [pc, #32]	@ (8001500 <main+0x538>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b03      	cmp	r3, #3
 80014e4:	f47f adbc 	bne.w	8001060 <main+0x98>
		 		  I2C_send(0b10000000,0);   // переход на 1 строку
 80014e8:	2100      	movs	r1, #0
 80014ea:	2080      	movs	r0, #128	@ 0x80
 80014ec:	f7ff fd04 	bl	8000ef8 <I2C_send>
		 		  LCD_SendString("SETUP MODE     ");
 80014f0:	480c      	ldr	r0, [pc, #48]	@ (8001524 <main+0x55c>)
 80014f2:	f7ff fd51 	bl	8000f98 <LCD_SendString>
	  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)==0)&&(flag==0)){
 80014f6:	e5b3      	b.n	8001060 <main+0x98>
 80014f8:	2000053e 	.word	0x2000053e
 80014fc:	2000053d 	.word	0x2000053d
 8001500:	2000053c 	.word	0x2000053c
 8001504:	0800ab68 	.word	0x0800ab68
 8001508:	40020000 	.word	0x40020000
 800150c:	40020400 	.word	0x40020400
 8001510:	0800ab80 	.word	0x0800ab80
 8001514:	0800ab98 	.word	0x0800ab98
 8001518:	20000270 	.word	0x20000270
 800151c:	20000542 	.word	0x20000542
 8001520:	20000540 	.word	0x20000540
 8001524:	0800abb0 	.word	0x0800abb0

08001528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b094      	sub	sp, #80	@ 0x50
 800152c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800152e:	f107 0320 	add.w	r3, r7, #32
 8001532:	2230      	movs	r2, #48	@ 0x30
 8001534:	2100      	movs	r1, #0
 8001536:	4618      	mov	r0, r3
 8001538:	f007 f9f3 	bl	8008922 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800153c:	f107 030c 	add.w	r3, r7, #12
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800154c:	2300      	movs	r3, #0
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	4b29      	ldr	r3, [pc, #164]	@ (80015f8 <SystemClock_Config+0xd0>)
 8001552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001554:	4a28      	ldr	r2, [pc, #160]	@ (80015f8 <SystemClock_Config+0xd0>)
 8001556:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800155a:	6413      	str	r3, [r2, #64]	@ 0x40
 800155c:	4b26      	ldr	r3, [pc, #152]	@ (80015f8 <SystemClock_Config+0xd0>)
 800155e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001560:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001568:	2300      	movs	r3, #0
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	4b23      	ldr	r3, [pc, #140]	@ (80015fc <SystemClock_Config+0xd4>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001574:	4a21      	ldr	r2, [pc, #132]	@ (80015fc <SystemClock_Config+0xd4>)
 8001576:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	4b1f      	ldr	r3, [pc, #124]	@ (80015fc <SystemClock_Config+0xd4>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001584:	607b      	str	r3, [r7, #4]
 8001586:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001588:	230a      	movs	r3, #10
 800158a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800158c:	2301      	movs	r3, #1
 800158e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001590:	2310      	movs	r3, #16
 8001592:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001594:	2301      	movs	r3, #1
 8001596:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001598:	2302      	movs	r3, #2
 800159a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800159c:	2300      	movs	r3, #0
 800159e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015a0:	2308      	movs	r3, #8
 80015a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80015a4:	2354      	movs	r3, #84	@ 0x54
 80015a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015a8:	2302      	movs	r3, #2
 80015aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015ac:	2304      	movs	r3, #4
 80015ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b0:	f107 0320 	add.w	r3, r7, #32
 80015b4:	4618      	mov	r0, r3
 80015b6:	f003 f8cb 	bl	8004750 <HAL_RCC_OscConfig>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80015c0:	f000 fb8e 	bl	8001ce0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c4:	230f      	movs	r3, #15
 80015c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015c8:	2302      	movs	r3, #2
 80015ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015da:	f107 030c 	add.w	r3, r7, #12
 80015de:	2102      	movs	r1, #2
 80015e0:	4618      	mov	r0, r3
 80015e2:	f003 fb2d 	bl	8004c40 <HAL_RCC_ClockConfig>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80015ec:	f000 fb78 	bl	8001ce0 <Error_Handler>
  }
}
 80015f0:	bf00      	nop
 80015f2:	3750      	adds	r7, #80	@ 0x50
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40007000 	.word	0x40007000

08001600 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001606:	463b      	mov	r3, r7
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001612:	4b21      	ldr	r3, [pc, #132]	@ (8001698 <MX_ADC1_Init+0x98>)
 8001614:	4a21      	ldr	r2, [pc, #132]	@ (800169c <MX_ADC1_Init+0x9c>)
 8001616:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001618:	4b1f      	ldr	r3, [pc, #124]	@ (8001698 <MX_ADC1_Init+0x98>)
 800161a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800161e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001620:	4b1d      	ldr	r3, [pc, #116]	@ (8001698 <MX_ADC1_Init+0x98>)
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001626:	4b1c      	ldr	r3, [pc, #112]	@ (8001698 <MX_ADC1_Init+0x98>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800162c:	4b1a      	ldr	r3, [pc, #104]	@ (8001698 <MX_ADC1_Init+0x98>)
 800162e:	2200      	movs	r2, #0
 8001630:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001632:	4b19      	ldr	r3, [pc, #100]	@ (8001698 <MX_ADC1_Init+0x98>)
 8001634:	2200      	movs	r2, #0
 8001636:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800163a:	4b17      	ldr	r3, [pc, #92]	@ (8001698 <MX_ADC1_Init+0x98>)
 800163c:	2200      	movs	r2, #0
 800163e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001640:	4b15      	ldr	r3, [pc, #84]	@ (8001698 <MX_ADC1_Init+0x98>)
 8001642:	4a17      	ldr	r2, [pc, #92]	@ (80016a0 <MX_ADC1_Init+0xa0>)
 8001644:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001646:	4b14      	ldr	r3, [pc, #80]	@ (8001698 <MX_ADC1_Init+0x98>)
 8001648:	2200      	movs	r2, #0
 800164a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800164c:	4b12      	ldr	r3, [pc, #72]	@ (8001698 <MX_ADC1_Init+0x98>)
 800164e:	2201      	movs	r2, #1
 8001650:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001652:	4b11      	ldr	r3, [pc, #68]	@ (8001698 <MX_ADC1_Init+0x98>)
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800165a:	4b0f      	ldr	r3, [pc, #60]	@ (8001698 <MX_ADC1_Init+0x98>)
 800165c:	2201      	movs	r2, #1
 800165e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001660:	480d      	ldr	r0, [pc, #52]	@ (8001698 <MX_ADC1_Init+0x98>)
 8001662:	f000 ffd9 	bl	8002618 <HAL_ADC_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800166c:	f000 fb38 	bl	8001ce0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001670:	2306      	movs	r3, #6
 8001672:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001674:	2301      	movs	r3, #1
 8001676:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001678:	2301      	movs	r3, #1
 800167a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800167c:	463b      	mov	r3, r7
 800167e:	4619      	mov	r1, r3
 8001680:	4805      	ldr	r0, [pc, #20]	@ (8001698 <MX_ADC1_Init+0x98>)
 8001682:	f001 f98d 	bl	80029a0 <HAL_ADC_ConfigChannel>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800168c:	f000 fb28 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001690:	bf00      	nop
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000270 	.word	0x20000270
 800169c:	40012000 	.word	0x40012000
 80016a0:	0f000001 	.word	0x0f000001

080016a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016a8:	4b12      	ldr	r3, [pc, #72]	@ (80016f4 <MX_I2C1_Init+0x50>)
 80016aa:	4a13      	ldr	r2, [pc, #76]	@ (80016f8 <MX_I2C1_Init+0x54>)
 80016ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016ae:	4b11      	ldr	r3, [pc, #68]	@ (80016f4 <MX_I2C1_Init+0x50>)
 80016b0:	4a12      	ldr	r2, [pc, #72]	@ (80016fc <MX_I2C1_Init+0x58>)
 80016b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016b4:	4b0f      	ldr	r3, [pc, #60]	@ (80016f4 <MX_I2C1_Init+0x50>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016ba:	4b0e      	ldr	r3, [pc, #56]	@ (80016f4 <MX_I2C1_Init+0x50>)
 80016bc:	2200      	movs	r2, #0
 80016be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016c0:	4b0c      	ldr	r3, [pc, #48]	@ (80016f4 <MX_I2C1_Init+0x50>)
 80016c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80016c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016c8:	4b0a      	ldr	r3, [pc, #40]	@ (80016f4 <MX_I2C1_Init+0x50>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016ce:	4b09      	ldr	r3, [pc, #36]	@ (80016f4 <MX_I2C1_Init+0x50>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016d4:	4b07      	ldr	r3, [pc, #28]	@ (80016f4 <MX_I2C1_Init+0x50>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016da:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <MX_I2C1_Init+0x50>)
 80016dc:	2200      	movs	r2, #0
 80016de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016e0:	4804      	ldr	r0, [pc, #16]	@ (80016f4 <MX_I2C1_Init+0x50>)
 80016e2:	f002 fa69 	bl	8003bb8 <HAL_I2C_Init>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016ec:	f000 faf8 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	200002b8 	.word	0x200002b8
 80016f8:	40005400 	.word	0x40005400
 80016fc:	000186a0 	.word	0x000186a0

08001700 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001706:	1d3b      	adds	r3, r7, #4
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001714:	2300      	movs	r3, #0
 8001716:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001718:	4b24      	ldr	r3, [pc, #144]	@ (80017ac <MX_RTC_Init+0xac>)
 800171a:	4a25      	ldr	r2, [pc, #148]	@ (80017b0 <MX_RTC_Init+0xb0>)
 800171c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800171e:	4b23      	ldr	r3, [pc, #140]	@ (80017ac <MX_RTC_Init+0xac>)
 8001720:	2200      	movs	r2, #0
 8001722:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001724:	4b21      	ldr	r3, [pc, #132]	@ (80017ac <MX_RTC_Init+0xac>)
 8001726:	227f      	movs	r2, #127	@ 0x7f
 8001728:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800172a:	4b20      	ldr	r3, [pc, #128]	@ (80017ac <MX_RTC_Init+0xac>)
 800172c:	22ff      	movs	r2, #255	@ 0xff
 800172e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001730:	4b1e      	ldr	r3, [pc, #120]	@ (80017ac <MX_RTC_Init+0xac>)
 8001732:	2200      	movs	r2, #0
 8001734:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001736:	4b1d      	ldr	r3, [pc, #116]	@ (80017ac <MX_RTC_Init+0xac>)
 8001738:	2200      	movs	r2, #0
 800173a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800173c:	4b1b      	ldr	r3, [pc, #108]	@ (80017ac <MX_RTC_Init+0xac>)
 800173e:	2200      	movs	r2, #0
 8001740:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001742:	481a      	ldr	r0, [pc, #104]	@ (80017ac <MX_RTC_Init+0xac>)
 8001744:	f003 fd4a 	bl	80051dc <HAL_RTC_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800174e:	f000 fac7 	bl	8001ce0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001752:	2300      	movs	r3, #0
 8001754:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001756:	2300      	movs	r3, #0
 8001758:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800175a:	2300      	movs	r3, #0
 800175c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800175e:	2300      	movs	r3, #0
 8001760:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	2201      	movs	r2, #1
 800176a:	4619      	mov	r1, r3
 800176c:	480f      	ldr	r0, [pc, #60]	@ (80017ac <MX_RTC_Init+0xac>)
 800176e:	f003 fdb8 	bl	80052e2 <HAL_RTC_SetTime>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001778:	f000 fab2 	bl	8001ce0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800177c:	2301      	movs	r3, #1
 800177e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;
 8001780:	2304      	movs	r3, #4
 8001782:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001784:	2301      	movs	r3, #1
 8001786:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001788:	2300      	movs	r3, #0
 800178a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800178c:	463b      	mov	r3, r7
 800178e:	2201      	movs	r2, #1
 8001790:	4619      	mov	r1, r3
 8001792:	4806      	ldr	r0, [pc, #24]	@ (80017ac <MX_RTC_Init+0xac>)
 8001794:	f003 fe3f 	bl	8005416 <HAL_RTC_SetDate>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800179e:	f000 fa9f 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80017a2:	bf00      	nop
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	2000030c 	.word	0x2000030c
 80017b0:	40002800 	.word	0x40002800

080017b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b096      	sub	sp, #88	@ 0x58
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ba:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	609a      	str	r2, [r3, #8]
 80017de:	60da      	str	r2, [r3, #12]
 80017e0:	611a      	str	r2, [r3, #16]
 80017e2:	615a      	str	r2, [r3, #20]
 80017e4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017e6:	1d3b      	adds	r3, r7, #4
 80017e8:	2220      	movs	r2, #32
 80017ea:	2100      	movs	r1, #0
 80017ec:	4618      	mov	r0, r3
 80017ee:	f007 f898 	bl	8008922 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017f2:	4b3f      	ldr	r3, [pc, #252]	@ (80018f0 <MX_TIM1_Init+0x13c>)
 80017f4:	4a3f      	ldr	r2, [pc, #252]	@ (80018f4 <MX_TIM1_Init+0x140>)
 80017f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80017f8:	4b3d      	ldr	r3, [pc, #244]	@ (80018f0 <MX_TIM1_Init+0x13c>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017fe:	4b3c      	ldr	r3, [pc, #240]	@ (80018f0 <MX_TIM1_Init+0x13c>)
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1500;
 8001804:	4b3a      	ldr	r3, [pc, #232]	@ (80018f0 <MX_TIM1_Init+0x13c>)
 8001806:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800180a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800180c:	4b38      	ldr	r3, [pc, #224]	@ (80018f0 <MX_TIM1_Init+0x13c>)
 800180e:	2200      	movs	r2, #0
 8001810:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001812:	4b37      	ldr	r3, [pc, #220]	@ (80018f0 <MX_TIM1_Init+0x13c>)
 8001814:	2200      	movs	r2, #0
 8001816:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001818:	4b35      	ldr	r3, [pc, #212]	@ (80018f0 <MX_TIM1_Init+0x13c>)
 800181a:	2280      	movs	r2, #128	@ 0x80
 800181c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800181e:	4834      	ldr	r0, [pc, #208]	@ (80018f0 <MX_TIM1_Init+0x13c>)
 8001820:	f003 ff1e 	bl	8005660 <HAL_TIM_Base_Init>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800182a:	f000 fa59 	bl	8001ce0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800182e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001832:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001834:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001838:	4619      	mov	r1, r3
 800183a:	482d      	ldr	r0, [pc, #180]	@ (80018f0 <MX_TIM1_Init+0x13c>)
 800183c:	f004 fb74 	bl	8005f28 <HAL_TIM_ConfigClockSource>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001846:	f000 fa4b 	bl	8001ce0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800184a:	4829      	ldr	r0, [pc, #164]	@ (80018f0 <MX_TIM1_Init+0x13c>)
 800184c:	f003 ff57 	bl	80056fe <HAL_TIM_PWM_Init>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001856:	f000 fa43 	bl	8001ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800185a:	2300      	movs	r3, #0
 800185c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800185e:	2300      	movs	r3, #0
 8001860:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001862:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001866:	4619      	mov	r1, r3
 8001868:	4821      	ldr	r0, [pc, #132]	@ (80018f0 <MX_TIM1_Init+0x13c>)
 800186a:	f005 f8a9 	bl	80069c0 <HAL_TIMEx_MasterConfigSynchronization>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001874:	f000 fa34 	bl	8001ce0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001878:	2360      	movs	r3, #96	@ 0x60
 800187a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 750;
 800187c:	f240 23ee 	movw	r3, #750	@ 0x2ee
 8001880:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001882:	2300      	movs	r3, #0
 8001884:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001886:	2300      	movs	r3, #0
 8001888:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800188a:	2304      	movs	r3, #4
 800188c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800188e:	2300      	movs	r3, #0
 8001890:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001892:	2300      	movs	r3, #0
 8001894:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001896:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800189a:	2200      	movs	r2, #0
 800189c:	4619      	mov	r1, r3
 800189e:	4814      	ldr	r0, [pc, #80]	@ (80018f0 <MX_TIM1_Init+0x13c>)
 80018a0:	f004 fa80 	bl	8005da4 <HAL_TIM_PWM_ConfigChannel>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80018aa:	f000 fa19 	bl	8001ce0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018cc:	1d3b      	adds	r3, r7, #4
 80018ce:	4619      	mov	r1, r3
 80018d0:	4807      	ldr	r0, [pc, #28]	@ (80018f0 <MX_TIM1_Init+0x13c>)
 80018d2:	f005 f8e3 	bl	8006a9c <HAL_TIMEx_ConfigBreakDeadTime>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80018dc:	f000 fa00 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018e0:	4803      	ldr	r0, [pc, #12]	@ (80018f0 <MX_TIM1_Init+0x13c>)
 80018e2:	f000 fb63 	bl	8001fac <HAL_TIM_MspPostInit>

}
 80018e6:	bf00      	nop
 80018e8:	3758      	adds	r7, #88	@ 0x58
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	2000032c 	.word	0x2000032c
 80018f4:	40010000 	.word	0x40010000

080018f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	@ 0x28
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018fe:	f107 0318 	add.w	r3, r7, #24
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800190c:	f107 0310 	add.w	r3, r7, #16
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001916:	463b      	mov	r3, r7
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001922:	4b33      	ldr	r3, [pc, #204]	@ (80019f0 <MX_TIM2_Init+0xf8>)
 8001924:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001928:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800192a:	4b31      	ldr	r3, [pc, #196]	@ (80019f0 <MX_TIM2_Init+0xf8>)
 800192c:	2200      	movs	r2, #0
 800192e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001930:	4b2f      	ldr	r3, [pc, #188]	@ (80019f0 <MX_TIM2_Init+0xf8>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001936:	4b2e      	ldr	r3, [pc, #184]	@ (80019f0 <MX_TIM2_Init+0xf8>)
 8001938:	f04f 32ff 	mov.w	r2, #4294967295
 800193c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800193e:	4b2c      	ldr	r3, [pc, #176]	@ (80019f0 <MX_TIM2_Init+0xf8>)
 8001940:	2200      	movs	r2, #0
 8001942:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001944:	4b2a      	ldr	r3, [pc, #168]	@ (80019f0 <MX_TIM2_Init+0xf8>)
 8001946:	2200      	movs	r2, #0
 8001948:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800194a:	4829      	ldr	r0, [pc, #164]	@ (80019f0 <MX_TIM2_Init+0xf8>)
 800194c:	f003 fe88 	bl	8005660 <HAL_TIM_Base_Init>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001956:	f000 f9c3 	bl	8001ce0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800195a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800195e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001960:	f107 0318 	add.w	r3, r7, #24
 8001964:	4619      	mov	r1, r3
 8001966:	4822      	ldr	r0, [pc, #136]	@ (80019f0 <MX_TIM2_Init+0xf8>)
 8001968:	f004 fade 	bl	8005f28 <HAL_TIM_ConfigClockSource>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001972:	f000 f9b5 	bl	8001ce0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001976:	481e      	ldr	r0, [pc, #120]	@ (80019f0 <MX_TIM2_Init+0xf8>)
 8001978:	f004 f82e 	bl	80059d8 <HAL_TIM_IC_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001982:	f000 f9ad 	bl	8001ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800198e:	f107 0310 	add.w	r3, r7, #16
 8001992:	4619      	mov	r1, r3
 8001994:	4816      	ldr	r0, [pc, #88]	@ (80019f0 <MX_TIM2_Init+0xf8>)
 8001996:	f005 f813 	bl	80069c0 <HAL_TIMEx_MasterConfigSynchronization>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80019a0:	f000 f99e 	bl	8001ce0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80019a4:	2300      	movs	r3, #0
 80019a6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80019a8:	2301      	movs	r3, #1
 80019aa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80019ac:	2300      	movs	r3, #0
 80019ae:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80019b4:	463b      	mov	r3, r7
 80019b6:	2200      	movs	r2, #0
 80019b8:	4619      	mov	r1, r3
 80019ba:	480d      	ldr	r0, [pc, #52]	@ (80019f0 <MX_TIM2_Init+0xf8>)
 80019bc:	f004 f955 	bl	8005c6a <HAL_TIM_IC_ConfigChannel>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80019c6:	f000 f98b 	bl	8001ce0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80019ca:	2302      	movs	r3, #2
 80019cc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80019ce:	2302      	movs	r3, #2
 80019d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80019d2:	463b      	mov	r3, r7
 80019d4:	2204      	movs	r2, #4
 80019d6:	4619      	mov	r1, r3
 80019d8:	4805      	ldr	r0, [pc, #20]	@ (80019f0 <MX_TIM2_Init+0xf8>)
 80019da:	f004 f946 	bl	8005c6a <HAL_TIM_IC_ConfigChannel>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80019e4:	f000 f97c 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019e8:	bf00      	nop
 80019ea:	3728      	adds	r7, #40	@ 0x28
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20000374 	.word	0x20000374

080019f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08e      	sub	sp, #56	@ 0x38
 80019f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	605a      	str	r2, [r3, #4]
 8001a04:	609a      	str	r2, [r3, #8]
 8001a06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a08:	f107 0320 	add.w	r3, r7, #32
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a12:	1d3b      	adds	r3, r7, #4
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
 8001a20:	615a      	str	r2, [r3, #20]
 8001a22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a24:	4b2c      	ldr	r3, [pc, #176]	@ (8001ad8 <MX_TIM3_Init+0xe4>)
 8001a26:	4a2d      	ldr	r2, [pc, #180]	@ (8001adc <MX_TIM3_Init+0xe8>)
 8001a28:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a2a:	4b2b      	ldr	r3, [pc, #172]	@ (8001ad8 <MX_TIM3_Init+0xe4>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a30:	4b29      	ldr	r3, [pc, #164]	@ (8001ad8 <MX_TIM3_Init+0xe4>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a36:	4b28      	ldr	r3, [pc, #160]	@ (8001ad8 <MX_TIM3_Init+0xe4>)
 8001a38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a3c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a3e:	4b26      	ldr	r3, [pc, #152]	@ (8001ad8 <MX_TIM3_Init+0xe4>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a44:	4b24      	ldr	r3, [pc, #144]	@ (8001ad8 <MX_TIM3_Init+0xe4>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a4a:	4823      	ldr	r0, [pc, #140]	@ (8001ad8 <MX_TIM3_Init+0xe4>)
 8001a4c:	f003 fe08 	bl	8005660 <HAL_TIM_Base_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001a56:	f000 f943 	bl	8001ce0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a60:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a64:	4619      	mov	r1, r3
 8001a66:	481c      	ldr	r0, [pc, #112]	@ (8001ad8 <MX_TIM3_Init+0xe4>)
 8001a68:	f004 fa5e 	bl	8005f28 <HAL_TIM_ConfigClockSource>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001a72:	f000 f935 	bl	8001ce0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a76:	4818      	ldr	r0, [pc, #96]	@ (8001ad8 <MX_TIM3_Init+0xe4>)
 8001a78:	f003 fe41 	bl	80056fe <HAL_TIM_PWM_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001a82:	f000 f92d 	bl	8001ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a86:	2300      	movs	r3, #0
 8001a88:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a8e:	f107 0320 	add.w	r3, r7, #32
 8001a92:	4619      	mov	r1, r3
 8001a94:	4810      	ldr	r0, [pc, #64]	@ (8001ad8 <MX_TIM3_Init+0xe4>)
 8001a96:	f004 ff93 	bl	80069c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001aa0:	f000 f91e 	bl	8001ce0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aa4:	2360      	movs	r3, #96	@ 0x60
 8001aa6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ab4:	1d3b      	adds	r3, r7, #4
 8001ab6:	2204      	movs	r2, #4
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4807      	ldr	r0, [pc, #28]	@ (8001ad8 <MX_TIM3_Init+0xe4>)
 8001abc:	f004 f972 	bl	8005da4 <HAL_TIM_PWM_ConfigChannel>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001ac6:	f000 f90b 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001aca:	4803      	ldr	r0, [pc, #12]	@ (8001ad8 <MX_TIM3_Init+0xe4>)
 8001acc:	f000 fa6e 	bl	8001fac <HAL_TIM_MspPostInit>

}
 8001ad0:	bf00      	nop
 8001ad2:	3738      	adds	r7, #56	@ 0x38
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	200003bc 	.word	0x200003bc
 8001adc:	40000400 	.word	0x40000400

08001ae0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ae4:	4b11      	ldr	r3, [pc, #68]	@ (8001b2c <MX_USART1_UART_Init+0x4c>)
 8001ae6:	4a12      	ldr	r2, [pc, #72]	@ (8001b30 <MX_USART1_UART_Init+0x50>)
 8001ae8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001aea:	4b10      	ldr	r3, [pc, #64]	@ (8001b2c <MX_USART1_UART_Init+0x4c>)
 8001aec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001af0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001af2:	4b0e      	ldr	r3, [pc, #56]	@ (8001b2c <MX_USART1_UART_Init+0x4c>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001af8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b2c <MX_USART1_UART_Init+0x4c>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001afe:	4b0b      	ldr	r3, [pc, #44]	@ (8001b2c <MX_USART1_UART_Init+0x4c>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b04:	4b09      	ldr	r3, [pc, #36]	@ (8001b2c <MX_USART1_UART_Init+0x4c>)
 8001b06:	220c      	movs	r2, #12
 8001b08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b0a:	4b08      	ldr	r3, [pc, #32]	@ (8001b2c <MX_USART1_UART_Init+0x4c>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b10:	4b06      	ldr	r3, [pc, #24]	@ (8001b2c <MX_USART1_UART_Init+0x4c>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b16:	4805      	ldr	r0, [pc, #20]	@ (8001b2c <MX_USART1_UART_Init+0x4c>)
 8001b18:	f005 f84b 	bl	8006bb2 <HAL_UART_Init>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b22:	f000 f8dd 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000404 	.word	0x20000404
 8001b30:	40011000 	.word	0x40011000

08001b34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	607b      	str	r3, [r7, #4]
 8001b3e:	4b10      	ldr	r3, [pc, #64]	@ (8001b80 <MX_DMA_Init+0x4c>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b42:	4a0f      	ldr	r2, [pc, #60]	@ (8001b80 <MX_DMA_Init+0x4c>)
 8001b44:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b80 <MX_DMA_Init+0x4c>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b52:	607b      	str	r3, [r7, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001b56:	2200      	movs	r2, #0
 8001b58:	2100      	movs	r1, #0
 8001b5a:	203a      	movs	r0, #58	@ 0x3a
 8001b5c:	f001 fa19 	bl	8002f92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001b60:	203a      	movs	r0, #58	@ 0x3a
 8001b62:	f001 fa32 	bl	8002fca <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001b66:	2200      	movs	r2, #0
 8001b68:	2100      	movs	r1, #0
 8001b6a:	2046      	movs	r0, #70	@ 0x46
 8001b6c:	f001 fa11 	bl	8002f92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001b70:	2046      	movs	r0, #70	@ 0x46
 8001b72:	f001 fa2a 	bl	8002fca <HAL_NVIC_EnableIRQ>

}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800

08001b84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b088      	sub	sp, #32
 8001b88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8a:	f107 030c 	add.w	r3, r7, #12
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]
 8001b96:	60da      	str	r2, [r3, #12]
 8001b98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	4b4c      	ldr	r3, [pc, #304]	@ (8001cd0 <MX_GPIO_Init+0x14c>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba2:	4a4b      	ldr	r2, [pc, #300]	@ (8001cd0 <MX_GPIO_Init+0x14c>)
 8001ba4:	f043 0304 	orr.w	r3, r3, #4
 8001ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001baa:	4b49      	ldr	r3, [pc, #292]	@ (8001cd0 <MX_GPIO_Init+0x14c>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bae:	f003 0304 	and.w	r3, r3, #4
 8001bb2:	60bb      	str	r3, [r7, #8]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	607b      	str	r3, [r7, #4]
 8001bba:	4b45      	ldr	r3, [pc, #276]	@ (8001cd0 <MX_GPIO_Init+0x14c>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bbe:	4a44      	ldr	r2, [pc, #272]	@ (8001cd0 <MX_GPIO_Init+0x14c>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bc6:	4b42      	ldr	r3, [pc, #264]	@ (8001cd0 <MX_GPIO_Init+0x14c>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	607b      	str	r3, [r7, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	603b      	str	r3, [r7, #0]
 8001bd6:	4b3e      	ldr	r3, [pc, #248]	@ (8001cd0 <MX_GPIO_Init+0x14c>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bda:	4a3d      	ldr	r2, [pc, #244]	@ (8001cd0 <MX_GPIO_Init+0x14c>)
 8001bdc:	f043 0302 	orr.w	r3, r3, #2
 8001be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001be2:	4b3b      	ldr	r3, [pc, #236]	@ (8001cd0 <MX_GPIO_Init+0x14c>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	603b      	str	r3, [r7, #0]
 8001bec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bf4:	4837      	ldr	r0, [pc, #220]	@ (8001cd4 <MX_GPIO_Init+0x150>)
 8001bf6:	f001 ffa1 	bl	8003b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZ_Pin|DIRECTION_2_Pin, GPIO_PIN_RESET);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001c00:	4835      	ldr	r0, [pc, #212]	@ (8001cd8 <MX_GPIO_Init+0x154>)
 8001c02:	f001 ff9b 	bl	8003b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STOP_2_Pin|STOP_DRIVER_Pin|DIRECTION_Pin, GPIO_PIN_RESET);
 8001c06:	2200      	movs	r2, #0
 8001c08:	f44f 4118 	mov.w	r1, #38912	@ 0x9800
 8001c0c:	4833      	ldr	r0, [pc, #204]	@ (8001cdc <MX_GPIO_Init+0x158>)
 8001c0e:	f001 ff95 	bl	8003b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001c12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001c24:	f107 030c 	add.w	r3, r7, #12
 8001c28:	4619      	mov	r1, r3
 8001c2a:	482a      	ldr	r0, [pc, #168]	@ (8001cd4 <MX_GPIO_Init+0x150>)
 8001c2c:	f001 fdea 	bl	8003804 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZ_Pin DIRECTION_2_Pin */
  GPIO_InitStruct.Pin = BUZZ_Pin|DIRECTION_2_Pin;
 8001c30:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001c34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c36:	2301      	movs	r3, #1
 8001c38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c42:	f107 030c 	add.w	r3, r7, #12
 8001c46:	4619      	mov	r1, r3
 8001c48:	4823      	ldr	r0, [pc, #140]	@ (8001cd8 <MX_GPIO_Init+0x154>)
 8001c4a:	f001 fddb 	bl	8003804 <HAL_GPIO_Init>

  /*Configure GPIO pins : STOP_2_Pin STOP_DRIVER_Pin DIRECTION_Pin */
  GPIO_InitStruct.Pin = STOP_2_Pin|STOP_DRIVER_Pin|DIRECTION_Pin;
 8001c4e:	f44f 4318 	mov.w	r3, #38912	@ 0x9800
 8001c52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c54:	2301      	movs	r3, #1
 8001c56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c60:	f107 030c 	add.w	r3, r7, #12
 8001c64:	4619      	mov	r1, r3
 8001c66:	481d      	ldr	r0, [pc, #116]	@ (8001cdc <MX_GPIO_Init+0x158>)
 8001c68:	f001 fdcc 	bl	8003804 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIRECT_BUTTON_Pin */
  GPIO_InitStruct.Pin = DIRECT_BUTTON_Pin;
 8001c6c:	2308      	movs	r3, #8
 8001c6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c70:	2300      	movs	r3, #0
 8001c72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DIRECT_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001c78:	f107 030c 	add.w	r3, r7, #12
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4816      	ldr	r0, [pc, #88]	@ (8001cd8 <MX_GPIO_Init+0x154>)
 8001c80:	f001 fdc0 	bl	8003804 <HAL_GPIO_Init>

  /*Configure GPIO pin : MODE_BUT_Pin */
  GPIO_InitStruct.Pin = MODE_BUT_Pin;
 8001c84:	2310      	movs	r3, #16
 8001c86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MODE_BUT_GPIO_Port, &GPIO_InitStruct);
 8001c90:	f107 030c 	add.w	r3, r7, #12
 8001c94:	4619      	mov	r1, r3
 8001c96:	4810      	ldr	r0, [pc, #64]	@ (8001cd8 <MX_GPIO_Init+0x154>)
 8001c98:	f001 fdb4 	bl	8003804 <HAL_GPIO_Init>

  /*Configure GPIO pin : Counter_Pin */
  GPIO_InitStruct.Pin = Counter_Pin;
 8001c9c:	2320      	movs	r3, #32
 8001c9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ca0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001ca4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Counter_GPIO_Port, &GPIO_InitStruct);
 8001caa:	f107 030c 	add.w	r3, r7, #12
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4809      	ldr	r0, [pc, #36]	@ (8001cd8 <MX_GPIO_Init+0x154>)
 8001cb2:	f001 fda7 	bl	8003804 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2100      	movs	r1, #0
 8001cba:	2017      	movs	r0, #23
 8001cbc:	f001 f969 	bl	8002f92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001cc0:	2017      	movs	r0, #23
 8001cc2:	f001 f982 	bl	8002fca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cc6:	bf00      	nop
 8001cc8:	3720      	adds	r7, #32
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40020800 	.word	0x40020800
 8001cd8:	40020400 	.word	0x40020400
 8001cdc:	40020000 	.word	0x40020000

08001ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce4:	b672      	cpsid	i
}
 8001ce6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ce8:	bf00      	nop
 8001cea:	e7fd      	b.n	8001ce8 <Error_Handler+0x8>

08001cec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	4b13      	ldr	r3, [pc, #76]	@ (8001d44 <HAL_MspInit+0x58>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfa:	4a12      	ldr	r2, [pc, #72]	@ (8001d44 <HAL_MspInit+0x58>)
 8001cfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d02:	4b10      	ldr	r3, [pc, #64]	@ (8001d44 <HAL_MspInit+0x58>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	603b      	str	r3, [r7, #0]
 8001d12:	4b0c      	ldr	r3, [pc, #48]	@ (8001d44 <HAL_MspInit+0x58>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d16:	4a0b      	ldr	r2, [pc, #44]	@ (8001d44 <HAL_MspInit+0x58>)
 8001d18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d1e:	4b09      	ldr	r3, [pc, #36]	@ (8001d44 <HAL_MspInit+0x58>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d26:	603b      	str	r3, [r7, #0]
 8001d28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	2005      	movs	r0, #5
 8001d30:	f001 f92f 	bl	8002f92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001d34:	2005      	movs	r0, #5
 8001d36:	f001 f948 	bl	8002fca <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40023800 	.word	0x40023800

08001d48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08a      	sub	sp, #40	@ 0x28
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d50:	f107 0314 	add.w	r3, r7, #20
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a17      	ldr	r2, [pc, #92]	@ (8001dc4 <HAL_ADC_MspInit+0x7c>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d127      	bne.n	8001dba <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	4b16      	ldr	r3, [pc, #88]	@ (8001dc8 <HAL_ADC_MspInit+0x80>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d72:	4a15      	ldr	r2, [pc, #84]	@ (8001dc8 <HAL_ADC_MspInit+0x80>)
 8001d74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d78:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d7a:	4b13      	ldr	r3, [pc, #76]	@ (8001dc8 <HAL_ADC_MspInit+0x80>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d82:	613b      	str	r3, [r7, #16]
 8001d84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc8 <HAL_ADC_MspInit+0x80>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8e:	4a0e      	ldr	r2, [pc, #56]	@ (8001dc8 <HAL_ADC_MspInit+0x80>)
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d96:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc8 <HAL_ADC_MspInit+0x80>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = INP_1_Pin|INP_2_Pin|SPEED_Pin|Pedal_Pin;
 8001da2:	2378      	movs	r3, #120	@ 0x78
 8001da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001da6:	2303      	movs	r3, #3
 8001da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dae:	f107 0314 	add.w	r3, r7, #20
 8001db2:	4619      	mov	r1, r3
 8001db4:	4805      	ldr	r0, [pc, #20]	@ (8001dcc <HAL_ADC_MspInit+0x84>)
 8001db6:	f001 fd25 	bl	8003804 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001dba:	bf00      	nop
 8001dbc:	3728      	adds	r7, #40	@ 0x28
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40012000 	.word	0x40012000
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40020000 	.word	0x40020000

08001dd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08a      	sub	sp, #40	@ 0x28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a19      	ldr	r2, [pc, #100]	@ (8001e54 <HAL_I2C_MspInit+0x84>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d12b      	bne.n	8001e4a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	613b      	str	r3, [r7, #16]
 8001df6:	4b18      	ldr	r3, [pc, #96]	@ (8001e58 <HAL_I2C_MspInit+0x88>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfa:	4a17      	ldr	r2, [pc, #92]	@ (8001e58 <HAL_I2C_MspInit+0x88>)
 8001dfc:	f043 0302 	orr.w	r3, r3, #2
 8001e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e02:	4b15      	ldr	r3, [pc, #84]	@ (8001e58 <HAL_I2C_MspInit+0x88>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	613b      	str	r3, [r7, #16]
 8001e0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e0e:	23c0      	movs	r3, #192	@ 0xc0
 8001e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e12:	2312      	movs	r3, #18
 8001e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e1e:	2304      	movs	r3, #4
 8001e20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e22:	f107 0314 	add.w	r3, r7, #20
 8001e26:	4619      	mov	r1, r3
 8001e28:	480c      	ldr	r0, [pc, #48]	@ (8001e5c <HAL_I2C_MspInit+0x8c>)
 8001e2a:	f001 fceb 	bl	8003804 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	4b09      	ldr	r3, [pc, #36]	@ (8001e58 <HAL_I2C_MspInit+0x88>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e36:	4a08      	ldr	r2, [pc, #32]	@ (8001e58 <HAL_I2C_MspInit+0x88>)
 8001e38:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e3e:	4b06      	ldr	r3, [pc, #24]	@ (8001e58 <HAL_I2C_MspInit+0x88>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001e4a:	bf00      	nop
 8001e4c:	3728      	adds	r7, #40	@ 0x28
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40005400 	.word	0x40005400
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40020400 	.word	0x40020400

08001e60 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b088      	sub	sp, #32
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e68:	f107 030c 	add.w	r3, r7, #12
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	60da      	str	r2, [r3, #12]
 8001e76:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a0c      	ldr	r2, [pc, #48]	@ (8001eb0 <HAL_RTC_MspInit+0x50>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d111      	bne.n	8001ea6 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001e82:	2302      	movs	r3, #2
 8001e84:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001e86:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e8a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	4618      	mov	r0, r3
 8001e92:	f003 f8b5 	bl	8005000 <HAL_RCCEx_PeriphCLKConfig>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001e9c:	f7ff ff20 	bl	8001ce0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ea0:	4b04      	ldr	r3, [pc, #16]	@ (8001eb4 <HAL_RTC_MspInit+0x54>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001ea6:	bf00      	nop
 8001ea8:	3720      	adds	r7, #32
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40002800 	.word	0x40002800
 8001eb4:	42470e3c 	.word	0x42470e3c

08001eb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08c      	sub	sp, #48	@ 0x30
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec0:	f107 031c 	add.w	r3, r7, #28
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a31      	ldr	r2, [pc, #196]	@ (8001f9c <HAL_TIM_Base_MspInit+0xe4>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d10e      	bne.n	8001ef8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	61bb      	str	r3, [r7, #24]
 8001ede:	4b30      	ldr	r3, [pc, #192]	@ (8001fa0 <HAL_TIM_Base_MspInit+0xe8>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee2:	4a2f      	ldr	r2, [pc, #188]	@ (8001fa0 <HAL_TIM_Base_MspInit+0xe8>)
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eea:	4b2d      	ldr	r3, [pc, #180]	@ (8001fa0 <HAL_TIM_Base_MspInit+0xe8>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	61bb      	str	r3, [r7, #24]
 8001ef4:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ef6:	e04c      	b.n	8001f92 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM2)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f00:	d134      	bne.n	8001f6c <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	617b      	str	r3, [r7, #20]
 8001f06:	4b26      	ldr	r3, [pc, #152]	@ (8001fa0 <HAL_TIM_Base_MspInit+0xe8>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0a:	4a25      	ldr	r2, [pc, #148]	@ (8001fa0 <HAL_TIM_Base_MspInit+0xe8>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f12:	4b23      	ldr	r3, [pc, #140]	@ (8001fa0 <HAL_TIM_Base_MspInit+0xe8>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	617b      	str	r3, [r7, #20]
 8001f1c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	4b1f      	ldr	r3, [pc, #124]	@ (8001fa0 <HAL_TIM_Base_MspInit+0xe8>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f26:	4a1e      	ldr	r2, [pc, #120]	@ (8001fa0 <HAL_TIM_Base_MspInit+0xe8>)
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f2e:	4b1c      	ldr	r3, [pc, #112]	@ (8001fa0 <HAL_TIM_Base_MspInit+0xe8>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	613b      	str	r3, [r7, #16]
 8001f38:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Counter_2_Pin;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f46:	2300      	movs	r3, #0
 8001f48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Counter_2_GPIO_Port, &GPIO_InitStruct);
 8001f4e:	f107 031c 	add.w	r3, r7, #28
 8001f52:	4619      	mov	r1, r3
 8001f54:	4813      	ldr	r0, [pc, #76]	@ (8001fa4 <HAL_TIM_Base_MspInit+0xec>)
 8001f56:	f001 fc55 	bl	8003804 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	201c      	movs	r0, #28
 8001f60:	f001 f817 	bl	8002f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f64:	201c      	movs	r0, #28
 8001f66:	f001 f830 	bl	8002fca <HAL_NVIC_EnableIRQ>
}
 8001f6a:	e012      	b.n	8001f92 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM3)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a0d      	ldr	r2, [pc, #52]	@ (8001fa8 <HAL_TIM_Base_MspInit+0xf0>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d10d      	bne.n	8001f92 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	4b09      	ldr	r3, [pc, #36]	@ (8001fa0 <HAL_TIM_Base_MspInit+0xe8>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7e:	4a08      	ldr	r2, [pc, #32]	@ (8001fa0 <HAL_TIM_Base_MspInit+0xe8>)
 8001f80:	f043 0302 	orr.w	r3, r3, #2
 8001f84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f86:	4b06      	ldr	r3, [pc, #24]	@ (8001fa0 <HAL_TIM_Base_MspInit+0xe8>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
}
 8001f92:	bf00      	nop
 8001f94:	3730      	adds	r7, #48	@ 0x30
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40010000 	.word	0x40010000
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40020000 	.word	0x40020000
 8001fa8:	40000400 	.word	0x40000400

08001fac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08a      	sub	sp, #40	@ 0x28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	f107 0314 	add.w	r3, r7, #20
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a34      	ldr	r2, [pc, #208]	@ (800209c <HAL_TIM_MspPostInit+0xf0>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d13e      	bne.n	800204c <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	4b33      	ldr	r3, [pc, #204]	@ (80020a0 <HAL_TIM_MspPostInit+0xf4>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd6:	4a32      	ldr	r2, [pc, #200]	@ (80020a0 <HAL_TIM_MspPostInit+0xf4>)
 8001fd8:	f043 0302 	orr.w	r3, r3, #2
 8001fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fde:	4b30      	ldr	r3, [pc, #192]	@ (80020a0 <HAL_TIM_MspPostInit+0xf4>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	4b2c      	ldr	r3, [pc, #176]	@ (80020a0 <HAL_TIM_MspPostInit+0xf4>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff2:	4a2b      	ldr	r2, [pc, #172]	@ (80020a0 <HAL_TIM_MspPostInit+0xf4>)
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ffa:	4b29      	ldr	r3, [pc, #164]	@ (80020a0 <HAL_TIM_MspPostInit+0xf4>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB13     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002006:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800200a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200c:	2302      	movs	r3, #2
 800200e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002014:	2300      	movs	r3, #0
 8002016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002018:	2301      	movs	r3, #1
 800201a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800201c:	f107 0314 	add.w	r3, r7, #20
 8002020:	4619      	mov	r1, r3
 8002022:	4820      	ldr	r0, [pc, #128]	@ (80020a4 <HAL_TIM_MspPostInit+0xf8>)
 8002024:	f001 fbee 	bl	8003804 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002028:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800202c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202e:	2302      	movs	r3, #2
 8002030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002032:	2300      	movs	r3, #0
 8002034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002036:	2300      	movs	r3, #0
 8002038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800203a:	2301      	movs	r3, #1
 800203c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800203e:	f107 0314 	add.w	r3, r7, #20
 8002042:	4619      	mov	r1, r3
 8002044:	4818      	ldr	r0, [pc, #96]	@ (80020a8 <HAL_TIM_MspPostInit+0xfc>)
 8002046:	f001 fbdd 	bl	8003804 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800204a:	e022      	b.n	8002092 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM3)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a16      	ldr	r2, [pc, #88]	@ (80020ac <HAL_TIM_MspPostInit+0x100>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d11d      	bne.n	8002092 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	4b11      	ldr	r3, [pc, #68]	@ (80020a0 <HAL_TIM_MspPostInit+0xf4>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205e:	4a10      	ldr	r2, [pc, #64]	@ (80020a0 <HAL_TIM_MspPostInit+0xf4>)
 8002060:	f043 0301 	orr.w	r3, r3, #1
 8002064:	6313      	str	r3, [r2, #48]	@ 0x30
 8002066:	4b0e      	ldr	r3, [pc, #56]	@ (80020a0 <HAL_TIM_MspPostInit+0xf4>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	60bb      	str	r3, [r7, #8]
 8002070:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002072:	2380      	movs	r3, #128	@ 0x80
 8002074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002076:	2302      	movs	r3, #2
 8002078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207a:	2300      	movs	r3, #0
 800207c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207e:	2300      	movs	r3, #0
 8002080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002082:	2302      	movs	r3, #2
 8002084:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002086:	f107 0314 	add.w	r3, r7, #20
 800208a:	4619      	mov	r1, r3
 800208c:	4806      	ldr	r0, [pc, #24]	@ (80020a8 <HAL_TIM_MspPostInit+0xfc>)
 800208e:	f001 fbb9 	bl	8003804 <HAL_GPIO_Init>
}
 8002092:	bf00      	nop
 8002094:	3728      	adds	r7, #40	@ 0x28
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40010000 	.word	0x40010000
 80020a0:	40023800 	.word	0x40023800
 80020a4:	40020400 	.word	0x40020400
 80020a8:	40020000 	.word	0x40020000
 80020ac:	40000400 	.word	0x40000400

080020b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08a      	sub	sp, #40	@ 0x28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b8:	f107 0314 	add.w	r3, r7, #20
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a4c      	ldr	r2, [pc, #304]	@ (8002200 <HAL_UART_MspInit+0x150>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	f040 8092 	bne.w	80021f8 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020d4:	2300      	movs	r3, #0
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	4b4a      	ldr	r3, [pc, #296]	@ (8002204 <HAL_UART_MspInit+0x154>)
 80020da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020dc:	4a49      	ldr	r2, [pc, #292]	@ (8002204 <HAL_UART_MspInit+0x154>)
 80020de:	f043 0310 	orr.w	r3, r3, #16
 80020e2:	6453      	str	r3, [r2, #68]	@ 0x44
 80020e4:	4b47      	ldr	r3, [pc, #284]	@ (8002204 <HAL_UART_MspInit+0x154>)
 80020e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e8:	f003 0310 	and.w	r3, r3, #16
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f0:	2300      	movs	r3, #0
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	4b43      	ldr	r3, [pc, #268]	@ (8002204 <HAL_UART_MspInit+0x154>)
 80020f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f8:	4a42      	ldr	r2, [pc, #264]	@ (8002204 <HAL_UART_MspInit+0x154>)
 80020fa:	f043 0301 	orr.w	r3, r3, #1
 80020fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002100:	4b40      	ldr	r3, [pc, #256]	@ (8002204 <HAL_UART_MspInit+0x154>)
 8002102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800210c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002112:	2302      	movs	r3, #2
 8002114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002116:	2300      	movs	r3, #0
 8002118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800211a:	2303      	movs	r3, #3
 800211c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800211e:	2307      	movs	r3, #7
 8002120:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002122:	f107 0314 	add.w	r3, r7, #20
 8002126:	4619      	mov	r1, r3
 8002128:	4837      	ldr	r0, [pc, #220]	@ (8002208 <HAL_UART_MspInit+0x158>)
 800212a:	f001 fb6b 	bl	8003804 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800212e:	4b37      	ldr	r3, [pc, #220]	@ (800220c <HAL_UART_MspInit+0x15c>)
 8002130:	4a37      	ldr	r2, [pc, #220]	@ (8002210 <HAL_UART_MspInit+0x160>)
 8002132:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002134:	4b35      	ldr	r3, [pc, #212]	@ (800220c <HAL_UART_MspInit+0x15c>)
 8002136:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800213a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800213c:	4b33      	ldr	r3, [pc, #204]	@ (800220c <HAL_UART_MspInit+0x15c>)
 800213e:	2200      	movs	r2, #0
 8002140:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002142:	4b32      	ldr	r3, [pc, #200]	@ (800220c <HAL_UART_MspInit+0x15c>)
 8002144:	2200      	movs	r2, #0
 8002146:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002148:	4b30      	ldr	r3, [pc, #192]	@ (800220c <HAL_UART_MspInit+0x15c>)
 800214a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800214e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002150:	4b2e      	ldr	r3, [pc, #184]	@ (800220c <HAL_UART_MspInit+0x15c>)
 8002152:	2200      	movs	r2, #0
 8002154:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002156:	4b2d      	ldr	r3, [pc, #180]	@ (800220c <HAL_UART_MspInit+0x15c>)
 8002158:	2200      	movs	r2, #0
 800215a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800215c:	4b2b      	ldr	r3, [pc, #172]	@ (800220c <HAL_UART_MspInit+0x15c>)
 800215e:	2200      	movs	r2, #0
 8002160:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002162:	4b2a      	ldr	r3, [pc, #168]	@ (800220c <HAL_UART_MspInit+0x15c>)
 8002164:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002168:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800216a:	4b28      	ldr	r3, [pc, #160]	@ (800220c <HAL_UART_MspInit+0x15c>)
 800216c:	2200      	movs	r2, #0
 800216e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002170:	4826      	ldr	r0, [pc, #152]	@ (800220c <HAL_UART_MspInit+0x15c>)
 8002172:	f000 ff45 	bl	8003000 <HAL_DMA_Init>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 800217c:	f7ff fdb0 	bl	8001ce0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a22      	ldr	r2, [pc, #136]	@ (800220c <HAL_UART_MspInit+0x15c>)
 8002184:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002186:	4a21      	ldr	r2, [pc, #132]	@ (800220c <HAL_UART_MspInit+0x15c>)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800218c:	4b21      	ldr	r3, [pc, #132]	@ (8002214 <HAL_UART_MspInit+0x164>)
 800218e:	4a22      	ldr	r2, [pc, #136]	@ (8002218 <HAL_UART_MspInit+0x168>)
 8002190:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002192:	4b20      	ldr	r3, [pc, #128]	@ (8002214 <HAL_UART_MspInit+0x164>)
 8002194:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002198:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800219a:	4b1e      	ldr	r3, [pc, #120]	@ (8002214 <HAL_UART_MspInit+0x164>)
 800219c:	2240      	movs	r2, #64	@ 0x40
 800219e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021a0:	4b1c      	ldr	r3, [pc, #112]	@ (8002214 <HAL_UART_MspInit+0x164>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002214 <HAL_UART_MspInit+0x164>)
 80021a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021ac:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021ae:	4b19      	ldr	r3, [pc, #100]	@ (8002214 <HAL_UART_MspInit+0x164>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021b4:	4b17      	ldr	r3, [pc, #92]	@ (8002214 <HAL_UART_MspInit+0x164>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80021ba:	4b16      	ldr	r3, [pc, #88]	@ (8002214 <HAL_UART_MspInit+0x164>)
 80021bc:	2200      	movs	r2, #0
 80021be:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80021c0:	4b14      	ldr	r3, [pc, #80]	@ (8002214 <HAL_UART_MspInit+0x164>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021c6:	4b13      	ldr	r3, [pc, #76]	@ (8002214 <HAL_UART_MspInit+0x164>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80021cc:	4811      	ldr	r0, [pc, #68]	@ (8002214 <HAL_UART_MspInit+0x164>)
 80021ce:	f000 ff17 	bl	8003000 <HAL_DMA_Init>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 80021d8:	f7ff fd82 	bl	8001ce0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a0d      	ldr	r2, [pc, #52]	@ (8002214 <HAL_UART_MspInit+0x164>)
 80021e0:	639a      	str	r2, [r3, #56]	@ 0x38
 80021e2:	4a0c      	ldr	r2, [pc, #48]	@ (8002214 <HAL_UART_MspInit+0x164>)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80021e8:	2200      	movs	r2, #0
 80021ea:	2100      	movs	r1, #0
 80021ec:	2025      	movs	r0, #37	@ 0x25
 80021ee:	f000 fed0 	bl	8002f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021f2:	2025      	movs	r0, #37	@ 0x25
 80021f4:	f000 fee9 	bl	8002fca <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80021f8:	bf00      	nop
 80021fa:	3728      	adds	r7, #40	@ 0x28
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40011000 	.word	0x40011000
 8002204:	40023800 	.word	0x40023800
 8002208:	40020000 	.word	0x40020000
 800220c:	2000044c 	.word	0x2000044c
 8002210:	40026440 	.word	0x40026440
 8002214:	200004ac 	.word	0x200004ac
 8002218:	400264b8 	.word	0x400264b8

0800221c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002220:	bf00      	nop
 8002222:	e7fd      	b.n	8002220 <NMI_Handler+0x4>

08002224 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002228:	bf00      	nop
 800222a:	e7fd      	b.n	8002228 <HardFault_Handler+0x4>

0800222c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002230:	bf00      	nop
 8002232:	e7fd      	b.n	8002230 <MemManage_Handler+0x4>

08002234 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002238:	bf00      	nop
 800223a:	e7fd      	b.n	8002238 <BusFault_Handler+0x4>

0800223c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002240:	bf00      	nop
 8002242:	e7fd      	b.n	8002240 <UsageFault_Handler+0x4>

08002244 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002264:	bf00      	nop
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002272:	f000 f98d 	bl	8002590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}

0800227a <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800227a:	b480      	push	{r7}
 800227c:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800227e:	bf00      	nop
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Counter_Pin);
 800228c:	2020      	movs	r0, #32
 800228e:	f001 fc6f 	bl	8003b70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
	...

08002298 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800229c:	4802      	ldr	r0, [pc, #8]	@ (80022a8 <TIM2_IRQHandler+0x10>)
 800229e:	f003 fbf4 	bl	8005a8a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20000374 	.word	0x20000374

080022ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022b0:	4802      	ldr	r0, [pc, #8]	@ (80022bc <USART1_IRQHandler+0x10>)
 80022b2:	f004 fd2b 	bl	8006d0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20000404 	.word	0x20000404

080022c0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80022c4:	4802      	ldr	r0, [pc, #8]	@ (80022d0 <DMA2_Stream2_IRQHandler+0x10>)
 80022c6:	f001 f833 	bl	8003330 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	2000044c 	.word	0x2000044c

080022d4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80022d8:	4802      	ldr	r0, [pc, #8]	@ (80022e4 <DMA2_Stream7_IRQHandler+0x10>)
 80022da:	f001 f829 	bl	8003330 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	200004ac 	.word	0x200004ac

080022e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  return 1;
 80022ec:	2301      	movs	r3, #1
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <_kill>:

int _kill(int pid, int sig)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002302:	f006 fb61 	bl	80089c8 <__errno>
 8002306:	4603      	mov	r3, r0
 8002308:	2216      	movs	r2, #22
 800230a:	601a      	str	r2, [r3, #0]
  return -1;
 800230c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002310:	4618      	mov	r0, r3
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <_exit>:

void _exit (int status)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002320:	f04f 31ff 	mov.w	r1, #4294967295
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f7ff ffe7 	bl	80022f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800232a:	bf00      	nop
 800232c:	e7fd      	b.n	800232a <_exit+0x12>

0800232e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b086      	sub	sp, #24
 8002332:	af00      	add	r7, sp, #0
 8002334:	60f8      	str	r0, [r7, #12]
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800233a:	2300      	movs	r3, #0
 800233c:	617b      	str	r3, [r7, #20]
 800233e:	e00a      	b.n	8002356 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002340:	f3af 8000 	nop.w
 8002344:	4601      	mov	r1, r0
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	1c5a      	adds	r2, r3, #1
 800234a:	60ba      	str	r2, [r7, #8]
 800234c:	b2ca      	uxtb	r2, r1
 800234e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	3301      	adds	r3, #1
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	429a      	cmp	r2, r3
 800235c:	dbf0      	blt.n	8002340 <_read+0x12>
  }

  return len;
 800235e:	687b      	ldr	r3, [r7, #4]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3718      	adds	r7, #24
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]
 8002378:	e009      	b.n	800238e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	1c5a      	adds	r2, r3, #1
 800237e:	60ba      	str	r2, [r7, #8]
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	3301      	adds	r3, #1
 800238c:	617b      	str	r3, [r7, #20]
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	429a      	cmp	r2, r3
 8002394:	dbf1      	blt.n	800237a <_write+0x12>
  }
  return len;
 8002396:	687b      	ldr	r3, [r7, #4]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <_close>:

int _close(int file)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023c8:	605a      	str	r2, [r3, #4]
  return 0;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <_isatty>:

int _isatty(int file)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023e0:	2301      	movs	r3, #1
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b085      	sub	sp, #20
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	60f8      	str	r0, [r7, #12]
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002410:	4a14      	ldr	r2, [pc, #80]	@ (8002464 <_sbrk+0x5c>)
 8002412:	4b15      	ldr	r3, [pc, #84]	@ (8002468 <_sbrk+0x60>)
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800241c:	4b13      	ldr	r3, [pc, #76]	@ (800246c <_sbrk+0x64>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d102      	bne.n	800242a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002424:	4b11      	ldr	r3, [pc, #68]	@ (800246c <_sbrk+0x64>)
 8002426:	4a12      	ldr	r2, [pc, #72]	@ (8002470 <_sbrk+0x68>)
 8002428:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800242a:	4b10      	ldr	r3, [pc, #64]	@ (800246c <_sbrk+0x64>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4413      	add	r3, r2
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	429a      	cmp	r2, r3
 8002436:	d207      	bcs.n	8002448 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002438:	f006 fac6 	bl	80089c8 <__errno>
 800243c:	4603      	mov	r3, r0
 800243e:	220c      	movs	r2, #12
 8002440:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002442:	f04f 33ff 	mov.w	r3, #4294967295
 8002446:	e009      	b.n	800245c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002448:	4b08      	ldr	r3, [pc, #32]	@ (800246c <_sbrk+0x64>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800244e:	4b07      	ldr	r3, [pc, #28]	@ (800246c <_sbrk+0x64>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4413      	add	r3, r2
 8002456:	4a05      	ldr	r2, [pc, #20]	@ (800246c <_sbrk+0x64>)
 8002458:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800245a:	68fb      	ldr	r3, [r7, #12]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	20010000 	.word	0x20010000
 8002468:	00000400 	.word	0x00000400
 800246c:	20000548 	.word	0x20000548
 8002470:	200006a0 	.word	0x200006a0

08002474 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002478:	4b06      	ldr	r3, [pc, #24]	@ (8002494 <SystemInit+0x20>)
 800247a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800247e:	4a05      	ldr	r2, [pc, #20]	@ (8002494 <SystemInit+0x20>)
 8002480:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002484:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	e000ed00 	.word	0xe000ed00

08002498 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002498:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024d0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800249c:	f7ff ffea 	bl	8002474 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024a0:	480c      	ldr	r0, [pc, #48]	@ (80024d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024a2:	490d      	ldr	r1, [pc, #52]	@ (80024d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024a4:	4a0d      	ldr	r2, [pc, #52]	@ (80024dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024a8:	e002      	b.n	80024b0 <LoopCopyDataInit>

080024aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ae:	3304      	adds	r3, #4

080024b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024b4:	d3f9      	bcc.n	80024aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024b6:	4a0a      	ldr	r2, [pc, #40]	@ (80024e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024b8:	4c0a      	ldr	r4, [pc, #40]	@ (80024e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80024ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024bc:	e001      	b.n	80024c2 <LoopFillZerobss>

080024be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024c0:	3204      	adds	r2, #4

080024c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024c4:	d3fb      	bcc.n	80024be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024c6:	f006 fa85 	bl	80089d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024ca:	f7fe fd7d 	bl	8000fc8 <main>
  bx  lr    
 80024ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024d0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80024d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024d8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80024dc:	0800af60 	.word	0x0800af60
  ldr r2, =_sbss
 80024e0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80024e4:	2000069c 	.word	0x2000069c

080024e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024e8:	e7fe      	b.n	80024e8 <ADC_IRQHandler>
	...

080024ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024f0:	4b0e      	ldr	r3, [pc, #56]	@ (800252c <HAL_Init+0x40>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a0d      	ldr	r2, [pc, #52]	@ (800252c <HAL_Init+0x40>)
 80024f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024fc:	4b0b      	ldr	r3, [pc, #44]	@ (800252c <HAL_Init+0x40>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a0a      	ldr	r2, [pc, #40]	@ (800252c <HAL_Init+0x40>)
 8002502:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002506:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002508:	4b08      	ldr	r3, [pc, #32]	@ (800252c <HAL_Init+0x40>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a07      	ldr	r2, [pc, #28]	@ (800252c <HAL_Init+0x40>)
 800250e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002512:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002514:	2003      	movs	r0, #3
 8002516:	f000 fd31 	bl	8002f7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800251a:	200f      	movs	r0, #15
 800251c:	f000 f808 	bl	8002530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002520:	f7ff fbe4 	bl	8001cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40023c00 	.word	0x40023c00

08002530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002538:	4b12      	ldr	r3, [pc, #72]	@ (8002584 <HAL_InitTick+0x54>)
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	4b12      	ldr	r3, [pc, #72]	@ (8002588 <HAL_InitTick+0x58>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	4619      	mov	r1, r3
 8002542:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002546:	fbb3 f3f1 	udiv	r3, r3, r1
 800254a:	fbb2 f3f3 	udiv	r3, r2, r3
 800254e:	4618      	mov	r0, r3
 8002550:	f000 fd49 	bl	8002fe6 <HAL_SYSTICK_Config>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e00e      	b.n	800257c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b0f      	cmp	r3, #15
 8002562:	d80a      	bhi.n	800257a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002564:	2200      	movs	r2, #0
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	f04f 30ff 	mov.w	r0, #4294967295
 800256c:	f000 fd11 	bl	8002f92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002570:	4a06      	ldr	r2, [pc, #24]	@ (800258c <HAL_InitTick+0x5c>)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002576:	2300      	movs	r3, #0
 8002578:	e000      	b.n	800257c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
}
 800257c:	4618      	mov	r0, r3
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	20000000 	.word	0x20000000
 8002588:	20000008 	.word	0x20000008
 800258c:	20000004 	.word	0x20000004

08002590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002594:	4b06      	ldr	r3, [pc, #24]	@ (80025b0 <HAL_IncTick+0x20>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	461a      	mov	r2, r3
 800259a:	4b06      	ldr	r3, [pc, #24]	@ (80025b4 <HAL_IncTick+0x24>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4413      	add	r3, r2
 80025a0:	4a04      	ldr	r2, [pc, #16]	@ (80025b4 <HAL_IncTick+0x24>)
 80025a2:	6013      	str	r3, [r2, #0]
}
 80025a4:	bf00      	nop
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	20000008 	.word	0x20000008
 80025b4:	2000054c 	.word	0x2000054c

080025b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  return uwTick;
 80025bc:	4b03      	ldr	r3, [pc, #12]	@ (80025cc <HAL_GetTick+0x14>)
 80025be:	681b      	ldr	r3, [r3, #0]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	2000054c 	.word	0x2000054c

080025d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025d8:	f7ff ffee 	bl	80025b8 <HAL_GetTick>
 80025dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e8:	d005      	beq.n	80025f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002614 <HAL_Delay+0x44>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	461a      	mov	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4413      	add	r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025f6:	bf00      	nop
 80025f8:	f7ff ffde 	bl	80025b8 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	429a      	cmp	r2, r3
 8002606:	d8f7      	bhi.n	80025f8 <HAL_Delay+0x28>
  {
  }
}
 8002608:	bf00      	nop
 800260a:	bf00      	nop
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20000008 	.word	0x20000008

08002618 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002620:	2300      	movs	r3, #0
 8002622:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e033      	b.n	8002696 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002632:	2b00      	cmp	r3, #0
 8002634:	d109      	bne.n	800264a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f7ff fb86 	bl	8001d48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264e:	f003 0310 	and.w	r3, r3, #16
 8002652:	2b00      	cmp	r3, #0
 8002654:	d118      	bne.n	8002688 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800265e:	f023 0302 	bic.w	r3, r3, #2
 8002662:	f043 0202 	orr.w	r2, r3, #2
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 faba 	bl	8002be4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267a:	f023 0303 	bic.w	r3, r3, #3
 800267e:	f043 0201 	orr.w	r2, r3, #1
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	641a      	str	r2, [r3, #64]	@ 0x40
 8002686:	e001      	b.n	800268c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002694:	7bfb      	ldrb	r3, [r7, #15]
}
 8002696:	4618      	mov	r0, r3
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
	...

080026a0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d101      	bne.n	80026ba <HAL_ADC_Start+0x1a>
 80026b6:	2302      	movs	r3, #2
 80026b8:	e097      	b.n	80027ea <HAL_ADC_Start+0x14a>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d018      	beq.n	8002702 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f042 0201 	orr.w	r2, r2, #1
 80026de:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026e0:	4b45      	ldr	r3, [pc, #276]	@ (80027f8 <HAL_ADC_Start+0x158>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a45      	ldr	r2, [pc, #276]	@ (80027fc <HAL_ADC_Start+0x15c>)
 80026e6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ea:	0c9a      	lsrs	r2, r3, #18
 80026ec:	4613      	mov	r3, r2
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	4413      	add	r3, r2
 80026f2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80026f4:	e002      	b.n	80026fc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	3b01      	subs	r3, #1
 80026fa:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1f9      	bne.n	80026f6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b01      	cmp	r3, #1
 800270e:	d15f      	bne.n	80027d0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002714:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002718:	f023 0301 	bic.w	r3, r3, #1
 800271c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800272e:	2b00      	cmp	r3, #0
 8002730:	d007      	beq.n	8002742 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002736:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800273a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002746:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800274a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800274e:	d106      	bne.n	800275e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002754:	f023 0206 	bic.w	r2, r3, #6
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	645a      	str	r2, [r3, #68]	@ 0x44
 800275c:	e002      	b.n	8002764 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800276c:	4b24      	ldr	r3, [pc, #144]	@ (8002800 <HAL_ADC_Start+0x160>)
 800276e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002778:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f003 031f 	and.w	r3, r3, #31
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10f      	bne.n	80027a6 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d129      	bne.n	80027e8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689a      	ldr	r2, [r3, #8]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	e020      	b.n	80027e8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a16      	ldr	r2, [pc, #88]	@ (8002804 <HAL_ADC_Start+0x164>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d11b      	bne.n	80027e8 <HAL_ADC_Start+0x148>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d114      	bne.n	80027e8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80027cc:	609a      	str	r2, [r3, #8]
 80027ce:	e00b      	b.n	80027e8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d4:	f043 0210 	orr.w	r2, r3, #16
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e0:	f043 0201 	orr.w	r2, r3, #1
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	20000000 	.word	0x20000000
 80027fc:	431bde83 	.word	0x431bde83
 8002800:	40012300 	.word	0x40012300
 8002804:	40012000 	.word	0x40012000

08002808 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002816:	2b01      	cmp	r3, #1
 8002818:	d101      	bne.n	800281e <HAL_ADC_Stop+0x16>
 800281a:	2302      	movs	r3, #2
 800281c:	e021      	b.n	8002862 <HAL_ADC_Stop+0x5a>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0201 	bic.w	r2, r2, #1
 8002834:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b00      	cmp	r3, #0
 8002842:	d109      	bne.n	8002858 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002848:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800284c:	f023 0301 	bic.w	r3, r3, #1
 8002850:	f043 0201 	orr.w	r2, r3, #1
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b084      	sub	sp, #16
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
 8002876:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002878:	2300      	movs	r3, #0
 800287a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002886:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800288a:	d113      	bne.n	80028b4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002896:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800289a:	d10b      	bne.n	80028b4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a0:	f043 0220 	orr.w	r2, r3, #32
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e063      	b.n	800297c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80028b4:	f7ff fe80 	bl	80025b8 <HAL_GetTick>
 80028b8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80028ba:	e021      	b.n	8002900 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c2:	d01d      	beq.n	8002900 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d007      	beq.n	80028da <HAL_ADC_PollForConversion+0x6c>
 80028ca:	f7ff fe75 	bl	80025b8 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d212      	bcs.n	8002900 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d00b      	beq.n	8002900 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ec:	f043 0204 	orr.w	r2, r3, #4
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e03d      	b.n	800297c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b02      	cmp	r3, #2
 800290c:	d1d6      	bne.n	80028bc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f06f 0212 	mvn.w	r2, #18
 8002916:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d123      	bne.n	800297a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002936:	2b00      	cmp	r3, #0
 8002938:	d11f      	bne.n	800297a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002940:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002944:	2b00      	cmp	r3, #0
 8002946:	d006      	beq.n	8002956 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002952:	2b00      	cmp	r3, #0
 8002954:	d111      	bne.n	800297a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002966:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d105      	bne.n	800297a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002972:	f043 0201 	orr.w	r2, r3, #1
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002992:	4618      	mov	r0, r3
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
	...

080029a0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80029aa:	2300      	movs	r3, #0
 80029ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d101      	bne.n	80029bc <HAL_ADC_ConfigChannel+0x1c>
 80029b8:	2302      	movs	r3, #2
 80029ba:	e105      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x228>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b09      	cmp	r3, #9
 80029ca:	d925      	bls.n	8002a18 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68d9      	ldr	r1, [r3, #12]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	461a      	mov	r2, r3
 80029da:	4613      	mov	r3, r2
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	4413      	add	r3, r2
 80029e0:	3b1e      	subs	r3, #30
 80029e2:	2207      	movs	r2, #7
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	43da      	mvns	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	400a      	ands	r2, r1
 80029f0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68d9      	ldr	r1, [r3, #12]
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	4618      	mov	r0, r3
 8002a04:	4603      	mov	r3, r0
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	4403      	add	r3, r0
 8002a0a:	3b1e      	subs	r3, #30
 8002a0c:	409a      	lsls	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	60da      	str	r2, [r3, #12]
 8002a16:	e022      	b.n	8002a5e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6919      	ldr	r1, [r3, #16]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	461a      	mov	r2, r3
 8002a26:	4613      	mov	r3, r2
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	4413      	add	r3, r2
 8002a2c:	2207      	movs	r2, #7
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	43da      	mvns	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	400a      	ands	r2, r1
 8002a3a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6919      	ldr	r1, [r3, #16]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	689a      	ldr	r2, [r3, #8]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	4603      	mov	r3, r0
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	4403      	add	r3, r0
 8002a54:	409a      	lsls	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b06      	cmp	r3, #6
 8002a64:	d824      	bhi.n	8002ab0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	4613      	mov	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	3b05      	subs	r3, #5
 8002a78:	221f      	movs	r2, #31
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	43da      	mvns	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	400a      	ands	r2, r1
 8002a86:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	4618      	mov	r0, r3
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	3b05      	subs	r3, #5
 8002aa2:	fa00 f203 	lsl.w	r2, r0, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	635a      	str	r2, [r3, #52]	@ 0x34
 8002aae:	e04c      	b.n	8002b4a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b0c      	cmp	r3, #12
 8002ab6:	d824      	bhi.n	8002b02 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3b23      	subs	r3, #35	@ 0x23
 8002aca:	221f      	movs	r2, #31
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43da      	mvns	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	400a      	ands	r2, r1
 8002ad8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	4613      	mov	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4413      	add	r3, r2
 8002af2:	3b23      	subs	r3, #35	@ 0x23
 8002af4:	fa00 f203 	lsl.w	r2, r0, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b00:	e023      	b.n	8002b4a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	4413      	add	r3, r2
 8002b12:	3b41      	subs	r3, #65	@ 0x41
 8002b14:	221f      	movs	r2, #31
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43da      	mvns	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	400a      	ands	r2, r1
 8002b22:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	4618      	mov	r0, r3
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	4613      	mov	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	3b41      	subs	r3, #65	@ 0x41
 8002b3e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b4a:	4b22      	ldr	r3, [pc, #136]	@ (8002bd4 <HAL_ADC_ConfigChannel+0x234>)
 8002b4c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a21      	ldr	r2, [pc, #132]	@ (8002bd8 <HAL_ADC_ConfigChannel+0x238>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d109      	bne.n	8002b6c <HAL_ADC_ConfigChannel+0x1cc>
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2b12      	cmp	r3, #18
 8002b5e:	d105      	bne.n	8002b6c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a19      	ldr	r2, [pc, #100]	@ (8002bd8 <HAL_ADC_ConfigChannel+0x238>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d123      	bne.n	8002bbe <HAL_ADC_ConfigChannel+0x21e>
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2b10      	cmp	r3, #16
 8002b7c:	d003      	beq.n	8002b86 <HAL_ADC_ConfigChannel+0x1e6>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2b11      	cmp	r3, #17
 8002b84:	d11b      	bne.n	8002bbe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2b10      	cmp	r3, #16
 8002b98:	d111      	bne.n	8002bbe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b9a:	4b10      	ldr	r3, [pc, #64]	@ (8002bdc <HAL_ADC_ConfigChannel+0x23c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a10      	ldr	r2, [pc, #64]	@ (8002be0 <HAL_ADC_ConfigChannel+0x240>)
 8002ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba4:	0c9a      	lsrs	r2, r3, #18
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002bb0:	e002      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f9      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	40012300 	.word	0x40012300
 8002bd8:	40012000 	.word	0x40012000
 8002bdc:	20000000 	.word	0x20000000
 8002be0:	431bde83 	.word	0x431bde83

08002be4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bec:	4b79      	ldr	r3, [pc, #484]	@ (8002dd4 <ADC_Init+0x1f0>)
 8002bee:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	431a      	orrs	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6859      	ldr	r1, [r3, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	021a      	lsls	r2, r3, #8
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002c3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6859      	ldr	r1, [r3, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689a      	ldr	r2, [r3, #8]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6899      	ldr	r1, [r3, #8]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68da      	ldr	r2, [r3, #12]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c76:	4a58      	ldr	r2, [pc, #352]	@ (8002dd8 <ADC_Init+0x1f4>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d022      	beq.n	8002cc2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689a      	ldr	r2, [r3, #8]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c8a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6899      	ldr	r1, [r3, #8]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002cac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6899      	ldr	r1, [r3, #8]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	609a      	str	r2, [r3, #8]
 8002cc0:	e00f      	b.n	8002ce2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002cd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002ce0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0202 	bic.w	r2, r2, #2
 8002cf0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6899      	ldr	r1, [r3, #8]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	7e1b      	ldrb	r3, [r3, #24]
 8002cfc:	005a      	lsls	r2, r3, #1
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d01b      	beq.n	8002d48 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d1e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002d2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6859      	ldr	r1, [r3, #4]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	035a      	lsls	r2, r3, #13
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	605a      	str	r2, [r3, #4]
 8002d46:	e007      	b.n	8002d58 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d56:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002d66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	3b01      	subs	r3, #1
 8002d74:	051a      	lsls	r2, r3, #20
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002d8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6899      	ldr	r1, [r3, #8]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002d9a:	025a      	lsls	r2, r3, #9
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689a      	ldr	r2, [r3, #8]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002db2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6899      	ldr	r1, [r3, #8]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	029a      	lsls	r2, r3, #10
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	609a      	str	r2, [r3, #8]
}
 8002dc8:	bf00      	nop
 8002dca:	3714      	adds	r7, #20
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	40012300 	.word	0x40012300
 8002dd8:	0f000001 	.word	0x0f000001

08002ddc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dec:	4b0c      	ldr	r3, [pc, #48]	@ (8002e20 <__NVIC_SetPriorityGrouping+0x44>)
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002df2:	68ba      	ldr	r2, [r7, #8]
 8002df4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002df8:	4013      	ands	r3, r2
 8002dfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e0e:	4a04      	ldr	r2, [pc, #16]	@ (8002e20 <__NVIC_SetPriorityGrouping+0x44>)
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	60d3      	str	r3, [r2, #12]
}
 8002e14:	bf00      	nop
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	e000ed00 	.word	0xe000ed00

08002e24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e28:	4b04      	ldr	r3, [pc, #16]	@ (8002e3c <__NVIC_GetPriorityGrouping+0x18>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	0a1b      	lsrs	r3, r3, #8
 8002e2e:	f003 0307 	and.w	r3, r3, #7
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr
 8002e3c:	e000ed00 	.word	0xe000ed00

08002e40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	4603      	mov	r3, r0
 8002e48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	db0b      	blt.n	8002e6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e52:	79fb      	ldrb	r3, [r7, #7]
 8002e54:	f003 021f 	and.w	r2, r3, #31
 8002e58:	4907      	ldr	r1, [pc, #28]	@ (8002e78 <__NVIC_EnableIRQ+0x38>)
 8002e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5e:	095b      	lsrs	r3, r3, #5
 8002e60:	2001      	movs	r0, #1
 8002e62:	fa00 f202 	lsl.w	r2, r0, r2
 8002e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	e000e100 	.word	0xe000e100

08002e7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	4603      	mov	r3, r0
 8002e84:	6039      	str	r1, [r7, #0]
 8002e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	db0a      	blt.n	8002ea6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	490c      	ldr	r1, [pc, #48]	@ (8002ec8 <__NVIC_SetPriority+0x4c>)
 8002e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9a:	0112      	lsls	r2, r2, #4
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	440b      	add	r3, r1
 8002ea0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ea4:	e00a      	b.n	8002ebc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	4908      	ldr	r1, [pc, #32]	@ (8002ecc <__NVIC_SetPriority+0x50>)
 8002eac:	79fb      	ldrb	r3, [r7, #7]
 8002eae:	f003 030f 	and.w	r3, r3, #15
 8002eb2:	3b04      	subs	r3, #4
 8002eb4:	0112      	lsls	r2, r2, #4
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	440b      	add	r3, r1
 8002eba:	761a      	strb	r2, [r3, #24]
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	e000e100 	.word	0xe000e100
 8002ecc:	e000ed00 	.word	0xe000ed00

08002ed0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b089      	sub	sp, #36	@ 0x24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	f1c3 0307 	rsb	r3, r3, #7
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	bf28      	it	cs
 8002eee:	2304      	movcs	r3, #4
 8002ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	2b06      	cmp	r3, #6
 8002ef8:	d902      	bls.n	8002f00 <NVIC_EncodePriority+0x30>
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	3b03      	subs	r3, #3
 8002efe:	e000      	b.n	8002f02 <NVIC_EncodePriority+0x32>
 8002f00:	2300      	movs	r3, #0
 8002f02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f04:	f04f 32ff 	mov.w	r2, #4294967295
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	43da      	mvns	r2, r3
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	401a      	ands	r2, r3
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f18:	f04f 31ff 	mov.w	r1, #4294967295
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f22:	43d9      	mvns	r1, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f28:	4313      	orrs	r3, r2
         );
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3724      	adds	r7, #36	@ 0x24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
	...

08002f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3b01      	subs	r3, #1
 8002f44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f48:	d301      	bcc.n	8002f4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e00f      	b.n	8002f6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f78 <SysTick_Config+0x40>)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3b01      	subs	r3, #1
 8002f54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f56:	210f      	movs	r1, #15
 8002f58:	f04f 30ff 	mov.w	r0, #4294967295
 8002f5c:	f7ff ff8e 	bl	8002e7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f60:	4b05      	ldr	r3, [pc, #20]	@ (8002f78 <SysTick_Config+0x40>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f66:	4b04      	ldr	r3, [pc, #16]	@ (8002f78 <SysTick_Config+0x40>)
 8002f68:	2207      	movs	r2, #7
 8002f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	e000e010 	.word	0xe000e010

08002f7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f7ff ff29 	bl	8002ddc <__NVIC_SetPriorityGrouping>
}
 8002f8a:	bf00      	nop
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b086      	sub	sp, #24
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	4603      	mov	r3, r0
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	607a      	str	r2, [r7, #4]
 8002f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fa4:	f7ff ff3e 	bl	8002e24 <__NVIC_GetPriorityGrouping>
 8002fa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	68b9      	ldr	r1, [r7, #8]
 8002fae:	6978      	ldr	r0, [r7, #20]
 8002fb0:	f7ff ff8e 	bl	8002ed0 <NVIC_EncodePriority>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fba:	4611      	mov	r1, r2
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff ff5d 	bl	8002e7c <__NVIC_SetPriority>
}
 8002fc2:	bf00      	nop
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b082      	sub	sp, #8
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff ff31 	bl	8002e40 <__NVIC_EnableIRQ>
}
 8002fde:	bf00      	nop
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b082      	sub	sp, #8
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7ff ffa2 	bl	8002f38 <SysTick_Config>
 8002ff4:	4603      	mov	r3, r0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
	...

08003000 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003008:	2300      	movs	r3, #0
 800300a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800300c:	f7ff fad4 	bl	80025b8 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e099      	b.n	8003150 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2202      	movs	r2, #2
 8003020:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0201 	bic.w	r2, r2, #1
 800303a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800303c:	e00f      	b.n	800305e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800303e:	f7ff fabb 	bl	80025b8 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b05      	cmp	r3, #5
 800304a:	d908      	bls.n	800305e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2220      	movs	r2, #32
 8003050:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2203      	movs	r2, #3
 8003056:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e078      	b.n	8003150 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1e8      	bne.n	800303e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	4b38      	ldr	r3, [pc, #224]	@ (8003158 <HAL_DMA_Init+0x158>)
 8003078:	4013      	ands	r3, r2
 800307a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800308a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003096:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b4:	2b04      	cmp	r3, #4
 80030b6:	d107      	bne.n	80030c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c0:	4313      	orrs	r3, r2
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	f023 0307 	bic.w	r3, r3, #7
 80030de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d117      	bne.n	8003122 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00e      	beq.n	8003122 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 fb01 	bl	800370c <DMA_CheckFifoParam>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d008      	beq.n	8003122 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2240      	movs	r2, #64	@ 0x40
 8003114:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800311e:	2301      	movs	r3, #1
 8003120:	e016      	b.n	8003150 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 fab8 	bl	80036a0 <DMA_CalcBaseAndBitshift>
 8003130:	4603      	mov	r3, r0
 8003132:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003138:	223f      	movs	r2, #63	@ 0x3f
 800313a:	409a      	lsls	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3718      	adds	r7, #24
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	f010803f 	.word	0xf010803f

0800315c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
 8003168:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003172:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800317a:	2b01      	cmp	r3, #1
 800317c:	d101      	bne.n	8003182 <HAL_DMA_Start_IT+0x26>
 800317e:	2302      	movs	r3, #2
 8003180:	e040      	b.n	8003204 <HAL_DMA_Start_IT+0xa8>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b01      	cmp	r3, #1
 8003194:	d12f      	bne.n	80031f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2202      	movs	r2, #2
 800319a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	68b9      	ldr	r1, [r7, #8]
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 fa4a 	bl	8003644 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031b4:	223f      	movs	r2, #63	@ 0x3f
 80031b6:	409a      	lsls	r2, r3
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f042 0216 	orr.w	r2, r2, #22
 80031ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d007      	beq.n	80031e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0208 	orr.w	r2, r2, #8
 80031e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0201 	orr.w	r2, r2, #1
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	e005      	b.n	8003202 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031fe:	2302      	movs	r3, #2
 8003200:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003202:	7dfb      	ldrb	r3, [r7, #23]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003218:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800321a:	f7ff f9cd 	bl	80025b8 <HAL_GetTick>
 800321e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d008      	beq.n	800323e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2280      	movs	r2, #128	@ 0x80
 8003230:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e052      	b.n	80032e4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 0216 	bic.w	r2, r2, #22
 800324c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	695a      	ldr	r2, [r3, #20]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800325c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003262:	2b00      	cmp	r3, #0
 8003264:	d103      	bne.n	800326e <HAL_DMA_Abort+0x62>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800326a:	2b00      	cmp	r3, #0
 800326c:	d007      	beq.n	800327e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0208 	bic.w	r2, r2, #8
 800327c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0201 	bic.w	r2, r2, #1
 800328c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800328e:	e013      	b.n	80032b8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003290:	f7ff f992 	bl	80025b8 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b05      	cmp	r3, #5
 800329c:	d90c      	bls.n	80032b8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2220      	movs	r2, #32
 80032a2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2203      	movs	r2, #3
 80032a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e015      	b.n	80032e4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1e4      	bne.n	8003290 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ca:	223f      	movs	r2, #63	@ 0x3f
 80032cc:	409a      	lsls	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d004      	beq.n	800330a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2280      	movs	r2, #128	@ 0x80
 8003304:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e00c      	b.n	8003324 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2205      	movs	r2, #5
 800330e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 0201 	bic.w	r2, r2, #1
 8003320:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003338:	2300      	movs	r3, #0
 800333a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800333c:	4b8e      	ldr	r3, [pc, #568]	@ (8003578 <HAL_DMA_IRQHandler+0x248>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a8e      	ldr	r2, [pc, #568]	@ (800357c <HAL_DMA_IRQHandler+0x24c>)
 8003342:	fba2 2303 	umull	r2, r3, r2, r3
 8003346:	0a9b      	lsrs	r3, r3, #10
 8003348:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800334e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800335a:	2208      	movs	r2, #8
 800335c:	409a      	lsls	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	4013      	ands	r3, r2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d01a      	beq.n	800339c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b00      	cmp	r3, #0
 8003372:	d013      	beq.n	800339c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 0204 	bic.w	r2, r2, #4
 8003382:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003388:	2208      	movs	r2, #8
 800338a:	409a      	lsls	r2, r3
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003394:	f043 0201 	orr.w	r2, r3, #1
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a0:	2201      	movs	r2, #1
 80033a2:	409a      	lsls	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4013      	ands	r3, r2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d012      	beq.n	80033d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00b      	beq.n	80033d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033be:	2201      	movs	r2, #1
 80033c0:	409a      	lsls	r2, r3
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ca:	f043 0202 	orr.w	r2, r3, #2
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d6:	2204      	movs	r2, #4
 80033d8:	409a      	lsls	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	4013      	ands	r3, r2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d012      	beq.n	8003408 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00b      	beq.n	8003408 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f4:	2204      	movs	r2, #4
 80033f6:	409a      	lsls	r2, r3
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003400:	f043 0204 	orr.w	r2, r3, #4
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800340c:	2210      	movs	r2, #16
 800340e:	409a      	lsls	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4013      	ands	r3, r2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d043      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0308 	and.w	r3, r3, #8
 8003422:	2b00      	cmp	r3, #0
 8003424:	d03c      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800342a:	2210      	movs	r2, #16
 800342c:	409a      	lsls	r2, r3
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d018      	beq.n	8003472 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d108      	bne.n	8003460 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003452:	2b00      	cmp	r3, #0
 8003454:	d024      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	4798      	blx	r3
 800345e:	e01f      	b.n	80034a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003464:	2b00      	cmp	r3, #0
 8003466:	d01b      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	4798      	blx	r3
 8003470:	e016      	b.n	80034a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800347c:	2b00      	cmp	r3, #0
 800347e:	d107      	bne.n	8003490 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 0208 	bic.w	r2, r2, #8
 800348e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a4:	2220      	movs	r2, #32
 80034a6:	409a      	lsls	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 808f 	beq.w	80035d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0310 	and.w	r3, r3, #16
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 8087 	beq.w	80035d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034c6:	2220      	movs	r2, #32
 80034c8:	409a      	lsls	r2, r3
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b05      	cmp	r3, #5
 80034d8:	d136      	bne.n	8003548 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 0216 	bic.w	r2, r2, #22
 80034e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	695a      	ldr	r2, [r3, #20]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d103      	bne.n	800350a <HAL_DMA_IRQHandler+0x1da>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003506:	2b00      	cmp	r3, #0
 8003508:	d007      	beq.n	800351a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 0208 	bic.w	r2, r2, #8
 8003518:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800351e:	223f      	movs	r2, #63	@ 0x3f
 8003520:	409a      	lsls	r2, r3
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800353a:	2b00      	cmp	r3, #0
 800353c:	d07e      	beq.n	800363c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	4798      	blx	r3
        }
        return;
 8003546:	e079      	b.n	800363c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d01d      	beq.n	8003592 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10d      	bne.n	8003580 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003568:	2b00      	cmp	r3, #0
 800356a:	d031      	beq.n	80035d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	4798      	blx	r3
 8003574:	e02c      	b.n	80035d0 <HAL_DMA_IRQHandler+0x2a0>
 8003576:	bf00      	nop
 8003578:	20000000 	.word	0x20000000
 800357c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003584:	2b00      	cmp	r3, #0
 8003586:	d023      	beq.n	80035d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	4798      	blx	r3
 8003590:	e01e      	b.n	80035d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10f      	bne.n	80035c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 0210 	bic.w	r2, r2, #16
 80035ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d032      	beq.n	800363e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d022      	beq.n	800362a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2205      	movs	r2, #5
 80035e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 0201 	bic.w	r2, r2, #1
 80035fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	3301      	adds	r3, #1
 8003600:	60bb      	str	r3, [r7, #8]
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	429a      	cmp	r2, r3
 8003606:	d307      	bcc.n	8003618 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1f2      	bne.n	80035fc <HAL_DMA_IRQHandler+0x2cc>
 8003616:	e000      	b.n	800361a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003618:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800362e:	2b00      	cmp	r3, #0
 8003630:	d005      	beq.n	800363e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	4798      	blx	r3
 800363a:	e000      	b.n	800363e <HAL_DMA_IRQHandler+0x30e>
        return;
 800363c:	bf00      	nop
    }
  }
}
 800363e:	3718      	adds	r7, #24
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
 8003650:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003660:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	2b40      	cmp	r3, #64	@ 0x40
 8003670:	d108      	bne.n	8003684 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003682:	e007      	b.n	8003694 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	60da      	str	r2, [r3, #12]
}
 8003694:	bf00      	nop
 8003696:	3714      	adds	r7, #20
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	3b10      	subs	r3, #16
 80036b0:	4a14      	ldr	r2, [pc, #80]	@ (8003704 <DMA_CalcBaseAndBitshift+0x64>)
 80036b2:	fba2 2303 	umull	r2, r3, r2, r3
 80036b6:	091b      	lsrs	r3, r3, #4
 80036b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036ba:	4a13      	ldr	r2, [pc, #76]	@ (8003708 <DMA_CalcBaseAndBitshift+0x68>)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4413      	add	r3, r2
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2b03      	cmp	r3, #3
 80036cc:	d909      	bls.n	80036e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80036d6:	f023 0303 	bic.w	r3, r3, #3
 80036da:	1d1a      	adds	r2, r3, #4
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	659a      	str	r2, [r3, #88]	@ 0x58
 80036e0:	e007      	b.n	80036f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80036ea:	f023 0303 	bic.w	r3, r3, #3
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	aaaaaaab 	.word	0xaaaaaaab
 8003708:	0800abd8 	.word	0x0800abd8

0800370c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003714:	2300      	movs	r3, #0
 8003716:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800371c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d11f      	bne.n	8003766 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	2b03      	cmp	r3, #3
 800372a:	d856      	bhi.n	80037da <DMA_CheckFifoParam+0xce>
 800372c:	a201      	add	r2, pc, #4	@ (adr r2, 8003734 <DMA_CheckFifoParam+0x28>)
 800372e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003732:	bf00      	nop
 8003734:	08003745 	.word	0x08003745
 8003738:	08003757 	.word	0x08003757
 800373c:	08003745 	.word	0x08003745
 8003740:	080037db 	.word	0x080037db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003748:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d046      	beq.n	80037de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003754:	e043      	b.n	80037de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800375a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800375e:	d140      	bne.n	80037e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003764:	e03d      	b.n	80037e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800376e:	d121      	bne.n	80037b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2b03      	cmp	r3, #3
 8003774:	d837      	bhi.n	80037e6 <DMA_CheckFifoParam+0xda>
 8003776:	a201      	add	r2, pc, #4	@ (adr r2, 800377c <DMA_CheckFifoParam+0x70>)
 8003778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800377c:	0800378d 	.word	0x0800378d
 8003780:	08003793 	.word	0x08003793
 8003784:	0800378d 	.word	0x0800378d
 8003788:	080037a5 	.word	0x080037a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	73fb      	strb	r3, [r7, #15]
      break;
 8003790:	e030      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003796:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d025      	beq.n	80037ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037a2:	e022      	b.n	80037ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80037ac:	d11f      	bne.n	80037ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037b2:	e01c      	b.n	80037ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d903      	bls.n	80037c2 <DMA_CheckFifoParam+0xb6>
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	2b03      	cmp	r3, #3
 80037be:	d003      	beq.n	80037c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037c0:	e018      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	73fb      	strb	r3, [r7, #15]
      break;
 80037c6:	e015      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00e      	beq.n	80037f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	73fb      	strb	r3, [r7, #15]
      break;
 80037d8:	e00b      	b.n	80037f2 <DMA_CheckFifoParam+0xe6>
      break;
 80037da:	bf00      	nop
 80037dc:	e00a      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
      break;
 80037de:	bf00      	nop
 80037e0:	e008      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
      break;
 80037e2:	bf00      	nop
 80037e4:	e006      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
      break;
 80037e6:	bf00      	nop
 80037e8:	e004      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
      break;
 80037ea:	bf00      	nop
 80037ec:	e002      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80037ee:	bf00      	nop
 80037f0:	e000      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
      break;
 80037f2:	bf00      	nop
    }
  } 
  
  return status; 
 80037f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop

08003804 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003804:	b480      	push	{r7}
 8003806:	b089      	sub	sp, #36	@ 0x24
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800380e:	2300      	movs	r3, #0
 8003810:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003812:	2300      	movs	r3, #0
 8003814:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003816:	2300      	movs	r3, #0
 8003818:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800381a:	2300      	movs	r3, #0
 800381c:	61fb      	str	r3, [r7, #28]
 800381e:	e159      	b.n	8003ad4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003820:	2201      	movs	r2, #1
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	4013      	ands	r3, r2
 8003832:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	429a      	cmp	r2, r3
 800383a:	f040 8148 	bne.w	8003ace <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	2b01      	cmp	r3, #1
 8003848:	d005      	beq.n	8003856 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003852:	2b02      	cmp	r3, #2
 8003854:	d130      	bne.n	80038b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	2203      	movs	r2, #3
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	43db      	mvns	r3, r3
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	4013      	ands	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	68da      	ldr	r2, [r3, #12]
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	fa02 f303 	lsl.w	r3, r2, r3
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	4313      	orrs	r3, r2
 800387e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800388c:	2201      	movs	r2, #1
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	43db      	mvns	r3, r3
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	4013      	ands	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	091b      	lsrs	r3, r3, #4
 80038a2:	f003 0201 	and.w	r2, r3, #1
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f003 0303 	and.w	r3, r3, #3
 80038c0:	2b03      	cmp	r3, #3
 80038c2:	d017      	beq.n	80038f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	2203      	movs	r2, #3
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	43db      	mvns	r3, r3
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	4013      	ands	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	689a      	ldr	r2, [r3, #8]
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f003 0303 	and.w	r3, r3, #3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d123      	bne.n	8003948 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	08da      	lsrs	r2, r3, #3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3208      	adds	r2, #8
 8003908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800390c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	220f      	movs	r2, #15
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	43db      	mvns	r3, r3
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	4013      	ands	r3, r2
 8003922:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	691a      	ldr	r2, [r3, #16]
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	fa02 f303 	lsl.w	r3, r2, r3
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	4313      	orrs	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	08da      	lsrs	r2, r3, #3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	3208      	adds	r2, #8
 8003942:	69b9      	ldr	r1, [r7, #24]
 8003944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	2203      	movs	r2, #3
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	43db      	mvns	r3, r3
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	4013      	ands	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f003 0203 	and.w	r2, r3, #3
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	4313      	orrs	r3, r2
 8003974:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 80a2 	beq.w	8003ace <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800398a:	2300      	movs	r3, #0
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	4b57      	ldr	r3, [pc, #348]	@ (8003aec <HAL_GPIO_Init+0x2e8>)
 8003990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003992:	4a56      	ldr	r2, [pc, #344]	@ (8003aec <HAL_GPIO_Init+0x2e8>)
 8003994:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003998:	6453      	str	r3, [r2, #68]	@ 0x44
 800399a:	4b54      	ldr	r3, [pc, #336]	@ (8003aec <HAL_GPIO_Init+0x2e8>)
 800399c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800399e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039a6:	4a52      	ldr	r2, [pc, #328]	@ (8003af0 <HAL_GPIO_Init+0x2ec>)
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	089b      	lsrs	r3, r3, #2
 80039ac:	3302      	adds	r3, #2
 80039ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	f003 0303 	and.w	r3, r3, #3
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	220f      	movs	r2, #15
 80039be:	fa02 f303 	lsl.w	r3, r2, r3
 80039c2:	43db      	mvns	r3, r3
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	4013      	ands	r3, r2
 80039c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a49      	ldr	r2, [pc, #292]	@ (8003af4 <HAL_GPIO_Init+0x2f0>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d019      	beq.n	8003a06 <HAL_GPIO_Init+0x202>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a48      	ldr	r2, [pc, #288]	@ (8003af8 <HAL_GPIO_Init+0x2f4>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d013      	beq.n	8003a02 <HAL_GPIO_Init+0x1fe>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a47      	ldr	r2, [pc, #284]	@ (8003afc <HAL_GPIO_Init+0x2f8>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d00d      	beq.n	80039fe <HAL_GPIO_Init+0x1fa>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a46      	ldr	r2, [pc, #280]	@ (8003b00 <HAL_GPIO_Init+0x2fc>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d007      	beq.n	80039fa <HAL_GPIO_Init+0x1f6>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a45      	ldr	r2, [pc, #276]	@ (8003b04 <HAL_GPIO_Init+0x300>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d101      	bne.n	80039f6 <HAL_GPIO_Init+0x1f2>
 80039f2:	2304      	movs	r3, #4
 80039f4:	e008      	b.n	8003a08 <HAL_GPIO_Init+0x204>
 80039f6:	2307      	movs	r3, #7
 80039f8:	e006      	b.n	8003a08 <HAL_GPIO_Init+0x204>
 80039fa:	2303      	movs	r3, #3
 80039fc:	e004      	b.n	8003a08 <HAL_GPIO_Init+0x204>
 80039fe:	2302      	movs	r3, #2
 8003a00:	e002      	b.n	8003a08 <HAL_GPIO_Init+0x204>
 8003a02:	2301      	movs	r3, #1
 8003a04:	e000      	b.n	8003a08 <HAL_GPIO_Init+0x204>
 8003a06:	2300      	movs	r3, #0
 8003a08:	69fa      	ldr	r2, [r7, #28]
 8003a0a:	f002 0203 	and.w	r2, r2, #3
 8003a0e:	0092      	lsls	r2, r2, #2
 8003a10:	4093      	lsls	r3, r2
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a18:	4935      	ldr	r1, [pc, #212]	@ (8003af0 <HAL_GPIO_Init+0x2ec>)
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	089b      	lsrs	r3, r3, #2
 8003a1e:	3302      	adds	r3, #2
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a26:	4b38      	ldr	r3, [pc, #224]	@ (8003b08 <HAL_GPIO_Init+0x304>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	43db      	mvns	r3, r3
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	4013      	ands	r3, r2
 8003a34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a42:	69ba      	ldr	r2, [r7, #24]
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a4a:	4a2f      	ldr	r2, [pc, #188]	@ (8003b08 <HAL_GPIO_Init+0x304>)
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a50:	4b2d      	ldr	r3, [pc, #180]	@ (8003b08 <HAL_GPIO_Init+0x304>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d003      	beq.n	8003a74 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a74:	4a24      	ldr	r2, [pc, #144]	@ (8003b08 <HAL_GPIO_Init+0x304>)
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a7a:	4b23      	ldr	r3, [pc, #140]	@ (8003b08 <HAL_GPIO_Init+0x304>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	43db      	mvns	r3, r3
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	4013      	ands	r3, r2
 8003a88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a9e:	4a1a      	ldr	r2, [pc, #104]	@ (8003b08 <HAL_GPIO_Init+0x304>)
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003aa4:	4b18      	ldr	r3, [pc, #96]	@ (8003b08 <HAL_GPIO_Init+0x304>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	43db      	mvns	r3, r3
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ac8:	4a0f      	ldr	r2, [pc, #60]	@ (8003b08 <HAL_GPIO_Init+0x304>)
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	61fb      	str	r3, [r7, #28]
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	2b0f      	cmp	r3, #15
 8003ad8:	f67f aea2 	bls.w	8003820 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003adc:	bf00      	nop
 8003ade:	bf00      	nop
 8003ae0:	3724      	adds	r7, #36	@ 0x24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	40023800 	.word	0x40023800
 8003af0:	40013800 	.word	0x40013800
 8003af4:	40020000 	.word	0x40020000
 8003af8:	40020400 	.word	0x40020400
 8003afc:	40020800 	.word	0x40020800
 8003b00:	40020c00 	.word	0x40020c00
 8003b04:	40021000 	.word	0x40021000
 8003b08:	40013c00 	.word	0x40013c00

08003b0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	460b      	mov	r3, r1
 8003b16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	887b      	ldrh	r3, [r7, #2]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d002      	beq.n	8003b2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b24:	2301      	movs	r3, #1
 8003b26:	73fb      	strb	r3, [r7, #15]
 8003b28:	e001      	b.n	8003b2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3714      	adds	r7, #20
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	460b      	mov	r3, r1
 8003b46:	807b      	strh	r3, [r7, #2]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b4c:	787b      	ldrb	r3, [r7, #1]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b52:	887a      	ldrh	r2, [r7, #2]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b58:	e003      	b.n	8003b62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b5a:	887b      	ldrh	r3, [r7, #2]
 8003b5c:	041a      	lsls	r2, r3, #16
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	619a      	str	r2, [r3, #24]
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
	...

08003b70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	4603      	mov	r3, r0
 8003b78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003b7a:	4b08      	ldr	r3, [pc, #32]	@ (8003b9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b7c:	695a      	ldr	r2, [r3, #20]
 8003b7e:	88fb      	ldrh	r3, [r7, #6]
 8003b80:	4013      	ands	r3, r2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d006      	beq.n	8003b94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b86:	4a05      	ldr	r2, [pc, #20]	@ (8003b9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b88:	88fb      	ldrh	r3, [r7, #6]
 8003b8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b8c:	88fb      	ldrh	r3, [r7, #6]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 f806 	bl	8003ba0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b94:	bf00      	nop
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40013c00 	.word	0x40013c00

08003ba0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
	...

08003bb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e12b      	b.n	8003e22 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d106      	bne.n	8003be4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7fe f8f6 	bl	8001dd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2224      	movs	r2, #36	@ 0x24
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0201 	bic.w	r2, r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c1c:	f001 f9c8 	bl	8004fb0 <HAL_RCC_GetPCLK1Freq>
 8003c20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	4a81      	ldr	r2, [pc, #516]	@ (8003e2c <HAL_I2C_Init+0x274>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d807      	bhi.n	8003c3c <HAL_I2C_Init+0x84>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4a80      	ldr	r2, [pc, #512]	@ (8003e30 <HAL_I2C_Init+0x278>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	bf94      	ite	ls
 8003c34:	2301      	movls	r3, #1
 8003c36:	2300      	movhi	r3, #0
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	e006      	b.n	8003c4a <HAL_I2C_Init+0x92>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4a7d      	ldr	r2, [pc, #500]	@ (8003e34 <HAL_I2C_Init+0x27c>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	bf94      	ite	ls
 8003c44:	2301      	movls	r3, #1
 8003c46:	2300      	movhi	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e0e7      	b.n	8003e22 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	4a78      	ldr	r2, [pc, #480]	@ (8003e38 <HAL_I2C_Init+0x280>)
 8003c56:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5a:	0c9b      	lsrs	r3, r3, #18
 8003c5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	4a6a      	ldr	r2, [pc, #424]	@ (8003e2c <HAL_I2C_Init+0x274>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d802      	bhi.n	8003c8c <HAL_I2C_Init+0xd4>
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	e009      	b.n	8003ca0 <HAL_I2C_Init+0xe8>
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003c92:	fb02 f303 	mul.w	r3, r2, r3
 8003c96:	4a69      	ldr	r2, [pc, #420]	@ (8003e3c <HAL_I2C_Init+0x284>)
 8003c98:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9c:	099b      	lsrs	r3, r3, #6
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	6812      	ldr	r2, [r2, #0]
 8003ca4:	430b      	orrs	r3, r1
 8003ca6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003cb2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	495c      	ldr	r1, [pc, #368]	@ (8003e2c <HAL_I2C_Init+0x274>)
 8003cbc:	428b      	cmp	r3, r1
 8003cbe:	d819      	bhi.n	8003cf4 <HAL_I2C_Init+0x13c>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	1e59      	subs	r1, r3, #1
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cce:	1c59      	adds	r1, r3, #1
 8003cd0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003cd4:	400b      	ands	r3, r1
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00a      	beq.n	8003cf0 <HAL_I2C_Init+0x138>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	1e59      	subs	r1, r3, #1
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ce8:	3301      	adds	r3, #1
 8003cea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cee:	e051      	b.n	8003d94 <HAL_I2C_Init+0x1dc>
 8003cf0:	2304      	movs	r3, #4
 8003cf2:	e04f      	b.n	8003d94 <HAL_I2C_Init+0x1dc>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d111      	bne.n	8003d20 <HAL_I2C_Init+0x168>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	1e58      	subs	r0, r3, #1
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6859      	ldr	r1, [r3, #4]
 8003d04:	460b      	mov	r3, r1
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	440b      	add	r3, r1
 8003d0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d0e:	3301      	adds	r3, #1
 8003d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	bf0c      	ite	eq
 8003d18:	2301      	moveq	r3, #1
 8003d1a:	2300      	movne	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	e012      	b.n	8003d46 <HAL_I2C_Init+0x18e>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	1e58      	subs	r0, r3, #1
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6859      	ldr	r1, [r3, #4]
 8003d28:	460b      	mov	r3, r1
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	440b      	add	r3, r1
 8003d2e:	0099      	lsls	r1, r3, #2
 8003d30:	440b      	add	r3, r1
 8003d32:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d36:	3301      	adds	r3, #1
 8003d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	bf0c      	ite	eq
 8003d40:	2301      	moveq	r3, #1
 8003d42:	2300      	movne	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <HAL_I2C_Init+0x196>
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e022      	b.n	8003d94 <HAL_I2C_Init+0x1dc>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10e      	bne.n	8003d74 <HAL_I2C_Init+0x1bc>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	1e58      	subs	r0, r3, #1
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6859      	ldr	r1, [r3, #4]
 8003d5e:	460b      	mov	r3, r1
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	440b      	add	r3, r1
 8003d64:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d68:	3301      	adds	r3, #1
 8003d6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d72:	e00f      	b.n	8003d94 <HAL_I2C_Init+0x1dc>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	1e58      	subs	r0, r3, #1
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6859      	ldr	r1, [r3, #4]
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	440b      	add	r3, r1
 8003d82:	0099      	lsls	r1, r3, #2
 8003d84:	440b      	add	r3, r1
 8003d86:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d90:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	6809      	ldr	r1, [r1, #0]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	69da      	ldr	r2, [r3, #28]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	431a      	orrs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003dc2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	6911      	ldr	r1, [r2, #16]
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	68d2      	ldr	r2, [r2, #12]
 8003dce:	4311      	orrs	r1, r2
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6812      	ldr	r2, [r2, #0]
 8003dd4:	430b      	orrs	r3, r1
 8003dd6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	695a      	ldr	r2, [r3, #20]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	431a      	orrs	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	430a      	orrs	r2, r1
 8003df2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f042 0201 	orr.w	r2, r2, #1
 8003e02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	000186a0 	.word	0x000186a0
 8003e30:	001e847f 	.word	0x001e847f
 8003e34:	003d08ff 	.word	0x003d08ff
 8003e38:	431bde83 	.word	0x431bde83
 8003e3c:	10624dd3 	.word	0x10624dd3

08003e40 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b088      	sub	sp, #32
 8003e44:	af02      	add	r7, sp, #8
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	607a      	str	r2, [r7, #4]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	817b      	strh	r3, [r7, #10]
 8003e50:	4613      	mov	r3, r2
 8003e52:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e54:	f7fe fbb0 	bl	80025b8 <HAL_GetTick>
 8003e58:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b20      	cmp	r3, #32
 8003e64:	f040 80e0 	bne.w	8004028 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	9300      	str	r3, [sp, #0]
 8003e6c:	2319      	movs	r3, #25
 8003e6e:	2201      	movs	r2, #1
 8003e70:	4970      	ldr	r1, [pc, #448]	@ (8004034 <HAL_I2C_Master_Transmit+0x1f4>)
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f000 fa92 	bl	800439c <I2C_WaitOnFlagUntilTimeout>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e7e:	2302      	movs	r3, #2
 8003e80:	e0d3      	b.n	800402a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d101      	bne.n	8003e90 <HAL_I2C_Master_Transmit+0x50>
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	e0cc      	b.n	800402a <HAL_I2C_Master_Transmit+0x1ea>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d007      	beq.n	8003eb6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f042 0201 	orr.w	r2, r2, #1
 8003eb4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ec4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2221      	movs	r2, #33	@ 0x21
 8003eca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2210      	movs	r2, #16
 8003ed2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	893a      	ldrh	r2, [r7, #8]
 8003ee6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	4a50      	ldr	r2, [pc, #320]	@ (8004038 <HAL_I2C_Master_Transmit+0x1f8>)
 8003ef6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ef8:	8979      	ldrh	r1, [r7, #10]
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	6a3a      	ldr	r2, [r7, #32]
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f000 f9ca 	bl	8004298 <I2C_MasterRequestWrite>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e08d      	b.n	800402a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f0e:	2300      	movs	r3, #0
 8003f10:	613b      	str	r3, [r7, #16]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	613b      	str	r3, [r7, #16]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	613b      	str	r3, [r7, #16]
 8003f22:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003f24:	e066      	b.n	8003ff4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	6a39      	ldr	r1, [r7, #32]
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f000 fb50 	bl	80045d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00d      	beq.n	8003f52 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	d107      	bne.n	8003f4e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e06b      	b.n	800402a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f56:	781a      	ldrb	r2, [r3, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f62:	1c5a      	adds	r2, r3, #1
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	f003 0304 	and.w	r3, r3, #4
 8003f8c:	2b04      	cmp	r3, #4
 8003f8e:	d11b      	bne.n	8003fc8 <HAL_I2C_Master_Transmit+0x188>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d017      	beq.n	8003fc8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9c:	781a      	ldrb	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa8:	1c5a      	adds	r2, r3, #1
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	6a39      	ldr	r1, [r7, #32]
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 fb47 	bl	8004660 <I2C_WaitOnBTFFlagUntilTimeout>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00d      	beq.n	8003ff4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fdc:	2b04      	cmp	r3, #4
 8003fde:	d107      	bne.n	8003ff0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e01a      	b.n	800402a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d194      	bne.n	8003f26 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800400a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2220      	movs	r2, #32
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004024:	2300      	movs	r3, #0
 8004026:	e000      	b.n	800402a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004028:	2302      	movs	r3, #2
  }
}
 800402a:	4618      	mov	r0, r3
 800402c:	3718      	adds	r7, #24
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	00100002 	.word	0x00100002
 8004038:	ffff0000 	.word	0xffff0000

0800403c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b08a      	sub	sp, #40	@ 0x28
 8004040:	af02      	add	r7, sp, #8
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	607a      	str	r2, [r7, #4]
 8004046:	603b      	str	r3, [r7, #0]
 8004048:	460b      	mov	r3, r1
 800404a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800404c:	f7fe fab4 	bl	80025b8 <HAL_GetTick>
 8004050:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004052:	2300      	movs	r3, #0
 8004054:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b20      	cmp	r3, #32
 8004060:	f040 8111 	bne.w	8004286 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	2319      	movs	r3, #25
 800406a:	2201      	movs	r2, #1
 800406c:	4988      	ldr	r1, [pc, #544]	@ (8004290 <HAL_I2C_IsDeviceReady+0x254>)
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f000 f994 	bl	800439c <I2C_WaitOnFlagUntilTimeout>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800407a:	2302      	movs	r3, #2
 800407c:	e104      	b.n	8004288 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004084:	2b01      	cmp	r3, #1
 8004086:	d101      	bne.n	800408c <HAL_I2C_IsDeviceReady+0x50>
 8004088:	2302      	movs	r3, #2
 800408a:	e0fd      	b.n	8004288 <HAL_I2C_IsDeviceReady+0x24c>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d007      	beq.n	80040b2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f042 0201 	orr.w	r2, r2, #1
 80040b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2224      	movs	r2, #36	@ 0x24
 80040c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4a70      	ldr	r2, [pc, #448]	@ (8004294 <HAL_I2C_IsDeviceReady+0x258>)
 80040d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040e4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f000 f952 	bl	800439c <I2C_WaitOnFlagUntilTimeout>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00d      	beq.n	800411a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004108:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800410c:	d103      	bne.n	8004116 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004114:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e0b6      	b.n	8004288 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800411a:	897b      	ldrh	r3, [r7, #10]
 800411c:	b2db      	uxtb	r3, r3
 800411e:	461a      	mov	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004128:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800412a:	f7fe fa45 	bl	80025b8 <HAL_GetTick>
 800412e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b02      	cmp	r3, #2
 800413c:	bf0c      	ite	eq
 800413e:	2301      	moveq	r3, #1
 8004140:	2300      	movne	r3, #0
 8004142:	b2db      	uxtb	r3, r3
 8004144:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004150:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004154:	bf0c      	ite	eq
 8004156:	2301      	moveq	r3, #1
 8004158:	2300      	movne	r3, #0
 800415a:	b2db      	uxtb	r3, r3
 800415c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800415e:	e025      	b.n	80041ac <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004160:	f7fe fa2a 	bl	80025b8 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	429a      	cmp	r2, r3
 800416e:	d302      	bcc.n	8004176 <HAL_I2C_IsDeviceReady+0x13a>
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d103      	bne.n	800417e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	22a0      	movs	r2, #160	@ 0xa0
 800417a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b02      	cmp	r3, #2
 800418a:	bf0c      	ite	eq
 800418c:	2301      	moveq	r3, #1
 800418e:	2300      	movne	r3, #0
 8004190:	b2db      	uxtb	r3, r3
 8004192:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800419e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041a2:	bf0c      	ite	eq
 80041a4:	2301      	moveq	r3, #1
 80041a6:	2300      	movne	r3, #0
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2ba0      	cmp	r3, #160	@ 0xa0
 80041b6:	d005      	beq.n	80041c4 <HAL_I2C_IsDeviceReady+0x188>
 80041b8:	7dfb      	ldrb	r3, [r7, #23]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d102      	bne.n	80041c4 <HAL_I2C_IsDeviceReady+0x188>
 80041be:	7dbb      	ldrb	r3, [r7, #22]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d0cd      	beq.n	8004160 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2220      	movs	r2, #32
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d129      	bne.n	800422e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041e8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ea:	2300      	movs	r3, #0
 80041ec:	613b      	str	r3, [r7, #16]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	613b      	str	r3, [r7, #16]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	613b      	str	r3, [r7, #16]
 80041fe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	9300      	str	r3, [sp, #0]
 8004204:	2319      	movs	r3, #25
 8004206:	2201      	movs	r2, #1
 8004208:	4921      	ldr	r1, [pc, #132]	@ (8004290 <HAL_I2C_IsDeviceReady+0x254>)
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f000 f8c6 	bl	800439c <I2C_WaitOnFlagUntilTimeout>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e036      	b.n	8004288 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2220      	movs	r2, #32
 800421e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800422a:	2300      	movs	r3, #0
 800422c:	e02c      	b.n	8004288 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800423c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004246:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	2319      	movs	r3, #25
 800424e:	2201      	movs	r2, #1
 8004250:	490f      	ldr	r1, [pc, #60]	@ (8004290 <HAL_I2C_IsDeviceReady+0x254>)
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f000 f8a2 	bl	800439c <I2C_WaitOnFlagUntilTimeout>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e012      	b.n	8004288 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	3301      	adds	r3, #1
 8004266:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	429a      	cmp	r2, r3
 800426e:	f4ff af32 	bcc.w	80040d6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2220      	movs	r2, #32
 8004276:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e000      	b.n	8004288 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004286:	2302      	movs	r3, #2
  }
}
 8004288:	4618      	mov	r0, r3
 800428a:	3720      	adds	r7, #32
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	00100002 	.word	0x00100002
 8004294:	ffff0000 	.word	0xffff0000

08004298 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b088      	sub	sp, #32
 800429c:	af02      	add	r7, sp, #8
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	607a      	str	r2, [r7, #4]
 80042a2:	603b      	str	r3, [r7, #0]
 80042a4:	460b      	mov	r3, r1
 80042a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	d006      	beq.n	80042c2 <I2C_MasterRequestWrite+0x2a>
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d003      	beq.n	80042c2 <I2C_MasterRequestWrite+0x2a>
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80042c0:	d108      	bne.n	80042d4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	e00b      	b.n	80042ec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d8:	2b12      	cmp	r3, #18
 80042da:	d107      	bne.n	80042ec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f000 f84f 	bl	800439c <I2C_WaitOnFlagUntilTimeout>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00d      	beq.n	8004320 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800430e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004312:	d103      	bne.n	800431c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800431a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e035      	b.n	800438c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004328:	d108      	bne.n	800433c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800432a:	897b      	ldrh	r3, [r7, #10]
 800432c:	b2db      	uxtb	r3, r3
 800432e:	461a      	mov	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004338:	611a      	str	r2, [r3, #16]
 800433a:	e01b      	b.n	8004374 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800433c:	897b      	ldrh	r3, [r7, #10]
 800433e:	11db      	asrs	r3, r3, #7
 8004340:	b2db      	uxtb	r3, r3
 8004342:	f003 0306 	and.w	r3, r3, #6
 8004346:	b2db      	uxtb	r3, r3
 8004348:	f063 030f 	orn	r3, r3, #15
 800434c:	b2da      	uxtb	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	490e      	ldr	r1, [pc, #56]	@ (8004394 <I2C_MasterRequestWrite+0xfc>)
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f000 f898 	bl	8004490 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e010      	b.n	800438c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800436a:	897b      	ldrh	r3, [r7, #10]
 800436c:	b2da      	uxtb	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	4907      	ldr	r1, [pc, #28]	@ (8004398 <I2C_MasterRequestWrite+0x100>)
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 f888 	bl	8004490 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e000      	b.n	800438c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3718      	adds	r7, #24
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	00010008 	.word	0x00010008
 8004398:	00010002 	.word	0x00010002

0800439c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	603b      	str	r3, [r7, #0]
 80043a8:	4613      	mov	r3, r2
 80043aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043ac:	e048      	b.n	8004440 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b4:	d044      	beq.n	8004440 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b6:	f7fe f8ff 	bl	80025b8 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d302      	bcc.n	80043cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d139      	bne.n	8004440 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	0c1b      	lsrs	r3, r3, #16
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d10d      	bne.n	80043f2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	43da      	mvns	r2, r3
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	4013      	ands	r3, r2
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	bf0c      	ite	eq
 80043e8:	2301      	moveq	r3, #1
 80043ea:	2300      	movne	r3, #0
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	461a      	mov	r2, r3
 80043f0:	e00c      	b.n	800440c <I2C_WaitOnFlagUntilTimeout+0x70>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	43da      	mvns	r2, r3
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	4013      	ands	r3, r2
 80043fe:	b29b      	uxth	r3, r3
 8004400:	2b00      	cmp	r3, #0
 8004402:	bf0c      	ite	eq
 8004404:	2301      	moveq	r3, #1
 8004406:	2300      	movne	r3, #0
 8004408:	b2db      	uxtb	r3, r3
 800440a:	461a      	mov	r2, r3
 800440c:	79fb      	ldrb	r3, [r7, #7]
 800440e:	429a      	cmp	r2, r3
 8004410:	d116      	bne.n	8004440 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2220      	movs	r2, #32
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442c:	f043 0220 	orr.w	r2, r3, #32
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e023      	b.n	8004488 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	0c1b      	lsrs	r3, r3, #16
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b01      	cmp	r3, #1
 8004448:	d10d      	bne.n	8004466 <I2C_WaitOnFlagUntilTimeout+0xca>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	43da      	mvns	r2, r3
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	4013      	ands	r3, r2
 8004456:	b29b      	uxth	r3, r3
 8004458:	2b00      	cmp	r3, #0
 800445a:	bf0c      	ite	eq
 800445c:	2301      	moveq	r3, #1
 800445e:	2300      	movne	r3, #0
 8004460:	b2db      	uxtb	r3, r3
 8004462:	461a      	mov	r2, r3
 8004464:	e00c      	b.n	8004480 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	43da      	mvns	r2, r3
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	4013      	ands	r3, r2
 8004472:	b29b      	uxth	r3, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	bf0c      	ite	eq
 8004478:	2301      	moveq	r3, #1
 800447a:	2300      	movne	r3, #0
 800447c:	b2db      	uxtb	r3, r3
 800447e:	461a      	mov	r2, r3
 8004480:	79fb      	ldrb	r3, [r7, #7]
 8004482:	429a      	cmp	r2, r3
 8004484:	d093      	beq.n	80043ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
 800449c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800449e:	e071      	b.n	8004584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044ae:	d123      	bne.n	80044f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044be:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80044c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2220      	movs	r2, #32
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e4:	f043 0204 	orr.w	r2, r3, #4
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e067      	b.n	80045c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044fe:	d041      	beq.n	8004584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004500:	f7fe f85a 	bl	80025b8 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	429a      	cmp	r2, r3
 800450e:	d302      	bcc.n	8004516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d136      	bne.n	8004584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	0c1b      	lsrs	r3, r3, #16
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b01      	cmp	r3, #1
 800451e:	d10c      	bne.n	800453a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	43da      	mvns	r2, r3
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	4013      	ands	r3, r2
 800452c:	b29b      	uxth	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	bf14      	ite	ne
 8004532:	2301      	movne	r3, #1
 8004534:	2300      	moveq	r3, #0
 8004536:	b2db      	uxtb	r3, r3
 8004538:	e00b      	b.n	8004552 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	43da      	mvns	r2, r3
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	4013      	ands	r3, r2
 8004546:	b29b      	uxth	r3, r3
 8004548:	2b00      	cmp	r3, #0
 800454a:	bf14      	ite	ne
 800454c:	2301      	movne	r3, #1
 800454e:	2300      	moveq	r3, #0
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d016      	beq.n	8004584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2220      	movs	r2, #32
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004570:	f043 0220 	orr.w	r2, r3, #32
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e021      	b.n	80045c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	0c1b      	lsrs	r3, r3, #16
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b01      	cmp	r3, #1
 800458c:	d10c      	bne.n	80045a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	43da      	mvns	r2, r3
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	4013      	ands	r3, r2
 800459a:	b29b      	uxth	r3, r3
 800459c:	2b00      	cmp	r3, #0
 800459e:	bf14      	ite	ne
 80045a0:	2301      	movne	r3, #1
 80045a2:	2300      	moveq	r3, #0
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	e00b      	b.n	80045c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	43da      	mvns	r2, r3
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	4013      	ands	r3, r2
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	bf14      	ite	ne
 80045ba:	2301      	movne	r3, #1
 80045bc:	2300      	moveq	r3, #0
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f47f af6d 	bne.w	80044a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045dc:	e034      	b.n	8004648 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f000 f886 	bl	80046f0 <I2C_IsAcknowledgeFailed>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d001      	beq.n	80045ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e034      	b.n	8004658 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f4:	d028      	beq.n	8004648 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045f6:	f7fd ffdf 	bl	80025b8 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	429a      	cmp	r2, r3
 8004604:	d302      	bcc.n	800460c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d11d      	bne.n	8004648 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004616:	2b80      	cmp	r3, #128	@ 0x80
 8004618:	d016      	beq.n	8004648 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2220      	movs	r2, #32
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004634:	f043 0220 	orr.w	r2, r3, #32
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e007      	b.n	8004658 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004652:	2b80      	cmp	r3, #128	@ 0x80
 8004654:	d1c3      	bne.n	80045de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800466c:	e034      	b.n	80046d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 f83e 	bl	80046f0 <I2C_IsAcknowledgeFailed>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e034      	b.n	80046e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004684:	d028      	beq.n	80046d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004686:	f7fd ff97 	bl	80025b8 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	429a      	cmp	r2, r3
 8004694:	d302      	bcc.n	800469c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d11d      	bne.n	80046d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	f003 0304 	and.w	r3, r3, #4
 80046a6:	2b04      	cmp	r3, #4
 80046a8:	d016      	beq.n	80046d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2220      	movs	r2, #32
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c4:	f043 0220 	orr.w	r2, r3, #32
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e007      	b.n	80046e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	f003 0304 	and.w	r3, r3, #4
 80046e2:	2b04      	cmp	r3, #4
 80046e4:	d1c3      	bne.n	800466e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004702:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004706:	d11b      	bne.n	8004740 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004710:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2220      	movs	r2, #32
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472c:	f043 0204 	orr.w	r2, r3, #4
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e000      	b.n	8004742 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	370c      	adds	r7, #12
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
	...

08004750 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e267      	b.n	8004c32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d075      	beq.n	800485a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800476e:	4b88      	ldr	r3, [pc, #544]	@ (8004990 <HAL_RCC_OscConfig+0x240>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f003 030c 	and.w	r3, r3, #12
 8004776:	2b04      	cmp	r3, #4
 8004778:	d00c      	beq.n	8004794 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800477a:	4b85      	ldr	r3, [pc, #532]	@ (8004990 <HAL_RCC_OscConfig+0x240>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004782:	2b08      	cmp	r3, #8
 8004784:	d112      	bne.n	80047ac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004786:	4b82      	ldr	r3, [pc, #520]	@ (8004990 <HAL_RCC_OscConfig+0x240>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800478e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004792:	d10b      	bne.n	80047ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004794:	4b7e      	ldr	r3, [pc, #504]	@ (8004990 <HAL_RCC_OscConfig+0x240>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d05b      	beq.n	8004858 <HAL_RCC_OscConfig+0x108>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d157      	bne.n	8004858 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e242      	b.n	8004c32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047b4:	d106      	bne.n	80047c4 <HAL_RCC_OscConfig+0x74>
 80047b6:	4b76      	ldr	r3, [pc, #472]	@ (8004990 <HAL_RCC_OscConfig+0x240>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a75      	ldr	r2, [pc, #468]	@ (8004990 <HAL_RCC_OscConfig+0x240>)
 80047bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047c0:	6013      	str	r3, [r2, #0]
 80047c2:	e01d      	b.n	8004800 <HAL_RCC_OscConfig+0xb0>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047cc:	d10c      	bne.n	80047e8 <HAL_RCC_OscConfig+0x98>
 80047ce:	4b70      	ldr	r3, [pc, #448]	@ (8004990 <HAL_RCC_OscConfig+0x240>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a6f      	ldr	r2, [pc, #444]	@ (8004990 <HAL_RCC_OscConfig+0x240>)
 80047d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047d8:	6013      	str	r3, [r2, #0]
 80047da:	4b6d      	ldr	r3, [pc, #436]	@ (8004990 <HAL_RCC_OscConfig+0x240>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a6c      	ldr	r2, [pc, #432]	@ (8004990 <HAL_RCC_OscConfig+0x240>)
 80047e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047e4:	6013      	str	r3, [r2, #0]
 80047e6:	e00b      	b.n	8004800 <HAL_RCC_OscConfig+0xb0>
 80047e8:	4b69      	ldr	r3, [pc, #420]	@ (8004990 <HAL_RCC_OscConfig+0x240>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a68      	ldr	r2, [pc, #416]	@ (8004990 <HAL_RCC_OscConfig+0x240>)
 80047ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047f2:	6013      	str	r3, [r2, #0]
 80047f4:	4b66      	ldr	r3, [pc, #408]	@ (8004990 <HAL_RCC_OscConfig+0x240>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a65      	ldr	r2, [pc, #404]	@ (8004990 <HAL_RCC_OscConfig+0x240>)
 80047fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d013      	beq.n	8004830 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004808:	f7fd fed6 	bl	80025b8 <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004810:	f7fd fed2 	bl	80025b8 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b64      	cmp	r3, #100	@ 0x64
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e207      	b.n	8004c32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004822:	4b5b      	ldr	r3, [pc, #364]	@ (8004990 <HAL_RCC_OscConfig+0x240>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0f0      	beq.n	8004810 <HAL_RCC_OscConfig+0xc0>
 800482e:	e014      	b.n	800485a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004830:	f7fd fec2 	bl	80025b8 <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004836:	e008      	b.n	800484a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004838:	f7fd febe 	bl	80025b8 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b64      	cmp	r3, #100	@ 0x64
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e1f3      	b.n	8004c32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800484a:	4b51      	ldr	r3, [pc, #324]	@ (8004990 <HAL_RCC_OscConfig+0x240>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1f0      	bne.n	8004838 <HAL_RCC_OscConfig+0xe8>
 8004856:	e000      	b.n	800485a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004858:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d063      	beq.n	800492e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004866:	4b4a      	ldr	r3, [pc, #296]	@ (8004990 <HAL_RCC_OscConfig+0x240>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f003 030c 	and.w	r3, r3, #12
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00b      	beq.n	800488a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004872:	4b47      	ldr	r3, [pc, #284]	@ (8004990 <HAL_RCC_OscConfig+0x240>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800487a:	2b08      	cmp	r3, #8
 800487c:	d11c      	bne.n	80048b8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800487e:	4b44      	ldr	r3, [pc, #272]	@ (8004990 <HAL_RCC_OscConfig+0x240>)
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d116      	bne.n	80048b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800488a:	4b41      	ldr	r3, [pc, #260]	@ (8004990 <HAL_RCC_OscConfig+0x240>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d005      	beq.n	80048a2 <HAL_RCC_OscConfig+0x152>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d001      	beq.n	80048a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e1c7      	b.n	8004c32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048a2:	4b3b      	ldr	r3, [pc, #236]	@ (8004990 <HAL_RCC_OscConfig+0x240>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	4937      	ldr	r1, [pc, #220]	@ (8004990 <HAL_RCC_OscConfig+0x240>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048b6:	e03a      	b.n	800492e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d020      	beq.n	8004902 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048c0:	4b34      	ldr	r3, [pc, #208]	@ (8004994 <HAL_RCC_OscConfig+0x244>)
 80048c2:	2201      	movs	r2, #1
 80048c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c6:	f7fd fe77 	bl	80025b8 <HAL_GetTick>
 80048ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048cc:	e008      	b.n	80048e0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048ce:	f7fd fe73 	bl	80025b8 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d901      	bls.n	80048e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e1a8      	b.n	8004c32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048e0:	4b2b      	ldr	r3, [pc, #172]	@ (8004990 <HAL_RCC_OscConfig+0x240>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d0f0      	beq.n	80048ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ec:	4b28      	ldr	r3, [pc, #160]	@ (8004990 <HAL_RCC_OscConfig+0x240>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	00db      	lsls	r3, r3, #3
 80048fa:	4925      	ldr	r1, [pc, #148]	@ (8004990 <HAL_RCC_OscConfig+0x240>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	600b      	str	r3, [r1, #0]
 8004900:	e015      	b.n	800492e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004902:	4b24      	ldr	r3, [pc, #144]	@ (8004994 <HAL_RCC_OscConfig+0x244>)
 8004904:	2200      	movs	r2, #0
 8004906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004908:	f7fd fe56 	bl	80025b8 <HAL_GetTick>
 800490c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800490e:	e008      	b.n	8004922 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004910:	f7fd fe52 	bl	80025b8 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b02      	cmp	r3, #2
 800491c:	d901      	bls.n	8004922 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e187      	b.n	8004c32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004922:	4b1b      	ldr	r3, [pc, #108]	@ (8004990 <HAL_RCC_OscConfig+0x240>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1f0      	bne.n	8004910 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0308 	and.w	r3, r3, #8
 8004936:	2b00      	cmp	r3, #0
 8004938:	d036      	beq.n	80049a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d016      	beq.n	8004970 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004942:	4b15      	ldr	r3, [pc, #84]	@ (8004998 <HAL_RCC_OscConfig+0x248>)
 8004944:	2201      	movs	r2, #1
 8004946:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004948:	f7fd fe36 	bl	80025b8 <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004950:	f7fd fe32 	bl	80025b8 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e167      	b.n	8004c32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004962:	4b0b      	ldr	r3, [pc, #44]	@ (8004990 <HAL_RCC_OscConfig+0x240>)
 8004964:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d0f0      	beq.n	8004950 <HAL_RCC_OscConfig+0x200>
 800496e:	e01b      	b.n	80049a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004970:	4b09      	ldr	r3, [pc, #36]	@ (8004998 <HAL_RCC_OscConfig+0x248>)
 8004972:	2200      	movs	r2, #0
 8004974:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004976:	f7fd fe1f 	bl	80025b8 <HAL_GetTick>
 800497a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800497c:	e00e      	b.n	800499c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800497e:	f7fd fe1b 	bl	80025b8 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	2b02      	cmp	r3, #2
 800498a:	d907      	bls.n	800499c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e150      	b.n	8004c32 <HAL_RCC_OscConfig+0x4e2>
 8004990:	40023800 	.word	0x40023800
 8004994:	42470000 	.word	0x42470000
 8004998:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800499c:	4b88      	ldr	r3, [pc, #544]	@ (8004bc0 <HAL_RCC_OscConfig+0x470>)
 800499e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1ea      	bne.n	800497e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0304 	and.w	r3, r3, #4
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f000 8097 	beq.w	8004ae4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049b6:	2300      	movs	r3, #0
 80049b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049ba:	4b81      	ldr	r3, [pc, #516]	@ (8004bc0 <HAL_RCC_OscConfig+0x470>)
 80049bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10f      	bne.n	80049e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049c6:	2300      	movs	r3, #0
 80049c8:	60bb      	str	r3, [r7, #8]
 80049ca:	4b7d      	ldr	r3, [pc, #500]	@ (8004bc0 <HAL_RCC_OscConfig+0x470>)
 80049cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ce:	4a7c      	ldr	r2, [pc, #496]	@ (8004bc0 <HAL_RCC_OscConfig+0x470>)
 80049d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80049d6:	4b7a      	ldr	r3, [pc, #488]	@ (8004bc0 <HAL_RCC_OscConfig+0x470>)
 80049d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049de:	60bb      	str	r3, [r7, #8]
 80049e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049e2:	2301      	movs	r3, #1
 80049e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049e6:	4b77      	ldr	r3, [pc, #476]	@ (8004bc4 <HAL_RCC_OscConfig+0x474>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d118      	bne.n	8004a24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049f2:	4b74      	ldr	r3, [pc, #464]	@ (8004bc4 <HAL_RCC_OscConfig+0x474>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a73      	ldr	r2, [pc, #460]	@ (8004bc4 <HAL_RCC_OscConfig+0x474>)
 80049f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049fe:	f7fd fddb 	bl	80025b8 <HAL_GetTick>
 8004a02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a04:	e008      	b.n	8004a18 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a06:	f7fd fdd7 	bl	80025b8 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d901      	bls.n	8004a18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e10c      	b.n	8004c32 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a18:	4b6a      	ldr	r3, [pc, #424]	@ (8004bc4 <HAL_RCC_OscConfig+0x474>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d0f0      	beq.n	8004a06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d106      	bne.n	8004a3a <HAL_RCC_OscConfig+0x2ea>
 8004a2c:	4b64      	ldr	r3, [pc, #400]	@ (8004bc0 <HAL_RCC_OscConfig+0x470>)
 8004a2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a30:	4a63      	ldr	r2, [pc, #396]	@ (8004bc0 <HAL_RCC_OscConfig+0x470>)
 8004a32:	f043 0301 	orr.w	r3, r3, #1
 8004a36:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a38:	e01c      	b.n	8004a74 <HAL_RCC_OscConfig+0x324>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	2b05      	cmp	r3, #5
 8004a40:	d10c      	bne.n	8004a5c <HAL_RCC_OscConfig+0x30c>
 8004a42:	4b5f      	ldr	r3, [pc, #380]	@ (8004bc0 <HAL_RCC_OscConfig+0x470>)
 8004a44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a46:	4a5e      	ldr	r2, [pc, #376]	@ (8004bc0 <HAL_RCC_OscConfig+0x470>)
 8004a48:	f043 0304 	orr.w	r3, r3, #4
 8004a4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a4e:	4b5c      	ldr	r3, [pc, #368]	@ (8004bc0 <HAL_RCC_OscConfig+0x470>)
 8004a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a52:	4a5b      	ldr	r2, [pc, #364]	@ (8004bc0 <HAL_RCC_OscConfig+0x470>)
 8004a54:	f043 0301 	orr.w	r3, r3, #1
 8004a58:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a5a:	e00b      	b.n	8004a74 <HAL_RCC_OscConfig+0x324>
 8004a5c:	4b58      	ldr	r3, [pc, #352]	@ (8004bc0 <HAL_RCC_OscConfig+0x470>)
 8004a5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a60:	4a57      	ldr	r2, [pc, #348]	@ (8004bc0 <HAL_RCC_OscConfig+0x470>)
 8004a62:	f023 0301 	bic.w	r3, r3, #1
 8004a66:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a68:	4b55      	ldr	r3, [pc, #340]	@ (8004bc0 <HAL_RCC_OscConfig+0x470>)
 8004a6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a6c:	4a54      	ldr	r2, [pc, #336]	@ (8004bc0 <HAL_RCC_OscConfig+0x470>)
 8004a6e:	f023 0304 	bic.w	r3, r3, #4
 8004a72:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d015      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a7c:	f7fd fd9c 	bl	80025b8 <HAL_GetTick>
 8004a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a82:	e00a      	b.n	8004a9a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a84:	f7fd fd98 	bl	80025b8 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e0cb      	b.n	8004c32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a9a:	4b49      	ldr	r3, [pc, #292]	@ (8004bc0 <HAL_RCC_OscConfig+0x470>)
 8004a9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d0ee      	beq.n	8004a84 <HAL_RCC_OscConfig+0x334>
 8004aa6:	e014      	b.n	8004ad2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aa8:	f7fd fd86 	bl	80025b8 <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aae:	e00a      	b.n	8004ac6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ab0:	f7fd fd82 	bl	80025b8 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e0b5      	b.n	8004c32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ac6:	4b3e      	ldr	r3, [pc, #248]	@ (8004bc0 <HAL_RCC_OscConfig+0x470>)
 8004ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1ee      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ad2:	7dfb      	ldrb	r3, [r7, #23]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d105      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ad8:	4b39      	ldr	r3, [pc, #228]	@ (8004bc0 <HAL_RCC_OscConfig+0x470>)
 8004ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004adc:	4a38      	ldr	r2, [pc, #224]	@ (8004bc0 <HAL_RCC_OscConfig+0x470>)
 8004ade:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ae2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 80a1 	beq.w	8004c30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004aee:	4b34      	ldr	r3, [pc, #208]	@ (8004bc0 <HAL_RCC_OscConfig+0x470>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f003 030c 	and.w	r3, r3, #12
 8004af6:	2b08      	cmp	r3, #8
 8004af8:	d05c      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d141      	bne.n	8004b86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b02:	4b31      	ldr	r3, [pc, #196]	@ (8004bc8 <HAL_RCC_OscConfig+0x478>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b08:	f7fd fd56 	bl	80025b8 <HAL_GetTick>
 8004b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b10:	f7fd fd52 	bl	80025b8 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e087      	b.n	8004c32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b22:	4b27      	ldr	r3, [pc, #156]	@ (8004bc0 <HAL_RCC_OscConfig+0x470>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1f0      	bne.n	8004b10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	69da      	ldr	r2, [r3, #28]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	431a      	orrs	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b3c:	019b      	lsls	r3, r3, #6
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b44:	085b      	lsrs	r3, r3, #1
 8004b46:	3b01      	subs	r3, #1
 8004b48:	041b      	lsls	r3, r3, #16
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b50:	061b      	lsls	r3, r3, #24
 8004b52:	491b      	ldr	r1, [pc, #108]	@ (8004bc0 <HAL_RCC_OscConfig+0x470>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b58:	4b1b      	ldr	r3, [pc, #108]	@ (8004bc8 <HAL_RCC_OscConfig+0x478>)
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b5e:	f7fd fd2b 	bl	80025b8 <HAL_GetTick>
 8004b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b64:	e008      	b.n	8004b78 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b66:	f7fd fd27 	bl	80025b8 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e05c      	b.n	8004c32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b78:	4b11      	ldr	r3, [pc, #68]	@ (8004bc0 <HAL_RCC_OscConfig+0x470>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d0f0      	beq.n	8004b66 <HAL_RCC_OscConfig+0x416>
 8004b84:	e054      	b.n	8004c30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b86:	4b10      	ldr	r3, [pc, #64]	@ (8004bc8 <HAL_RCC_OscConfig+0x478>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b8c:	f7fd fd14 	bl	80025b8 <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b92:	e008      	b.n	8004ba6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b94:	f7fd fd10 	bl	80025b8 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e045      	b.n	8004c32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ba6:	4b06      	ldr	r3, [pc, #24]	@ (8004bc0 <HAL_RCC_OscConfig+0x470>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1f0      	bne.n	8004b94 <HAL_RCC_OscConfig+0x444>
 8004bb2:	e03d      	b.n	8004c30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d107      	bne.n	8004bcc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e038      	b.n	8004c32 <HAL_RCC_OscConfig+0x4e2>
 8004bc0:	40023800 	.word	0x40023800
 8004bc4:	40007000 	.word	0x40007000
 8004bc8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004bcc:	4b1b      	ldr	r3, [pc, #108]	@ (8004c3c <HAL_RCC_OscConfig+0x4ec>)
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d028      	beq.n	8004c2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d121      	bne.n	8004c2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d11a      	bne.n	8004c2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004c02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d111      	bne.n	8004c2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c12:	085b      	lsrs	r3, r3, #1
 8004c14:	3b01      	subs	r3, #1
 8004c16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d107      	bne.n	8004c2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d001      	beq.n	8004c30 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e000      	b.n	8004c32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3718      	adds	r7, #24
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	40023800 	.word	0x40023800

08004c40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e0cc      	b.n	8004dee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c54:	4b68      	ldr	r3, [pc, #416]	@ (8004df8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0307 	and.w	r3, r3, #7
 8004c5c:	683a      	ldr	r2, [r7, #0]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d90c      	bls.n	8004c7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c62:	4b65      	ldr	r3, [pc, #404]	@ (8004df8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	b2d2      	uxtb	r2, r2
 8004c68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c6a:	4b63      	ldr	r3, [pc, #396]	@ (8004df8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0307 	and.w	r3, r3, #7
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d001      	beq.n	8004c7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e0b8      	b.n	8004dee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0302 	and.w	r3, r3, #2
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d020      	beq.n	8004cca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0304 	and.w	r3, r3, #4
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d005      	beq.n	8004ca0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c94:	4b59      	ldr	r3, [pc, #356]	@ (8004dfc <HAL_RCC_ClockConfig+0x1bc>)
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	4a58      	ldr	r2, [pc, #352]	@ (8004dfc <HAL_RCC_ClockConfig+0x1bc>)
 8004c9a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004c9e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0308 	and.w	r3, r3, #8
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d005      	beq.n	8004cb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cac:	4b53      	ldr	r3, [pc, #332]	@ (8004dfc <HAL_RCC_ClockConfig+0x1bc>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	4a52      	ldr	r2, [pc, #328]	@ (8004dfc <HAL_RCC_ClockConfig+0x1bc>)
 8004cb2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004cb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cb8:	4b50      	ldr	r3, [pc, #320]	@ (8004dfc <HAL_RCC_ClockConfig+0x1bc>)
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	494d      	ldr	r1, [pc, #308]	@ (8004dfc <HAL_RCC_ClockConfig+0x1bc>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d044      	beq.n	8004d60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d107      	bne.n	8004cee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cde:	4b47      	ldr	r3, [pc, #284]	@ (8004dfc <HAL_RCC_ClockConfig+0x1bc>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d119      	bne.n	8004d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e07f      	b.n	8004dee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d003      	beq.n	8004cfe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cfa:	2b03      	cmp	r3, #3
 8004cfc:	d107      	bne.n	8004d0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cfe:	4b3f      	ldr	r3, [pc, #252]	@ (8004dfc <HAL_RCC_ClockConfig+0x1bc>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d109      	bne.n	8004d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e06f      	b.n	8004dee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d0e:	4b3b      	ldr	r3, [pc, #236]	@ (8004dfc <HAL_RCC_ClockConfig+0x1bc>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e067      	b.n	8004dee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d1e:	4b37      	ldr	r3, [pc, #220]	@ (8004dfc <HAL_RCC_ClockConfig+0x1bc>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f023 0203 	bic.w	r2, r3, #3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	4934      	ldr	r1, [pc, #208]	@ (8004dfc <HAL_RCC_ClockConfig+0x1bc>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d30:	f7fd fc42 	bl	80025b8 <HAL_GetTick>
 8004d34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d36:	e00a      	b.n	8004d4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d38:	f7fd fc3e 	bl	80025b8 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e04f      	b.n	8004dee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d4e:	4b2b      	ldr	r3, [pc, #172]	@ (8004dfc <HAL_RCC_ClockConfig+0x1bc>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f003 020c 	and.w	r2, r3, #12
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d1eb      	bne.n	8004d38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d60:	4b25      	ldr	r3, [pc, #148]	@ (8004df8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0307 	and.w	r3, r3, #7
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d20c      	bcs.n	8004d88 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d6e:	4b22      	ldr	r3, [pc, #136]	@ (8004df8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d70:	683a      	ldr	r2, [r7, #0]
 8004d72:	b2d2      	uxtb	r2, r2
 8004d74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d76:	4b20      	ldr	r3, [pc, #128]	@ (8004df8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0307 	and.w	r3, r3, #7
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d001      	beq.n	8004d88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e032      	b.n	8004dee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0304 	and.w	r3, r3, #4
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d008      	beq.n	8004da6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d94:	4b19      	ldr	r3, [pc, #100]	@ (8004dfc <HAL_RCC_ClockConfig+0x1bc>)
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	4916      	ldr	r1, [pc, #88]	@ (8004dfc <HAL_RCC_ClockConfig+0x1bc>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0308 	and.w	r3, r3, #8
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d009      	beq.n	8004dc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004db2:	4b12      	ldr	r3, [pc, #72]	@ (8004dfc <HAL_RCC_ClockConfig+0x1bc>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	00db      	lsls	r3, r3, #3
 8004dc0:	490e      	ldr	r1, [pc, #56]	@ (8004dfc <HAL_RCC_ClockConfig+0x1bc>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004dc6:	f000 f821 	bl	8004e0c <HAL_RCC_GetSysClockFreq>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8004dfc <HAL_RCC_ClockConfig+0x1bc>)
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	091b      	lsrs	r3, r3, #4
 8004dd2:	f003 030f 	and.w	r3, r3, #15
 8004dd6:	490a      	ldr	r1, [pc, #40]	@ (8004e00 <HAL_RCC_ClockConfig+0x1c0>)
 8004dd8:	5ccb      	ldrb	r3, [r1, r3]
 8004dda:	fa22 f303 	lsr.w	r3, r2, r3
 8004dde:	4a09      	ldr	r2, [pc, #36]	@ (8004e04 <HAL_RCC_ClockConfig+0x1c4>)
 8004de0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004de2:	4b09      	ldr	r3, [pc, #36]	@ (8004e08 <HAL_RCC_ClockConfig+0x1c8>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7fd fba2 	bl	8002530 <HAL_InitTick>

  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	40023c00 	.word	0x40023c00
 8004dfc:	40023800 	.word	0x40023800
 8004e00:	0800abc0 	.word	0x0800abc0
 8004e04:	20000000 	.word	0x20000000
 8004e08:	20000004 	.word	0x20000004

08004e0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e10:	b090      	sub	sp, #64	@ 0x40
 8004e12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004e14:	2300      	movs	r3, #0
 8004e16:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004e20:	2300      	movs	r3, #0
 8004e22:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e24:	4b59      	ldr	r3, [pc, #356]	@ (8004f8c <HAL_RCC_GetSysClockFreq+0x180>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f003 030c 	and.w	r3, r3, #12
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d00d      	beq.n	8004e4c <HAL_RCC_GetSysClockFreq+0x40>
 8004e30:	2b08      	cmp	r3, #8
 8004e32:	f200 80a1 	bhi.w	8004f78 <HAL_RCC_GetSysClockFreq+0x16c>
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d002      	beq.n	8004e40 <HAL_RCC_GetSysClockFreq+0x34>
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d003      	beq.n	8004e46 <HAL_RCC_GetSysClockFreq+0x3a>
 8004e3e:	e09b      	b.n	8004f78 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e40:	4b53      	ldr	r3, [pc, #332]	@ (8004f90 <HAL_RCC_GetSysClockFreq+0x184>)
 8004e42:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004e44:	e09b      	b.n	8004f7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e46:	4b53      	ldr	r3, [pc, #332]	@ (8004f94 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e48:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004e4a:	e098      	b.n	8004f7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e4c:	4b4f      	ldr	r3, [pc, #316]	@ (8004f8c <HAL_RCC_GetSysClockFreq+0x180>)
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e54:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e56:	4b4d      	ldr	r3, [pc, #308]	@ (8004f8c <HAL_RCC_GetSysClockFreq+0x180>)
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d028      	beq.n	8004eb4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e62:	4b4a      	ldr	r3, [pc, #296]	@ (8004f8c <HAL_RCC_GetSysClockFreq+0x180>)
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	099b      	lsrs	r3, r3, #6
 8004e68:	2200      	movs	r2, #0
 8004e6a:	623b      	str	r3, [r7, #32]
 8004e6c:	627a      	str	r2, [r7, #36]	@ 0x24
 8004e6e:	6a3b      	ldr	r3, [r7, #32]
 8004e70:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004e74:	2100      	movs	r1, #0
 8004e76:	4b47      	ldr	r3, [pc, #284]	@ (8004f94 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e78:	fb03 f201 	mul.w	r2, r3, r1
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	fb00 f303 	mul.w	r3, r0, r3
 8004e82:	4413      	add	r3, r2
 8004e84:	4a43      	ldr	r2, [pc, #268]	@ (8004f94 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e86:	fba0 1202 	umull	r1, r2, r0, r2
 8004e8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e8c:	460a      	mov	r2, r1
 8004e8e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004e90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e92:	4413      	add	r3, r2
 8004e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e98:	2200      	movs	r2, #0
 8004e9a:	61bb      	str	r3, [r7, #24]
 8004e9c:	61fa      	str	r2, [r7, #28]
 8004e9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ea2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004ea6:	f7fb fe87 	bl	8000bb8 <__aeabi_uldivmod>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	460b      	mov	r3, r1
 8004eae:	4613      	mov	r3, r2
 8004eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004eb2:	e053      	b.n	8004f5c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eb4:	4b35      	ldr	r3, [pc, #212]	@ (8004f8c <HAL_RCC_GetSysClockFreq+0x180>)
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	099b      	lsrs	r3, r3, #6
 8004eba:	2200      	movs	r2, #0
 8004ebc:	613b      	str	r3, [r7, #16]
 8004ebe:	617a      	str	r2, [r7, #20]
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004ec6:	f04f 0b00 	mov.w	fp, #0
 8004eca:	4652      	mov	r2, sl
 8004ecc:	465b      	mov	r3, fp
 8004ece:	f04f 0000 	mov.w	r0, #0
 8004ed2:	f04f 0100 	mov.w	r1, #0
 8004ed6:	0159      	lsls	r1, r3, #5
 8004ed8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004edc:	0150      	lsls	r0, r2, #5
 8004ede:	4602      	mov	r2, r0
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	ebb2 080a 	subs.w	r8, r2, sl
 8004ee6:	eb63 090b 	sbc.w	r9, r3, fp
 8004eea:	f04f 0200 	mov.w	r2, #0
 8004eee:	f04f 0300 	mov.w	r3, #0
 8004ef2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004ef6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004efa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004efe:	ebb2 0408 	subs.w	r4, r2, r8
 8004f02:	eb63 0509 	sbc.w	r5, r3, r9
 8004f06:	f04f 0200 	mov.w	r2, #0
 8004f0a:	f04f 0300 	mov.w	r3, #0
 8004f0e:	00eb      	lsls	r3, r5, #3
 8004f10:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f14:	00e2      	lsls	r2, r4, #3
 8004f16:	4614      	mov	r4, r2
 8004f18:	461d      	mov	r5, r3
 8004f1a:	eb14 030a 	adds.w	r3, r4, sl
 8004f1e:	603b      	str	r3, [r7, #0]
 8004f20:	eb45 030b 	adc.w	r3, r5, fp
 8004f24:	607b      	str	r3, [r7, #4]
 8004f26:	f04f 0200 	mov.w	r2, #0
 8004f2a:	f04f 0300 	mov.w	r3, #0
 8004f2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f32:	4629      	mov	r1, r5
 8004f34:	028b      	lsls	r3, r1, #10
 8004f36:	4621      	mov	r1, r4
 8004f38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f3c:	4621      	mov	r1, r4
 8004f3e:	028a      	lsls	r2, r1, #10
 8004f40:	4610      	mov	r0, r2
 8004f42:	4619      	mov	r1, r3
 8004f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f46:	2200      	movs	r2, #0
 8004f48:	60bb      	str	r3, [r7, #8]
 8004f4a:	60fa      	str	r2, [r7, #12]
 8004f4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f50:	f7fb fe32 	bl	8000bb8 <__aeabi_uldivmod>
 8004f54:	4602      	mov	r2, r0
 8004f56:	460b      	mov	r3, r1
 8004f58:	4613      	mov	r3, r2
 8004f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8004f8c <HAL_RCC_GetSysClockFreq+0x180>)
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	0c1b      	lsrs	r3, r3, #16
 8004f62:	f003 0303 	and.w	r3, r3, #3
 8004f66:	3301      	adds	r3, #1
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004f6c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f74:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004f76:	e002      	b.n	8004f7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f78:	4b05      	ldr	r3, [pc, #20]	@ (8004f90 <HAL_RCC_GetSysClockFreq+0x184>)
 8004f7a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004f7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3740      	adds	r7, #64	@ 0x40
 8004f84:	46bd      	mov	sp, r7
 8004f86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f8a:	bf00      	nop
 8004f8c:	40023800 	.word	0x40023800
 8004f90:	00f42400 	.word	0x00f42400
 8004f94:	017d7840 	.word	0x017d7840

08004f98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f9c:	4b03      	ldr	r3, [pc, #12]	@ (8004fac <HAL_RCC_GetHCLKFreq+0x14>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	20000000 	.word	0x20000000

08004fb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004fb4:	f7ff fff0 	bl	8004f98 <HAL_RCC_GetHCLKFreq>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	4b05      	ldr	r3, [pc, #20]	@ (8004fd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	0a9b      	lsrs	r3, r3, #10
 8004fc0:	f003 0307 	and.w	r3, r3, #7
 8004fc4:	4903      	ldr	r1, [pc, #12]	@ (8004fd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fc6:	5ccb      	ldrb	r3, [r1, r3]
 8004fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	40023800 	.word	0x40023800
 8004fd4:	0800abd0 	.word	0x0800abd0

08004fd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004fdc:	f7ff ffdc 	bl	8004f98 <HAL_RCC_GetHCLKFreq>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	4b05      	ldr	r3, [pc, #20]	@ (8004ff8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	0b5b      	lsrs	r3, r3, #13
 8004fe8:	f003 0307 	and.w	r3, r3, #7
 8004fec:	4903      	ldr	r1, [pc, #12]	@ (8004ffc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fee:	5ccb      	ldrb	r3, [r1, r3]
 8004ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	40023800 	.word	0x40023800
 8004ffc:	0800abd0 	.word	0x0800abd0

08005000 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005008:	2300      	movs	r3, #0
 800500a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800500c:	2300      	movs	r3, #0
 800500e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	2b00      	cmp	r3, #0
 800501a:	d105      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005024:	2b00      	cmp	r3, #0
 8005026:	d035      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005028:	4b67      	ldr	r3, [pc, #412]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800502a:	2200      	movs	r2, #0
 800502c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800502e:	f7fd fac3 	bl	80025b8 <HAL_GetTick>
 8005032:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005034:	e008      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005036:	f7fd fabf 	bl	80025b8 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	2b02      	cmp	r3, #2
 8005042:	d901      	bls.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e0ba      	b.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005048:	4b60      	ldr	r3, [pc, #384]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1f0      	bne.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	019a      	lsls	r2, r3, #6
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	071b      	lsls	r3, r3, #28
 8005060:	495a      	ldr	r1, [pc, #360]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005062:	4313      	orrs	r3, r2
 8005064:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005068:	4b57      	ldr	r3, [pc, #348]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800506a:	2201      	movs	r2, #1
 800506c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800506e:	f7fd faa3 	bl	80025b8 <HAL_GetTick>
 8005072:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005074:	e008      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005076:	f7fd fa9f 	bl	80025b8 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	2b02      	cmp	r3, #2
 8005082:	d901      	bls.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e09a      	b.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005088:	4b50      	ldr	r3, [pc, #320]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d0f0      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	2b00      	cmp	r3, #0
 800509e:	f000 8083 	beq.w	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80050a2:	2300      	movs	r3, #0
 80050a4:	60fb      	str	r3, [r7, #12]
 80050a6:	4b49      	ldr	r3, [pc, #292]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80050a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050aa:	4a48      	ldr	r2, [pc, #288]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80050ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80050b2:	4b46      	ldr	r3, [pc, #280]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80050b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050ba:	60fb      	str	r3, [r7, #12]
 80050bc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80050be:	4b44      	ldr	r3, [pc, #272]	@ (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a43      	ldr	r2, [pc, #268]	@ (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050c8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80050ca:	f7fd fa75 	bl	80025b8 <HAL_GetTick>
 80050ce:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80050d0:	e008      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050d2:	f7fd fa71 	bl	80025b8 <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d901      	bls.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e06c      	b.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80050e4:	4b3a      	ldr	r3, [pc, #232]	@ (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d0f0      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050f0:	4b36      	ldr	r3, [pc, #216]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80050f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050f8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d02f      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	429a      	cmp	r2, r3
 800510c:	d028      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800510e:	4b2f      	ldr	r3, [pc, #188]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005112:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005116:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005118:	4b2e      	ldr	r3, [pc, #184]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800511a:	2201      	movs	r2, #1
 800511c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800511e:	4b2d      	ldr	r3, [pc, #180]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005120:	2200      	movs	r2, #0
 8005122:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005124:	4a29      	ldr	r2, [pc, #164]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800512a:	4b28      	ldr	r3, [pc, #160]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800512c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	2b01      	cmp	r3, #1
 8005134:	d114      	bne.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005136:	f7fd fa3f 	bl	80025b8 <HAL_GetTick>
 800513a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800513c:	e00a      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800513e:	f7fd fa3b 	bl	80025b8 <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	f241 3288 	movw	r2, #5000	@ 0x1388
 800514c:	4293      	cmp	r3, r2
 800514e:	d901      	bls.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e034      	b.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005154:	4b1d      	ldr	r3, [pc, #116]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005158:	f003 0302 	and.w	r3, r3, #2
 800515c:	2b00      	cmp	r3, #0
 800515e:	d0ee      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005168:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800516c:	d10d      	bne.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800516e:	4b17      	ldr	r3, [pc, #92]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800517e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005182:	4912      	ldr	r1, [pc, #72]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005184:	4313      	orrs	r3, r2
 8005186:	608b      	str	r3, [r1, #8]
 8005188:	e005      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800518a:	4b10      	ldr	r3, [pc, #64]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	4a0f      	ldr	r2, [pc, #60]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005190:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005194:	6093      	str	r3, [r2, #8]
 8005196:	4b0d      	ldr	r3, [pc, #52]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005198:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051a2:	490a      	ldr	r1, [pc, #40]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0308 	and.w	r3, r3, #8
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d003      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	7c1a      	ldrb	r2, [r3, #16]
 80051b8:	4b07      	ldr	r3, [pc, #28]	@ (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80051ba:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3718      	adds	r7, #24
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	42470068 	.word	0x42470068
 80051cc:	40023800 	.word	0x40023800
 80051d0:	40007000 	.word	0x40007000
 80051d4:	42470e40 	.word	0x42470e40
 80051d8:	424711e0 	.word	0x424711e0

080051dc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e073      	b.n	80052da <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	7f5b      	ldrb	r3, [r3, #29]
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d105      	bne.n	8005208 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f7fc fe2c 	bl	8001e60 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	f003 0310 	and.w	r3, r3, #16
 8005218:	2b10      	cmp	r3, #16
 800521a:	d055      	beq.n	80052c8 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	22ca      	movs	r2, #202	@ 0xca
 8005222:	625a      	str	r2, [r3, #36]	@ 0x24
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2253      	movs	r2, #83	@ 0x53
 800522a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 f99d 	bl	800556c <RTC_EnterInitMode>
 8005232:	4603      	mov	r3, r0
 8005234:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005236:	7bfb      	ldrb	r3, [r7, #15]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d12c      	bne.n	8005296 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	6812      	ldr	r2, [r2, #0]
 8005246:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800524a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800524e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6899      	ldr	r1, [r3, #8]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	431a      	orrs	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	431a      	orrs	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	430a      	orrs	r2, r1
 800526c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	68d2      	ldr	r2, [r2, #12]
 8005276:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6919      	ldr	r1, [r3, #16]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	041a      	lsls	r2, r3, #16
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	430a      	orrs	r2, r1
 800528a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f9a4 	bl	80055da <RTC_ExitInitMode>
 8005292:	4603      	mov	r3, r0
 8005294:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005296:	7bfb      	ldrb	r3, [r7, #15]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d110      	bne.n	80052be <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80052aa:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	699a      	ldr	r2, [r3, #24]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	22ff      	movs	r2, #255	@ 0xff
 80052c4:	625a      	str	r2, [r3, #36]	@ 0x24
 80052c6:	e001      	b.n	80052cc <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80052c8:	2300      	movs	r3, #0
 80052ca:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80052cc:	7bfb      	ldrb	r3, [r7, #15]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d102      	bne.n	80052d8 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80052d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80052e2:	b590      	push	{r4, r7, lr}
 80052e4:	b087      	sub	sp, #28
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	60f8      	str	r0, [r7, #12]
 80052ea:	60b9      	str	r1, [r7, #8]
 80052ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80052ee:	2300      	movs	r3, #0
 80052f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	7f1b      	ldrb	r3, [r3, #28]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d101      	bne.n	80052fe <HAL_RTC_SetTime+0x1c>
 80052fa:	2302      	movs	r3, #2
 80052fc:	e087      	b.n	800540e <HAL_RTC_SetTime+0x12c>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2201      	movs	r2, #1
 8005302:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2202      	movs	r2, #2
 8005308:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d126      	bne.n	800535e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800531a:	2b00      	cmp	r3, #0
 800531c:	d102      	bne.n	8005324 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	2200      	movs	r2, #0
 8005322:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	4618      	mov	r0, r3
 800532a:	f000 f97b 	bl	8005624 <RTC_ByteToBcd2>
 800532e:	4603      	mov	r3, r0
 8005330:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	785b      	ldrb	r3, [r3, #1]
 8005336:	4618      	mov	r0, r3
 8005338:	f000 f974 	bl	8005624 <RTC_ByteToBcd2>
 800533c:	4603      	mov	r3, r0
 800533e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005340:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	789b      	ldrb	r3, [r3, #2]
 8005346:	4618      	mov	r0, r3
 8005348:	f000 f96c 	bl	8005624 <RTC_ByteToBcd2>
 800534c:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800534e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	78db      	ldrb	r3, [r3, #3]
 8005356:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005358:	4313      	orrs	r3, r2
 800535a:	617b      	str	r3, [r7, #20]
 800535c:	e018      	b.n	8005390 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005368:	2b00      	cmp	r3, #0
 800536a:	d102      	bne.n	8005372 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	2200      	movs	r2, #0
 8005370:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	785b      	ldrb	r3, [r3, #1]
 800537c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800537e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005384:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	78db      	ldrb	r3, [r3, #3]
 800538a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800538c:	4313      	orrs	r3, r2
 800538e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	22ca      	movs	r2, #202	@ 0xca
 8005396:	625a      	str	r2, [r3, #36]	@ 0x24
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2253      	movs	r2, #83	@ 0x53
 800539e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f000 f8e3 	bl	800556c <RTC_EnterInitMode>
 80053a6:	4603      	mov	r3, r0
 80053a8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80053aa:	7cfb      	ldrb	r3, [r7, #19]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d120      	bne.n	80053f2 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80053ba:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80053be:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689a      	ldr	r2, [r3, #8]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80053ce:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6899      	ldr	r1, [r3, #8]
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	68da      	ldr	r2, [r3, #12]
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	431a      	orrs	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	430a      	orrs	r2, r1
 80053e6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f000 f8f6 	bl	80055da <RTC_ExitInitMode>
 80053ee:	4603      	mov	r3, r0
 80053f0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80053f2:	7cfb      	ldrb	r3, [r7, #19]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d102      	bne.n	80053fe <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2201      	movs	r2, #1
 80053fc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	22ff      	movs	r2, #255	@ 0xff
 8005404:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	771a      	strb	r2, [r3, #28]

  return status;
 800540c:	7cfb      	ldrb	r3, [r7, #19]
}
 800540e:	4618      	mov	r0, r3
 8005410:	371c      	adds	r7, #28
 8005412:	46bd      	mov	sp, r7
 8005414:	bd90      	pop	{r4, r7, pc}

08005416 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005416:	b590      	push	{r4, r7, lr}
 8005418:	b087      	sub	sp, #28
 800541a:	af00      	add	r7, sp, #0
 800541c:	60f8      	str	r0, [r7, #12]
 800541e:	60b9      	str	r1, [r7, #8]
 8005420:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005422:	2300      	movs	r3, #0
 8005424:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	7f1b      	ldrb	r3, [r3, #28]
 800542a:	2b01      	cmp	r3, #1
 800542c:	d101      	bne.n	8005432 <HAL_RTC_SetDate+0x1c>
 800542e:	2302      	movs	r3, #2
 8005430:	e071      	b.n	8005516 <HAL_RTC_SetDate+0x100>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2201      	movs	r2, #1
 8005436:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2202      	movs	r2, #2
 800543c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d10e      	bne.n	8005462 <HAL_RTC_SetDate+0x4c>
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	785b      	ldrb	r3, [r3, #1]
 8005448:	f003 0310 	and.w	r3, r3, #16
 800544c:	2b00      	cmp	r3, #0
 800544e:	d008      	beq.n	8005462 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	785b      	ldrb	r3, [r3, #1]
 8005454:	f023 0310 	bic.w	r3, r3, #16
 8005458:	b2db      	uxtb	r3, r3
 800545a:	330a      	adds	r3, #10
 800545c:	b2da      	uxtb	r2, r3
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d11c      	bne.n	80054a2 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	78db      	ldrb	r3, [r3, #3]
 800546c:	4618      	mov	r0, r3
 800546e:	f000 f8d9 	bl	8005624 <RTC_ByteToBcd2>
 8005472:	4603      	mov	r3, r0
 8005474:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	785b      	ldrb	r3, [r3, #1]
 800547a:	4618      	mov	r0, r3
 800547c:	f000 f8d2 	bl	8005624 <RTC_ByteToBcd2>
 8005480:	4603      	mov	r3, r0
 8005482:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005484:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	789b      	ldrb	r3, [r3, #2]
 800548a:	4618      	mov	r0, r3
 800548c:	f000 f8ca 	bl	8005624 <RTC_ByteToBcd2>
 8005490:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005492:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800549c:	4313      	orrs	r3, r2
 800549e:	617b      	str	r3, [r7, #20]
 80054a0:	e00e      	b.n	80054c0 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	78db      	ldrb	r3, [r3, #3]
 80054a6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	785b      	ldrb	r3, [r3, #1]
 80054ac:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80054ae:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80054b4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80054bc:	4313      	orrs	r3, r2
 80054be:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	22ca      	movs	r2, #202	@ 0xca
 80054c6:	625a      	str	r2, [r3, #36]	@ 0x24
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2253      	movs	r2, #83	@ 0x53
 80054ce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f000 f84b 	bl	800556c <RTC_EnterInitMode>
 80054d6:	4603      	mov	r3, r0
 80054d8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80054da:	7cfb      	ldrb	r3, [r7, #19]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10c      	bne.n	80054fa <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80054ea:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80054ee:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f000 f872 	bl	80055da <RTC_ExitInitMode>
 80054f6:	4603      	mov	r3, r0
 80054f8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80054fa:	7cfb      	ldrb	r3, [r7, #19]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d102      	bne.n	8005506 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2201      	movs	r2, #1
 8005504:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	22ff      	movs	r2, #255	@ 0xff
 800550c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	771a      	strb	r2, [r3, #28]

  return status;
 8005514:	7cfb      	ldrb	r3, [r7, #19]
}
 8005516:	4618      	mov	r0, r3
 8005518:	371c      	adds	r7, #28
 800551a:	46bd      	mov	sp, r7
 800551c:	bd90      	pop	{r4, r7, pc}
	...

08005520 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005528:	2300      	movs	r3, #0
 800552a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a0d      	ldr	r2, [pc, #52]	@ (8005568 <HAL_RTC_WaitForSynchro+0x48>)
 8005532:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005534:	f7fd f840 	bl	80025b8 <HAL_GetTick>
 8005538:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800553a:	e009      	b.n	8005550 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800553c:	f7fd f83c 	bl	80025b8 <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800554a:	d901      	bls.n	8005550 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e007      	b.n	8005560 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	f003 0320 	and.w	r3, r3, #32
 800555a:	2b00      	cmp	r3, #0
 800555c:	d0ee      	beq.n	800553c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	3710      	adds	r7, #16
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	00013f5f 	.word	0x00013f5f

0800556c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005574:	2300      	movs	r3, #0
 8005576:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005578:	2300      	movs	r3, #0
 800557a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005586:	2b00      	cmp	r3, #0
 8005588:	d122      	bne.n	80055d0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68da      	ldr	r2, [r3, #12]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005598:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800559a:	f7fd f80d 	bl	80025b8 <HAL_GetTick>
 800559e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80055a0:	e00c      	b.n	80055bc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80055a2:	f7fd f809 	bl	80025b8 <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80055b0:	d904      	bls.n	80055bc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2204      	movs	r2, #4
 80055b6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d102      	bne.n	80055d0 <RTC_EnterInitMode+0x64>
 80055ca:	7bfb      	ldrb	r3, [r7, #15]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d1e8      	bne.n	80055a2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80055d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b084      	sub	sp, #16
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055e2:	2300      	movs	r3, #0
 80055e4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68da      	ldr	r2, [r3, #12]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80055f4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f003 0320 	and.w	r3, r3, #32
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10a      	bne.n	800561a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f7ff ff8b 	bl	8005520 <HAL_RTC_WaitForSynchro>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d004      	beq.n	800561a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2204      	movs	r2, #4
 8005614:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800561a:	7bfb      	ldrb	r3, [r7, #15]
}
 800561c:	4618      	mov	r0, r3
 800561e:	3710      	adds	r7, #16
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	4603      	mov	r3, r0
 800562c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800562e:	2300      	movs	r3, #0
 8005630:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005632:	e005      	b.n	8005640 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	3301      	adds	r3, #1
 8005638:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800563a:	79fb      	ldrb	r3, [r7, #7]
 800563c:	3b0a      	subs	r3, #10
 800563e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005640:	79fb      	ldrb	r3, [r7, #7]
 8005642:	2b09      	cmp	r3, #9
 8005644:	d8f6      	bhi.n	8005634 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	b2db      	uxtb	r3, r3
 800564a:	011b      	lsls	r3, r3, #4
 800564c:	b2da      	uxtb	r2, r3
 800564e:	79fb      	ldrb	r3, [r7, #7]
 8005650:	4313      	orrs	r3, r2
 8005652:	b2db      	uxtb	r3, r3
}
 8005654:	4618      	mov	r0, r3
 8005656:	3714      	adds	r7, #20
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d101      	bne.n	8005672 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e041      	b.n	80056f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b00      	cmp	r3, #0
 800567c:	d106      	bne.n	800568c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f7fc fc16 	bl	8001eb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2202      	movs	r2, #2
 8005690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	3304      	adds	r3, #4
 800569c:	4619      	mov	r1, r3
 800569e:	4610      	mov	r0, r2
 80056a0:	f000 fd3c 	bl	800611c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3708      	adds	r7, #8
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b082      	sub	sp, #8
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d101      	bne.n	8005710 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e041      	b.n	8005794 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b00      	cmp	r3, #0
 800571a:	d106      	bne.n	800572a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 f839 	bl	800579c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2202      	movs	r2, #2
 800572e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	3304      	adds	r3, #4
 800573a:	4619      	mov	r1, r3
 800573c:	4610      	mov	r0, r2
 800573e:	f000 fced 	bl	800611c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2201      	movs	r2, #1
 800575e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2201      	movs	r2, #1
 800577e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3708      	adds	r7, #8
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d109      	bne.n	80057d4 <HAL_TIM_PWM_Start+0x24>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	bf14      	ite	ne
 80057cc:	2301      	movne	r3, #1
 80057ce:	2300      	moveq	r3, #0
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	e022      	b.n	800581a <HAL_TIM_PWM_Start+0x6a>
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	2b04      	cmp	r3, #4
 80057d8:	d109      	bne.n	80057ee <HAL_TIM_PWM_Start+0x3e>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	bf14      	ite	ne
 80057e6:	2301      	movne	r3, #1
 80057e8:	2300      	moveq	r3, #0
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	e015      	b.n	800581a <HAL_TIM_PWM_Start+0x6a>
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	2b08      	cmp	r3, #8
 80057f2:	d109      	bne.n	8005808 <HAL_TIM_PWM_Start+0x58>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	bf14      	ite	ne
 8005800:	2301      	movne	r3, #1
 8005802:	2300      	moveq	r3, #0
 8005804:	b2db      	uxtb	r3, r3
 8005806:	e008      	b.n	800581a <HAL_TIM_PWM_Start+0x6a>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800580e:	b2db      	uxtb	r3, r3
 8005810:	2b01      	cmp	r3, #1
 8005812:	bf14      	ite	ne
 8005814:	2301      	movne	r3, #1
 8005816:	2300      	moveq	r3, #0
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d001      	beq.n	8005822 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e068      	b.n	80058f4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d104      	bne.n	8005832 <HAL_TIM_PWM_Start+0x82>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2202      	movs	r2, #2
 800582c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005830:	e013      	b.n	800585a <HAL_TIM_PWM_Start+0xaa>
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	2b04      	cmp	r3, #4
 8005836:	d104      	bne.n	8005842 <HAL_TIM_PWM_Start+0x92>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2202      	movs	r2, #2
 800583c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005840:	e00b      	b.n	800585a <HAL_TIM_PWM_Start+0xaa>
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	2b08      	cmp	r3, #8
 8005846:	d104      	bne.n	8005852 <HAL_TIM_PWM_Start+0xa2>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2202      	movs	r2, #2
 800584c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005850:	e003      	b.n	800585a <HAL_TIM_PWM_Start+0xaa>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2202      	movs	r2, #2
 8005856:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2201      	movs	r2, #1
 8005860:	6839      	ldr	r1, [r7, #0]
 8005862:	4618      	mov	r0, r3
 8005864:	f001 f82a 	bl	80068bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a23      	ldr	r2, [pc, #140]	@ (80058fc <HAL_TIM_PWM_Start+0x14c>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d107      	bne.n	8005882 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005880:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a1d      	ldr	r2, [pc, #116]	@ (80058fc <HAL_TIM_PWM_Start+0x14c>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d018      	beq.n	80058be <HAL_TIM_PWM_Start+0x10e>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005894:	d013      	beq.n	80058be <HAL_TIM_PWM_Start+0x10e>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a19      	ldr	r2, [pc, #100]	@ (8005900 <HAL_TIM_PWM_Start+0x150>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d00e      	beq.n	80058be <HAL_TIM_PWM_Start+0x10e>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a17      	ldr	r2, [pc, #92]	@ (8005904 <HAL_TIM_PWM_Start+0x154>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d009      	beq.n	80058be <HAL_TIM_PWM_Start+0x10e>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a16      	ldr	r2, [pc, #88]	@ (8005908 <HAL_TIM_PWM_Start+0x158>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d004      	beq.n	80058be <HAL_TIM_PWM_Start+0x10e>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a14      	ldr	r2, [pc, #80]	@ (800590c <HAL_TIM_PWM_Start+0x15c>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d111      	bne.n	80058e2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f003 0307 	and.w	r3, r3, #7
 80058c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2b06      	cmp	r3, #6
 80058ce:	d010      	beq.n	80058f2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f042 0201 	orr.w	r2, r2, #1
 80058de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058e0:	e007      	b.n	80058f2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f042 0201 	orr.w	r2, r2, #1
 80058f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	40010000 	.word	0x40010000
 8005900:	40000400 	.word	0x40000400
 8005904:	40000800 	.word	0x40000800
 8005908:	40000c00 	.word	0x40000c00
 800590c:	40014000 	.word	0x40014000

08005910 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2200      	movs	r2, #0
 8005920:	6839      	ldr	r1, [r7, #0]
 8005922:	4618      	mov	r0, r3
 8005924:	f000 ffca 	bl	80068bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a29      	ldr	r2, [pc, #164]	@ (80059d4 <HAL_TIM_PWM_Stop+0xc4>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d117      	bne.n	8005962 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	6a1a      	ldr	r2, [r3, #32]
 8005938:	f241 1311 	movw	r3, #4369	@ 0x1111
 800593c:	4013      	ands	r3, r2
 800593e:	2b00      	cmp	r3, #0
 8005940:	d10f      	bne.n	8005962 <HAL_TIM_PWM_Stop+0x52>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	6a1a      	ldr	r2, [r3, #32]
 8005948:	f240 4344 	movw	r3, #1092	@ 0x444
 800594c:	4013      	ands	r3, r2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d107      	bne.n	8005962 <HAL_TIM_PWM_Stop+0x52>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005960:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	6a1a      	ldr	r2, [r3, #32]
 8005968:	f241 1311 	movw	r3, #4369	@ 0x1111
 800596c:	4013      	ands	r3, r2
 800596e:	2b00      	cmp	r3, #0
 8005970:	d10f      	bne.n	8005992 <HAL_TIM_PWM_Stop+0x82>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	6a1a      	ldr	r2, [r3, #32]
 8005978:	f240 4344 	movw	r3, #1092	@ 0x444
 800597c:	4013      	ands	r3, r2
 800597e:	2b00      	cmp	r3, #0
 8005980:	d107      	bne.n	8005992 <HAL_TIM_PWM_Stop+0x82>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f022 0201 	bic.w	r2, r2, #1
 8005990:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d104      	bne.n	80059a2 <HAL_TIM_PWM_Stop+0x92>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059a0:	e013      	b.n	80059ca <HAL_TIM_PWM_Stop+0xba>
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	2b04      	cmp	r3, #4
 80059a6:	d104      	bne.n	80059b2 <HAL_TIM_PWM_Stop+0xa2>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059b0:	e00b      	b.n	80059ca <HAL_TIM_PWM_Stop+0xba>
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	2b08      	cmp	r3, #8
 80059b6:	d104      	bne.n	80059c2 <HAL_TIM_PWM_Stop+0xb2>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059c0:	e003      	b.n	80059ca <HAL_TIM_PWM_Stop+0xba>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3708      	adds	r7, #8
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	40010000 	.word	0x40010000

080059d8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e041      	b.n	8005a6e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d106      	bne.n	8005a04 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f839 	bl	8005a76 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2202      	movs	r2, #2
 8005a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	3304      	adds	r3, #4
 8005a14:	4619      	mov	r1, r3
 8005a16:	4610      	mov	r0, r2
 8005a18:	f000 fb80 	bl	800611c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3708      	adds	r7, #8
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005a76:	b480      	push	{r7}
 8005a78:	b083      	sub	sp, #12
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005a7e:	bf00      	nop
 8005a80:	370c      	adds	r7, #12
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr

08005a8a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b084      	sub	sp, #16
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	f003 0302 	and.w	r3, r3, #2
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d020      	beq.n	8005aee <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f003 0302 	and.w	r3, r3, #2
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d01b      	beq.n	8005aee <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f06f 0202 	mvn.w	r2, #2
 8005abe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	f003 0303 	and.w	r3, r3, #3
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d003      	beq.n	8005adc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 fb02 	bl	80060de <HAL_TIM_IC_CaptureCallback>
 8005ada:	e005      	b.n	8005ae8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 faf4 	bl	80060ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 fb05 	bl	80060f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	f003 0304 	and.w	r3, r3, #4
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d020      	beq.n	8005b3a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f003 0304 	and.w	r3, r3, #4
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d01b      	beq.n	8005b3a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f06f 0204 	mvn.w	r2, #4
 8005b0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2202      	movs	r2, #2
 8005b10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	699b      	ldr	r3, [r3, #24]
 8005b18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d003      	beq.n	8005b28 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 fadc 	bl	80060de <HAL_TIM_IC_CaptureCallback>
 8005b26:	e005      	b.n	8005b34 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 face 	bl	80060ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 fadf 	bl	80060f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	f003 0308 	and.w	r3, r3, #8
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d020      	beq.n	8005b86 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f003 0308 	and.w	r3, r3, #8
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d01b      	beq.n	8005b86 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f06f 0208 	mvn.w	r2, #8
 8005b56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2204      	movs	r2, #4
 8005b5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	69db      	ldr	r3, [r3, #28]
 8005b64:	f003 0303 	and.w	r3, r3, #3
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d003      	beq.n	8005b74 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 fab6 	bl	80060de <HAL_TIM_IC_CaptureCallback>
 8005b72:	e005      	b.n	8005b80 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 faa8 	bl	80060ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 fab9 	bl	80060f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	f003 0310 	and.w	r3, r3, #16
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d020      	beq.n	8005bd2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f003 0310 	and.w	r3, r3, #16
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d01b      	beq.n	8005bd2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f06f 0210 	mvn.w	r2, #16
 8005ba2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2208      	movs	r2, #8
 8005ba8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	69db      	ldr	r3, [r3, #28]
 8005bb0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d003      	beq.n	8005bc0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 fa90 	bl	80060de <HAL_TIM_IC_CaptureCallback>
 8005bbe:	e005      	b.n	8005bcc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 fa82 	bl	80060ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 fa93 	bl	80060f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00c      	beq.n	8005bf6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d007      	beq.n	8005bf6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f06f 0201 	mvn.w	r2, #1
 8005bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 fa60 	bl	80060b6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00c      	beq.n	8005c1a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d007      	beq.n	8005c1a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 ff9d 	bl	8006b54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00c      	beq.n	8005c3e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d007      	beq.n	8005c3e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 fa64 	bl	8006106 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	f003 0320 	and.w	r3, r3, #32
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00c      	beq.n	8005c62 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f003 0320 	and.w	r3, r3, #32
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d007      	beq.n	8005c62 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f06f 0220 	mvn.w	r2, #32
 8005c5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 ff6f 	bl	8006b40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c62:	bf00      	nop
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b086      	sub	sp, #24
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	60f8      	str	r0, [r7, #12]
 8005c72:	60b9      	str	r1, [r7, #8]
 8005c74:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c76:	2300      	movs	r3, #0
 8005c78:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d101      	bne.n	8005c88 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005c84:	2302      	movs	r3, #2
 8005c86:	e088      	b.n	8005d9a <HAL_TIM_IC_ConfigChannel+0x130>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d11b      	bne.n	8005cce <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005ca6:	f000 fc51 	bl	800654c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	699a      	ldr	r2, [r3, #24]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f022 020c 	bic.w	r2, r2, #12
 8005cb8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	6999      	ldr	r1, [r3, #24]
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	619a      	str	r2, [r3, #24]
 8005ccc:	e060      	b.n	8005d90 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2b04      	cmp	r3, #4
 8005cd2:	d11c      	bne.n	8005d0e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005ce4:	f000 fcc9 	bl	800667a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	699a      	ldr	r2, [r3, #24]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005cf6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	6999      	ldr	r1, [r3, #24]
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	021a      	lsls	r2, r3, #8
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	619a      	str	r2, [r3, #24]
 8005d0c:	e040      	b.n	8005d90 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2b08      	cmp	r3, #8
 8005d12:	d11b      	bne.n	8005d4c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005d24:	f000 fd16 	bl	8006754 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	69da      	ldr	r2, [r3, #28]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f022 020c 	bic.w	r2, r2, #12
 8005d36:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	69d9      	ldr	r1, [r3, #28]
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	689a      	ldr	r2, [r3, #8]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	430a      	orrs	r2, r1
 8005d48:	61da      	str	r2, [r3, #28]
 8005d4a:	e021      	b.n	8005d90 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b0c      	cmp	r3, #12
 8005d50:	d11c      	bne.n	8005d8c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005d62:	f000 fd33 	bl	80067cc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	69da      	ldr	r2, [r3, #28]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005d74:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	69d9      	ldr	r1, [r3, #28]
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	021a      	lsls	r2, r3, #8
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	430a      	orrs	r2, r1
 8005d88:	61da      	str	r2, [r3, #28]
 8005d8a:	e001      	b.n	8005d90 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3718      	adds	r7, #24
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
	...

08005da4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b086      	sub	sp, #24
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005db0:	2300      	movs	r3, #0
 8005db2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d101      	bne.n	8005dc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	e0ae      	b.n	8005f20 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2b0c      	cmp	r3, #12
 8005dce:	f200 809f 	bhi.w	8005f10 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8005dd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd8:	08005e0d 	.word	0x08005e0d
 8005ddc:	08005f11 	.word	0x08005f11
 8005de0:	08005f11 	.word	0x08005f11
 8005de4:	08005f11 	.word	0x08005f11
 8005de8:	08005e4d 	.word	0x08005e4d
 8005dec:	08005f11 	.word	0x08005f11
 8005df0:	08005f11 	.word	0x08005f11
 8005df4:	08005f11 	.word	0x08005f11
 8005df8:	08005e8f 	.word	0x08005e8f
 8005dfc:	08005f11 	.word	0x08005f11
 8005e00:	08005f11 	.word	0x08005f11
 8005e04:	08005f11 	.word	0x08005f11
 8005e08:	08005ecf 	.word	0x08005ecf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68b9      	ldr	r1, [r7, #8]
 8005e12:	4618      	mov	r0, r3
 8005e14:	f000 fa0e 	bl	8006234 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	699a      	ldr	r2, [r3, #24]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f042 0208 	orr.w	r2, r2, #8
 8005e26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	699a      	ldr	r2, [r3, #24]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f022 0204 	bic.w	r2, r2, #4
 8005e36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6999      	ldr	r1, [r3, #24]
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	691a      	ldr	r2, [r3, #16]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	430a      	orrs	r2, r1
 8005e48:	619a      	str	r2, [r3, #24]
      break;
 8005e4a:	e064      	b.n	8005f16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68b9      	ldr	r1, [r7, #8]
 8005e52:	4618      	mov	r0, r3
 8005e54:	f000 fa54 	bl	8006300 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	699a      	ldr	r2, [r3, #24]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	699a      	ldr	r2, [r3, #24]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6999      	ldr	r1, [r3, #24]
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	021a      	lsls	r2, r3, #8
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	619a      	str	r2, [r3, #24]
      break;
 8005e8c:	e043      	b.n	8005f16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68b9      	ldr	r1, [r7, #8]
 8005e94:	4618      	mov	r0, r3
 8005e96:	f000 fa9f 	bl	80063d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	69da      	ldr	r2, [r3, #28]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f042 0208 	orr.w	r2, r2, #8
 8005ea8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	69da      	ldr	r2, [r3, #28]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f022 0204 	bic.w	r2, r2, #4
 8005eb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	69d9      	ldr	r1, [r3, #28]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	691a      	ldr	r2, [r3, #16]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	430a      	orrs	r2, r1
 8005eca:	61da      	str	r2, [r3, #28]
      break;
 8005ecc:	e023      	b.n	8005f16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68b9      	ldr	r1, [r7, #8]
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f000 fae9 	bl	80064ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	69da      	ldr	r2, [r3, #28]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ee8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	69da      	ldr	r2, [r3, #28]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ef8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	69d9      	ldr	r1, [r3, #28]
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	021a      	lsls	r2, r3, #8
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	430a      	orrs	r2, r1
 8005f0c:	61da      	str	r2, [r3, #28]
      break;
 8005f0e:	e002      	b.n	8005f16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	75fb      	strb	r3, [r7, #23]
      break;
 8005f14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3718      	adds	r7, #24
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f32:	2300      	movs	r3, #0
 8005f34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d101      	bne.n	8005f44 <HAL_TIM_ConfigClockSource+0x1c>
 8005f40:	2302      	movs	r3, #2
 8005f42:	e0b4      	b.n	80060ae <HAL_TIM_ConfigClockSource+0x186>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2202      	movs	r2, #2
 8005f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005f62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f7c:	d03e      	beq.n	8005ffc <HAL_TIM_ConfigClockSource+0xd4>
 8005f7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f82:	f200 8087 	bhi.w	8006094 <HAL_TIM_ConfigClockSource+0x16c>
 8005f86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f8a:	f000 8086 	beq.w	800609a <HAL_TIM_ConfigClockSource+0x172>
 8005f8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f92:	d87f      	bhi.n	8006094 <HAL_TIM_ConfigClockSource+0x16c>
 8005f94:	2b70      	cmp	r3, #112	@ 0x70
 8005f96:	d01a      	beq.n	8005fce <HAL_TIM_ConfigClockSource+0xa6>
 8005f98:	2b70      	cmp	r3, #112	@ 0x70
 8005f9a:	d87b      	bhi.n	8006094 <HAL_TIM_ConfigClockSource+0x16c>
 8005f9c:	2b60      	cmp	r3, #96	@ 0x60
 8005f9e:	d050      	beq.n	8006042 <HAL_TIM_ConfigClockSource+0x11a>
 8005fa0:	2b60      	cmp	r3, #96	@ 0x60
 8005fa2:	d877      	bhi.n	8006094 <HAL_TIM_ConfigClockSource+0x16c>
 8005fa4:	2b50      	cmp	r3, #80	@ 0x50
 8005fa6:	d03c      	beq.n	8006022 <HAL_TIM_ConfigClockSource+0xfa>
 8005fa8:	2b50      	cmp	r3, #80	@ 0x50
 8005faa:	d873      	bhi.n	8006094 <HAL_TIM_ConfigClockSource+0x16c>
 8005fac:	2b40      	cmp	r3, #64	@ 0x40
 8005fae:	d058      	beq.n	8006062 <HAL_TIM_ConfigClockSource+0x13a>
 8005fb0:	2b40      	cmp	r3, #64	@ 0x40
 8005fb2:	d86f      	bhi.n	8006094 <HAL_TIM_ConfigClockSource+0x16c>
 8005fb4:	2b30      	cmp	r3, #48	@ 0x30
 8005fb6:	d064      	beq.n	8006082 <HAL_TIM_ConfigClockSource+0x15a>
 8005fb8:	2b30      	cmp	r3, #48	@ 0x30
 8005fba:	d86b      	bhi.n	8006094 <HAL_TIM_ConfigClockSource+0x16c>
 8005fbc:	2b20      	cmp	r3, #32
 8005fbe:	d060      	beq.n	8006082 <HAL_TIM_ConfigClockSource+0x15a>
 8005fc0:	2b20      	cmp	r3, #32
 8005fc2:	d867      	bhi.n	8006094 <HAL_TIM_ConfigClockSource+0x16c>
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d05c      	beq.n	8006082 <HAL_TIM_ConfigClockSource+0x15a>
 8005fc8:	2b10      	cmp	r3, #16
 8005fca:	d05a      	beq.n	8006082 <HAL_TIM_ConfigClockSource+0x15a>
 8005fcc:	e062      	b.n	8006094 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fde:	f000 fc4d 	bl	800687c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005ff0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	609a      	str	r2, [r3, #8]
      break;
 8005ffa:	e04f      	b.n	800609c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800600c:	f000 fc36 	bl	800687c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689a      	ldr	r2, [r3, #8]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800601e:	609a      	str	r2, [r3, #8]
      break;
 8006020:	e03c      	b.n	800609c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800602e:	461a      	mov	r2, r3
 8006030:	f000 faf4 	bl	800661c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2150      	movs	r1, #80	@ 0x50
 800603a:	4618      	mov	r0, r3
 800603c:	f000 fc03 	bl	8006846 <TIM_ITRx_SetConfig>
      break;
 8006040:	e02c      	b.n	800609c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800604e:	461a      	mov	r2, r3
 8006050:	f000 fb50 	bl	80066f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2160      	movs	r1, #96	@ 0x60
 800605a:	4618      	mov	r0, r3
 800605c:	f000 fbf3 	bl	8006846 <TIM_ITRx_SetConfig>
      break;
 8006060:	e01c      	b.n	800609c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800606e:	461a      	mov	r2, r3
 8006070:	f000 fad4 	bl	800661c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2140      	movs	r1, #64	@ 0x40
 800607a:	4618      	mov	r0, r3
 800607c:	f000 fbe3 	bl	8006846 <TIM_ITRx_SetConfig>
      break;
 8006080:	e00c      	b.n	800609c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4619      	mov	r1, r3
 800608c:	4610      	mov	r0, r2
 800608e:	f000 fbda 	bl	8006846 <TIM_ITRx_SetConfig>
      break;
 8006092:	e003      	b.n	800609c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	73fb      	strb	r3, [r7, #15]
      break;
 8006098:	e000      	b.n	800609c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800609a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80060ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b083      	sub	sp, #12
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80060be:	bf00      	nop
 80060c0:	370c      	adds	r7, #12
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b083      	sub	sp, #12
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060d2:	bf00      	nop
 80060d4:	370c      	adds	r7, #12
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr

080060de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060de:	b480      	push	{r7}
 80060e0:	b083      	sub	sp, #12
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060e6:	bf00      	nop
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b083      	sub	sp, #12
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060fa:	bf00      	nop
 80060fc:	370c      	adds	r7, #12
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr

08006106 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006106:	b480      	push	{r7}
 8006108:	b083      	sub	sp, #12
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800610e:	bf00      	nop
 8006110:	370c      	adds	r7, #12
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
	...

0800611c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a3a      	ldr	r2, [pc, #232]	@ (8006218 <TIM_Base_SetConfig+0xfc>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d00f      	beq.n	8006154 <TIM_Base_SetConfig+0x38>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800613a:	d00b      	beq.n	8006154 <TIM_Base_SetConfig+0x38>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a37      	ldr	r2, [pc, #220]	@ (800621c <TIM_Base_SetConfig+0x100>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d007      	beq.n	8006154 <TIM_Base_SetConfig+0x38>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a36      	ldr	r2, [pc, #216]	@ (8006220 <TIM_Base_SetConfig+0x104>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d003      	beq.n	8006154 <TIM_Base_SetConfig+0x38>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a35      	ldr	r2, [pc, #212]	@ (8006224 <TIM_Base_SetConfig+0x108>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d108      	bne.n	8006166 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800615a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	4313      	orrs	r3, r2
 8006164:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a2b      	ldr	r2, [pc, #172]	@ (8006218 <TIM_Base_SetConfig+0xfc>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d01b      	beq.n	80061a6 <TIM_Base_SetConfig+0x8a>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006174:	d017      	beq.n	80061a6 <TIM_Base_SetConfig+0x8a>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a28      	ldr	r2, [pc, #160]	@ (800621c <TIM_Base_SetConfig+0x100>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d013      	beq.n	80061a6 <TIM_Base_SetConfig+0x8a>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a27      	ldr	r2, [pc, #156]	@ (8006220 <TIM_Base_SetConfig+0x104>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d00f      	beq.n	80061a6 <TIM_Base_SetConfig+0x8a>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a26      	ldr	r2, [pc, #152]	@ (8006224 <TIM_Base_SetConfig+0x108>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d00b      	beq.n	80061a6 <TIM_Base_SetConfig+0x8a>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a25      	ldr	r2, [pc, #148]	@ (8006228 <TIM_Base_SetConfig+0x10c>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d007      	beq.n	80061a6 <TIM_Base_SetConfig+0x8a>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a24      	ldr	r2, [pc, #144]	@ (800622c <TIM_Base_SetConfig+0x110>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d003      	beq.n	80061a6 <TIM_Base_SetConfig+0x8a>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a23      	ldr	r2, [pc, #140]	@ (8006230 <TIM_Base_SetConfig+0x114>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d108      	bne.n	80061b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	689a      	ldr	r2, [r3, #8]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a0e      	ldr	r2, [pc, #56]	@ (8006218 <TIM_Base_SetConfig+0xfc>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d103      	bne.n	80061ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	691a      	ldr	r2, [r3, #16]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	f003 0301 	and.w	r3, r3, #1
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d105      	bne.n	800620a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	f023 0201 	bic.w	r2, r3, #1
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	611a      	str	r2, [r3, #16]
  }
}
 800620a:	bf00      	nop
 800620c:	3714      	adds	r7, #20
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	40010000 	.word	0x40010000
 800621c:	40000400 	.word	0x40000400
 8006220:	40000800 	.word	0x40000800
 8006224:	40000c00 	.word	0x40000c00
 8006228:	40014000 	.word	0x40014000
 800622c:	40014400 	.word	0x40014400
 8006230:	40014800 	.word	0x40014800

08006234 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006234:	b480      	push	{r7}
 8006236:	b087      	sub	sp, #28
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a1b      	ldr	r3, [r3, #32]
 8006248:	f023 0201 	bic.w	r2, r3, #1
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f023 0303 	bic.w	r3, r3, #3
 800626a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	4313      	orrs	r3, r2
 8006274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	f023 0302 	bic.w	r3, r3, #2
 800627c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	4313      	orrs	r3, r2
 8006286:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a1c      	ldr	r2, [pc, #112]	@ (80062fc <TIM_OC1_SetConfig+0xc8>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d10c      	bne.n	80062aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	f023 0308 	bic.w	r3, r3, #8
 8006296:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	4313      	orrs	r3, r2
 80062a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f023 0304 	bic.w	r3, r3, #4
 80062a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a13      	ldr	r2, [pc, #76]	@ (80062fc <TIM_OC1_SetConfig+0xc8>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d111      	bne.n	80062d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80062c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	695b      	ldr	r3, [r3, #20]
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	699b      	ldr	r3, [r3, #24]
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	685a      	ldr	r2, [r3, #4]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	621a      	str	r2, [r3, #32]
}
 80062f0:	bf00      	nop
 80062f2:	371c      	adds	r7, #28
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr
 80062fc:	40010000 	.word	0x40010000

08006300 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006300:	b480      	push	{r7}
 8006302:	b087      	sub	sp, #28
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a1b      	ldr	r3, [r3, #32]
 800630e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	f023 0210 	bic.w	r2, r3, #16
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800632e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006336:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	021b      	lsls	r3, r3, #8
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	4313      	orrs	r3, r2
 8006342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	f023 0320 	bic.w	r3, r3, #32
 800634a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	011b      	lsls	r3, r3, #4
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	4313      	orrs	r3, r2
 8006356:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a1e      	ldr	r2, [pc, #120]	@ (80063d4 <TIM_OC2_SetConfig+0xd4>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d10d      	bne.n	800637c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006366:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	011b      	lsls	r3, r3, #4
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	4313      	orrs	r3, r2
 8006372:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800637a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a15      	ldr	r2, [pc, #84]	@ (80063d4 <TIM_OC2_SetConfig+0xd4>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d113      	bne.n	80063ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800638a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006392:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	695b      	ldr	r3, [r3, #20]
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	4313      	orrs	r3, r2
 800639e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	693a      	ldr	r2, [r7, #16]
 80063b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	697a      	ldr	r2, [r7, #20]
 80063c4:	621a      	str	r2, [r3, #32]
}
 80063c6:	bf00      	nop
 80063c8:	371c      	adds	r7, #28
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	40010000 	.word	0x40010000

080063d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063d8:	b480      	push	{r7}
 80063da:	b087      	sub	sp, #28
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6a1b      	ldr	r3, [r3, #32]
 80063ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	69db      	ldr	r3, [r3, #28]
 80063fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f023 0303 	bic.w	r3, r3, #3
 800640e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	4313      	orrs	r3, r2
 8006418:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006420:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	021b      	lsls	r3, r3, #8
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	4313      	orrs	r3, r2
 800642c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a1d      	ldr	r2, [pc, #116]	@ (80064a8 <TIM_OC3_SetConfig+0xd0>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d10d      	bne.n	8006452 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800643c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	021b      	lsls	r3, r3, #8
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	4313      	orrs	r3, r2
 8006448:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006450:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a14      	ldr	r2, [pc, #80]	@ (80064a8 <TIM_OC3_SetConfig+0xd0>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d113      	bne.n	8006482 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006460:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006468:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	695b      	ldr	r3, [r3, #20]
 800646e:	011b      	lsls	r3, r3, #4
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	4313      	orrs	r3, r2
 8006474:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	011b      	lsls	r3, r3, #4
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	4313      	orrs	r3, r2
 8006480:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	693a      	ldr	r2, [r7, #16]
 8006486:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	685a      	ldr	r2, [r3, #4]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	621a      	str	r2, [r3, #32]
}
 800649c:	bf00      	nop
 800649e:	371c      	adds	r7, #28
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr
 80064a8:	40010000 	.word	0x40010000

080064ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b087      	sub	sp, #28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a1b      	ldr	r3, [r3, #32]
 80064ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a1b      	ldr	r3, [r3, #32]
 80064c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	69db      	ldr	r3, [r3, #28]
 80064d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	021b      	lsls	r3, r3, #8
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80064f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	031b      	lsls	r3, r3, #12
 80064fe:	693a      	ldr	r2, [r7, #16]
 8006500:	4313      	orrs	r3, r2
 8006502:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a10      	ldr	r2, [pc, #64]	@ (8006548 <TIM_OC4_SetConfig+0x9c>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d109      	bne.n	8006520 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006512:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	695b      	ldr	r3, [r3, #20]
 8006518:	019b      	lsls	r3, r3, #6
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	4313      	orrs	r3, r2
 800651e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	685a      	ldr	r2, [r3, #4]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	693a      	ldr	r2, [r7, #16]
 8006538:	621a      	str	r2, [r3, #32]
}
 800653a:	bf00      	nop
 800653c:	371c      	adds	r7, #28
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	40010000 	.word	0x40010000

0800654c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800654c:	b480      	push	{r7}
 800654e:	b087      	sub	sp, #28
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
 8006558:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6a1b      	ldr	r3, [r3, #32]
 8006564:	f023 0201 	bic.w	r2, r3, #1
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	4a24      	ldr	r2, [pc, #144]	@ (8006608 <TIM_TI1_SetConfig+0xbc>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d013      	beq.n	80065a2 <TIM_TI1_SetConfig+0x56>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006580:	d00f      	beq.n	80065a2 <TIM_TI1_SetConfig+0x56>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	4a21      	ldr	r2, [pc, #132]	@ (800660c <TIM_TI1_SetConfig+0xc0>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d00b      	beq.n	80065a2 <TIM_TI1_SetConfig+0x56>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	4a20      	ldr	r2, [pc, #128]	@ (8006610 <TIM_TI1_SetConfig+0xc4>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d007      	beq.n	80065a2 <TIM_TI1_SetConfig+0x56>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	4a1f      	ldr	r2, [pc, #124]	@ (8006614 <TIM_TI1_SetConfig+0xc8>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d003      	beq.n	80065a2 <TIM_TI1_SetConfig+0x56>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	4a1e      	ldr	r2, [pc, #120]	@ (8006618 <TIM_TI1_SetConfig+0xcc>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d101      	bne.n	80065a6 <TIM_TI1_SetConfig+0x5a>
 80065a2:	2301      	movs	r3, #1
 80065a4:	e000      	b.n	80065a8 <TIM_TI1_SetConfig+0x5c>
 80065a6:	2300      	movs	r3, #0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d008      	beq.n	80065be <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	f023 0303 	bic.w	r3, r3, #3
 80065b2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	617b      	str	r3, [r7, #20]
 80065bc:	e003      	b.n	80065c6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	f043 0301 	orr.w	r3, r3, #1
 80065c4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80065cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	011b      	lsls	r3, r3, #4
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	697a      	ldr	r2, [r7, #20]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	f023 030a 	bic.w	r3, r3, #10
 80065e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	f003 030a 	and.w	r3, r3, #10
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	697a      	ldr	r2, [r7, #20]
 80065f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	621a      	str	r2, [r3, #32]
}
 80065fa:	bf00      	nop
 80065fc:	371c      	adds	r7, #28
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	40010000 	.word	0x40010000
 800660c:	40000400 	.word	0x40000400
 8006610:	40000800 	.word	0x40000800
 8006614:	40000c00 	.word	0x40000c00
 8006618:	40014000 	.word	0x40014000

0800661c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800661c:	b480      	push	{r7}
 800661e:	b087      	sub	sp, #28
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6a1b      	ldr	r3, [r3, #32]
 800662c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6a1b      	ldr	r3, [r3, #32]
 8006632:	f023 0201 	bic.w	r2, r3, #1
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006646:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	011b      	lsls	r3, r3, #4
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	4313      	orrs	r3, r2
 8006650:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	f023 030a 	bic.w	r3, r3, #10
 8006658:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800665a:	697a      	ldr	r2, [r7, #20]
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	4313      	orrs	r3, r2
 8006660:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	693a      	ldr	r2, [r7, #16]
 8006666:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	621a      	str	r2, [r3, #32]
}
 800666e:	bf00      	nop
 8006670:	371c      	adds	r7, #28
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr

0800667a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800667a:	b480      	push	{r7}
 800667c:	b087      	sub	sp, #28
 800667e:	af00      	add	r7, sp, #0
 8006680:	60f8      	str	r0, [r7, #12]
 8006682:	60b9      	str	r1, [r7, #8]
 8006684:	607a      	str	r2, [r7, #4]
 8006686:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6a1b      	ldr	r3, [r3, #32]
 800668c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	f023 0210 	bic.w	r2, r3, #16
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	021b      	lsls	r3, r3, #8
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80066b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	031b      	lsls	r3, r3, #12
 80066be:	b29b      	uxth	r3, r3
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80066cc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	011b      	lsls	r3, r3, #4
 80066d2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80066d6:	697a      	ldr	r2, [r7, #20]
 80066d8:	4313      	orrs	r3, r2
 80066da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	693a      	ldr	r2, [r7, #16]
 80066e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	697a      	ldr	r2, [r7, #20]
 80066e6:	621a      	str	r2, [r3, #32]
}
 80066e8:	bf00      	nop
 80066ea:	371c      	adds	r7, #28
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b087      	sub	sp, #28
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6a1b      	ldr	r3, [r3, #32]
 8006704:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	f023 0210 	bic.w	r2, r3, #16
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800671e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	031b      	lsls	r3, r3, #12
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	4313      	orrs	r3, r2
 8006728:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006730:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	011b      	lsls	r3, r3, #4
 8006736:	697a      	ldr	r2, [r7, #20]
 8006738:	4313      	orrs	r3, r2
 800673a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	693a      	ldr	r2, [r7, #16]
 8006740:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	697a      	ldr	r2, [r7, #20]
 8006746:	621a      	str	r2, [r3, #32]
}
 8006748:	bf00      	nop
 800674a:	371c      	adds	r7, #28
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006754:	b480      	push	{r7}
 8006756:	b087      	sub	sp, #28
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	607a      	str	r2, [r7, #4]
 8006760:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6a1b      	ldr	r3, [r3, #32]
 8006766:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6a1b      	ldr	r3, [r3, #32]
 800676c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	69db      	ldr	r3, [r3, #28]
 8006778:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	f023 0303 	bic.w	r3, r3, #3
 8006780:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006782:	693a      	ldr	r2, [r7, #16]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4313      	orrs	r3, r2
 8006788:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006790:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	011b      	lsls	r3, r3, #4
 8006796:	b2db      	uxtb	r3, r3
 8006798:	693a      	ldr	r2, [r7, #16]
 800679a:	4313      	orrs	r3, r2
 800679c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80067a4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	021b      	lsls	r3, r3, #8
 80067aa:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80067ae:	697a      	ldr	r2, [r7, #20]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	693a      	ldr	r2, [r7, #16]
 80067b8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	621a      	str	r2, [r3, #32]
}
 80067c0:	bf00      	nop
 80067c2:	371c      	adds	r7, #28
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b087      	sub	sp, #28
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]
 80067d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6a1b      	ldr	r3, [r3, #32]
 80067de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6a1b      	ldr	r3, [r3, #32]
 80067e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	69db      	ldr	r3, [r3, #28]
 80067f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067f8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	021b      	lsls	r3, r3, #8
 80067fe:	693a      	ldr	r2, [r7, #16]
 8006800:	4313      	orrs	r3, r2
 8006802:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800680a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	031b      	lsls	r3, r3, #12
 8006810:	b29b      	uxth	r3, r3
 8006812:	693a      	ldr	r2, [r7, #16]
 8006814:	4313      	orrs	r3, r2
 8006816:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800681e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	031b      	lsls	r3, r3, #12
 8006824:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006828:	697a      	ldr	r2, [r7, #20]
 800682a:	4313      	orrs	r3, r2
 800682c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	693a      	ldr	r2, [r7, #16]
 8006832:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	621a      	str	r2, [r3, #32]
}
 800683a:	bf00      	nop
 800683c:	371c      	adds	r7, #28
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr

08006846 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006846:	b480      	push	{r7}
 8006848:	b085      	sub	sp, #20
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
 800684e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800685c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800685e:	683a      	ldr	r2, [r7, #0]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	4313      	orrs	r3, r2
 8006864:	f043 0307 	orr.w	r3, r3, #7
 8006868:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	609a      	str	r2, [r3, #8]
}
 8006870:	bf00      	nop
 8006872:	3714      	adds	r7, #20
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800687c:	b480      	push	{r7}
 800687e:	b087      	sub	sp, #28
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	607a      	str	r2, [r7, #4]
 8006888:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006896:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	021a      	lsls	r2, r3, #8
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	431a      	orrs	r2, r3
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	697a      	ldr	r2, [r7, #20]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	609a      	str	r2, [r3, #8]
}
 80068b0:	bf00      	nop
 80068b2:	371c      	adds	r7, #28
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068bc:	b480      	push	{r7}
 80068be:	b087      	sub	sp, #28
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	f003 031f 	and.w	r3, r3, #31
 80068ce:	2201      	movs	r2, #1
 80068d0:	fa02 f303 	lsl.w	r3, r2, r3
 80068d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6a1a      	ldr	r2, [r3, #32]
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	43db      	mvns	r3, r3
 80068de:	401a      	ands	r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6a1a      	ldr	r2, [r3, #32]
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	f003 031f 	and.w	r3, r3, #31
 80068ee:	6879      	ldr	r1, [r7, #4]
 80068f0:	fa01 f303 	lsl.w	r3, r1, r3
 80068f4:	431a      	orrs	r2, r3
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	621a      	str	r2, [r3, #32]
}
 80068fa:	bf00      	nop
 80068fc:	371c      	adds	r7, #28
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr

08006906 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b082      	sub	sp, #8
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
 800690e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2200      	movs	r2, #0
 8006916:	6839      	ldr	r1, [r7, #0]
 8006918:	4618      	mov	r0, r3
 800691a:	f000 f925 	bl	8006b68 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	6a1a      	ldr	r2, [r3, #32]
 8006924:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006928:	4013      	ands	r3, r2
 800692a:	2b00      	cmp	r3, #0
 800692c:	d10f      	bne.n	800694e <HAL_TIMEx_PWMN_Stop+0x48>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	6a1a      	ldr	r2, [r3, #32]
 8006934:	f240 4344 	movw	r3, #1092	@ 0x444
 8006938:	4013      	ands	r3, r2
 800693a:	2b00      	cmp	r3, #0
 800693c:	d107      	bne.n	800694e <HAL_TIMEx_PWMN_Stop+0x48>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800694c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	6a1a      	ldr	r2, [r3, #32]
 8006954:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006958:	4013      	ands	r3, r2
 800695a:	2b00      	cmp	r3, #0
 800695c:	d10f      	bne.n	800697e <HAL_TIMEx_PWMN_Stop+0x78>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	6a1a      	ldr	r2, [r3, #32]
 8006964:	f240 4344 	movw	r3, #1092	@ 0x444
 8006968:	4013      	ands	r3, r2
 800696a:	2b00      	cmp	r3, #0
 800696c:	d107      	bne.n	800697e <HAL_TIMEx_PWMN_Stop+0x78>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f022 0201 	bic.w	r2, r2, #1
 800697c:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d104      	bne.n	800698e <HAL_TIMEx_PWMN_Stop+0x88>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800698c:	e013      	b.n	80069b6 <HAL_TIMEx_PWMN_Stop+0xb0>
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	2b04      	cmp	r3, #4
 8006992:	d104      	bne.n	800699e <HAL_TIMEx_PWMN_Stop+0x98>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800699c:	e00b      	b.n	80069b6 <HAL_TIMEx_PWMN_Stop+0xb0>
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	2b08      	cmp	r3, #8
 80069a2:	d104      	bne.n	80069ae <HAL_TIMEx_PWMN_Stop+0xa8>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069ac:	e003      	b.n	80069b6 <HAL_TIMEx_PWMN_Stop+0xb0>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2201      	movs	r2, #1
 80069b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3708      	adds	r7, #8
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d101      	bne.n	80069d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069d4:	2302      	movs	r3, #2
 80069d6:	e050      	b.n	8006a7a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2202      	movs	r2, #2
 80069e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a1c      	ldr	r2, [pc, #112]	@ (8006a88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d018      	beq.n	8006a4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a24:	d013      	beq.n	8006a4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a18      	ldr	r2, [pc, #96]	@ (8006a8c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d00e      	beq.n	8006a4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a16      	ldr	r2, [pc, #88]	@ (8006a90 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d009      	beq.n	8006a4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a15      	ldr	r2, [pc, #84]	@ (8006a94 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d004      	beq.n	8006a4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a13      	ldr	r2, [pc, #76]	@ (8006a98 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d10c      	bne.n	8006a68 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68ba      	ldr	r2, [r7, #8]
 8006a66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3714      	adds	r7, #20
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	40010000 	.word	0x40010000
 8006a8c:	40000400 	.word	0x40000400
 8006a90:	40000800 	.word	0x40000800
 8006a94:	40000c00 	.word	0x40000c00
 8006a98:	40014000 	.word	0x40014000

08006a9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b085      	sub	sp, #20
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d101      	bne.n	8006ab8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	e03d      	b.n	8006b34 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	695b      	ldr	r3, [r3, #20]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	69db      	ldr	r3, [r3, #28]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3714      	adds	r7, #20
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b48:	bf00      	nop
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b087      	sub	sp, #28
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	f003 030f 	and.w	r3, r3, #15
 8006b7a:	2204      	movs	r2, #4
 8006b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6a1a      	ldr	r2, [r3, #32]
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	43db      	mvns	r3, r3
 8006b8a:	401a      	ands	r2, r3
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6a1a      	ldr	r2, [r3, #32]
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	f003 030f 	and.w	r3, r3, #15
 8006b9a:	6879      	ldr	r1, [r7, #4]
 8006b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8006ba0:	431a      	orrs	r2, r3
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	621a      	str	r2, [r3, #32]
}
 8006ba6:	bf00      	nop
 8006ba8:	371c      	adds	r7, #28
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr

08006bb2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b082      	sub	sp, #8
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d101      	bne.n	8006bc4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e042      	b.n	8006c4a <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d106      	bne.n	8006bde <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f7fb fa69 	bl	80020b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2224      	movs	r2, #36	@ 0x24
 8006be2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68da      	ldr	r2, [r3, #12]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006bf4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 fea2 	bl	8007940 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	691a      	ldr	r2, [r3, #16]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c0a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	695a      	ldr	r2, [r3, #20]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c1a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68da      	ldr	r2, [r3, #12]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c2a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2220      	movs	r2, #32
 8006c36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2220      	movs	r2, #32
 8006c3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}

08006c52 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c52:	b580      	push	{r7, lr}
 8006c54:	b08c      	sub	sp, #48	@ 0x30
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	60f8      	str	r0, [r7, #12]
 8006c5a:	60b9      	str	r1, [r7, #8]
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	2b20      	cmp	r3, #32
 8006c6a:	d14a      	bne.n	8006d02 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d002      	beq.n	8006c78 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006c72:	88fb      	ldrh	r3, [r7, #6]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d101      	bne.n	8006c7c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e043      	b.n	8006d04 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006c88:	88fb      	ldrh	r3, [r7, #6]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	68b9      	ldr	r1, [r7, #8]
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	f000 fbf6 	bl	8007480 <UART_Start_Receive_DMA>
 8006c94:	4603      	mov	r3, r0
 8006c96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006c9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d12c      	bne.n	8006cfc <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d125      	bne.n	8006cf6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006caa:	2300      	movs	r3, #0
 8006cac:	613b      	str	r3, [r7, #16]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	613b      	str	r3, [r7, #16]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	613b      	str	r3, [r7, #16]
 8006cbe:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	330c      	adds	r3, #12
 8006cc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	e853 3f00 	ldrex	r3, [r3]
 8006cce:	617b      	str	r3, [r7, #20]
   return(result);
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	f043 0310 	orr.w	r3, r3, #16
 8006cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	330c      	adds	r3, #12
 8006cde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ce0:	627a      	str	r2, [r7, #36]	@ 0x24
 8006ce2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce4:	6a39      	ldr	r1, [r7, #32]
 8006ce6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ce8:	e841 2300 	strex	r3, r2, [r1]
 8006cec:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1e5      	bne.n	8006cc0 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8006cf4:	e002      	b.n	8006cfc <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8006cfc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006d00:	e000      	b.n	8006d04 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8006d02:	2302      	movs	r3, #2
  }
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3730      	adds	r7, #48	@ 0x30
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b0ba      	sub	sp, #232	@ 0xe8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	695b      	ldr	r3, [r3, #20]
 8006d2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006d32:	2300      	movs	r3, #0
 8006d34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d42:	f003 030f 	and.w	r3, r3, #15
 8006d46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006d4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d10f      	bne.n	8006d72 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d56:	f003 0320 	and.w	r3, r3, #32
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d009      	beq.n	8006d72 <HAL_UART_IRQHandler+0x66>
 8006d5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d62:	f003 0320 	and.w	r3, r3, #32
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d003      	beq.n	8006d72 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 fd29 	bl	80077c2 <UART_Receive_IT>
      return;
 8006d70:	e25b      	b.n	800722a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006d72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	f000 80de 	beq.w	8006f38 <HAL_UART_IRQHandler+0x22c>
 8006d7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d80:	f003 0301 	and.w	r3, r3, #1
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d106      	bne.n	8006d96 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d8c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f000 80d1 	beq.w	8006f38 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d9a:	f003 0301 	and.w	r3, r3, #1
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00b      	beq.n	8006dba <HAL_UART_IRQHandler+0xae>
 8006da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d005      	beq.n	8006dba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006db2:	f043 0201 	orr.w	r2, r3, #1
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dbe:	f003 0304 	and.w	r3, r3, #4
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00b      	beq.n	8006dde <HAL_UART_IRQHandler+0xd2>
 8006dc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006dca:	f003 0301 	and.w	r3, r3, #1
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d005      	beq.n	8006dde <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dd6:	f043 0202 	orr.w	r2, r3, #2
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006de2:	f003 0302 	and.w	r3, r3, #2
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00b      	beq.n	8006e02 <HAL_UART_IRQHandler+0xf6>
 8006dea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d005      	beq.n	8006e02 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dfa:	f043 0204 	orr.w	r2, r3, #4
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e06:	f003 0308 	and.w	r3, r3, #8
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d011      	beq.n	8006e32 <HAL_UART_IRQHandler+0x126>
 8006e0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e12:	f003 0320 	and.w	r3, r3, #32
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d105      	bne.n	8006e26 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006e1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e1e:	f003 0301 	and.w	r3, r3, #1
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d005      	beq.n	8006e32 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e2a:	f043 0208 	orr.w	r2, r3, #8
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	f000 81f2 	beq.w	8007220 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e40:	f003 0320 	and.w	r3, r3, #32
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d008      	beq.n	8006e5a <HAL_UART_IRQHandler+0x14e>
 8006e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e4c:	f003 0320 	and.w	r3, r3, #32
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d002      	beq.n	8006e5a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 fcb4 	bl	80077c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	695b      	ldr	r3, [r3, #20]
 8006e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e64:	2b40      	cmp	r3, #64	@ 0x40
 8006e66:	bf0c      	ite	eq
 8006e68:	2301      	moveq	r3, #1
 8006e6a:	2300      	movne	r3, #0
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e76:	f003 0308 	and.w	r3, r3, #8
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d103      	bne.n	8006e86 <HAL_UART_IRQHandler+0x17a>
 8006e7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d04f      	beq.n	8006f26 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 fbbc 	bl	8007604 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	695b      	ldr	r3, [r3, #20]
 8006e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e96:	2b40      	cmp	r3, #64	@ 0x40
 8006e98:	d141      	bne.n	8006f1e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	3314      	adds	r3, #20
 8006ea0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006ea8:	e853 3f00 	ldrex	r3, [r3]
 8006eac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006eb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006eb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006eb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	3314      	adds	r3, #20
 8006ec2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006ec6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006eca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ece:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006ed2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006ed6:	e841 2300 	strex	r3, r2, [r1]
 8006eda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006ede:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1d9      	bne.n	8006e9a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d013      	beq.n	8006f16 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ef2:	4a7e      	ldr	r2, [pc, #504]	@ (80070ec <HAL_UART_IRQHandler+0x3e0>)
 8006ef4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7fc f9f6 	bl	80032ec <HAL_DMA_Abort_IT>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d016      	beq.n	8006f34 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006f10:	4610      	mov	r0, r2
 8006f12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f14:	e00e      	b.n	8006f34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 f99e 	bl	8007258 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f1c:	e00a      	b.n	8006f34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 f99a 	bl	8007258 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f24:	e006      	b.n	8006f34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 f996 	bl	8007258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006f32:	e175      	b.n	8007220 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f34:	bf00      	nop
    return;
 8006f36:	e173      	b.n	8007220 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	f040 814f 	bne.w	80071e0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f46:	f003 0310 	and.w	r3, r3, #16
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	f000 8148 	beq.w	80071e0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f54:	f003 0310 	and.w	r3, r3, #16
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f000 8141 	beq.w	80071e0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f5e:	2300      	movs	r3, #0
 8006f60:	60bb      	str	r3, [r7, #8]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	60bb      	str	r3, [r7, #8]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	60bb      	str	r3, [r7, #8]
 8006f72:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f7e:	2b40      	cmp	r3, #64	@ 0x40
 8006f80:	f040 80b6 	bne.w	80070f0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f000 8145 	beq.w	8007224 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006f9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	f080 813e 	bcs.w	8007224 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006fae:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fb4:	69db      	ldr	r3, [r3, #28]
 8006fb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fba:	f000 8088 	beq.w	80070ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	330c      	adds	r3, #12
 8006fc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006fcc:	e853 3f00 	ldrex	r3, [r3]
 8006fd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006fd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006fd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fdc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	330c      	adds	r3, #12
 8006fe6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006fea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006fee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006ff6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006ffa:	e841 2300 	strex	r3, r2, [r1]
 8006ffe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007002:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007006:	2b00      	cmp	r3, #0
 8007008:	d1d9      	bne.n	8006fbe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	3314      	adds	r3, #20
 8007010:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007012:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007014:	e853 3f00 	ldrex	r3, [r3]
 8007018:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800701a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800701c:	f023 0301 	bic.w	r3, r3, #1
 8007020:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	3314      	adds	r3, #20
 800702a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800702e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007032:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007034:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007036:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800703a:	e841 2300 	strex	r3, r2, [r1]
 800703e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007040:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1e1      	bne.n	800700a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	3314      	adds	r3, #20
 800704c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800704e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007050:	e853 3f00 	ldrex	r3, [r3]
 8007054:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007056:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007058:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800705c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	3314      	adds	r3, #20
 8007066:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800706a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800706c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007070:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007072:	e841 2300 	strex	r3, r2, [r1]
 8007076:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007078:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1e3      	bne.n	8007046 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2220      	movs	r2, #32
 8007082:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	330c      	adds	r3, #12
 8007092:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007094:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007096:	e853 3f00 	ldrex	r3, [r3]
 800709a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800709c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800709e:	f023 0310 	bic.w	r3, r3, #16
 80070a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	330c      	adds	r3, #12
 80070ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80070b0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80070b2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80070b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80070b8:	e841 2300 	strex	r3, r2, [r1]
 80070bc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80070be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d1e3      	bne.n	800708c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7fc f89f 	bl	800320c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2202      	movs	r2, #2
 80070d2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80070dc:	b29b      	uxth	r3, r3
 80070de:	1ad3      	subs	r3, r2, r3
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	4619      	mov	r1, r3
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 f8c1 	bl	800726c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80070ea:	e09b      	b.n	8007224 <HAL_UART_IRQHandler+0x518>
 80070ec:	080076cb 	.word	0x080076cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	1ad3      	subs	r3, r2, r3
 80070fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007104:	b29b      	uxth	r3, r3
 8007106:	2b00      	cmp	r3, #0
 8007108:	f000 808e 	beq.w	8007228 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800710c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007110:	2b00      	cmp	r3, #0
 8007112:	f000 8089 	beq.w	8007228 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	330c      	adds	r3, #12
 800711c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007120:	e853 3f00 	ldrex	r3, [r3]
 8007124:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007128:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800712c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	330c      	adds	r3, #12
 8007136:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800713a:	647a      	str	r2, [r7, #68]	@ 0x44
 800713c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007140:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007142:	e841 2300 	strex	r3, r2, [r1]
 8007146:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007148:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800714a:	2b00      	cmp	r3, #0
 800714c:	d1e3      	bne.n	8007116 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	3314      	adds	r3, #20
 8007154:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007158:	e853 3f00 	ldrex	r3, [r3]
 800715c:	623b      	str	r3, [r7, #32]
   return(result);
 800715e:	6a3b      	ldr	r3, [r7, #32]
 8007160:	f023 0301 	bic.w	r3, r3, #1
 8007164:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	3314      	adds	r3, #20
 800716e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007172:	633a      	str	r2, [r7, #48]	@ 0x30
 8007174:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007176:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007178:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800717a:	e841 2300 	strex	r3, r2, [r1]
 800717e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1e3      	bne.n	800714e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2220      	movs	r2, #32
 800718a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	330c      	adds	r3, #12
 800719a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	e853 3f00 	ldrex	r3, [r3]
 80071a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f023 0310 	bic.w	r3, r3, #16
 80071aa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	330c      	adds	r3, #12
 80071b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80071b8:	61fa      	str	r2, [r7, #28]
 80071ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071bc:	69b9      	ldr	r1, [r7, #24]
 80071be:	69fa      	ldr	r2, [r7, #28]
 80071c0:	e841 2300 	strex	r3, r2, [r1]
 80071c4:	617b      	str	r3, [r7, #20]
   return(result);
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d1e3      	bne.n	8007194 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2202      	movs	r2, #2
 80071d0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80071d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80071d6:	4619      	mov	r1, r3
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 f847 	bl	800726c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80071de:	e023      	b.n	8007228 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80071e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d009      	beq.n	8007200 <HAL_UART_IRQHandler+0x4f4>
 80071ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d003      	beq.n	8007200 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 fa7a 	bl	80076f2 <UART_Transmit_IT>
    return;
 80071fe:	e014      	b.n	800722a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00e      	beq.n	800722a <HAL_UART_IRQHandler+0x51e>
 800720c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007214:	2b00      	cmp	r3, #0
 8007216:	d008      	beq.n	800722a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 faba 	bl	8007792 <UART_EndTransmit_IT>
    return;
 800721e:	e004      	b.n	800722a <HAL_UART_IRQHandler+0x51e>
    return;
 8007220:	bf00      	nop
 8007222:	e002      	b.n	800722a <HAL_UART_IRQHandler+0x51e>
      return;
 8007224:	bf00      	nop
 8007226:	e000      	b.n	800722a <HAL_UART_IRQHandler+0x51e>
      return;
 8007228:	bf00      	nop
  }
}
 800722a:	37e8      	adds	r7, #232	@ 0xe8
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007238:	bf00      	nop
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800724c:	bf00      	nop
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007260:	bf00      	nop
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	460b      	mov	r3, r1
 8007276:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b09c      	sub	sp, #112	@ 0x70
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007290:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800729c:	2b00      	cmp	r3, #0
 800729e:	d172      	bne.n	8007386 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80072a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072a2:	2200      	movs	r2, #0
 80072a4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	330c      	adds	r3, #12
 80072ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072b0:	e853 3f00 	ldrex	r3, [r3]
 80072b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80072b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80072be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	330c      	adds	r3, #12
 80072c4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80072c6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80072c8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80072cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80072ce:	e841 2300 	strex	r3, r2, [r1]
 80072d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80072d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1e5      	bne.n	80072a6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	3314      	adds	r3, #20
 80072e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072e4:	e853 3f00 	ldrex	r3, [r3]
 80072e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80072ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072ec:	f023 0301 	bic.w	r3, r3, #1
 80072f0:	667b      	str	r3, [r7, #100]	@ 0x64
 80072f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	3314      	adds	r3, #20
 80072f8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80072fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80072fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007300:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007302:	e841 2300 	strex	r3, r2, [r1]
 8007306:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007308:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800730a:	2b00      	cmp	r3, #0
 800730c:	d1e5      	bne.n	80072da <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800730e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	3314      	adds	r3, #20
 8007314:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007318:	e853 3f00 	ldrex	r3, [r3]
 800731c:	623b      	str	r3, [r7, #32]
   return(result);
 800731e:	6a3b      	ldr	r3, [r7, #32]
 8007320:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007324:	663b      	str	r3, [r7, #96]	@ 0x60
 8007326:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	3314      	adds	r3, #20
 800732c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800732e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007330:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007332:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007334:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007336:	e841 2300 	strex	r3, r2, [r1]
 800733a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800733c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1e5      	bne.n	800730e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007342:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007344:	2220      	movs	r2, #32
 8007346:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800734a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800734c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800734e:	2b01      	cmp	r3, #1
 8007350:	d119      	bne.n	8007386 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007352:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	330c      	adds	r3, #12
 8007358:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	e853 3f00 	ldrex	r3, [r3]
 8007360:	60fb      	str	r3, [r7, #12]
   return(result);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f023 0310 	bic.w	r3, r3, #16
 8007368:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800736a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	330c      	adds	r3, #12
 8007370:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007372:	61fa      	str	r2, [r7, #28]
 8007374:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007376:	69b9      	ldr	r1, [r7, #24]
 8007378:	69fa      	ldr	r2, [r7, #28]
 800737a:	e841 2300 	strex	r3, r2, [r1]
 800737e:	617b      	str	r3, [r7, #20]
   return(result);
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1e5      	bne.n	8007352 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007386:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007388:	2200      	movs	r2, #0
 800738a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800738c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800738e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007390:	2b01      	cmp	r3, #1
 8007392:	d106      	bne.n	80073a2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007394:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007396:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007398:	4619      	mov	r1, r3
 800739a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800739c:	f7ff ff66 	bl	800726c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80073a0:	e002      	b.n	80073a8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80073a2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80073a4:	f7ff ff44 	bl	8007230 <HAL_UART_RxCpltCallback>
}
 80073a8:	bf00      	nop
 80073aa:	3770      	adds	r7, #112	@ 0x70
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073bc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2201      	movs	r2, #1
 80073c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d108      	bne.n	80073de <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80073d0:	085b      	lsrs	r3, r3, #1
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	4619      	mov	r1, r3
 80073d6:	68f8      	ldr	r0, [r7, #12]
 80073d8:	f7ff ff48 	bl	800726c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80073dc:	e002      	b.n	80073e4 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	f7ff ff30 	bl	8007244 <HAL_UART_RxHalfCpltCallback>
}
 80073e4:	bf00      	nop
 80073e6:	3710      	adds	r7, #16
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80073f4:	2300      	movs	r3, #0
 80073f6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073fc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	695b      	ldr	r3, [r3, #20]
 8007404:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007408:	2b80      	cmp	r3, #128	@ 0x80
 800740a:	bf0c      	ite	eq
 800740c:	2301      	moveq	r3, #1
 800740e:	2300      	movne	r3, #0
 8007410:	b2db      	uxtb	r3, r3
 8007412:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800741a:	b2db      	uxtb	r3, r3
 800741c:	2b21      	cmp	r3, #33	@ 0x21
 800741e:	d108      	bne.n	8007432 <UART_DMAError+0x46>
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d005      	beq.n	8007432 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	2200      	movs	r2, #0
 800742a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800742c:	68b8      	ldr	r0, [r7, #8]
 800742e:	f000 f8c1 	bl	80075b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	695b      	ldr	r3, [r3, #20]
 8007438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800743c:	2b40      	cmp	r3, #64	@ 0x40
 800743e:	bf0c      	ite	eq
 8007440:	2301      	moveq	r3, #1
 8007442:	2300      	movne	r3, #0
 8007444:	b2db      	uxtb	r3, r3
 8007446:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800744e:	b2db      	uxtb	r3, r3
 8007450:	2b22      	cmp	r3, #34	@ 0x22
 8007452:	d108      	bne.n	8007466 <UART_DMAError+0x7a>
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d005      	beq.n	8007466 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	2200      	movs	r2, #0
 800745e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007460:	68b8      	ldr	r0, [r7, #8]
 8007462:	f000 f8cf 	bl	8007604 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800746a:	f043 0210 	orr.w	r2, r3, #16
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007472:	68b8      	ldr	r0, [r7, #8]
 8007474:	f7ff fef0 	bl	8007258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007478:	bf00      	nop
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b098      	sub	sp, #96	@ 0x60
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	4613      	mov	r3, r2
 800748c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800748e:	68ba      	ldr	r2, [r7, #8]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	88fa      	ldrh	r2, [r7, #6]
 8007498:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2200      	movs	r2, #0
 800749e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2222      	movs	r2, #34	@ 0x22
 80074a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074ac:	4a3e      	ldr	r2, [pc, #248]	@ (80075a8 <UART_Start_Receive_DMA+0x128>)
 80074ae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074b4:	4a3d      	ldr	r2, [pc, #244]	@ (80075ac <UART_Start_Receive_DMA+0x12c>)
 80074b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074bc:	4a3c      	ldr	r2, [pc, #240]	@ (80075b0 <UART_Start_Receive_DMA+0x130>)
 80074be:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074c4:	2200      	movs	r2, #0
 80074c6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80074c8:	f107 0308 	add.w	r3, r7, #8
 80074cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	3304      	adds	r3, #4
 80074d8:	4619      	mov	r1, r3
 80074da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	88fb      	ldrh	r3, [r7, #6]
 80074e0:	f7fb fe3c 	bl	800315c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80074e4:	2300      	movs	r3, #0
 80074e6:	613b      	str	r3, [r7, #16]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	613b      	str	r3, [r7, #16]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	613b      	str	r3, [r7, #16]
 80074f8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d019      	beq.n	8007536 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	330c      	adds	r3, #12
 8007508:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800750c:	e853 3f00 	ldrex	r3, [r3]
 8007510:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007512:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007514:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007518:	65bb      	str	r3, [r7, #88]	@ 0x58
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	330c      	adds	r3, #12
 8007520:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007522:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007524:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007526:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007528:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800752a:	e841 2300 	strex	r3, r2, [r1]
 800752e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007530:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1e5      	bne.n	8007502 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	3314      	adds	r3, #20
 800753c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007540:	e853 3f00 	ldrex	r3, [r3]
 8007544:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007548:	f043 0301 	orr.w	r3, r3, #1
 800754c:	657b      	str	r3, [r7, #84]	@ 0x54
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	3314      	adds	r3, #20
 8007554:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007556:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007558:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800755a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800755c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800755e:	e841 2300 	strex	r3, r2, [r1]
 8007562:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007566:	2b00      	cmp	r3, #0
 8007568:	d1e5      	bne.n	8007536 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	3314      	adds	r3, #20
 8007570:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007572:	69bb      	ldr	r3, [r7, #24]
 8007574:	e853 3f00 	ldrex	r3, [r3]
 8007578:	617b      	str	r3, [r7, #20]
   return(result);
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007580:	653b      	str	r3, [r7, #80]	@ 0x50
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	3314      	adds	r3, #20
 8007588:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800758a:	627a      	str	r2, [r7, #36]	@ 0x24
 800758c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758e:	6a39      	ldr	r1, [r7, #32]
 8007590:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007592:	e841 2300 	strex	r3, r2, [r1]
 8007596:	61fb      	str	r3, [r7, #28]
   return(result);
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d1e5      	bne.n	800756a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3760      	adds	r7, #96	@ 0x60
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	08007285 	.word	0x08007285
 80075ac:	080073b1 	.word	0x080073b1
 80075b0:	080073ed 	.word	0x080073ed

080075b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b089      	sub	sp, #36	@ 0x24
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	330c      	adds	r3, #12
 80075c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	e853 3f00 	ldrex	r3, [r3]
 80075ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80075d2:	61fb      	str	r3, [r7, #28]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	330c      	adds	r3, #12
 80075da:	69fa      	ldr	r2, [r7, #28]
 80075dc:	61ba      	str	r2, [r7, #24]
 80075de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e0:	6979      	ldr	r1, [r7, #20]
 80075e2:	69ba      	ldr	r2, [r7, #24]
 80075e4:	e841 2300 	strex	r3, r2, [r1]
 80075e8:	613b      	str	r3, [r7, #16]
   return(result);
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d1e5      	bne.n	80075bc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2220      	movs	r2, #32
 80075f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80075f8:	bf00      	nop
 80075fa:	3724      	adds	r7, #36	@ 0x24
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007604:	b480      	push	{r7}
 8007606:	b095      	sub	sp, #84	@ 0x54
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	330c      	adds	r3, #12
 8007612:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007616:	e853 3f00 	ldrex	r3, [r3]
 800761a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800761c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800761e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007622:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	330c      	adds	r3, #12
 800762a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800762c:	643a      	str	r2, [r7, #64]	@ 0x40
 800762e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007630:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007632:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007634:	e841 2300 	strex	r3, r2, [r1]
 8007638:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800763a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800763c:	2b00      	cmp	r3, #0
 800763e:	d1e5      	bne.n	800760c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	3314      	adds	r3, #20
 8007646:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007648:	6a3b      	ldr	r3, [r7, #32]
 800764a:	e853 3f00 	ldrex	r3, [r3]
 800764e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	f023 0301 	bic.w	r3, r3, #1
 8007656:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	3314      	adds	r3, #20
 800765e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007660:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007662:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007664:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007666:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007668:	e841 2300 	strex	r3, r2, [r1]
 800766c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800766e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007670:	2b00      	cmp	r3, #0
 8007672:	d1e5      	bne.n	8007640 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007678:	2b01      	cmp	r3, #1
 800767a:	d119      	bne.n	80076b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	330c      	adds	r3, #12
 8007682:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	e853 3f00 	ldrex	r3, [r3]
 800768a:	60bb      	str	r3, [r7, #8]
   return(result);
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	f023 0310 	bic.w	r3, r3, #16
 8007692:	647b      	str	r3, [r7, #68]	@ 0x44
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	330c      	adds	r3, #12
 800769a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800769c:	61ba      	str	r2, [r7, #24]
 800769e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a0:	6979      	ldr	r1, [r7, #20]
 80076a2:	69ba      	ldr	r2, [r7, #24]
 80076a4:	e841 2300 	strex	r3, r2, [r1]
 80076a8:	613b      	str	r3, [r7, #16]
   return(result);
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d1e5      	bne.n	800767c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2220      	movs	r2, #32
 80076b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80076be:	bf00      	nop
 80076c0:	3754      	adds	r7, #84	@ 0x54
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr

080076ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b084      	sub	sp, #16
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2200      	movs	r2, #0
 80076dc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2200      	movs	r2, #0
 80076e2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076e4:	68f8      	ldr	r0, [r7, #12]
 80076e6:	f7ff fdb7 	bl	8007258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076ea:	bf00      	nop
 80076ec:	3710      	adds	r7, #16
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80076f2:	b480      	push	{r7}
 80076f4:	b085      	sub	sp, #20
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007700:	b2db      	uxtb	r3, r3
 8007702:	2b21      	cmp	r3, #33	@ 0x21
 8007704:	d13e      	bne.n	8007784 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800770e:	d114      	bne.n	800773a <UART_Transmit_IT+0x48>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d110      	bne.n	800773a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6a1b      	ldr	r3, [r3, #32]
 800771c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	881b      	ldrh	r3, [r3, #0]
 8007722:	461a      	mov	r2, r3
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800772c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a1b      	ldr	r3, [r3, #32]
 8007732:	1c9a      	adds	r2, r3, #2
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	621a      	str	r2, [r3, #32]
 8007738:	e008      	b.n	800774c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a1b      	ldr	r3, [r3, #32]
 800773e:	1c59      	adds	r1, r3, #1
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	6211      	str	r1, [r2, #32]
 8007744:	781a      	ldrb	r2, [r3, #0]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007750:	b29b      	uxth	r3, r3
 8007752:	3b01      	subs	r3, #1
 8007754:	b29b      	uxth	r3, r3
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	4619      	mov	r1, r3
 800775a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800775c:	2b00      	cmp	r3, #0
 800775e:	d10f      	bne.n	8007780 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68da      	ldr	r2, [r3, #12]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800776e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68da      	ldr	r2, [r3, #12]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800777e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007780:	2300      	movs	r3, #0
 8007782:	e000      	b.n	8007786 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007784:	2302      	movs	r3, #2
  }
}
 8007786:	4618      	mov	r0, r3
 8007788:	3714      	adds	r7, #20
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr

08007792 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007792:	b580      	push	{r7, lr}
 8007794:	b082      	sub	sp, #8
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	68da      	ldr	r2, [r3, #12]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2220      	movs	r2, #32
 80077ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f7f9 fb78 	bl	8000ea8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3708      	adds	r7, #8
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b08c      	sub	sp, #48	@ 0x30
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	2b22      	cmp	r3, #34	@ 0x22
 80077d4:	f040 80ae 	bne.w	8007934 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077e0:	d117      	bne.n	8007812 <UART_Receive_IT+0x50>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	691b      	ldr	r3, [r3, #16]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d113      	bne.n	8007812 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80077ea:	2300      	movs	r3, #0
 80077ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007800:	b29a      	uxth	r2, r3
 8007802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007804:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800780a:	1c9a      	adds	r2, r3, #2
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007810:	e026      	b.n	8007860 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007816:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007818:	2300      	movs	r3, #0
 800781a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007824:	d007      	beq.n	8007836 <UART_Receive_IT+0x74>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d10a      	bne.n	8007844 <UART_Receive_IT+0x82>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d106      	bne.n	8007844 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	b2da      	uxtb	r2, r3
 800783e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007840:	701a      	strb	r2, [r3, #0]
 8007842:	e008      	b.n	8007856 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	b2db      	uxtb	r3, r3
 800784c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007850:	b2da      	uxtb	r2, r3
 8007852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007854:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800785a:	1c5a      	adds	r2, r3, #1
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007864:	b29b      	uxth	r3, r3
 8007866:	3b01      	subs	r3, #1
 8007868:	b29b      	uxth	r3, r3
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	4619      	mov	r1, r3
 800786e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007870:	2b00      	cmp	r3, #0
 8007872:	d15d      	bne.n	8007930 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	68da      	ldr	r2, [r3, #12]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f022 0220 	bic.w	r2, r2, #32
 8007882:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	68da      	ldr	r2, [r3, #12]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007892:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	695a      	ldr	r2, [r3, #20]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f022 0201 	bic.w	r2, r2, #1
 80078a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2220      	movs	r2, #32
 80078a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d135      	bne.n	8007926 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	330c      	adds	r3, #12
 80078c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	e853 3f00 	ldrex	r3, [r3]
 80078ce:	613b      	str	r3, [r7, #16]
   return(result);
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	f023 0310 	bic.w	r3, r3, #16
 80078d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	330c      	adds	r3, #12
 80078de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078e0:	623a      	str	r2, [r7, #32]
 80078e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e4:	69f9      	ldr	r1, [r7, #28]
 80078e6:	6a3a      	ldr	r2, [r7, #32]
 80078e8:	e841 2300 	strex	r3, r2, [r1]
 80078ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1e5      	bne.n	80078c0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f003 0310 	and.w	r3, r3, #16
 80078fe:	2b10      	cmp	r3, #16
 8007900:	d10a      	bne.n	8007918 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007902:	2300      	movs	r3, #0
 8007904:	60fb      	str	r3, [r7, #12]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	60fb      	str	r3, [r7, #12]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	60fb      	str	r3, [r7, #12]
 8007916:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800791c:	4619      	mov	r1, r3
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f7ff fca4 	bl	800726c <HAL_UARTEx_RxEventCallback>
 8007924:	e002      	b.n	800792c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f7ff fc82 	bl	8007230 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800792c:	2300      	movs	r3, #0
 800792e:	e002      	b.n	8007936 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007930:	2300      	movs	r3, #0
 8007932:	e000      	b.n	8007936 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007934:	2302      	movs	r3, #2
  }
}
 8007936:	4618      	mov	r0, r3
 8007938:	3730      	adds	r7, #48	@ 0x30
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
	...

08007940 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007944:	b0c0      	sub	sp, #256	@ 0x100
 8007946:	af00      	add	r7, sp, #0
 8007948:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800794c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	691b      	ldr	r3, [r3, #16]
 8007954:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800795c:	68d9      	ldr	r1, [r3, #12]
 800795e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	ea40 0301 	orr.w	r3, r0, r1
 8007968:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800796a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800796e:	689a      	ldr	r2, [r3, #8]
 8007970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007974:	691b      	ldr	r3, [r3, #16]
 8007976:	431a      	orrs	r2, r3
 8007978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800797c:	695b      	ldr	r3, [r3, #20]
 800797e:	431a      	orrs	r2, r3
 8007980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007984:	69db      	ldr	r3, [r3, #28]
 8007986:	4313      	orrs	r3, r2
 8007988:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800798c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007998:	f021 010c 	bic.w	r1, r1, #12
 800799c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80079a6:	430b      	orrs	r3, r1
 80079a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80079aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	695b      	ldr	r3, [r3, #20]
 80079b2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80079b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079ba:	6999      	ldr	r1, [r3, #24]
 80079bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	ea40 0301 	orr.w	r3, r0, r1
 80079c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80079c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	4b8f      	ldr	r3, [pc, #572]	@ (8007c0c <UART_SetConfig+0x2cc>)
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d005      	beq.n	80079e0 <UART_SetConfig+0xa0>
 80079d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	4b8d      	ldr	r3, [pc, #564]	@ (8007c10 <UART_SetConfig+0x2d0>)
 80079dc:	429a      	cmp	r2, r3
 80079de:	d104      	bne.n	80079ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80079e0:	f7fd fafa 	bl	8004fd8 <HAL_RCC_GetPCLK2Freq>
 80079e4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80079e8:	e003      	b.n	80079f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80079ea:	f7fd fae1 	bl	8004fb0 <HAL_RCC_GetPCLK1Freq>
 80079ee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079f6:	69db      	ldr	r3, [r3, #28]
 80079f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079fc:	f040 810c 	bne.w	8007c18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a04:	2200      	movs	r2, #0
 8007a06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007a0a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007a0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007a12:	4622      	mov	r2, r4
 8007a14:	462b      	mov	r3, r5
 8007a16:	1891      	adds	r1, r2, r2
 8007a18:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007a1a:	415b      	adcs	r3, r3
 8007a1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007a22:	4621      	mov	r1, r4
 8007a24:	eb12 0801 	adds.w	r8, r2, r1
 8007a28:	4629      	mov	r1, r5
 8007a2a:	eb43 0901 	adc.w	r9, r3, r1
 8007a2e:	f04f 0200 	mov.w	r2, #0
 8007a32:	f04f 0300 	mov.w	r3, #0
 8007a36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a42:	4690      	mov	r8, r2
 8007a44:	4699      	mov	r9, r3
 8007a46:	4623      	mov	r3, r4
 8007a48:	eb18 0303 	adds.w	r3, r8, r3
 8007a4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007a50:	462b      	mov	r3, r5
 8007a52:	eb49 0303 	adc.w	r3, r9, r3
 8007a56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007a66:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007a6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007a6e:	460b      	mov	r3, r1
 8007a70:	18db      	adds	r3, r3, r3
 8007a72:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a74:	4613      	mov	r3, r2
 8007a76:	eb42 0303 	adc.w	r3, r2, r3
 8007a7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007a80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007a84:	f7f9 f898 	bl	8000bb8 <__aeabi_uldivmod>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	4b61      	ldr	r3, [pc, #388]	@ (8007c14 <UART_SetConfig+0x2d4>)
 8007a8e:	fba3 2302 	umull	r2, r3, r3, r2
 8007a92:	095b      	lsrs	r3, r3, #5
 8007a94:	011c      	lsls	r4, r3, #4
 8007a96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007aa0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007aa4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007aa8:	4642      	mov	r2, r8
 8007aaa:	464b      	mov	r3, r9
 8007aac:	1891      	adds	r1, r2, r2
 8007aae:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007ab0:	415b      	adcs	r3, r3
 8007ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ab4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007ab8:	4641      	mov	r1, r8
 8007aba:	eb12 0a01 	adds.w	sl, r2, r1
 8007abe:	4649      	mov	r1, r9
 8007ac0:	eb43 0b01 	adc.w	fp, r3, r1
 8007ac4:	f04f 0200 	mov.w	r2, #0
 8007ac8:	f04f 0300 	mov.w	r3, #0
 8007acc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ad0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007ad4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ad8:	4692      	mov	sl, r2
 8007ada:	469b      	mov	fp, r3
 8007adc:	4643      	mov	r3, r8
 8007ade:	eb1a 0303 	adds.w	r3, sl, r3
 8007ae2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007ae6:	464b      	mov	r3, r9
 8007ae8:	eb4b 0303 	adc.w	r3, fp, r3
 8007aec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007afc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007b00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007b04:	460b      	mov	r3, r1
 8007b06:	18db      	adds	r3, r3, r3
 8007b08:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	eb42 0303 	adc.w	r3, r2, r3
 8007b10:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007b16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007b1a:	f7f9 f84d 	bl	8000bb8 <__aeabi_uldivmod>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	460b      	mov	r3, r1
 8007b22:	4611      	mov	r1, r2
 8007b24:	4b3b      	ldr	r3, [pc, #236]	@ (8007c14 <UART_SetConfig+0x2d4>)
 8007b26:	fba3 2301 	umull	r2, r3, r3, r1
 8007b2a:	095b      	lsrs	r3, r3, #5
 8007b2c:	2264      	movs	r2, #100	@ 0x64
 8007b2e:	fb02 f303 	mul.w	r3, r2, r3
 8007b32:	1acb      	subs	r3, r1, r3
 8007b34:	00db      	lsls	r3, r3, #3
 8007b36:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007b3a:	4b36      	ldr	r3, [pc, #216]	@ (8007c14 <UART_SetConfig+0x2d4>)
 8007b3c:	fba3 2302 	umull	r2, r3, r3, r2
 8007b40:	095b      	lsrs	r3, r3, #5
 8007b42:	005b      	lsls	r3, r3, #1
 8007b44:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007b48:	441c      	add	r4, r3
 8007b4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b54:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007b58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007b5c:	4642      	mov	r2, r8
 8007b5e:	464b      	mov	r3, r9
 8007b60:	1891      	adds	r1, r2, r2
 8007b62:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007b64:	415b      	adcs	r3, r3
 8007b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007b6c:	4641      	mov	r1, r8
 8007b6e:	1851      	adds	r1, r2, r1
 8007b70:	6339      	str	r1, [r7, #48]	@ 0x30
 8007b72:	4649      	mov	r1, r9
 8007b74:	414b      	adcs	r3, r1
 8007b76:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b78:	f04f 0200 	mov.w	r2, #0
 8007b7c:	f04f 0300 	mov.w	r3, #0
 8007b80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007b84:	4659      	mov	r1, fp
 8007b86:	00cb      	lsls	r3, r1, #3
 8007b88:	4651      	mov	r1, sl
 8007b8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b8e:	4651      	mov	r1, sl
 8007b90:	00ca      	lsls	r2, r1, #3
 8007b92:	4610      	mov	r0, r2
 8007b94:	4619      	mov	r1, r3
 8007b96:	4603      	mov	r3, r0
 8007b98:	4642      	mov	r2, r8
 8007b9a:	189b      	adds	r3, r3, r2
 8007b9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ba0:	464b      	mov	r3, r9
 8007ba2:	460a      	mov	r2, r1
 8007ba4:	eb42 0303 	adc.w	r3, r2, r3
 8007ba8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007bb8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007bbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	18db      	adds	r3, r3, r3
 8007bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	eb42 0303 	adc.w	r3, r2, r3
 8007bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007bce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007bd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007bd6:	f7f8 ffef 	bl	8000bb8 <__aeabi_uldivmod>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	460b      	mov	r3, r1
 8007bde:	4b0d      	ldr	r3, [pc, #52]	@ (8007c14 <UART_SetConfig+0x2d4>)
 8007be0:	fba3 1302 	umull	r1, r3, r3, r2
 8007be4:	095b      	lsrs	r3, r3, #5
 8007be6:	2164      	movs	r1, #100	@ 0x64
 8007be8:	fb01 f303 	mul.w	r3, r1, r3
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	00db      	lsls	r3, r3, #3
 8007bf0:	3332      	adds	r3, #50	@ 0x32
 8007bf2:	4a08      	ldr	r2, [pc, #32]	@ (8007c14 <UART_SetConfig+0x2d4>)
 8007bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8007bf8:	095b      	lsrs	r3, r3, #5
 8007bfa:	f003 0207 	and.w	r2, r3, #7
 8007bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4422      	add	r2, r4
 8007c06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007c08:	e106      	b.n	8007e18 <UART_SetConfig+0x4d8>
 8007c0a:	bf00      	nop
 8007c0c:	40011000 	.word	0x40011000
 8007c10:	40011400 	.word	0x40011400
 8007c14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007c22:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007c26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007c2a:	4642      	mov	r2, r8
 8007c2c:	464b      	mov	r3, r9
 8007c2e:	1891      	adds	r1, r2, r2
 8007c30:	6239      	str	r1, [r7, #32]
 8007c32:	415b      	adcs	r3, r3
 8007c34:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c3a:	4641      	mov	r1, r8
 8007c3c:	1854      	adds	r4, r2, r1
 8007c3e:	4649      	mov	r1, r9
 8007c40:	eb43 0501 	adc.w	r5, r3, r1
 8007c44:	f04f 0200 	mov.w	r2, #0
 8007c48:	f04f 0300 	mov.w	r3, #0
 8007c4c:	00eb      	lsls	r3, r5, #3
 8007c4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c52:	00e2      	lsls	r2, r4, #3
 8007c54:	4614      	mov	r4, r2
 8007c56:	461d      	mov	r5, r3
 8007c58:	4643      	mov	r3, r8
 8007c5a:	18e3      	adds	r3, r4, r3
 8007c5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007c60:	464b      	mov	r3, r9
 8007c62:	eb45 0303 	adc.w	r3, r5, r3
 8007c66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007c76:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007c7a:	f04f 0200 	mov.w	r2, #0
 8007c7e:	f04f 0300 	mov.w	r3, #0
 8007c82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007c86:	4629      	mov	r1, r5
 8007c88:	008b      	lsls	r3, r1, #2
 8007c8a:	4621      	mov	r1, r4
 8007c8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c90:	4621      	mov	r1, r4
 8007c92:	008a      	lsls	r2, r1, #2
 8007c94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007c98:	f7f8 ff8e 	bl	8000bb8 <__aeabi_uldivmod>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	4b60      	ldr	r3, [pc, #384]	@ (8007e24 <UART_SetConfig+0x4e4>)
 8007ca2:	fba3 2302 	umull	r2, r3, r3, r2
 8007ca6:	095b      	lsrs	r3, r3, #5
 8007ca8:	011c      	lsls	r4, r3, #4
 8007caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007cb4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007cb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007cbc:	4642      	mov	r2, r8
 8007cbe:	464b      	mov	r3, r9
 8007cc0:	1891      	adds	r1, r2, r2
 8007cc2:	61b9      	str	r1, [r7, #24]
 8007cc4:	415b      	adcs	r3, r3
 8007cc6:	61fb      	str	r3, [r7, #28]
 8007cc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ccc:	4641      	mov	r1, r8
 8007cce:	1851      	adds	r1, r2, r1
 8007cd0:	6139      	str	r1, [r7, #16]
 8007cd2:	4649      	mov	r1, r9
 8007cd4:	414b      	adcs	r3, r1
 8007cd6:	617b      	str	r3, [r7, #20]
 8007cd8:	f04f 0200 	mov.w	r2, #0
 8007cdc:	f04f 0300 	mov.w	r3, #0
 8007ce0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ce4:	4659      	mov	r1, fp
 8007ce6:	00cb      	lsls	r3, r1, #3
 8007ce8:	4651      	mov	r1, sl
 8007cea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007cee:	4651      	mov	r1, sl
 8007cf0:	00ca      	lsls	r2, r1, #3
 8007cf2:	4610      	mov	r0, r2
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	4642      	mov	r2, r8
 8007cfa:	189b      	adds	r3, r3, r2
 8007cfc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007d00:	464b      	mov	r3, r9
 8007d02:	460a      	mov	r2, r1
 8007d04:	eb42 0303 	adc.w	r3, r2, r3
 8007d08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007d16:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007d18:	f04f 0200 	mov.w	r2, #0
 8007d1c:	f04f 0300 	mov.w	r3, #0
 8007d20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007d24:	4649      	mov	r1, r9
 8007d26:	008b      	lsls	r3, r1, #2
 8007d28:	4641      	mov	r1, r8
 8007d2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d2e:	4641      	mov	r1, r8
 8007d30:	008a      	lsls	r2, r1, #2
 8007d32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007d36:	f7f8 ff3f 	bl	8000bb8 <__aeabi_uldivmod>
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	4611      	mov	r1, r2
 8007d40:	4b38      	ldr	r3, [pc, #224]	@ (8007e24 <UART_SetConfig+0x4e4>)
 8007d42:	fba3 2301 	umull	r2, r3, r3, r1
 8007d46:	095b      	lsrs	r3, r3, #5
 8007d48:	2264      	movs	r2, #100	@ 0x64
 8007d4a:	fb02 f303 	mul.w	r3, r2, r3
 8007d4e:	1acb      	subs	r3, r1, r3
 8007d50:	011b      	lsls	r3, r3, #4
 8007d52:	3332      	adds	r3, #50	@ 0x32
 8007d54:	4a33      	ldr	r2, [pc, #204]	@ (8007e24 <UART_SetConfig+0x4e4>)
 8007d56:	fba2 2303 	umull	r2, r3, r2, r3
 8007d5a:	095b      	lsrs	r3, r3, #5
 8007d5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007d60:	441c      	add	r4, r3
 8007d62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d66:	2200      	movs	r2, #0
 8007d68:	673b      	str	r3, [r7, #112]	@ 0x70
 8007d6a:	677a      	str	r2, [r7, #116]	@ 0x74
 8007d6c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007d70:	4642      	mov	r2, r8
 8007d72:	464b      	mov	r3, r9
 8007d74:	1891      	adds	r1, r2, r2
 8007d76:	60b9      	str	r1, [r7, #8]
 8007d78:	415b      	adcs	r3, r3
 8007d7a:	60fb      	str	r3, [r7, #12]
 8007d7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d80:	4641      	mov	r1, r8
 8007d82:	1851      	adds	r1, r2, r1
 8007d84:	6039      	str	r1, [r7, #0]
 8007d86:	4649      	mov	r1, r9
 8007d88:	414b      	adcs	r3, r1
 8007d8a:	607b      	str	r3, [r7, #4]
 8007d8c:	f04f 0200 	mov.w	r2, #0
 8007d90:	f04f 0300 	mov.w	r3, #0
 8007d94:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007d98:	4659      	mov	r1, fp
 8007d9a:	00cb      	lsls	r3, r1, #3
 8007d9c:	4651      	mov	r1, sl
 8007d9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007da2:	4651      	mov	r1, sl
 8007da4:	00ca      	lsls	r2, r1, #3
 8007da6:	4610      	mov	r0, r2
 8007da8:	4619      	mov	r1, r3
 8007daa:	4603      	mov	r3, r0
 8007dac:	4642      	mov	r2, r8
 8007dae:	189b      	adds	r3, r3, r2
 8007db0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007db2:	464b      	mov	r3, r9
 8007db4:	460a      	mov	r2, r1
 8007db6:	eb42 0303 	adc.w	r3, r2, r3
 8007dba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	663b      	str	r3, [r7, #96]	@ 0x60
 8007dc6:	667a      	str	r2, [r7, #100]	@ 0x64
 8007dc8:	f04f 0200 	mov.w	r2, #0
 8007dcc:	f04f 0300 	mov.w	r3, #0
 8007dd0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007dd4:	4649      	mov	r1, r9
 8007dd6:	008b      	lsls	r3, r1, #2
 8007dd8:	4641      	mov	r1, r8
 8007dda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007dde:	4641      	mov	r1, r8
 8007de0:	008a      	lsls	r2, r1, #2
 8007de2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007de6:	f7f8 fee7 	bl	8000bb8 <__aeabi_uldivmod>
 8007dea:	4602      	mov	r2, r0
 8007dec:	460b      	mov	r3, r1
 8007dee:	4b0d      	ldr	r3, [pc, #52]	@ (8007e24 <UART_SetConfig+0x4e4>)
 8007df0:	fba3 1302 	umull	r1, r3, r3, r2
 8007df4:	095b      	lsrs	r3, r3, #5
 8007df6:	2164      	movs	r1, #100	@ 0x64
 8007df8:	fb01 f303 	mul.w	r3, r1, r3
 8007dfc:	1ad3      	subs	r3, r2, r3
 8007dfe:	011b      	lsls	r3, r3, #4
 8007e00:	3332      	adds	r3, #50	@ 0x32
 8007e02:	4a08      	ldr	r2, [pc, #32]	@ (8007e24 <UART_SetConfig+0x4e4>)
 8007e04:	fba2 2303 	umull	r2, r3, r2, r3
 8007e08:	095b      	lsrs	r3, r3, #5
 8007e0a:	f003 020f 	and.w	r2, r3, #15
 8007e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4422      	add	r2, r4
 8007e16:	609a      	str	r2, [r3, #8]
}
 8007e18:	bf00      	nop
 8007e1a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e24:	51eb851f 	.word	0x51eb851f

08007e28 <__cvt>:
 8007e28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e2c:	ec57 6b10 	vmov	r6, r7, d0
 8007e30:	2f00      	cmp	r7, #0
 8007e32:	460c      	mov	r4, r1
 8007e34:	4619      	mov	r1, r3
 8007e36:	463b      	mov	r3, r7
 8007e38:	bfbb      	ittet	lt
 8007e3a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007e3e:	461f      	movlt	r7, r3
 8007e40:	2300      	movge	r3, #0
 8007e42:	232d      	movlt	r3, #45	@ 0x2d
 8007e44:	700b      	strb	r3, [r1, #0]
 8007e46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e48:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007e4c:	4691      	mov	r9, r2
 8007e4e:	f023 0820 	bic.w	r8, r3, #32
 8007e52:	bfbc      	itt	lt
 8007e54:	4632      	movlt	r2, r6
 8007e56:	4616      	movlt	r6, r2
 8007e58:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007e5c:	d005      	beq.n	8007e6a <__cvt+0x42>
 8007e5e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007e62:	d100      	bne.n	8007e66 <__cvt+0x3e>
 8007e64:	3401      	adds	r4, #1
 8007e66:	2102      	movs	r1, #2
 8007e68:	e000      	b.n	8007e6c <__cvt+0x44>
 8007e6a:	2103      	movs	r1, #3
 8007e6c:	ab03      	add	r3, sp, #12
 8007e6e:	9301      	str	r3, [sp, #4]
 8007e70:	ab02      	add	r3, sp, #8
 8007e72:	9300      	str	r3, [sp, #0]
 8007e74:	ec47 6b10 	vmov	d0, r6, r7
 8007e78:	4653      	mov	r3, sl
 8007e7a:	4622      	mov	r2, r4
 8007e7c:	f000 fe5c 	bl	8008b38 <_dtoa_r>
 8007e80:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007e84:	4605      	mov	r5, r0
 8007e86:	d119      	bne.n	8007ebc <__cvt+0x94>
 8007e88:	f019 0f01 	tst.w	r9, #1
 8007e8c:	d00e      	beq.n	8007eac <__cvt+0x84>
 8007e8e:	eb00 0904 	add.w	r9, r0, r4
 8007e92:	2200      	movs	r2, #0
 8007e94:	2300      	movs	r3, #0
 8007e96:	4630      	mov	r0, r6
 8007e98:	4639      	mov	r1, r7
 8007e9a:	f7f8 fe1d 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e9e:	b108      	cbz	r0, 8007ea4 <__cvt+0x7c>
 8007ea0:	f8cd 900c 	str.w	r9, [sp, #12]
 8007ea4:	2230      	movs	r2, #48	@ 0x30
 8007ea6:	9b03      	ldr	r3, [sp, #12]
 8007ea8:	454b      	cmp	r3, r9
 8007eaa:	d31e      	bcc.n	8007eea <__cvt+0xc2>
 8007eac:	9b03      	ldr	r3, [sp, #12]
 8007eae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007eb0:	1b5b      	subs	r3, r3, r5
 8007eb2:	4628      	mov	r0, r5
 8007eb4:	6013      	str	r3, [r2, #0]
 8007eb6:	b004      	add	sp, #16
 8007eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ebc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007ec0:	eb00 0904 	add.w	r9, r0, r4
 8007ec4:	d1e5      	bne.n	8007e92 <__cvt+0x6a>
 8007ec6:	7803      	ldrb	r3, [r0, #0]
 8007ec8:	2b30      	cmp	r3, #48	@ 0x30
 8007eca:	d10a      	bne.n	8007ee2 <__cvt+0xba>
 8007ecc:	2200      	movs	r2, #0
 8007ece:	2300      	movs	r3, #0
 8007ed0:	4630      	mov	r0, r6
 8007ed2:	4639      	mov	r1, r7
 8007ed4:	f7f8 fe00 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ed8:	b918      	cbnz	r0, 8007ee2 <__cvt+0xba>
 8007eda:	f1c4 0401 	rsb	r4, r4, #1
 8007ede:	f8ca 4000 	str.w	r4, [sl]
 8007ee2:	f8da 3000 	ldr.w	r3, [sl]
 8007ee6:	4499      	add	r9, r3
 8007ee8:	e7d3      	b.n	8007e92 <__cvt+0x6a>
 8007eea:	1c59      	adds	r1, r3, #1
 8007eec:	9103      	str	r1, [sp, #12]
 8007eee:	701a      	strb	r2, [r3, #0]
 8007ef0:	e7d9      	b.n	8007ea6 <__cvt+0x7e>

08007ef2 <__exponent>:
 8007ef2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ef4:	2900      	cmp	r1, #0
 8007ef6:	bfba      	itte	lt
 8007ef8:	4249      	neglt	r1, r1
 8007efa:	232d      	movlt	r3, #45	@ 0x2d
 8007efc:	232b      	movge	r3, #43	@ 0x2b
 8007efe:	2909      	cmp	r1, #9
 8007f00:	7002      	strb	r2, [r0, #0]
 8007f02:	7043      	strb	r3, [r0, #1]
 8007f04:	dd29      	ble.n	8007f5a <__exponent+0x68>
 8007f06:	f10d 0307 	add.w	r3, sp, #7
 8007f0a:	461d      	mov	r5, r3
 8007f0c:	270a      	movs	r7, #10
 8007f0e:	461a      	mov	r2, r3
 8007f10:	fbb1 f6f7 	udiv	r6, r1, r7
 8007f14:	fb07 1416 	mls	r4, r7, r6, r1
 8007f18:	3430      	adds	r4, #48	@ 0x30
 8007f1a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007f1e:	460c      	mov	r4, r1
 8007f20:	2c63      	cmp	r4, #99	@ 0x63
 8007f22:	f103 33ff 	add.w	r3, r3, #4294967295
 8007f26:	4631      	mov	r1, r6
 8007f28:	dcf1      	bgt.n	8007f0e <__exponent+0x1c>
 8007f2a:	3130      	adds	r1, #48	@ 0x30
 8007f2c:	1e94      	subs	r4, r2, #2
 8007f2e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007f32:	1c41      	adds	r1, r0, #1
 8007f34:	4623      	mov	r3, r4
 8007f36:	42ab      	cmp	r3, r5
 8007f38:	d30a      	bcc.n	8007f50 <__exponent+0x5e>
 8007f3a:	f10d 0309 	add.w	r3, sp, #9
 8007f3e:	1a9b      	subs	r3, r3, r2
 8007f40:	42ac      	cmp	r4, r5
 8007f42:	bf88      	it	hi
 8007f44:	2300      	movhi	r3, #0
 8007f46:	3302      	adds	r3, #2
 8007f48:	4403      	add	r3, r0
 8007f4a:	1a18      	subs	r0, r3, r0
 8007f4c:	b003      	add	sp, #12
 8007f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f50:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007f54:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007f58:	e7ed      	b.n	8007f36 <__exponent+0x44>
 8007f5a:	2330      	movs	r3, #48	@ 0x30
 8007f5c:	3130      	adds	r1, #48	@ 0x30
 8007f5e:	7083      	strb	r3, [r0, #2]
 8007f60:	70c1      	strb	r1, [r0, #3]
 8007f62:	1d03      	adds	r3, r0, #4
 8007f64:	e7f1      	b.n	8007f4a <__exponent+0x58>
	...

08007f68 <_printf_float>:
 8007f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f6c:	b08d      	sub	sp, #52	@ 0x34
 8007f6e:	460c      	mov	r4, r1
 8007f70:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007f74:	4616      	mov	r6, r2
 8007f76:	461f      	mov	r7, r3
 8007f78:	4605      	mov	r5, r0
 8007f7a:	f000 fcdb 	bl	8008934 <_localeconv_r>
 8007f7e:	6803      	ldr	r3, [r0, #0]
 8007f80:	9304      	str	r3, [sp, #16]
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7f8 f97c 	bl	8000280 <strlen>
 8007f88:	2300      	movs	r3, #0
 8007f8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f8c:	f8d8 3000 	ldr.w	r3, [r8]
 8007f90:	9005      	str	r0, [sp, #20]
 8007f92:	3307      	adds	r3, #7
 8007f94:	f023 0307 	bic.w	r3, r3, #7
 8007f98:	f103 0208 	add.w	r2, r3, #8
 8007f9c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007fa0:	f8d4 b000 	ldr.w	fp, [r4]
 8007fa4:	f8c8 2000 	str.w	r2, [r8]
 8007fa8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007fac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007fb0:	9307      	str	r3, [sp, #28]
 8007fb2:	f8cd 8018 	str.w	r8, [sp, #24]
 8007fb6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007fba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007fbe:	4b9c      	ldr	r3, [pc, #624]	@ (8008230 <_printf_float+0x2c8>)
 8007fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8007fc4:	f7f8 fdba 	bl	8000b3c <__aeabi_dcmpun>
 8007fc8:	bb70      	cbnz	r0, 8008028 <_printf_float+0xc0>
 8007fca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007fce:	4b98      	ldr	r3, [pc, #608]	@ (8008230 <_printf_float+0x2c8>)
 8007fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8007fd4:	f7f8 fd94 	bl	8000b00 <__aeabi_dcmple>
 8007fd8:	bb30      	cbnz	r0, 8008028 <_printf_float+0xc0>
 8007fda:	2200      	movs	r2, #0
 8007fdc:	2300      	movs	r3, #0
 8007fde:	4640      	mov	r0, r8
 8007fe0:	4649      	mov	r1, r9
 8007fe2:	f7f8 fd83 	bl	8000aec <__aeabi_dcmplt>
 8007fe6:	b110      	cbz	r0, 8007fee <_printf_float+0x86>
 8007fe8:	232d      	movs	r3, #45	@ 0x2d
 8007fea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007fee:	4a91      	ldr	r2, [pc, #580]	@ (8008234 <_printf_float+0x2cc>)
 8007ff0:	4b91      	ldr	r3, [pc, #580]	@ (8008238 <_printf_float+0x2d0>)
 8007ff2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007ff6:	bf94      	ite	ls
 8007ff8:	4690      	movls	r8, r2
 8007ffa:	4698      	movhi	r8, r3
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	6123      	str	r3, [r4, #16]
 8008000:	f02b 0304 	bic.w	r3, fp, #4
 8008004:	6023      	str	r3, [r4, #0]
 8008006:	f04f 0900 	mov.w	r9, #0
 800800a:	9700      	str	r7, [sp, #0]
 800800c:	4633      	mov	r3, r6
 800800e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008010:	4621      	mov	r1, r4
 8008012:	4628      	mov	r0, r5
 8008014:	f000 f9d2 	bl	80083bc <_printf_common>
 8008018:	3001      	adds	r0, #1
 800801a:	f040 808d 	bne.w	8008138 <_printf_float+0x1d0>
 800801e:	f04f 30ff 	mov.w	r0, #4294967295
 8008022:	b00d      	add	sp, #52	@ 0x34
 8008024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008028:	4642      	mov	r2, r8
 800802a:	464b      	mov	r3, r9
 800802c:	4640      	mov	r0, r8
 800802e:	4649      	mov	r1, r9
 8008030:	f7f8 fd84 	bl	8000b3c <__aeabi_dcmpun>
 8008034:	b140      	cbz	r0, 8008048 <_printf_float+0xe0>
 8008036:	464b      	mov	r3, r9
 8008038:	2b00      	cmp	r3, #0
 800803a:	bfbc      	itt	lt
 800803c:	232d      	movlt	r3, #45	@ 0x2d
 800803e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008042:	4a7e      	ldr	r2, [pc, #504]	@ (800823c <_printf_float+0x2d4>)
 8008044:	4b7e      	ldr	r3, [pc, #504]	@ (8008240 <_printf_float+0x2d8>)
 8008046:	e7d4      	b.n	8007ff2 <_printf_float+0x8a>
 8008048:	6863      	ldr	r3, [r4, #4]
 800804a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800804e:	9206      	str	r2, [sp, #24]
 8008050:	1c5a      	adds	r2, r3, #1
 8008052:	d13b      	bne.n	80080cc <_printf_float+0x164>
 8008054:	2306      	movs	r3, #6
 8008056:	6063      	str	r3, [r4, #4]
 8008058:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800805c:	2300      	movs	r3, #0
 800805e:	6022      	str	r2, [r4, #0]
 8008060:	9303      	str	r3, [sp, #12]
 8008062:	ab0a      	add	r3, sp, #40	@ 0x28
 8008064:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008068:	ab09      	add	r3, sp, #36	@ 0x24
 800806a:	9300      	str	r3, [sp, #0]
 800806c:	6861      	ldr	r1, [r4, #4]
 800806e:	ec49 8b10 	vmov	d0, r8, r9
 8008072:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008076:	4628      	mov	r0, r5
 8008078:	f7ff fed6 	bl	8007e28 <__cvt>
 800807c:	9b06      	ldr	r3, [sp, #24]
 800807e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008080:	2b47      	cmp	r3, #71	@ 0x47
 8008082:	4680      	mov	r8, r0
 8008084:	d129      	bne.n	80080da <_printf_float+0x172>
 8008086:	1cc8      	adds	r0, r1, #3
 8008088:	db02      	blt.n	8008090 <_printf_float+0x128>
 800808a:	6863      	ldr	r3, [r4, #4]
 800808c:	4299      	cmp	r1, r3
 800808e:	dd41      	ble.n	8008114 <_printf_float+0x1ac>
 8008090:	f1aa 0a02 	sub.w	sl, sl, #2
 8008094:	fa5f fa8a 	uxtb.w	sl, sl
 8008098:	3901      	subs	r1, #1
 800809a:	4652      	mov	r2, sl
 800809c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80080a0:	9109      	str	r1, [sp, #36]	@ 0x24
 80080a2:	f7ff ff26 	bl	8007ef2 <__exponent>
 80080a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80080a8:	1813      	adds	r3, r2, r0
 80080aa:	2a01      	cmp	r2, #1
 80080ac:	4681      	mov	r9, r0
 80080ae:	6123      	str	r3, [r4, #16]
 80080b0:	dc02      	bgt.n	80080b8 <_printf_float+0x150>
 80080b2:	6822      	ldr	r2, [r4, #0]
 80080b4:	07d2      	lsls	r2, r2, #31
 80080b6:	d501      	bpl.n	80080bc <_printf_float+0x154>
 80080b8:	3301      	adds	r3, #1
 80080ba:	6123      	str	r3, [r4, #16]
 80080bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d0a2      	beq.n	800800a <_printf_float+0xa2>
 80080c4:	232d      	movs	r3, #45	@ 0x2d
 80080c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080ca:	e79e      	b.n	800800a <_printf_float+0xa2>
 80080cc:	9a06      	ldr	r2, [sp, #24]
 80080ce:	2a47      	cmp	r2, #71	@ 0x47
 80080d0:	d1c2      	bne.n	8008058 <_printf_float+0xf0>
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d1c0      	bne.n	8008058 <_printf_float+0xf0>
 80080d6:	2301      	movs	r3, #1
 80080d8:	e7bd      	b.n	8008056 <_printf_float+0xee>
 80080da:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80080de:	d9db      	bls.n	8008098 <_printf_float+0x130>
 80080e0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80080e4:	d118      	bne.n	8008118 <_printf_float+0x1b0>
 80080e6:	2900      	cmp	r1, #0
 80080e8:	6863      	ldr	r3, [r4, #4]
 80080ea:	dd0b      	ble.n	8008104 <_printf_float+0x19c>
 80080ec:	6121      	str	r1, [r4, #16]
 80080ee:	b913      	cbnz	r3, 80080f6 <_printf_float+0x18e>
 80080f0:	6822      	ldr	r2, [r4, #0]
 80080f2:	07d0      	lsls	r0, r2, #31
 80080f4:	d502      	bpl.n	80080fc <_printf_float+0x194>
 80080f6:	3301      	adds	r3, #1
 80080f8:	440b      	add	r3, r1
 80080fa:	6123      	str	r3, [r4, #16]
 80080fc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80080fe:	f04f 0900 	mov.w	r9, #0
 8008102:	e7db      	b.n	80080bc <_printf_float+0x154>
 8008104:	b913      	cbnz	r3, 800810c <_printf_float+0x1a4>
 8008106:	6822      	ldr	r2, [r4, #0]
 8008108:	07d2      	lsls	r2, r2, #31
 800810a:	d501      	bpl.n	8008110 <_printf_float+0x1a8>
 800810c:	3302      	adds	r3, #2
 800810e:	e7f4      	b.n	80080fa <_printf_float+0x192>
 8008110:	2301      	movs	r3, #1
 8008112:	e7f2      	b.n	80080fa <_printf_float+0x192>
 8008114:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008118:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800811a:	4299      	cmp	r1, r3
 800811c:	db05      	blt.n	800812a <_printf_float+0x1c2>
 800811e:	6823      	ldr	r3, [r4, #0]
 8008120:	6121      	str	r1, [r4, #16]
 8008122:	07d8      	lsls	r0, r3, #31
 8008124:	d5ea      	bpl.n	80080fc <_printf_float+0x194>
 8008126:	1c4b      	adds	r3, r1, #1
 8008128:	e7e7      	b.n	80080fa <_printf_float+0x192>
 800812a:	2900      	cmp	r1, #0
 800812c:	bfd4      	ite	le
 800812e:	f1c1 0202 	rsble	r2, r1, #2
 8008132:	2201      	movgt	r2, #1
 8008134:	4413      	add	r3, r2
 8008136:	e7e0      	b.n	80080fa <_printf_float+0x192>
 8008138:	6823      	ldr	r3, [r4, #0]
 800813a:	055a      	lsls	r2, r3, #21
 800813c:	d407      	bmi.n	800814e <_printf_float+0x1e6>
 800813e:	6923      	ldr	r3, [r4, #16]
 8008140:	4642      	mov	r2, r8
 8008142:	4631      	mov	r1, r6
 8008144:	4628      	mov	r0, r5
 8008146:	47b8      	blx	r7
 8008148:	3001      	adds	r0, #1
 800814a:	d12b      	bne.n	80081a4 <_printf_float+0x23c>
 800814c:	e767      	b.n	800801e <_printf_float+0xb6>
 800814e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008152:	f240 80dd 	bls.w	8008310 <_printf_float+0x3a8>
 8008156:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800815a:	2200      	movs	r2, #0
 800815c:	2300      	movs	r3, #0
 800815e:	f7f8 fcbb 	bl	8000ad8 <__aeabi_dcmpeq>
 8008162:	2800      	cmp	r0, #0
 8008164:	d033      	beq.n	80081ce <_printf_float+0x266>
 8008166:	4a37      	ldr	r2, [pc, #220]	@ (8008244 <_printf_float+0x2dc>)
 8008168:	2301      	movs	r3, #1
 800816a:	4631      	mov	r1, r6
 800816c:	4628      	mov	r0, r5
 800816e:	47b8      	blx	r7
 8008170:	3001      	adds	r0, #1
 8008172:	f43f af54 	beq.w	800801e <_printf_float+0xb6>
 8008176:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800817a:	4543      	cmp	r3, r8
 800817c:	db02      	blt.n	8008184 <_printf_float+0x21c>
 800817e:	6823      	ldr	r3, [r4, #0]
 8008180:	07d8      	lsls	r0, r3, #31
 8008182:	d50f      	bpl.n	80081a4 <_printf_float+0x23c>
 8008184:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008188:	4631      	mov	r1, r6
 800818a:	4628      	mov	r0, r5
 800818c:	47b8      	blx	r7
 800818e:	3001      	adds	r0, #1
 8008190:	f43f af45 	beq.w	800801e <_printf_float+0xb6>
 8008194:	f04f 0900 	mov.w	r9, #0
 8008198:	f108 38ff 	add.w	r8, r8, #4294967295
 800819c:	f104 0a1a 	add.w	sl, r4, #26
 80081a0:	45c8      	cmp	r8, r9
 80081a2:	dc09      	bgt.n	80081b8 <_printf_float+0x250>
 80081a4:	6823      	ldr	r3, [r4, #0]
 80081a6:	079b      	lsls	r3, r3, #30
 80081a8:	f100 8103 	bmi.w	80083b2 <_printf_float+0x44a>
 80081ac:	68e0      	ldr	r0, [r4, #12]
 80081ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081b0:	4298      	cmp	r0, r3
 80081b2:	bfb8      	it	lt
 80081b4:	4618      	movlt	r0, r3
 80081b6:	e734      	b.n	8008022 <_printf_float+0xba>
 80081b8:	2301      	movs	r3, #1
 80081ba:	4652      	mov	r2, sl
 80081bc:	4631      	mov	r1, r6
 80081be:	4628      	mov	r0, r5
 80081c0:	47b8      	blx	r7
 80081c2:	3001      	adds	r0, #1
 80081c4:	f43f af2b 	beq.w	800801e <_printf_float+0xb6>
 80081c8:	f109 0901 	add.w	r9, r9, #1
 80081cc:	e7e8      	b.n	80081a0 <_printf_float+0x238>
 80081ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	dc39      	bgt.n	8008248 <_printf_float+0x2e0>
 80081d4:	4a1b      	ldr	r2, [pc, #108]	@ (8008244 <_printf_float+0x2dc>)
 80081d6:	2301      	movs	r3, #1
 80081d8:	4631      	mov	r1, r6
 80081da:	4628      	mov	r0, r5
 80081dc:	47b8      	blx	r7
 80081de:	3001      	adds	r0, #1
 80081e0:	f43f af1d 	beq.w	800801e <_printf_float+0xb6>
 80081e4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80081e8:	ea59 0303 	orrs.w	r3, r9, r3
 80081ec:	d102      	bne.n	80081f4 <_printf_float+0x28c>
 80081ee:	6823      	ldr	r3, [r4, #0]
 80081f0:	07d9      	lsls	r1, r3, #31
 80081f2:	d5d7      	bpl.n	80081a4 <_printf_float+0x23c>
 80081f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081f8:	4631      	mov	r1, r6
 80081fa:	4628      	mov	r0, r5
 80081fc:	47b8      	blx	r7
 80081fe:	3001      	adds	r0, #1
 8008200:	f43f af0d 	beq.w	800801e <_printf_float+0xb6>
 8008204:	f04f 0a00 	mov.w	sl, #0
 8008208:	f104 0b1a 	add.w	fp, r4, #26
 800820c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800820e:	425b      	negs	r3, r3
 8008210:	4553      	cmp	r3, sl
 8008212:	dc01      	bgt.n	8008218 <_printf_float+0x2b0>
 8008214:	464b      	mov	r3, r9
 8008216:	e793      	b.n	8008140 <_printf_float+0x1d8>
 8008218:	2301      	movs	r3, #1
 800821a:	465a      	mov	r2, fp
 800821c:	4631      	mov	r1, r6
 800821e:	4628      	mov	r0, r5
 8008220:	47b8      	blx	r7
 8008222:	3001      	adds	r0, #1
 8008224:	f43f aefb 	beq.w	800801e <_printf_float+0xb6>
 8008228:	f10a 0a01 	add.w	sl, sl, #1
 800822c:	e7ee      	b.n	800820c <_printf_float+0x2a4>
 800822e:	bf00      	nop
 8008230:	7fefffff 	.word	0x7fefffff
 8008234:	0800abe0 	.word	0x0800abe0
 8008238:	0800abe4 	.word	0x0800abe4
 800823c:	0800abe8 	.word	0x0800abe8
 8008240:	0800abec 	.word	0x0800abec
 8008244:	0800abf0 	.word	0x0800abf0
 8008248:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800824a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800824e:	4553      	cmp	r3, sl
 8008250:	bfa8      	it	ge
 8008252:	4653      	movge	r3, sl
 8008254:	2b00      	cmp	r3, #0
 8008256:	4699      	mov	r9, r3
 8008258:	dc36      	bgt.n	80082c8 <_printf_float+0x360>
 800825a:	f04f 0b00 	mov.w	fp, #0
 800825e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008262:	f104 021a 	add.w	r2, r4, #26
 8008266:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008268:	9306      	str	r3, [sp, #24]
 800826a:	eba3 0309 	sub.w	r3, r3, r9
 800826e:	455b      	cmp	r3, fp
 8008270:	dc31      	bgt.n	80082d6 <_printf_float+0x36e>
 8008272:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008274:	459a      	cmp	sl, r3
 8008276:	dc3a      	bgt.n	80082ee <_printf_float+0x386>
 8008278:	6823      	ldr	r3, [r4, #0]
 800827a:	07da      	lsls	r2, r3, #31
 800827c:	d437      	bmi.n	80082ee <_printf_float+0x386>
 800827e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008280:	ebaa 0903 	sub.w	r9, sl, r3
 8008284:	9b06      	ldr	r3, [sp, #24]
 8008286:	ebaa 0303 	sub.w	r3, sl, r3
 800828a:	4599      	cmp	r9, r3
 800828c:	bfa8      	it	ge
 800828e:	4699      	movge	r9, r3
 8008290:	f1b9 0f00 	cmp.w	r9, #0
 8008294:	dc33      	bgt.n	80082fe <_printf_float+0x396>
 8008296:	f04f 0800 	mov.w	r8, #0
 800829a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800829e:	f104 0b1a 	add.w	fp, r4, #26
 80082a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082a4:	ebaa 0303 	sub.w	r3, sl, r3
 80082a8:	eba3 0309 	sub.w	r3, r3, r9
 80082ac:	4543      	cmp	r3, r8
 80082ae:	f77f af79 	ble.w	80081a4 <_printf_float+0x23c>
 80082b2:	2301      	movs	r3, #1
 80082b4:	465a      	mov	r2, fp
 80082b6:	4631      	mov	r1, r6
 80082b8:	4628      	mov	r0, r5
 80082ba:	47b8      	blx	r7
 80082bc:	3001      	adds	r0, #1
 80082be:	f43f aeae 	beq.w	800801e <_printf_float+0xb6>
 80082c2:	f108 0801 	add.w	r8, r8, #1
 80082c6:	e7ec      	b.n	80082a2 <_printf_float+0x33a>
 80082c8:	4642      	mov	r2, r8
 80082ca:	4631      	mov	r1, r6
 80082cc:	4628      	mov	r0, r5
 80082ce:	47b8      	blx	r7
 80082d0:	3001      	adds	r0, #1
 80082d2:	d1c2      	bne.n	800825a <_printf_float+0x2f2>
 80082d4:	e6a3      	b.n	800801e <_printf_float+0xb6>
 80082d6:	2301      	movs	r3, #1
 80082d8:	4631      	mov	r1, r6
 80082da:	4628      	mov	r0, r5
 80082dc:	9206      	str	r2, [sp, #24]
 80082de:	47b8      	blx	r7
 80082e0:	3001      	adds	r0, #1
 80082e2:	f43f ae9c 	beq.w	800801e <_printf_float+0xb6>
 80082e6:	9a06      	ldr	r2, [sp, #24]
 80082e8:	f10b 0b01 	add.w	fp, fp, #1
 80082ec:	e7bb      	b.n	8008266 <_printf_float+0x2fe>
 80082ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082f2:	4631      	mov	r1, r6
 80082f4:	4628      	mov	r0, r5
 80082f6:	47b8      	blx	r7
 80082f8:	3001      	adds	r0, #1
 80082fa:	d1c0      	bne.n	800827e <_printf_float+0x316>
 80082fc:	e68f      	b.n	800801e <_printf_float+0xb6>
 80082fe:	9a06      	ldr	r2, [sp, #24]
 8008300:	464b      	mov	r3, r9
 8008302:	4442      	add	r2, r8
 8008304:	4631      	mov	r1, r6
 8008306:	4628      	mov	r0, r5
 8008308:	47b8      	blx	r7
 800830a:	3001      	adds	r0, #1
 800830c:	d1c3      	bne.n	8008296 <_printf_float+0x32e>
 800830e:	e686      	b.n	800801e <_printf_float+0xb6>
 8008310:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008314:	f1ba 0f01 	cmp.w	sl, #1
 8008318:	dc01      	bgt.n	800831e <_printf_float+0x3b6>
 800831a:	07db      	lsls	r3, r3, #31
 800831c:	d536      	bpl.n	800838c <_printf_float+0x424>
 800831e:	2301      	movs	r3, #1
 8008320:	4642      	mov	r2, r8
 8008322:	4631      	mov	r1, r6
 8008324:	4628      	mov	r0, r5
 8008326:	47b8      	blx	r7
 8008328:	3001      	adds	r0, #1
 800832a:	f43f ae78 	beq.w	800801e <_printf_float+0xb6>
 800832e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008332:	4631      	mov	r1, r6
 8008334:	4628      	mov	r0, r5
 8008336:	47b8      	blx	r7
 8008338:	3001      	adds	r0, #1
 800833a:	f43f ae70 	beq.w	800801e <_printf_float+0xb6>
 800833e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008342:	2200      	movs	r2, #0
 8008344:	2300      	movs	r3, #0
 8008346:	f10a 3aff 	add.w	sl, sl, #4294967295
 800834a:	f7f8 fbc5 	bl	8000ad8 <__aeabi_dcmpeq>
 800834e:	b9c0      	cbnz	r0, 8008382 <_printf_float+0x41a>
 8008350:	4653      	mov	r3, sl
 8008352:	f108 0201 	add.w	r2, r8, #1
 8008356:	4631      	mov	r1, r6
 8008358:	4628      	mov	r0, r5
 800835a:	47b8      	blx	r7
 800835c:	3001      	adds	r0, #1
 800835e:	d10c      	bne.n	800837a <_printf_float+0x412>
 8008360:	e65d      	b.n	800801e <_printf_float+0xb6>
 8008362:	2301      	movs	r3, #1
 8008364:	465a      	mov	r2, fp
 8008366:	4631      	mov	r1, r6
 8008368:	4628      	mov	r0, r5
 800836a:	47b8      	blx	r7
 800836c:	3001      	adds	r0, #1
 800836e:	f43f ae56 	beq.w	800801e <_printf_float+0xb6>
 8008372:	f108 0801 	add.w	r8, r8, #1
 8008376:	45d0      	cmp	r8, sl
 8008378:	dbf3      	blt.n	8008362 <_printf_float+0x3fa>
 800837a:	464b      	mov	r3, r9
 800837c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008380:	e6df      	b.n	8008142 <_printf_float+0x1da>
 8008382:	f04f 0800 	mov.w	r8, #0
 8008386:	f104 0b1a 	add.w	fp, r4, #26
 800838a:	e7f4      	b.n	8008376 <_printf_float+0x40e>
 800838c:	2301      	movs	r3, #1
 800838e:	4642      	mov	r2, r8
 8008390:	e7e1      	b.n	8008356 <_printf_float+0x3ee>
 8008392:	2301      	movs	r3, #1
 8008394:	464a      	mov	r2, r9
 8008396:	4631      	mov	r1, r6
 8008398:	4628      	mov	r0, r5
 800839a:	47b8      	blx	r7
 800839c:	3001      	adds	r0, #1
 800839e:	f43f ae3e 	beq.w	800801e <_printf_float+0xb6>
 80083a2:	f108 0801 	add.w	r8, r8, #1
 80083a6:	68e3      	ldr	r3, [r4, #12]
 80083a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80083aa:	1a5b      	subs	r3, r3, r1
 80083ac:	4543      	cmp	r3, r8
 80083ae:	dcf0      	bgt.n	8008392 <_printf_float+0x42a>
 80083b0:	e6fc      	b.n	80081ac <_printf_float+0x244>
 80083b2:	f04f 0800 	mov.w	r8, #0
 80083b6:	f104 0919 	add.w	r9, r4, #25
 80083ba:	e7f4      	b.n	80083a6 <_printf_float+0x43e>

080083bc <_printf_common>:
 80083bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083c0:	4616      	mov	r6, r2
 80083c2:	4698      	mov	r8, r3
 80083c4:	688a      	ldr	r2, [r1, #8]
 80083c6:	690b      	ldr	r3, [r1, #16]
 80083c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80083cc:	4293      	cmp	r3, r2
 80083ce:	bfb8      	it	lt
 80083d0:	4613      	movlt	r3, r2
 80083d2:	6033      	str	r3, [r6, #0]
 80083d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80083d8:	4607      	mov	r7, r0
 80083da:	460c      	mov	r4, r1
 80083dc:	b10a      	cbz	r2, 80083e2 <_printf_common+0x26>
 80083de:	3301      	adds	r3, #1
 80083e0:	6033      	str	r3, [r6, #0]
 80083e2:	6823      	ldr	r3, [r4, #0]
 80083e4:	0699      	lsls	r1, r3, #26
 80083e6:	bf42      	ittt	mi
 80083e8:	6833      	ldrmi	r3, [r6, #0]
 80083ea:	3302      	addmi	r3, #2
 80083ec:	6033      	strmi	r3, [r6, #0]
 80083ee:	6825      	ldr	r5, [r4, #0]
 80083f0:	f015 0506 	ands.w	r5, r5, #6
 80083f4:	d106      	bne.n	8008404 <_printf_common+0x48>
 80083f6:	f104 0a19 	add.w	sl, r4, #25
 80083fa:	68e3      	ldr	r3, [r4, #12]
 80083fc:	6832      	ldr	r2, [r6, #0]
 80083fe:	1a9b      	subs	r3, r3, r2
 8008400:	42ab      	cmp	r3, r5
 8008402:	dc26      	bgt.n	8008452 <_printf_common+0x96>
 8008404:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008408:	6822      	ldr	r2, [r4, #0]
 800840a:	3b00      	subs	r3, #0
 800840c:	bf18      	it	ne
 800840e:	2301      	movne	r3, #1
 8008410:	0692      	lsls	r2, r2, #26
 8008412:	d42b      	bmi.n	800846c <_printf_common+0xb0>
 8008414:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008418:	4641      	mov	r1, r8
 800841a:	4638      	mov	r0, r7
 800841c:	47c8      	blx	r9
 800841e:	3001      	adds	r0, #1
 8008420:	d01e      	beq.n	8008460 <_printf_common+0xa4>
 8008422:	6823      	ldr	r3, [r4, #0]
 8008424:	6922      	ldr	r2, [r4, #16]
 8008426:	f003 0306 	and.w	r3, r3, #6
 800842a:	2b04      	cmp	r3, #4
 800842c:	bf02      	ittt	eq
 800842e:	68e5      	ldreq	r5, [r4, #12]
 8008430:	6833      	ldreq	r3, [r6, #0]
 8008432:	1aed      	subeq	r5, r5, r3
 8008434:	68a3      	ldr	r3, [r4, #8]
 8008436:	bf0c      	ite	eq
 8008438:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800843c:	2500      	movne	r5, #0
 800843e:	4293      	cmp	r3, r2
 8008440:	bfc4      	itt	gt
 8008442:	1a9b      	subgt	r3, r3, r2
 8008444:	18ed      	addgt	r5, r5, r3
 8008446:	2600      	movs	r6, #0
 8008448:	341a      	adds	r4, #26
 800844a:	42b5      	cmp	r5, r6
 800844c:	d11a      	bne.n	8008484 <_printf_common+0xc8>
 800844e:	2000      	movs	r0, #0
 8008450:	e008      	b.n	8008464 <_printf_common+0xa8>
 8008452:	2301      	movs	r3, #1
 8008454:	4652      	mov	r2, sl
 8008456:	4641      	mov	r1, r8
 8008458:	4638      	mov	r0, r7
 800845a:	47c8      	blx	r9
 800845c:	3001      	adds	r0, #1
 800845e:	d103      	bne.n	8008468 <_printf_common+0xac>
 8008460:	f04f 30ff 	mov.w	r0, #4294967295
 8008464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008468:	3501      	adds	r5, #1
 800846a:	e7c6      	b.n	80083fa <_printf_common+0x3e>
 800846c:	18e1      	adds	r1, r4, r3
 800846e:	1c5a      	adds	r2, r3, #1
 8008470:	2030      	movs	r0, #48	@ 0x30
 8008472:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008476:	4422      	add	r2, r4
 8008478:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800847c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008480:	3302      	adds	r3, #2
 8008482:	e7c7      	b.n	8008414 <_printf_common+0x58>
 8008484:	2301      	movs	r3, #1
 8008486:	4622      	mov	r2, r4
 8008488:	4641      	mov	r1, r8
 800848a:	4638      	mov	r0, r7
 800848c:	47c8      	blx	r9
 800848e:	3001      	adds	r0, #1
 8008490:	d0e6      	beq.n	8008460 <_printf_common+0xa4>
 8008492:	3601      	adds	r6, #1
 8008494:	e7d9      	b.n	800844a <_printf_common+0x8e>
	...

08008498 <_printf_i>:
 8008498:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800849c:	7e0f      	ldrb	r7, [r1, #24]
 800849e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80084a0:	2f78      	cmp	r7, #120	@ 0x78
 80084a2:	4691      	mov	r9, r2
 80084a4:	4680      	mov	r8, r0
 80084a6:	460c      	mov	r4, r1
 80084a8:	469a      	mov	sl, r3
 80084aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80084ae:	d807      	bhi.n	80084c0 <_printf_i+0x28>
 80084b0:	2f62      	cmp	r7, #98	@ 0x62
 80084b2:	d80a      	bhi.n	80084ca <_printf_i+0x32>
 80084b4:	2f00      	cmp	r7, #0
 80084b6:	f000 80d2 	beq.w	800865e <_printf_i+0x1c6>
 80084ba:	2f58      	cmp	r7, #88	@ 0x58
 80084bc:	f000 80b9 	beq.w	8008632 <_printf_i+0x19a>
 80084c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80084c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80084c8:	e03a      	b.n	8008540 <_printf_i+0xa8>
 80084ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80084ce:	2b15      	cmp	r3, #21
 80084d0:	d8f6      	bhi.n	80084c0 <_printf_i+0x28>
 80084d2:	a101      	add	r1, pc, #4	@ (adr r1, 80084d8 <_printf_i+0x40>)
 80084d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80084d8:	08008531 	.word	0x08008531
 80084dc:	08008545 	.word	0x08008545
 80084e0:	080084c1 	.word	0x080084c1
 80084e4:	080084c1 	.word	0x080084c1
 80084e8:	080084c1 	.word	0x080084c1
 80084ec:	080084c1 	.word	0x080084c1
 80084f0:	08008545 	.word	0x08008545
 80084f4:	080084c1 	.word	0x080084c1
 80084f8:	080084c1 	.word	0x080084c1
 80084fc:	080084c1 	.word	0x080084c1
 8008500:	080084c1 	.word	0x080084c1
 8008504:	08008645 	.word	0x08008645
 8008508:	0800856f 	.word	0x0800856f
 800850c:	080085ff 	.word	0x080085ff
 8008510:	080084c1 	.word	0x080084c1
 8008514:	080084c1 	.word	0x080084c1
 8008518:	08008667 	.word	0x08008667
 800851c:	080084c1 	.word	0x080084c1
 8008520:	0800856f 	.word	0x0800856f
 8008524:	080084c1 	.word	0x080084c1
 8008528:	080084c1 	.word	0x080084c1
 800852c:	08008607 	.word	0x08008607
 8008530:	6833      	ldr	r3, [r6, #0]
 8008532:	1d1a      	adds	r2, r3, #4
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	6032      	str	r2, [r6, #0]
 8008538:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800853c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008540:	2301      	movs	r3, #1
 8008542:	e09d      	b.n	8008680 <_printf_i+0x1e8>
 8008544:	6833      	ldr	r3, [r6, #0]
 8008546:	6820      	ldr	r0, [r4, #0]
 8008548:	1d19      	adds	r1, r3, #4
 800854a:	6031      	str	r1, [r6, #0]
 800854c:	0606      	lsls	r6, r0, #24
 800854e:	d501      	bpl.n	8008554 <_printf_i+0xbc>
 8008550:	681d      	ldr	r5, [r3, #0]
 8008552:	e003      	b.n	800855c <_printf_i+0xc4>
 8008554:	0645      	lsls	r5, r0, #25
 8008556:	d5fb      	bpl.n	8008550 <_printf_i+0xb8>
 8008558:	f9b3 5000 	ldrsh.w	r5, [r3]
 800855c:	2d00      	cmp	r5, #0
 800855e:	da03      	bge.n	8008568 <_printf_i+0xd0>
 8008560:	232d      	movs	r3, #45	@ 0x2d
 8008562:	426d      	negs	r5, r5
 8008564:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008568:	4859      	ldr	r0, [pc, #356]	@ (80086d0 <_printf_i+0x238>)
 800856a:	230a      	movs	r3, #10
 800856c:	e011      	b.n	8008592 <_printf_i+0xfa>
 800856e:	6821      	ldr	r1, [r4, #0]
 8008570:	6833      	ldr	r3, [r6, #0]
 8008572:	0608      	lsls	r0, r1, #24
 8008574:	f853 5b04 	ldr.w	r5, [r3], #4
 8008578:	d402      	bmi.n	8008580 <_printf_i+0xe8>
 800857a:	0649      	lsls	r1, r1, #25
 800857c:	bf48      	it	mi
 800857e:	b2ad      	uxthmi	r5, r5
 8008580:	2f6f      	cmp	r7, #111	@ 0x6f
 8008582:	4853      	ldr	r0, [pc, #332]	@ (80086d0 <_printf_i+0x238>)
 8008584:	6033      	str	r3, [r6, #0]
 8008586:	bf14      	ite	ne
 8008588:	230a      	movne	r3, #10
 800858a:	2308      	moveq	r3, #8
 800858c:	2100      	movs	r1, #0
 800858e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008592:	6866      	ldr	r6, [r4, #4]
 8008594:	60a6      	str	r6, [r4, #8]
 8008596:	2e00      	cmp	r6, #0
 8008598:	bfa2      	ittt	ge
 800859a:	6821      	ldrge	r1, [r4, #0]
 800859c:	f021 0104 	bicge.w	r1, r1, #4
 80085a0:	6021      	strge	r1, [r4, #0]
 80085a2:	b90d      	cbnz	r5, 80085a8 <_printf_i+0x110>
 80085a4:	2e00      	cmp	r6, #0
 80085a6:	d04b      	beq.n	8008640 <_printf_i+0x1a8>
 80085a8:	4616      	mov	r6, r2
 80085aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80085ae:	fb03 5711 	mls	r7, r3, r1, r5
 80085b2:	5dc7      	ldrb	r7, [r0, r7]
 80085b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80085b8:	462f      	mov	r7, r5
 80085ba:	42bb      	cmp	r3, r7
 80085bc:	460d      	mov	r5, r1
 80085be:	d9f4      	bls.n	80085aa <_printf_i+0x112>
 80085c0:	2b08      	cmp	r3, #8
 80085c2:	d10b      	bne.n	80085dc <_printf_i+0x144>
 80085c4:	6823      	ldr	r3, [r4, #0]
 80085c6:	07df      	lsls	r7, r3, #31
 80085c8:	d508      	bpl.n	80085dc <_printf_i+0x144>
 80085ca:	6923      	ldr	r3, [r4, #16]
 80085cc:	6861      	ldr	r1, [r4, #4]
 80085ce:	4299      	cmp	r1, r3
 80085d0:	bfde      	ittt	le
 80085d2:	2330      	movle	r3, #48	@ 0x30
 80085d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80085d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80085dc:	1b92      	subs	r2, r2, r6
 80085de:	6122      	str	r2, [r4, #16]
 80085e0:	f8cd a000 	str.w	sl, [sp]
 80085e4:	464b      	mov	r3, r9
 80085e6:	aa03      	add	r2, sp, #12
 80085e8:	4621      	mov	r1, r4
 80085ea:	4640      	mov	r0, r8
 80085ec:	f7ff fee6 	bl	80083bc <_printf_common>
 80085f0:	3001      	adds	r0, #1
 80085f2:	d14a      	bne.n	800868a <_printf_i+0x1f2>
 80085f4:	f04f 30ff 	mov.w	r0, #4294967295
 80085f8:	b004      	add	sp, #16
 80085fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085fe:	6823      	ldr	r3, [r4, #0]
 8008600:	f043 0320 	orr.w	r3, r3, #32
 8008604:	6023      	str	r3, [r4, #0]
 8008606:	4833      	ldr	r0, [pc, #204]	@ (80086d4 <_printf_i+0x23c>)
 8008608:	2778      	movs	r7, #120	@ 0x78
 800860a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800860e:	6823      	ldr	r3, [r4, #0]
 8008610:	6831      	ldr	r1, [r6, #0]
 8008612:	061f      	lsls	r7, r3, #24
 8008614:	f851 5b04 	ldr.w	r5, [r1], #4
 8008618:	d402      	bmi.n	8008620 <_printf_i+0x188>
 800861a:	065f      	lsls	r7, r3, #25
 800861c:	bf48      	it	mi
 800861e:	b2ad      	uxthmi	r5, r5
 8008620:	6031      	str	r1, [r6, #0]
 8008622:	07d9      	lsls	r1, r3, #31
 8008624:	bf44      	itt	mi
 8008626:	f043 0320 	orrmi.w	r3, r3, #32
 800862a:	6023      	strmi	r3, [r4, #0]
 800862c:	b11d      	cbz	r5, 8008636 <_printf_i+0x19e>
 800862e:	2310      	movs	r3, #16
 8008630:	e7ac      	b.n	800858c <_printf_i+0xf4>
 8008632:	4827      	ldr	r0, [pc, #156]	@ (80086d0 <_printf_i+0x238>)
 8008634:	e7e9      	b.n	800860a <_printf_i+0x172>
 8008636:	6823      	ldr	r3, [r4, #0]
 8008638:	f023 0320 	bic.w	r3, r3, #32
 800863c:	6023      	str	r3, [r4, #0]
 800863e:	e7f6      	b.n	800862e <_printf_i+0x196>
 8008640:	4616      	mov	r6, r2
 8008642:	e7bd      	b.n	80085c0 <_printf_i+0x128>
 8008644:	6833      	ldr	r3, [r6, #0]
 8008646:	6825      	ldr	r5, [r4, #0]
 8008648:	6961      	ldr	r1, [r4, #20]
 800864a:	1d18      	adds	r0, r3, #4
 800864c:	6030      	str	r0, [r6, #0]
 800864e:	062e      	lsls	r6, r5, #24
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	d501      	bpl.n	8008658 <_printf_i+0x1c0>
 8008654:	6019      	str	r1, [r3, #0]
 8008656:	e002      	b.n	800865e <_printf_i+0x1c6>
 8008658:	0668      	lsls	r0, r5, #25
 800865a:	d5fb      	bpl.n	8008654 <_printf_i+0x1bc>
 800865c:	8019      	strh	r1, [r3, #0]
 800865e:	2300      	movs	r3, #0
 8008660:	6123      	str	r3, [r4, #16]
 8008662:	4616      	mov	r6, r2
 8008664:	e7bc      	b.n	80085e0 <_printf_i+0x148>
 8008666:	6833      	ldr	r3, [r6, #0]
 8008668:	1d1a      	adds	r2, r3, #4
 800866a:	6032      	str	r2, [r6, #0]
 800866c:	681e      	ldr	r6, [r3, #0]
 800866e:	6862      	ldr	r2, [r4, #4]
 8008670:	2100      	movs	r1, #0
 8008672:	4630      	mov	r0, r6
 8008674:	f7f7 fdb4 	bl	80001e0 <memchr>
 8008678:	b108      	cbz	r0, 800867e <_printf_i+0x1e6>
 800867a:	1b80      	subs	r0, r0, r6
 800867c:	6060      	str	r0, [r4, #4]
 800867e:	6863      	ldr	r3, [r4, #4]
 8008680:	6123      	str	r3, [r4, #16]
 8008682:	2300      	movs	r3, #0
 8008684:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008688:	e7aa      	b.n	80085e0 <_printf_i+0x148>
 800868a:	6923      	ldr	r3, [r4, #16]
 800868c:	4632      	mov	r2, r6
 800868e:	4649      	mov	r1, r9
 8008690:	4640      	mov	r0, r8
 8008692:	47d0      	blx	sl
 8008694:	3001      	adds	r0, #1
 8008696:	d0ad      	beq.n	80085f4 <_printf_i+0x15c>
 8008698:	6823      	ldr	r3, [r4, #0]
 800869a:	079b      	lsls	r3, r3, #30
 800869c:	d413      	bmi.n	80086c6 <_printf_i+0x22e>
 800869e:	68e0      	ldr	r0, [r4, #12]
 80086a0:	9b03      	ldr	r3, [sp, #12]
 80086a2:	4298      	cmp	r0, r3
 80086a4:	bfb8      	it	lt
 80086a6:	4618      	movlt	r0, r3
 80086a8:	e7a6      	b.n	80085f8 <_printf_i+0x160>
 80086aa:	2301      	movs	r3, #1
 80086ac:	4632      	mov	r2, r6
 80086ae:	4649      	mov	r1, r9
 80086b0:	4640      	mov	r0, r8
 80086b2:	47d0      	blx	sl
 80086b4:	3001      	adds	r0, #1
 80086b6:	d09d      	beq.n	80085f4 <_printf_i+0x15c>
 80086b8:	3501      	adds	r5, #1
 80086ba:	68e3      	ldr	r3, [r4, #12]
 80086bc:	9903      	ldr	r1, [sp, #12]
 80086be:	1a5b      	subs	r3, r3, r1
 80086c0:	42ab      	cmp	r3, r5
 80086c2:	dcf2      	bgt.n	80086aa <_printf_i+0x212>
 80086c4:	e7eb      	b.n	800869e <_printf_i+0x206>
 80086c6:	2500      	movs	r5, #0
 80086c8:	f104 0619 	add.w	r6, r4, #25
 80086cc:	e7f5      	b.n	80086ba <_printf_i+0x222>
 80086ce:	bf00      	nop
 80086d0:	0800abf2 	.word	0x0800abf2
 80086d4:	0800ac03 	.word	0x0800ac03

080086d8 <std>:
 80086d8:	2300      	movs	r3, #0
 80086da:	b510      	push	{r4, lr}
 80086dc:	4604      	mov	r4, r0
 80086de:	e9c0 3300 	strd	r3, r3, [r0]
 80086e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80086e6:	6083      	str	r3, [r0, #8]
 80086e8:	8181      	strh	r1, [r0, #12]
 80086ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80086ec:	81c2      	strh	r2, [r0, #14]
 80086ee:	6183      	str	r3, [r0, #24]
 80086f0:	4619      	mov	r1, r3
 80086f2:	2208      	movs	r2, #8
 80086f4:	305c      	adds	r0, #92	@ 0x5c
 80086f6:	f000 f914 	bl	8008922 <memset>
 80086fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008730 <std+0x58>)
 80086fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80086fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008734 <std+0x5c>)
 8008700:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008702:	4b0d      	ldr	r3, [pc, #52]	@ (8008738 <std+0x60>)
 8008704:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008706:	4b0d      	ldr	r3, [pc, #52]	@ (800873c <std+0x64>)
 8008708:	6323      	str	r3, [r4, #48]	@ 0x30
 800870a:	4b0d      	ldr	r3, [pc, #52]	@ (8008740 <std+0x68>)
 800870c:	6224      	str	r4, [r4, #32]
 800870e:	429c      	cmp	r4, r3
 8008710:	d006      	beq.n	8008720 <std+0x48>
 8008712:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008716:	4294      	cmp	r4, r2
 8008718:	d002      	beq.n	8008720 <std+0x48>
 800871a:	33d0      	adds	r3, #208	@ 0xd0
 800871c:	429c      	cmp	r4, r3
 800871e:	d105      	bne.n	800872c <std+0x54>
 8008720:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008728:	f000 b978 	b.w	8008a1c <__retarget_lock_init_recursive>
 800872c:	bd10      	pop	{r4, pc}
 800872e:	bf00      	nop
 8008730:	0800889d 	.word	0x0800889d
 8008734:	080088bf 	.word	0x080088bf
 8008738:	080088f7 	.word	0x080088f7
 800873c:	0800891b 	.word	0x0800891b
 8008740:	20000550 	.word	0x20000550

08008744 <stdio_exit_handler>:
 8008744:	4a02      	ldr	r2, [pc, #8]	@ (8008750 <stdio_exit_handler+0xc>)
 8008746:	4903      	ldr	r1, [pc, #12]	@ (8008754 <stdio_exit_handler+0x10>)
 8008748:	4803      	ldr	r0, [pc, #12]	@ (8008758 <stdio_exit_handler+0x14>)
 800874a:	f000 b869 	b.w	8008820 <_fwalk_sglue>
 800874e:	bf00      	nop
 8008750:	2000000c 	.word	0x2000000c
 8008754:	0800a601 	.word	0x0800a601
 8008758:	2000001c 	.word	0x2000001c

0800875c <cleanup_stdio>:
 800875c:	6841      	ldr	r1, [r0, #4]
 800875e:	4b0c      	ldr	r3, [pc, #48]	@ (8008790 <cleanup_stdio+0x34>)
 8008760:	4299      	cmp	r1, r3
 8008762:	b510      	push	{r4, lr}
 8008764:	4604      	mov	r4, r0
 8008766:	d001      	beq.n	800876c <cleanup_stdio+0x10>
 8008768:	f001 ff4a 	bl	800a600 <_fflush_r>
 800876c:	68a1      	ldr	r1, [r4, #8]
 800876e:	4b09      	ldr	r3, [pc, #36]	@ (8008794 <cleanup_stdio+0x38>)
 8008770:	4299      	cmp	r1, r3
 8008772:	d002      	beq.n	800877a <cleanup_stdio+0x1e>
 8008774:	4620      	mov	r0, r4
 8008776:	f001 ff43 	bl	800a600 <_fflush_r>
 800877a:	68e1      	ldr	r1, [r4, #12]
 800877c:	4b06      	ldr	r3, [pc, #24]	@ (8008798 <cleanup_stdio+0x3c>)
 800877e:	4299      	cmp	r1, r3
 8008780:	d004      	beq.n	800878c <cleanup_stdio+0x30>
 8008782:	4620      	mov	r0, r4
 8008784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008788:	f001 bf3a 	b.w	800a600 <_fflush_r>
 800878c:	bd10      	pop	{r4, pc}
 800878e:	bf00      	nop
 8008790:	20000550 	.word	0x20000550
 8008794:	200005b8 	.word	0x200005b8
 8008798:	20000620 	.word	0x20000620

0800879c <global_stdio_init.part.0>:
 800879c:	b510      	push	{r4, lr}
 800879e:	4b0b      	ldr	r3, [pc, #44]	@ (80087cc <global_stdio_init.part.0+0x30>)
 80087a0:	4c0b      	ldr	r4, [pc, #44]	@ (80087d0 <global_stdio_init.part.0+0x34>)
 80087a2:	4a0c      	ldr	r2, [pc, #48]	@ (80087d4 <global_stdio_init.part.0+0x38>)
 80087a4:	601a      	str	r2, [r3, #0]
 80087a6:	4620      	mov	r0, r4
 80087a8:	2200      	movs	r2, #0
 80087aa:	2104      	movs	r1, #4
 80087ac:	f7ff ff94 	bl	80086d8 <std>
 80087b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80087b4:	2201      	movs	r2, #1
 80087b6:	2109      	movs	r1, #9
 80087b8:	f7ff ff8e 	bl	80086d8 <std>
 80087bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80087c0:	2202      	movs	r2, #2
 80087c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087c6:	2112      	movs	r1, #18
 80087c8:	f7ff bf86 	b.w	80086d8 <std>
 80087cc:	20000688 	.word	0x20000688
 80087d0:	20000550 	.word	0x20000550
 80087d4:	08008745 	.word	0x08008745

080087d8 <__sfp_lock_acquire>:
 80087d8:	4801      	ldr	r0, [pc, #4]	@ (80087e0 <__sfp_lock_acquire+0x8>)
 80087da:	f000 b920 	b.w	8008a1e <__retarget_lock_acquire_recursive>
 80087de:	bf00      	nop
 80087e0:	20000691 	.word	0x20000691

080087e4 <__sfp_lock_release>:
 80087e4:	4801      	ldr	r0, [pc, #4]	@ (80087ec <__sfp_lock_release+0x8>)
 80087e6:	f000 b91b 	b.w	8008a20 <__retarget_lock_release_recursive>
 80087ea:	bf00      	nop
 80087ec:	20000691 	.word	0x20000691

080087f0 <__sinit>:
 80087f0:	b510      	push	{r4, lr}
 80087f2:	4604      	mov	r4, r0
 80087f4:	f7ff fff0 	bl	80087d8 <__sfp_lock_acquire>
 80087f8:	6a23      	ldr	r3, [r4, #32]
 80087fa:	b11b      	cbz	r3, 8008804 <__sinit+0x14>
 80087fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008800:	f7ff bff0 	b.w	80087e4 <__sfp_lock_release>
 8008804:	4b04      	ldr	r3, [pc, #16]	@ (8008818 <__sinit+0x28>)
 8008806:	6223      	str	r3, [r4, #32]
 8008808:	4b04      	ldr	r3, [pc, #16]	@ (800881c <__sinit+0x2c>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1f5      	bne.n	80087fc <__sinit+0xc>
 8008810:	f7ff ffc4 	bl	800879c <global_stdio_init.part.0>
 8008814:	e7f2      	b.n	80087fc <__sinit+0xc>
 8008816:	bf00      	nop
 8008818:	0800875d 	.word	0x0800875d
 800881c:	20000688 	.word	0x20000688

08008820 <_fwalk_sglue>:
 8008820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008824:	4607      	mov	r7, r0
 8008826:	4688      	mov	r8, r1
 8008828:	4614      	mov	r4, r2
 800882a:	2600      	movs	r6, #0
 800882c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008830:	f1b9 0901 	subs.w	r9, r9, #1
 8008834:	d505      	bpl.n	8008842 <_fwalk_sglue+0x22>
 8008836:	6824      	ldr	r4, [r4, #0]
 8008838:	2c00      	cmp	r4, #0
 800883a:	d1f7      	bne.n	800882c <_fwalk_sglue+0xc>
 800883c:	4630      	mov	r0, r6
 800883e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008842:	89ab      	ldrh	r3, [r5, #12]
 8008844:	2b01      	cmp	r3, #1
 8008846:	d907      	bls.n	8008858 <_fwalk_sglue+0x38>
 8008848:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800884c:	3301      	adds	r3, #1
 800884e:	d003      	beq.n	8008858 <_fwalk_sglue+0x38>
 8008850:	4629      	mov	r1, r5
 8008852:	4638      	mov	r0, r7
 8008854:	47c0      	blx	r8
 8008856:	4306      	orrs	r6, r0
 8008858:	3568      	adds	r5, #104	@ 0x68
 800885a:	e7e9      	b.n	8008830 <_fwalk_sglue+0x10>

0800885c <siprintf>:
 800885c:	b40e      	push	{r1, r2, r3}
 800885e:	b500      	push	{lr}
 8008860:	b09c      	sub	sp, #112	@ 0x70
 8008862:	ab1d      	add	r3, sp, #116	@ 0x74
 8008864:	9002      	str	r0, [sp, #8]
 8008866:	9006      	str	r0, [sp, #24]
 8008868:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800886c:	4809      	ldr	r0, [pc, #36]	@ (8008894 <siprintf+0x38>)
 800886e:	9107      	str	r1, [sp, #28]
 8008870:	9104      	str	r1, [sp, #16]
 8008872:	4909      	ldr	r1, [pc, #36]	@ (8008898 <siprintf+0x3c>)
 8008874:	f853 2b04 	ldr.w	r2, [r3], #4
 8008878:	9105      	str	r1, [sp, #20]
 800887a:	6800      	ldr	r0, [r0, #0]
 800887c:	9301      	str	r3, [sp, #4]
 800887e:	a902      	add	r1, sp, #8
 8008880:	f001 fbfc 	bl	800a07c <_svfiprintf_r>
 8008884:	9b02      	ldr	r3, [sp, #8]
 8008886:	2200      	movs	r2, #0
 8008888:	701a      	strb	r2, [r3, #0]
 800888a:	b01c      	add	sp, #112	@ 0x70
 800888c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008890:	b003      	add	sp, #12
 8008892:	4770      	bx	lr
 8008894:	20000018 	.word	0x20000018
 8008898:	ffff0208 	.word	0xffff0208

0800889c <__sread>:
 800889c:	b510      	push	{r4, lr}
 800889e:	460c      	mov	r4, r1
 80088a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088a4:	f000 f86c 	bl	8008980 <_read_r>
 80088a8:	2800      	cmp	r0, #0
 80088aa:	bfab      	itete	ge
 80088ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80088ae:	89a3      	ldrhlt	r3, [r4, #12]
 80088b0:	181b      	addge	r3, r3, r0
 80088b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80088b6:	bfac      	ite	ge
 80088b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80088ba:	81a3      	strhlt	r3, [r4, #12]
 80088bc:	bd10      	pop	{r4, pc}

080088be <__swrite>:
 80088be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088c2:	461f      	mov	r7, r3
 80088c4:	898b      	ldrh	r3, [r1, #12]
 80088c6:	05db      	lsls	r3, r3, #23
 80088c8:	4605      	mov	r5, r0
 80088ca:	460c      	mov	r4, r1
 80088cc:	4616      	mov	r6, r2
 80088ce:	d505      	bpl.n	80088dc <__swrite+0x1e>
 80088d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088d4:	2302      	movs	r3, #2
 80088d6:	2200      	movs	r2, #0
 80088d8:	f000 f840 	bl	800895c <_lseek_r>
 80088dc:	89a3      	ldrh	r3, [r4, #12]
 80088de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80088e6:	81a3      	strh	r3, [r4, #12]
 80088e8:	4632      	mov	r2, r6
 80088ea:	463b      	mov	r3, r7
 80088ec:	4628      	mov	r0, r5
 80088ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088f2:	f000 b857 	b.w	80089a4 <_write_r>

080088f6 <__sseek>:
 80088f6:	b510      	push	{r4, lr}
 80088f8:	460c      	mov	r4, r1
 80088fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088fe:	f000 f82d 	bl	800895c <_lseek_r>
 8008902:	1c43      	adds	r3, r0, #1
 8008904:	89a3      	ldrh	r3, [r4, #12]
 8008906:	bf15      	itete	ne
 8008908:	6560      	strne	r0, [r4, #84]	@ 0x54
 800890a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800890e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008912:	81a3      	strheq	r3, [r4, #12]
 8008914:	bf18      	it	ne
 8008916:	81a3      	strhne	r3, [r4, #12]
 8008918:	bd10      	pop	{r4, pc}

0800891a <__sclose>:
 800891a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800891e:	f000 b80d 	b.w	800893c <_close_r>

08008922 <memset>:
 8008922:	4402      	add	r2, r0
 8008924:	4603      	mov	r3, r0
 8008926:	4293      	cmp	r3, r2
 8008928:	d100      	bne.n	800892c <memset+0xa>
 800892a:	4770      	bx	lr
 800892c:	f803 1b01 	strb.w	r1, [r3], #1
 8008930:	e7f9      	b.n	8008926 <memset+0x4>
	...

08008934 <_localeconv_r>:
 8008934:	4800      	ldr	r0, [pc, #0]	@ (8008938 <_localeconv_r+0x4>)
 8008936:	4770      	bx	lr
 8008938:	20000158 	.word	0x20000158

0800893c <_close_r>:
 800893c:	b538      	push	{r3, r4, r5, lr}
 800893e:	4d06      	ldr	r5, [pc, #24]	@ (8008958 <_close_r+0x1c>)
 8008940:	2300      	movs	r3, #0
 8008942:	4604      	mov	r4, r0
 8008944:	4608      	mov	r0, r1
 8008946:	602b      	str	r3, [r5, #0]
 8008948:	f7f9 fd2a 	bl	80023a0 <_close>
 800894c:	1c43      	adds	r3, r0, #1
 800894e:	d102      	bne.n	8008956 <_close_r+0x1a>
 8008950:	682b      	ldr	r3, [r5, #0]
 8008952:	b103      	cbz	r3, 8008956 <_close_r+0x1a>
 8008954:	6023      	str	r3, [r4, #0]
 8008956:	bd38      	pop	{r3, r4, r5, pc}
 8008958:	2000068c 	.word	0x2000068c

0800895c <_lseek_r>:
 800895c:	b538      	push	{r3, r4, r5, lr}
 800895e:	4d07      	ldr	r5, [pc, #28]	@ (800897c <_lseek_r+0x20>)
 8008960:	4604      	mov	r4, r0
 8008962:	4608      	mov	r0, r1
 8008964:	4611      	mov	r1, r2
 8008966:	2200      	movs	r2, #0
 8008968:	602a      	str	r2, [r5, #0]
 800896a:	461a      	mov	r2, r3
 800896c:	f7f9 fd3f 	bl	80023ee <_lseek>
 8008970:	1c43      	adds	r3, r0, #1
 8008972:	d102      	bne.n	800897a <_lseek_r+0x1e>
 8008974:	682b      	ldr	r3, [r5, #0]
 8008976:	b103      	cbz	r3, 800897a <_lseek_r+0x1e>
 8008978:	6023      	str	r3, [r4, #0]
 800897a:	bd38      	pop	{r3, r4, r5, pc}
 800897c:	2000068c 	.word	0x2000068c

08008980 <_read_r>:
 8008980:	b538      	push	{r3, r4, r5, lr}
 8008982:	4d07      	ldr	r5, [pc, #28]	@ (80089a0 <_read_r+0x20>)
 8008984:	4604      	mov	r4, r0
 8008986:	4608      	mov	r0, r1
 8008988:	4611      	mov	r1, r2
 800898a:	2200      	movs	r2, #0
 800898c:	602a      	str	r2, [r5, #0]
 800898e:	461a      	mov	r2, r3
 8008990:	f7f9 fccd 	bl	800232e <_read>
 8008994:	1c43      	adds	r3, r0, #1
 8008996:	d102      	bne.n	800899e <_read_r+0x1e>
 8008998:	682b      	ldr	r3, [r5, #0]
 800899a:	b103      	cbz	r3, 800899e <_read_r+0x1e>
 800899c:	6023      	str	r3, [r4, #0]
 800899e:	bd38      	pop	{r3, r4, r5, pc}
 80089a0:	2000068c 	.word	0x2000068c

080089a4 <_write_r>:
 80089a4:	b538      	push	{r3, r4, r5, lr}
 80089a6:	4d07      	ldr	r5, [pc, #28]	@ (80089c4 <_write_r+0x20>)
 80089a8:	4604      	mov	r4, r0
 80089aa:	4608      	mov	r0, r1
 80089ac:	4611      	mov	r1, r2
 80089ae:	2200      	movs	r2, #0
 80089b0:	602a      	str	r2, [r5, #0]
 80089b2:	461a      	mov	r2, r3
 80089b4:	f7f9 fcd8 	bl	8002368 <_write>
 80089b8:	1c43      	adds	r3, r0, #1
 80089ba:	d102      	bne.n	80089c2 <_write_r+0x1e>
 80089bc:	682b      	ldr	r3, [r5, #0]
 80089be:	b103      	cbz	r3, 80089c2 <_write_r+0x1e>
 80089c0:	6023      	str	r3, [r4, #0]
 80089c2:	bd38      	pop	{r3, r4, r5, pc}
 80089c4:	2000068c 	.word	0x2000068c

080089c8 <__errno>:
 80089c8:	4b01      	ldr	r3, [pc, #4]	@ (80089d0 <__errno+0x8>)
 80089ca:	6818      	ldr	r0, [r3, #0]
 80089cc:	4770      	bx	lr
 80089ce:	bf00      	nop
 80089d0:	20000018 	.word	0x20000018

080089d4 <__libc_init_array>:
 80089d4:	b570      	push	{r4, r5, r6, lr}
 80089d6:	4d0d      	ldr	r5, [pc, #52]	@ (8008a0c <__libc_init_array+0x38>)
 80089d8:	4c0d      	ldr	r4, [pc, #52]	@ (8008a10 <__libc_init_array+0x3c>)
 80089da:	1b64      	subs	r4, r4, r5
 80089dc:	10a4      	asrs	r4, r4, #2
 80089de:	2600      	movs	r6, #0
 80089e0:	42a6      	cmp	r6, r4
 80089e2:	d109      	bne.n	80089f8 <__libc_init_array+0x24>
 80089e4:	4d0b      	ldr	r5, [pc, #44]	@ (8008a14 <__libc_init_array+0x40>)
 80089e6:	4c0c      	ldr	r4, [pc, #48]	@ (8008a18 <__libc_init_array+0x44>)
 80089e8:	f002 f868 	bl	800aabc <_init>
 80089ec:	1b64      	subs	r4, r4, r5
 80089ee:	10a4      	asrs	r4, r4, #2
 80089f0:	2600      	movs	r6, #0
 80089f2:	42a6      	cmp	r6, r4
 80089f4:	d105      	bne.n	8008a02 <__libc_init_array+0x2e>
 80089f6:	bd70      	pop	{r4, r5, r6, pc}
 80089f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80089fc:	4798      	blx	r3
 80089fe:	3601      	adds	r6, #1
 8008a00:	e7ee      	b.n	80089e0 <__libc_init_array+0xc>
 8008a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a06:	4798      	blx	r3
 8008a08:	3601      	adds	r6, #1
 8008a0a:	e7f2      	b.n	80089f2 <__libc_init_array+0x1e>
 8008a0c:	0800af58 	.word	0x0800af58
 8008a10:	0800af58 	.word	0x0800af58
 8008a14:	0800af58 	.word	0x0800af58
 8008a18:	0800af5c 	.word	0x0800af5c

08008a1c <__retarget_lock_init_recursive>:
 8008a1c:	4770      	bx	lr

08008a1e <__retarget_lock_acquire_recursive>:
 8008a1e:	4770      	bx	lr

08008a20 <__retarget_lock_release_recursive>:
 8008a20:	4770      	bx	lr

08008a22 <quorem>:
 8008a22:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a26:	6903      	ldr	r3, [r0, #16]
 8008a28:	690c      	ldr	r4, [r1, #16]
 8008a2a:	42a3      	cmp	r3, r4
 8008a2c:	4607      	mov	r7, r0
 8008a2e:	db7e      	blt.n	8008b2e <quorem+0x10c>
 8008a30:	3c01      	subs	r4, #1
 8008a32:	f101 0814 	add.w	r8, r1, #20
 8008a36:	00a3      	lsls	r3, r4, #2
 8008a38:	f100 0514 	add.w	r5, r0, #20
 8008a3c:	9300      	str	r3, [sp, #0]
 8008a3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a42:	9301      	str	r3, [sp, #4]
 8008a44:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a54:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a58:	d32e      	bcc.n	8008ab8 <quorem+0x96>
 8008a5a:	f04f 0a00 	mov.w	sl, #0
 8008a5e:	46c4      	mov	ip, r8
 8008a60:	46ae      	mov	lr, r5
 8008a62:	46d3      	mov	fp, sl
 8008a64:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008a68:	b298      	uxth	r0, r3
 8008a6a:	fb06 a000 	mla	r0, r6, r0, sl
 8008a6e:	0c02      	lsrs	r2, r0, #16
 8008a70:	0c1b      	lsrs	r3, r3, #16
 8008a72:	fb06 2303 	mla	r3, r6, r3, r2
 8008a76:	f8de 2000 	ldr.w	r2, [lr]
 8008a7a:	b280      	uxth	r0, r0
 8008a7c:	b292      	uxth	r2, r2
 8008a7e:	1a12      	subs	r2, r2, r0
 8008a80:	445a      	add	r2, fp
 8008a82:	f8de 0000 	ldr.w	r0, [lr]
 8008a86:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008a90:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008a94:	b292      	uxth	r2, r2
 8008a96:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008a9a:	45e1      	cmp	r9, ip
 8008a9c:	f84e 2b04 	str.w	r2, [lr], #4
 8008aa0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008aa4:	d2de      	bcs.n	8008a64 <quorem+0x42>
 8008aa6:	9b00      	ldr	r3, [sp, #0]
 8008aa8:	58eb      	ldr	r3, [r5, r3]
 8008aaa:	b92b      	cbnz	r3, 8008ab8 <quorem+0x96>
 8008aac:	9b01      	ldr	r3, [sp, #4]
 8008aae:	3b04      	subs	r3, #4
 8008ab0:	429d      	cmp	r5, r3
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	d32f      	bcc.n	8008b16 <quorem+0xf4>
 8008ab6:	613c      	str	r4, [r7, #16]
 8008ab8:	4638      	mov	r0, r7
 8008aba:	f001 f97b 	bl	8009db4 <__mcmp>
 8008abe:	2800      	cmp	r0, #0
 8008ac0:	db25      	blt.n	8008b0e <quorem+0xec>
 8008ac2:	4629      	mov	r1, r5
 8008ac4:	2000      	movs	r0, #0
 8008ac6:	f858 2b04 	ldr.w	r2, [r8], #4
 8008aca:	f8d1 c000 	ldr.w	ip, [r1]
 8008ace:	fa1f fe82 	uxth.w	lr, r2
 8008ad2:	fa1f f38c 	uxth.w	r3, ip
 8008ad6:	eba3 030e 	sub.w	r3, r3, lr
 8008ada:	4403      	add	r3, r0
 8008adc:	0c12      	lsrs	r2, r2, #16
 8008ade:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008ae2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008aec:	45c1      	cmp	r9, r8
 8008aee:	f841 3b04 	str.w	r3, [r1], #4
 8008af2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008af6:	d2e6      	bcs.n	8008ac6 <quorem+0xa4>
 8008af8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008afc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b00:	b922      	cbnz	r2, 8008b0c <quorem+0xea>
 8008b02:	3b04      	subs	r3, #4
 8008b04:	429d      	cmp	r5, r3
 8008b06:	461a      	mov	r2, r3
 8008b08:	d30b      	bcc.n	8008b22 <quorem+0x100>
 8008b0a:	613c      	str	r4, [r7, #16]
 8008b0c:	3601      	adds	r6, #1
 8008b0e:	4630      	mov	r0, r6
 8008b10:	b003      	add	sp, #12
 8008b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b16:	6812      	ldr	r2, [r2, #0]
 8008b18:	3b04      	subs	r3, #4
 8008b1a:	2a00      	cmp	r2, #0
 8008b1c:	d1cb      	bne.n	8008ab6 <quorem+0x94>
 8008b1e:	3c01      	subs	r4, #1
 8008b20:	e7c6      	b.n	8008ab0 <quorem+0x8e>
 8008b22:	6812      	ldr	r2, [r2, #0]
 8008b24:	3b04      	subs	r3, #4
 8008b26:	2a00      	cmp	r2, #0
 8008b28:	d1ef      	bne.n	8008b0a <quorem+0xe8>
 8008b2a:	3c01      	subs	r4, #1
 8008b2c:	e7ea      	b.n	8008b04 <quorem+0xe2>
 8008b2e:	2000      	movs	r0, #0
 8008b30:	e7ee      	b.n	8008b10 <quorem+0xee>
 8008b32:	0000      	movs	r0, r0
 8008b34:	0000      	movs	r0, r0
	...

08008b38 <_dtoa_r>:
 8008b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b3c:	69c7      	ldr	r7, [r0, #28]
 8008b3e:	b099      	sub	sp, #100	@ 0x64
 8008b40:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008b44:	ec55 4b10 	vmov	r4, r5, d0
 8008b48:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008b4a:	9109      	str	r1, [sp, #36]	@ 0x24
 8008b4c:	4683      	mov	fp, r0
 8008b4e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008b50:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008b52:	b97f      	cbnz	r7, 8008b74 <_dtoa_r+0x3c>
 8008b54:	2010      	movs	r0, #16
 8008b56:	f000 fdfd 	bl	8009754 <malloc>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008b60:	b920      	cbnz	r0, 8008b6c <_dtoa_r+0x34>
 8008b62:	4ba7      	ldr	r3, [pc, #668]	@ (8008e00 <_dtoa_r+0x2c8>)
 8008b64:	21ef      	movs	r1, #239	@ 0xef
 8008b66:	48a7      	ldr	r0, [pc, #668]	@ (8008e04 <_dtoa_r+0x2cc>)
 8008b68:	f001 fe3e 	bl	800a7e8 <__assert_func>
 8008b6c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008b70:	6007      	str	r7, [r0, #0]
 8008b72:	60c7      	str	r7, [r0, #12]
 8008b74:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008b78:	6819      	ldr	r1, [r3, #0]
 8008b7a:	b159      	cbz	r1, 8008b94 <_dtoa_r+0x5c>
 8008b7c:	685a      	ldr	r2, [r3, #4]
 8008b7e:	604a      	str	r2, [r1, #4]
 8008b80:	2301      	movs	r3, #1
 8008b82:	4093      	lsls	r3, r2
 8008b84:	608b      	str	r3, [r1, #8]
 8008b86:	4658      	mov	r0, fp
 8008b88:	f000 feda 	bl	8009940 <_Bfree>
 8008b8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008b90:	2200      	movs	r2, #0
 8008b92:	601a      	str	r2, [r3, #0]
 8008b94:	1e2b      	subs	r3, r5, #0
 8008b96:	bfb9      	ittee	lt
 8008b98:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008b9c:	9303      	strlt	r3, [sp, #12]
 8008b9e:	2300      	movge	r3, #0
 8008ba0:	6033      	strge	r3, [r6, #0]
 8008ba2:	9f03      	ldr	r7, [sp, #12]
 8008ba4:	4b98      	ldr	r3, [pc, #608]	@ (8008e08 <_dtoa_r+0x2d0>)
 8008ba6:	bfbc      	itt	lt
 8008ba8:	2201      	movlt	r2, #1
 8008baa:	6032      	strlt	r2, [r6, #0]
 8008bac:	43bb      	bics	r3, r7
 8008bae:	d112      	bne.n	8008bd6 <_dtoa_r+0x9e>
 8008bb0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008bb2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008bb6:	6013      	str	r3, [r2, #0]
 8008bb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008bbc:	4323      	orrs	r3, r4
 8008bbe:	f000 854d 	beq.w	800965c <_dtoa_r+0xb24>
 8008bc2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008bc4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008e1c <_dtoa_r+0x2e4>
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	f000 854f 	beq.w	800966c <_dtoa_r+0xb34>
 8008bce:	f10a 0303 	add.w	r3, sl, #3
 8008bd2:	f000 bd49 	b.w	8009668 <_dtoa_r+0xb30>
 8008bd6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	ec51 0b17 	vmov	r0, r1, d7
 8008be0:	2300      	movs	r3, #0
 8008be2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008be6:	f7f7 ff77 	bl	8000ad8 <__aeabi_dcmpeq>
 8008bea:	4680      	mov	r8, r0
 8008bec:	b158      	cbz	r0, 8008c06 <_dtoa_r+0xce>
 8008bee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	6013      	str	r3, [r2, #0]
 8008bf4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008bf6:	b113      	cbz	r3, 8008bfe <_dtoa_r+0xc6>
 8008bf8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008bfa:	4b84      	ldr	r3, [pc, #528]	@ (8008e0c <_dtoa_r+0x2d4>)
 8008bfc:	6013      	str	r3, [r2, #0]
 8008bfe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008e20 <_dtoa_r+0x2e8>
 8008c02:	f000 bd33 	b.w	800966c <_dtoa_r+0xb34>
 8008c06:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008c0a:	aa16      	add	r2, sp, #88	@ 0x58
 8008c0c:	a917      	add	r1, sp, #92	@ 0x5c
 8008c0e:	4658      	mov	r0, fp
 8008c10:	f001 f980 	bl	8009f14 <__d2b>
 8008c14:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008c18:	4681      	mov	r9, r0
 8008c1a:	2e00      	cmp	r6, #0
 8008c1c:	d077      	beq.n	8008d0e <_dtoa_r+0x1d6>
 8008c1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c20:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008c24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c2c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008c30:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008c34:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008c38:	4619      	mov	r1, r3
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	4b74      	ldr	r3, [pc, #464]	@ (8008e10 <_dtoa_r+0x2d8>)
 8008c3e:	f7f7 fb2b 	bl	8000298 <__aeabi_dsub>
 8008c42:	a369      	add	r3, pc, #420	@ (adr r3, 8008de8 <_dtoa_r+0x2b0>)
 8008c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c48:	f7f7 fcde 	bl	8000608 <__aeabi_dmul>
 8008c4c:	a368      	add	r3, pc, #416	@ (adr r3, 8008df0 <_dtoa_r+0x2b8>)
 8008c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c52:	f7f7 fb23 	bl	800029c <__adddf3>
 8008c56:	4604      	mov	r4, r0
 8008c58:	4630      	mov	r0, r6
 8008c5a:	460d      	mov	r5, r1
 8008c5c:	f7f7 fc6a 	bl	8000534 <__aeabi_i2d>
 8008c60:	a365      	add	r3, pc, #404	@ (adr r3, 8008df8 <_dtoa_r+0x2c0>)
 8008c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c66:	f7f7 fccf 	bl	8000608 <__aeabi_dmul>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	4620      	mov	r0, r4
 8008c70:	4629      	mov	r1, r5
 8008c72:	f7f7 fb13 	bl	800029c <__adddf3>
 8008c76:	4604      	mov	r4, r0
 8008c78:	460d      	mov	r5, r1
 8008c7a:	f7f7 ff75 	bl	8000b68 <__aeabi_d2iz>
 8008c7e:	2200      	movs	r2, #0
 8008c80:	4607      	mov	r7, r0
 8008c82:	2300      	movs	r3, #0
 8008c84:	4620      	mov	r0, r4
 8008c86:	4629      	mov	r1, r5
 8008c88:	f7f7 ff30 	bl	8000aec <__aeabi_dcmplt>
 8008c8c:	b140      	cbz	r0, 8008ca0 <_dtoa_r+0x168>
 8008c8e:	4638      	mov	r0, r7
 8008c90:	f7f7 fc50 	bl	8000534 <__aeabi_i2d>
 8008c94:	4622      	mov	r2, r4
 8008c96:	462b      	mov	r3, r5
 8008c98:	f7f7 ff1e 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c9c:	b900      	cbnz	r0, 8008ca0 <_dtoa_r+0x168>
 8008c9e:	3f01      	subs	r7, #1
 8008ca0:	2f16      	cmp	r7, #22
 8008ca2:	d851      	bhi.n	8008d48 <_dtoa_r+0x210>
 8008ca4:	4b5b      	ldr	r3, [pc, #364]	@ (8008e14 <_dtoa_r+0x2dc>)
 8008ca6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008cb2:	f7f7 ff1b 	bl	8000aec <__aeabi_dcmplt>
 8008cb6:	2800      	cmp	r0, #0
 8008cb8:	d048      	beq.n	8008d4c <_dtoa_r+0x214>
 8008cba:	3f01      	subs	r7, #1
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	9312      	str	r3, [sp, #72]	@ 0x48
 8008cc0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008cc2:	1b9b      	subs	r3, r3, r6
 8008cc4:	1e5a      	subs	r2, r3, #1
 8008cc6:	bf44      	itt	mi
 8008cc8:	f1c3 0801 	rsbmi	r8, r3, #1
 8008ccc:	2300      	movmi	r3, #0
 8008cce:	9208      	str	r2, [sp, #32]
 8008cd0:	bf54      	ite	pl
 8008cd2:	f04f 0800 	movpl.w	r8, #0
 8008cd6:	9308      	strmi	r3, [sp, #32]
 8008cd8:	2f00      	cmp	r7, #0
 8008cda:	db39      	blt.n	8008d50 <_dtoa_r+0x218>
 8008cdc:	9b08      	ldr	r3, [sp, #32]
 8008cde:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008ce0:	443b      	add	r3, r7
 8008ce2:	9308      	str	r3, [sp, #32]
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ce8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cea:	2b09      	cmp	r3, #9
 8008cec:	d864      	bhi.n	8008db8 <_dtoa_r+0x280>
 8008cee:	2b05      	cmp	r3, #5
 8008cf0:	bfc4      	itt	gt
 8008cf2:	3b04      	subgt	r3, #4
 8008cf4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008cf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cf8:	f1a3 0302 	sub.w	r3, r3, #2
 8008cfc:	bfcc      	ite	gt
 8008cfe:	2400      	movgt	r4, #0
 8008d00:	2401      	movle	r4, #1
 8008d02:	2b03      	cmp	r3, #3
 8008d04:	d863      	bhi.n	8008dce <_dtoa_r+0x296>
 8008d06:	e8df f003 	tbb	[pc, r3]
 8008d0a:	372a      	.short	0x372a
 8008d0c:	5535      	.short	0x5535
 8008d0e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008d12:	441e      	add	r6, r3
 8008d14:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008d18:	2b20      	cmp	r3, #32
 8008d1a:	bfc1      	itttt	gt
 8008d1c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008d20:	409f      	lslgt	r7, r3
 8008d22:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008d26:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008d2a:	bfd6      	itet	le
 8008d2c:	f1c3 0320 	rsble	r3, r3, #32
 8008d30:	ea47 0003 	orrgt.w	r0, r7, r3
 8008d34:	fa04 f003 	lslle.w	r0, r4, r3
 8008d38:	f7f7 fbec 	bl	8000514 <__aeabi_ui2d>
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008d42:	3e01      	subs	r6, #1
 8008d44:	9214      	str	r2, [sp, #80]	@ 0x50
 8008d46:	e777      	b.n	8008c38 <_dtoa_r+0x100>
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e7b8      	b.n	8008cbe <_dtoa_r+0x186>
 8008d4c:	9012      	str	r0, [sp, #72]	@ 0x48
 8008d4e:	e7b7      	b.n	8008cc0 <_dtoa_r+0x188>
 8008d50:	427b      	negs	r3, r7
 8008d52:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d54:	2300      	movs	r3, #0
 8008d56:	eba8 0807 	sub.w	r8, r8, r7
 8008d5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008d5c:	e7c4      	b.n	8008ce8 <_dtoa_r+0x1b0>
 8008d5e:	2300      	movs	r3, #0
 8008d60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	dc35      	bgt.n	8008dd4 <_dtoa_r+0x29c>
 8008d68:	2301      	movs	r3, #1
 8008d6a:	9300      	str	r3, [sp, #0]
 8008d6c:	9307      	str	r3, [sp, #28]
 8008d6e:	461a      	mov	r2, r3
 8008d70:	920e      	str	r2, [sp, #56]	@ 0x38
 8008d72:	e00b      	b.n	8008d8c <_dtoa_r+0x254>
 8008d74:	2301      	movs	r3, #1
 8008d76:	e7f3      	b.n	8008d60 <_dtoa_r+0x228>
 8008d78:	2300      	movs	r3, #0
 8008d7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d7e:	18fb      	adds	r3, r7, r3
 8008d80:	9300      	str	r3, [sp, #0]
 8008d82:	3301      	adds	r3, #1
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	9307      	str	r3, [sp, #28]
 8008d88:	bfb8      	it	lt
 8008d8a:	2301      	movlt	r3, #1
 8008d8c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008d90:	2100      	movs	r1, #0
 8008d92:	2204      	movs	r2, #4
 8008d94:	f102 0514 	add.w	r5, r2, #20
 8008d98:	429d      	cmp	r5, r3
 8008d9a:	d91f      	bls.n	8008ddc <_dtoa_r+0x2a4>
 8008d9c:	6041      	str	r1, [r0, #4]
 8008d9e:	4658      	mov	r0, fp
 8008da0:	f000 fd8e 	bl	80098c0 <_Balloc>
 8008da4:	4682      	mov	sl, r0
 8008da6:	2800      	cmp	r0, #0
 8008da8:	d13c      	bne.n	8008e24 <_dtoa_r+0x2ec>
 8008daa:	4b1b      	ldr	r3, [pc, #108]	@ (8008e18 <_dtoa_r+0x2e0>)
 8008dac:	4602      	mov	r2, r0
 8008dae:	f240 11af 	movw	r1, #431	@ 0x1af
 8008db2:	e6d8      	b.n	8008b66 <_dtoa_r+0x2e>
 8008db4:	2301      	movs	r3, #1
 8008db6:	e7e0      	b.n	8008d7a <_dtoa_r+0x242>
 8008db8:	2401      	movs	r4, #1
 8008dba:	2300      	movs	r3, #0
 8008dbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dbe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8008dc4:	9300      	str	r3, [sp, #0]
 8008dc6:	9307      	str	r3, [sp, #28]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	2312      	movs	r3, #18
 8008dcc:	e7d0      	b.n	8008d70 <_dtoa_r+0x238>
 8008dce:	2301      	movs	r3, #1
 8008dd0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008dd2:	e7f5      	b.n	8008dc0 <_dtoa_r+0x288>
 8008dd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008dd6:	9300      	str	r3, [sp, #0]
 8008dd8:	9307      	str	r3, [sp, #28]
 8008dda:	e7d7      	b.n	8008d8c <_dtoa_r+0x254>
 8008ddc:	3101      	adds	r1, #1
 8008dde:	0052      	lsls	r2, r2, #1
 8008de0:	e7d8      	b.n	8008d94 <_dtoa_r+0x25c>
 8008de2:	bf00      	nop
 8008de4:	f3af 8000 	nop.w
 8008de8:	636f4361 	.word	0x636f4361
 8008dec:	3fd287a7 	.word	0x3fd287a7
 8008df0:	8b60c8b3 	.word	0x8b60c8b3
 8008df4:	3fc68a28 	.word	0x3fc68a28
 8008df8:	509f79fb 	.word	0x509f79fb
 8008dfc:	3fd34413 	.word	0x3fd34413
 8008e00:	0800ac21 	.word	0x0800ac21
 8008e04:	0800ac38 	.word	0x0800ac38
 8008e08:	7ff00000 	.word	0x7ff00000
 8008e0c:	0800abf1 	.word	0x0800abf1
 8008e10:	3ff80000 	.word	0x3ff80000
 8008e14:	0800ad30 	.word	0x0800ad30
 8008e18:	0800ac90 	.word	0x0800ac90
 8008e1c:	0800ac1d 	.word	0x0800ac1d
 8008e20:	0800abf0 	.word	0x0800abf0
 8008e24:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008e28:	6018      	str	r0, [r3, #0]
 8008e2a:	9b07      	ldr	r3, [sp, #28]
 8008e2c:	2b0e      	cmp	r3, #14
 8008e2e:	f200 80a4 	bhi.w	8008f7a <_dtoa_r+0x442>
 8008e32:	2c00      	cmp	r4, #0
 8008e34:	f000 80a1 	beq.w	8008f7a <_dtoa_r+0x442>
 8008e38:	2f00      	cmp	r7, #0
 8008e3a:	dd33      	ble.n	8008ea4 <_dtoa_r+0x36c>
 8008e3c:	4bad      	ldr	r3, [pc, #692]	@ (80090f4 <_dtoa_r+0x5bc>)
 8008e3e:	f007 020f 	and.w	r2, r7, #15
 8008e42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e46:	ed93 7b00 	vldr	d7, [r3]
 8008e4a:	05f8      	lsls	r0, r7, #23
 8008e4c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008e50:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008e54:	d516      	bpl.n	8008e84 <_dtoa_r+0x34c>
 8008e56:	4ba8      	ldr	r3, [pc, #672]	@ (80090f8 <_dtoa_r+0x5c0>)
 8008e58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e60:	f7f7 fcfc 	bl	800085c <__aeabi_ddiv>
 8008e64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e68:	f004 040f 	and.w	r4, r4, #15
 8008e6c:	2603      	movs	r6, #3
 8008e6e:	4da2      	ldr	r5, [pc, #648]	@ (80090f8 <_dtoa_r+0x5c0>)
 8008e70:	b954      	cbnz	r4, 8008e88 <_dtoa_r+0x350>
 8008e72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e7a:	f7f7 fcef 	bl	800085c <__aeabi_ddiv>
 8008e7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e82:	e028      	b.n	8008ed6 <_dtoa_r+0x39e>
 8008e84:	2602      	movs	r6, #2
 8008e86:	e7f2      	b.n	8008e6e <_dtoa_r+0x336>
 8008e88:	07e1      	lsls	r1, r4, #31
 8008e8a:	d508      	bpl.n	8008e9e <_dtoa_r+0x366>
 8008e8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e90:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008e94:	f7f7 fbb8 	bl	8000608 <__aeabi_dmul>
 8008e98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e9c:	3601      	adds	r6, #1
 8008e9e:	1064      	asrs	r4, r4, #1
 8008ea0:	3508      	adds	r5, #8
 8008ea2:	e7e5      	b.n	8008e70 <_dtoa_r+0x338>
 8008ea4:	f000 80d2 	beq.w	800904c <_dtoa_r+0x514>
 8008ea8:	427c      	negs	r4, r7
 8008eaa:	4b92      	ldr	r3, [pc, #584]	@ (80090f4 <_dtoa_r+0x5bc>)
 8008eac:	4d92      	ldr	r5, [pc, #584]	@ (80090f8 <_dtoa_r+0x5c0>)
 8008eae:	f004 020f 	and.w	r2, r4, #15
 8008eb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ebe:	f7f7 fba3 	bl	8000608 <__aeabi_dmul>
 8008ec2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ec6:	1124      	asrs	r4, r4, #4
 8008ec8:	2300      	movs	r3, #0
 8008eca:	2602      	movs	r6, #2
 8008ecc:	2c00      	cmp	r4, #0
 8008ece:	f040 80b2 	bne.w	8009036 <_dtoa_r+0x4fe>
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d1d3      	bne.n	8008e7e <_dtoa_r+0x346>
 8008ed6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008ed8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	f000 80b7 	beq.w	8009050 <_dtoa_r+0x518>
 8008ee2:	4b86      	ldr	r3, [pc, #536]	@ (80090fc <_dtoa_r+0x5c4>)
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	4629      	mov	r1, r5
 8008eea:	f7f7 fdff 	bl	8000aec <__aeabi_dcmplt>
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	f000 80ae 	beq.w	8009050 <_dtoa_r+0x518>
 8008ef4:	9b07      	ldr	r3, [sp, #28]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	f000 80aa 	beq.w	8009050 <_dtoa_r+0x518>
 8008efc:	9b00      	ldr	r3, [sp, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	dd37      	ble.n	8008f72 <_dtoa_r+0x43a>
 8008f02:	1e7b      	subs	r3, r7, #1
 8008f04:	9304      	str	r3, [sp, #16]
 8008f06:	4620      	mov	r0, r4
 8008f08:	4b7d      	ldr	r3, [pc, #500]	@ (8009100 <_dtoa_r+0x5c8>)
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	4629      	mov	r1, r5
 8008f0e:	f7f7 fb7b 	bl	8000608 <__aeabi_dmul>
 8008f12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f16:	9c00      	ldr	r4, [sp, #0]
 8008f18:	3601      	adds	r6, #1
 8008f1a:	4630      	mov	r0, r6
 8008f1c:	f7f7 fb0a 	bl	8000534 <__aeabi_i2d>
 8008f20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f24:	f7f7 fb70 	bl	8000608 <__aeabi_dmul>
 8008f28:	4b76      	ldr	r3, [pc, #472]	@ (8009104 <_dtoa_r+0x5cc>)
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f7f7 f9b6 	bl	800029c <__adddf3>
 8008f30:	4605      	mov	r5, r0
 8008f32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008f36:	2c00      	cmp	r4, #0
 8008f38:	f040 808d 	bne.w	8009056 <_dtoa_r+0x51e>
 8008f3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f40:	4b71      	ldr	r3, [pc, #452]	@ (8009108 <_dtoa_r+0x5d0>)
 8008f42:	2200      	movs	r2, #0
 8008f44:	f7f7 f9a8 	bl	8000298 <__aeabi_dsub>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f50:	462a      	mov	r2, r5
 8008f52:	4633      	mov	r3, r6
 8008f54:	f7f7 fde8 	bl	8000b28 <__aeabi_dcmpgt>
 8008f58:	2800      	cmp	r0, #0
 8008f5a:	f040 828b 	bne.w	8009474 <_dtoa_r+0x93c>
 8008f5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f62:	462a      	mov	r2, r5
 8008f64:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008f68:	f7f7 fdc0 	bl	8000aec <__aeabi_dcmplt>
 8008f6c:	2800      	cmp	r0, #0
 8008f6e:	f040 8128 	bne.w	80091c2 <_dtoa_r+0x68a>
 8008f72:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008f76:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008f7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	f2c0 815a 	blt.w	8009236 <_dtoa_r+0x6fe>
 8008f82:	2f0e      	cmp	r7, #14
 8008f84:	f300 8157 	bgt.w	8009236 <_dtoa_r+0x6fe>
 8008f88:	4b5a      	ldr	r3, [pc, #360]	@ (80090f4 <_dtoa_r+0x5bc>)
 8008f8a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008f8e:	ed93 7b00 	vldr	d7, [r3]
 8008f92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	ed8d 7b00 	vstr	d7, [sp]
 8008f9a:	da03      	bge.n	8008fa4 <_dtoa_r+0x46c>
 8008f9c:	9b07      	ldr	r3, [sp, #28]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	f340 8101 	ble.w	80091a6 <_dtoa_r+0x66e>
 8008fa4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008fa8:	4656      	mov	r6, sl
 8008faa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fae:	4620      	mov	r0, r4
 8008fb0:	4629      	mov	r1, r5
 8008fb2:	f7f7 fc53 	bl	800085c <__aeabi_ddiv>
 8008fb6:	f7f7 fdd7 	bl	8000b68 <__aeabi_d2iz>
 8008fba:	4680      	mov	r8, r0
 8008fbc:	f7f7 faba 	bl	8000534 <__aeabi_i2d>
 8008fc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fc4:	f7f7 fb20 	bl	8000608 <__aeabi_dmul>
 8008fc8:	4602      	mov	r2, r0
 8008fca:	460b      	mov	r3, r1
 8008fcc:	4620      	mov	r0, r4
 8008fce:	4629      	mov	r1, r5
 8008fd0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008fd4:	f7f7 f960 	bl	8000298 <__aeabi_dsub>
 8008fd8:	f806 4b01 	strb.w	r4, [r6], #1
 8008fdc:	9d07      	ldr	r5, [sp, #28]
 8008fde:	eba6 040a 	sub.w	r4, r6, sl
 8008fe2:	42a5      	cmp	r5, r4
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	f040 8117 	bne.w	800921a <_dtoa_r+0x6e2>
 8008fec:	f7f7 f956 	bl	800029c <__adddf3>
 8008ff0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ff4:	4604      	mov	r4, r0
 8008ff6:	460d      	mov	r5, r1
 8008ff8:	f7f7 fd96 	bl	8000b28 <__aeabi_dcmpgt>
 8008ffc:	2800      	cmp	r0, #0
 8008ffe:	f040 80f9 	bne.w	80091f4 <_dtoa_r+0x6bc>
 8009002:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009006:	4620      	mov	r0, r4
 8009008:	4629      	mov	r1, r5
 800900a:	f7f7 fd65 	bl	8000ad8 <__aeabi_dcmpeq>
 800900e:	b118      	cbz	r0, 8009018 <_dtoa_r+0x4e0>
 8009010:	f018 0f01 	tst.w	r8, #1
 8009014:	f040 80ee 	bne.w	80091f4 <_dtoa_r+0x6bc>
 8009018:	4649      	mov	r1, r9
 800901a:	4658      	mov	r0, fp
 800901c:	f000 fc90 	bl	8009940 <_Bfree>
 8009020:	2300      	movs	r3, #0
 8009022:	7033      	strb	r3, [r6, #0]
 8009024:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009026:	3701      	adds	r7, #1
 8009028:	601f      	str	r7, [r3, #0]
 800902a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800902c:	2b00      	cmp	r3, #0
 800902e:	f000 831d 	beq.w	800966c <_dtoa_r+0xb34>
 8009032:	601e      	str	r6, [r3, #0]
 8009034:	e31a      	b.n	800966c <_dtoa_r+0xb34>
 8009036:	07e2      	lsls	r2, r4, #31
 8009038:	d505      	bpl.n	8009046 <_dtoa_r+0x50e>
 800903a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800903e:	f7f7 fae3 	bl	8000608 <__aeabi_dmul>
 8009042:	3601      	adds	r6, #1
 8009044:	2301      	movs	r3, #1
 8009046:	1064      	asrs	r4, r4, #1
 8009048:	3508      	adds	r5, #8
 800904a:	e73f      	b.n	8008ecc <_dtoa_r+0x394>
 800904c:	2602      	movs	r6, #2
 800904e:	e742      	b.n	8008ed6 <_dtoa_r+0x39e>
 8009050:	9c07      	ldr	r4, [sp, #28]
 8009052:	9704      	str	r7, [sp, #16]
 8009054:	e761      	b.n	8008f1a <_dtoa_r+0x3e2>
 8009056:	4b27      	ldr	r3, [pc, #156]	@ (80090f4 <_dtoa_r+0x5bc>)
 8009058:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800905a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800905e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009062:	4454      	add	r4, sl
 8009064:	2900      	cmp	r1, #0
 8009066:	d053      	beq.n	8009110 <_dtoa_r+0x5d8>
 8009068:	4928      	ldr	r1, [pc, #160]	@ (800910c <_dtoa_r+0x5d4>)
 800906a:	2000      	movs	r0, #0
 800906c:	f7f7 fbf6 	bl	800085c <__aeabi_ddiv>
 8009070:	4633      	mov	r3, r6
 8009072:	462a      	mov	r2, r5
 8009074:	f7f7 f910 	bl	8000298 <__aeabi_dsub>
 8009078:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800907c:	4656      	mov	r6, sl
 800907e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009082:	f7f7 fd71 	bl	8000b68 <__aeabi_d2iz>
 8009086:	4605      	mov	r5, r0
 8009088:	f7f7 fa54 	bl	8000534 <__aeabi_i2d>
 800908c:	4602      	mov	r2, r0
 800908e:	460b      	mov	r3, r1
 8009090:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009094:	f7f7 f900 	bl	8000298 <__aeabi_dsub>
 8009098:	3530      	adds	r5, #48	@ 0x30
 800909a:	4602      	mov	r2, r0
 800909c:	460b      	mov	r3, r1
 800909e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80090a2:	f806 5b01 	strb.w	r5, [r6], #1
 80090a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80090aa:	f7f7 fd1f 	bl	8000aec <__aeabi_dcmplt>
 80090ae:	2800      	cmp	r0, #0
 80090b0:	d171      	bne.n	8009196 <_dtoa_r+0x65e>
 80090b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090b6:	4911      	ldr	r1, [pc, #68]	@ (80090fc <_dtoa_r+0x5c4>)
 80090b8:	2000      	movs	r0, #0
 80090ba:	f7f7 f8ed 	bl	8000298 <__aeabi_dsub>
 80090be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80090c2:	f7f7 fd13 	bl	8000aec <__aeabi_dcmplt>
 80090c6:	2800      	cmp	r0, #0
 80090c8:	f040 8095 	bne.w	80091f6 <_dtoa_r+0x6be>
 80090cc:	42a6      	cmp	r6, r4
 80090ce:	f43f af50 	beq.w	8008f72 <_dtoa_r+0x43a>
 80090d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80090d6:	4b0a      	ldr	r3, [pc, #40]	@ (8009100 <_dtoa_r+0x5c8>)
 80090d8:	2200      	movs	r2, #0
 80090da:	f7f7 fa95 	bl	8000608 <__aeabi_dmul>
 80090de:	4b08      	ldr	r3, [pc, #32]	@ (8009100 <_dtoa_r+0x5c8>)
 80090e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80090e4:	2200      	movs	r2, #0
 80090e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090ea:	f7f7 fa8d 	bl	8000608 <__aeabi_dmul>
 80090ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090f2:	e7c4      	b.n	800907e <_dtoa_r+0x546>
 80090f4:	0800ad30 	.word	0x0800ad30
 80090f8:	0800ad08 	.word	0x0800ad08
 80090fc:	3ff00000 	.word	0x3ff00000
 8009100:	40240000 	.word	0x40240000
 8009104:	401c0000 	.word	0x401c0000
 8009108:	40140000 	.word	0x40140000
 800910c:	3fe00000 	.word	0x3fe00000
 8009110:	4631      	mov	r1, r6
 8009112:	4628      	mov	r0, r5
 8009114:	f7f7 fa78 	bl	8000608 <__aeabi_dmul>
 8009118:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800911c:	9415      	str	r4, [sp, #84]	@ 0x54
 800911e:	4656      	mov	r6, sl
 8009120:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009124:	f7f7 fd20 	bl	8000b68 <__aeabi_d2iz>
 8009128:	4605      	mov	r5, r0
 800912a:	f7f7 fa03 	bl	8000534 <__aeabi_i2d>
 800912e:	4602      	mov	r2, r0
 8009130:	460b      	mov	r3, r1
 8009132:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009136:	f7f7 f8af 	bl	8000298 <__aeabi_dsub>
 800913a:	3530      	adds	r5, #48	@ 0x30
 800913c:	f806 5b01 	strb.w	r5, [r6], #1
 8009140:	4602      	mov	r2, r0
 8009142:	460b      	mov	r3, r1
 8009144:	42a6      	cmp	r6, r4
 8009146:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800914a:	f04f 0200 	mov.w	r2, #0
 800914e:	d124      	bne.n	800919a <_dtoa_r+0x662>
 8009150:	4bac      	ldr	r3, [pc, #688]	@ (8009404 <_dtoa_r+0x8cc>)
 8009152:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009156:	f7f7 f8a1 	bl	800029c <__adddf3>
 800915a:	4602      	mov	r2, r0
 800915c:	460b      	mov	r3, r1
 800915e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009162:	f7f7 fce1 	bl	8000b28 <__aeabi_dcmpgt>
 8009166:	2800      	cmp	r0, #0
 8009168:	d145      	bne.n	80091f6 <_dtoa_r+0x6be>
 800916a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800916e:	49a5      	ldr	r1, [pc, #660]	@ (8009404 <_dtoa_r+0x8cc>)
 8009170:	2000      	movs	r0, #0
 8009172:	f7f7 f891 	bl	8000298 <__aeabi_dsub>
 8009176:	4602      	mov	r2, r0
 8009178:	460b      	mov	r3, r1
 800917a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800917e:	f7f7 fcb5 	bl	8000aec <__aeabi_dcmplt>
 8009182:	2800      	cmp	r0, #0
 8009184:	f43f aef5 	beq.w	8008f72 <_dtoa_r+0x43a>
 8009188:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800918a:	1e73      	subs	r3, r6, #1
 800918c:	9315      	str	r3, [sp, #84]	@ 0x54
 800918e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009192:	2b30      	cmp	r3, #48	@ 0x30
 8009194:	d0f8      	beq.n	8009188 <_dtoa_r+0x650>
 8009196:	9f04      	ldr	r7, [sp, #16]
 8009198:	e73e      	b.n	8009018 <_dtoa_r+0x4e0>
 800919a:	4b9b      	ldr	r3, [pc, #620]	@ (8009408 <_dtoa_r+0x8d0>)
 800919c:	f7f7 fa34 	bl	8000608 <__aeabi_dmul>
 80091a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091a4:	e7bc      	b.n	8009120 <_dtoa_r+0x5e8>
 80091a6:	d10c      	bne.n	80091c2 <_dtoa_r+0x68a>
 80091a8:	4b98      	ldr	r3, [pc, #608]	@ (800940c <_dtoa_r+0x8d4>)
 80091aa:	2200      	movs	r2, #0
 80091ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091b0:	f7f7 fa2a 	bl	8000608 <__aeabi_dmul>
 80091b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80091b8:	f7f7 fcac 	bl	8000b14 <__aeabi_dcmpge>
 80091bc:	2800      	cmp	r0, #0
 80091be:	f000 8157 	beq.w	8009470 <_dtoa_r+0x938>
 80091c2:	2400      	movs	r4, #0
 80091c4:	4625      	mov	r5, r4
 80091c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091c8:	43db      	mvns	r3, r3
 80091ca:	9304      	str	r3, [sp, #16]
 80091cc:	4656      	mov	r6, sl
 80091ce:	2700      	movs	r7, #0
 80091d0:	4621      	mov	r1, r4
 80091d2:	4658      	mov	r0, fp
 80091d4:	f000 fbb4 	bl	8009940 <_Bfree>
 80091d8:	2d00      	cmp	r5, #0
 80091da:	d0dc      	beq.n	8009196 <_dtoa_r+0x65e>
 80091dc:	b12f      	cbz	r7, 80091ea <_dtoa_r+0x6b2>
 80091de:	42af      	cmp	r7, r5
 80091e0:	d003      	beq.n	80091ea <_dtoa_r+0x6b2>
 80091e2:	4639      	mov	r1, r7
 80091e4:	4658      	mov	r0, fp
 80091e6:	f000 fbab 	bl	8009940 <_Bfree>
 80091ea:	4629      	mov	r1, r5
 80091ec:	4658      	mov	r0, fp
 80091ee:	f000 fba7 	bl	8009940 <_Bfree>
 80091f2:	e7d0      	b.n	8009196 <_dtoa_r+0x65e>
 80091f4:	9704      	str	r7, [sp, #16]
 80091f6:	4633      	mov	r3, r6
 80091f8:	461e      	mov	r6, r3
 80091fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091fe:	2a39      	cmp	r2, #57	@ 0x39
 8009200:	d107      	bne.n	8009212 <_dtoa_r+0x6da>
 8009202:	459a      	cmp	sl, r3
 8009204:	d1f8      	bne.n	80091f8 <_dtoa_r+0x6c0>
 8009206:	9a04      	ldr	r2, [sp, #16]
 8009208:	3201      	adds	r2, #1
 800920a:	9204      	str	r2, [sp, #16]
 800920c:	2230      	movs	r2, #48	@ 0x30
 800920e:	f88a 2000 	strb.w	r2, [sl]
 8009212:	781a      	ldrb	r2, [r3, #0]
 8009214:	3201      	adds	r2, #1
 8009216:	701a      	strb	r2, [r3, #0]
 8009218:	e7bd      	b.n	8009196 <_dtoa_r+0x65e>
 800921a:	4b7b      	ldr	r3, [pc, #492]	@ (8009408 <_dtoa_r+0x8d0>)
 800921c:	2200      	movs	r2, #0
 800921e:	f7f7 f9f3 	bl	8000608 <__aeabi_dmul>
 8009222:	2200      	movs	r2, #0
 8009224:	2300      	movs	r3, #0
 8009226:	4604      	mov	r4, r0
 8009228:	460d      	mov	r5, r1
 800922a:	f7f7 fc55 	bl	8000ad8 <__aeabi_dcmpeq>
 800922e:	2800      	cmp	r0, #0
 8009230:	f43f aebb 	beq.w	8008faa <_dtoa_r+0x472>
 8009234:	e6f0      	b.n	8009018 <_dtoa_r+0x4e0>
 8009236:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009238:	2a00      	cmp	r2, #0
 800923a:	f000 80db 	beq.w	80093f4 <_dtoa_r+0x8bc>
 800923e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009240:	2a01      	cmp	r2, #1
 8009242:	f300 80bf 	bgt.w	80093c4 <_dtoa_r+0x88c>
 8009246:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009248:	2a00      	cmp	r2, #0
 800924a:	f000 80b7 	beq.w	80093bc <_dtoa_r+0x884>
 800924e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009252:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009254:	4646      	mov	r6, r8
 8009256:	9a08      	ldr	r2, [sp, #32]
 8009258:	2101      	movs	r1, #1
 800925a:	441a      	add	r2, r3
 800925c:	4658      	mov	r0, fp
 800925e:	4498      	add	r8, r3
 8009260:	9208      	str	r2, [sp, #32]
 8009262:	f000 fc21 	bl	8009aa8 <__i2b>
 8009266:	4605      	mov	r5, r0
 8009268:	b15e      	cbz	r6, 8009282 <_dtoa_r+0x74a>
 800926a:	9b08      	ldr	r3, [sp, #32]
 800926c:	2b00      	cmp	r3, #0
 800926e:	dd08      	ble.n	8009282 <_dtoa_r+0x74a>
 8009270:	42b3      	cmp	r3, r6
 8009272:	9a08      	ldr	r2, [sp, #32]
 8009274:	bfa8      	it	ge
 8009276:	4633      	movge	r3, r6
 8009278:	eba8 0803 	sub.w	r8, r8, r3
 800927c:	1af6      	subs	r6, r6, r3
 800927e:	1ad3      	subs	r3, r2, r3
 8009280:	9308      	str	r3, [sp, #32]
 8009282:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009284:	b1f3      	cbz	r3, 80092c4 <_dtoa_r+0x78c>
 8009286:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009288:	2b00      	cmp	r3, #0
 800928a:	f000 80b7 	beq.w	80093fc <_dtoa_r+0x8c4>
 800928e:	b18c      	cbz	r4, 80092b4 <_dtoa_r+0x77c>
 8009290:	4629      	mov	r1, r5
 8009292:	4622      	mov	r2, r4
 8009294:	4658      	mov	r0, fp
 8009296:	f000 fcc7 	bl	8009c28 <__pow5mult>
 800929a:	464a      	mov	r2, r9
 800929c:	4601      	mov	r1, r0
 800929e:	4605      	mov	r5, r0
 80092a0:	4658      	mov	r0, fp
 80092a2:	f000 fc17 	bl	8009ad4 <__multiply>
 80092a6:	4649      	mov	r1, r9
 80092a8:	9004      	str	r0, [sp, #16]
 80092aa:	4658      	mov	r0, fp
 80092ac:	f000 fb48 	bl	8009940 <_Bfree>
 80092b0:	9b04      	ldr	r3, [sp, #16]
 80092b2:	4699      	mov	r9, r3
 80092b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092b6:	1b1a      	subs	r2, r3, r4
 80092b8:	d004      	beq.n	80092c4 <_dtoa_r+0x78c>
 80092ba:	4649      	mov	r1, r9
 80092bc:	4658      	mov	r0, fp
 80092be:	f000 fcb3 	bl	8009c28 <__pow5mult>
 80092c2:	4681      	mov	r9, r0
 80092c4:	2101      	movs	r1, #1
 80092c6:	4658      	mov	r0, fp
 80092c8:	f000 fbee 	bl	8009aa8 <__i2b>
 80092cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092ce:	4604      	mov	r4, r0
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	f000 81cf 	beq.w	8009674 <_dtoa_r+0xb3c>
 80092d6:	461a      	mov	r2, r3
 80092d8:	4601      	mov	r1, r0
 80092da:	4658      	mov	r0, fp
 80092dc:	f000 fca4 	bl	8009c28 <__pow5mult>
 80092e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	4604      	mov	r4, r0
 80092e6:	f300 8095 	bgt.w	8009414 <_dtoa_r+0x8dc>
 80092ea:	9b02      	ldr	r3, [sp, #8]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	f040 8087 	bne.w	8009400 <_dtoa_r+0x8c8>
 80092f2:	9b03      	ldr	r3, [sp, #12]
 80092f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	f040 8089 	bne.w	8009410 <_dtoa_r+0x8d8>
 80092fe:	9b03      	ldr	r3, [sp, #12]
 8009300:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009304:	0d1b      	lsrs	r3, r3, #20
 8009306:	051b      	lsls	r3, r3, #20
 8009308:	b12b      	cbz	r3, 8009316 <_dtoa_r+0x7de>
 800930a:	9b08      	ldr	r3, [sp, #32]
 800930c:	3301      	adds	r3, #1
 800930e:	9308      	str	r3, [sp, #32]
 8009310:	f108 0801 	add.w	r8, r8, #1
 8009314:	2301      	movs	r3, #1
 8009316:	930a      	str	r3, [sp, #40]	@ 0x28
 8009318:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800931a:	2b00      	cmp	r3, #0
 800931c:	f000 81b0 	beq.w	8009680 <_dtoa_r+0xb48>
 8009320:	6923      	ldr	r3, [r4, #16]
 8009322:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009326:	6918      	ldr	r0, [r3, #16]
 8009328:	f000 fb72 	bl	8009a10 <__hi0bits>
 800932c:	f1c0 0020 	rsb	r0, r0, #32
 8009330:	9b08      	ldr	r3, [sp, #32]
 8009332:	4418      	add	r0, r3
 8009334:	f010 001f 	ands.w	r0, r0, #31
 8009338:	d077      	beq.n	800942a <_dtoa_r+0x8f2>
 800933a:	f1c0 0320 	rsb	r3, r0, #32
 800933e:	2b04      	cmp	r3, #4
 8009340:	dd6b      	ble.n	800941a <_dtoa_r+0x8e2>
 8009342:	9b08      	ldr	r3, [sp, #32]
 8009344:	f1c0 001c 	rsb	r0, r0, #28
 8009348:	4403      	add	r3, r0
 800934a:	4480      	add	r8, r0
 800934c:	4406      	add	r6, r0
 800934e:	9308      	str	r3, [sp, #32]
 8009350:	f1b8 0f00 	cmp.w	r8, #0
 8009354:	dd05      	ble.n	8009362 <_dtoa_r+0x82a>
 8009356:	4649      	mov	r1, r9
 8009358:	4642      	mov	r2, r8
 800935a:	4658      	mov	r0, fp
 800935c:	f000 fcbe 	bl	8009cdc <__lshift>
 8009360:	4681      	mov	r9, r0
 8009362:	9b08      	ldr	r3, [sp, #32]
 8009364:	2b00      	cmp	r3, #0
 8009366:	dd05      	ble.n	8009374 <_dtoa_r+0x83c>
 8009368:	4621      	mov	r1, r4
 800936a:	461a      	mov	r2, r3
 800936c:	4658      	mov	r0, fp
 800936e:	f000 fcb5 	bl	8009cdc <__lshift>
 8009372:	4604      	mov	r4, r0
 8009374:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009376:	2b00      	cmp	r3, #0
 8009378:	d059      	beq.n	800942e <_dtoa_r+0x8f6>
 800937a:	4621      	mov	r1, r4
 800937c:	4648      	mov	r0, r9
 800937e:	f000 fd19 	bl	8009db4 <__mcmp>
 8009382:	2800      	cmp	r0, #0
 8009384:	da53      	bge.n	800942e <_dtoa_r+0x8f6>
 8009386:	1e7b      	subs	r3, r7, #1
 8009388:	9304      	str	r3, [sp, #16]
 800938a:	4649      	mov	r1, r9
 800938c:	2300      	movs	r3, #0
 800938e:	220a      	movs	r2, #10
 8009390:	4658      	mov	r0, fp
 8009392:	f000 faf7 	bl	8009984 <__multadd>
 8009396:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009398:	4681      	mov	r9, r0
 800939a:	2b00      	cmp	r3, #0
 800939c:	f000 8172 	beq.w	8009684 <_dtoa_r+0xb4c>
 80093a0:	2300      	movs	r3, #0
 80093a2:	4629      	mov	r1, r5
 80093a4:	220a      	movs	r2, #10
 80093a6:	4658      	mov	r0, fp
 80093a8:	f000 faec 	bl	8009984 <__multadd>
 80093ac:	9b00      	ldr	r3, [sp, #0]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	4605      	mov	r5, r0
 80093b2:	dc67      	bgt.n	8009484 <_dtoa_r+0x94c>
 80093b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093b6:	2b02      	cmp	r3, #2
 80093b8:	dc41      	bgt.n	800943e <_dtoa_r+0x906>
 80093ba:	e063      	b.n	8009484 <_dtoa_r+0x94c>
 80093bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80093be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80093c2:	e746      	b.n	8009252 <_dtoa_r+0x71a>
 80093c4:	9b07      	ldr	r3, [sp, #28]
 80093c6:	1e5c      	subs	r4, r3, #1
 80093c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093ca:	42a3      	cmp	r3, r4
 80093cc:	bfbf      	itttt	lt
 80093ce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80093d0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80093d2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80093d4:	1ae3      	sublt	r3, r4, r3
 80093d6:	bfb4      	ite	lt
 80093d8:	18d2      	addlt	r2, r2, r3
 80093da:	1b1c      	subge	r4, r3, r4
 80093dc:	9b07      	ldr	r3, [sp, #28]
 80093de:	bfbc      	itt	lt
 80093e0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80093e2:	2400      	movlt	r4, #0
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	bfb5      	itete	lt
 80093e8:	eba8 0603 	sublt.w	r6, r8, r3
 80093ec:	9b07      	ldrge	r3, [sp, #28]
 80093ee:	2300      	movlt	r3, #0
 80093f0:	4646      	movge	r6, r8
 80093f2:	e730      	b.n	8009256 <_dtoa_r+0x71e>
 80093f4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80093f6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80093f8:	4646      	mov	r6, r8
 80093fa:	e735      	b.n	8009268 <_dtoa_r+0x730>
 80093fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80093fe:	e75c      	b.n	80092ba <_dtoa_r+0x782>
 8009400:	2300      	movs	r3, #0
 8009402:	e788      	b.n	8009316 <_dtoa_r+0x7de>
 8009404:	3fe00000 	.word	0x3fe00000
 8009408:	40240000 	.word	0x40240000
 800940c:	40140000 	.word	0x40140000
 8009410:	9b02      	ldr	r3, [sp, #8]
 8009412:	e780      	b.n	8009316 <_dtoa_r+0x7de>
 8009414:	2300      	movs	r3, #0
 8009416:	930a      	str	r3, [sp, #40]	@ 0x28
 8009418:	e782      	b.n	8009320 <_dtoa_r+0x7e8>
 800941a:	d099      	beq.n	8009350 <_dtoa_r+0x818>
 800941c:	9a08      	ldr	r2, [sp, #32]
 800941e:	331c      	adds	r3, #28
 8009420:	441a      	add	r2, r3
 8009422:	4498      	add	r8, r3
 8009424:	441e      	add	r6, r3
 8009426:	9208      	str	r2, [sp, #32]
 8009428:	e792      	b.n	8009350 <_dtoa_r+0x818>
 800942a:	4603      	mov	r3, r0
 800942c:	e7f6      	b.n	800941c <_dtoa_r+0x8e4>
 800942e:	9b07      	ldr	r3, [sp, #28]
 8009430:	9704      	str	r7, [sp, #16]
 8009432:	2b00      	cmp	r3, #0
 8009434:	dc20      	bgt.n	8009478 <_dtoa_r+0x940>
 8009436:	9300      	str	r3, [sp, #0]
 8009438:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800943a:	2b02      	cmp	r3, #2
 800943c:	dd1e      	ble.n	800947c <_dtoa_r+0x944>
 800943e:	9b00      	ldr	r3, [sp, #0]
 8009440:	2b00      	cmp	r3, #0
 8009442:	f47f aec0 	bne.w	80091c6 <_dtoa_r+0x68e>
 8009446:	4621      	mov	r1, r4
 8009448:	2205      	movs	r2, #5
 800944a:	4658      	mov	r0, fp
 800944c:	f000 fa9a 	bl	8009984 <__multadd>
 8009450:	4601      	mov	r1, r0
 8009452:	4604      	mov	r4, r0
 8009454:	4648      	mov	r0, r9
 8009456:	f000 fcad 	bl	8009db4 <__mcmp>
 800945a:	2800      	cmp	r0, #0
 800945c:	f77f aeb3 	ble.w	80091c6 <_dtoa_r+0x68e>
 8009460:	4656      	mov	r6, sl
 8009462:	2331      	movs	r3, #49	@ 0x31
 8009464:	f806 3b01 	strb.w	r3, [r6], #1
 8009468:	9b04      	ldr	r3, [sp, #16]
 800946a:	3301      	adds	r3, #1
 800946c:	9304      	str	r3, [sp, #16]
 800946e:	e6ae      	b.n	80091ce <_dtoa_r+0x696>
 8009470:	9c07      	ldr	r4, [sp, #28]
 8009472:	9704      	str	r7, [sp, #16]
 8009474:	4625      	mov	r5, r4
 8009476:	e7f3      	b.n	8009460 <_dtoa_r+0x928>
 8009478:	9b07      	ldr	r3, [sp, #28]
 800947a:	9300      	str	r3, [sp, #0]
 800947c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800947e:	2b00      	cmp	r3, #0
 8009480:	f000 8104 	beq.w	800968c <_dtoa_r+0xb54>
 8009484:	2e00      	cmp	r6, #0
 8009486:	dd05      	ble.n	8009494 <_dtoa_r+0x95c>
 8009488:	4629      	mov	r1, r5
 800948a:	4632      	mov	r2, r6
 800948c:	4658      	mov	r0, fp
 800948e:	f000 fc25 	bl	8009cdc <__lshift>
 8009492:	4605      	mov	r5, r0
 8009494:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009496:	2b00      	cmp	r3, #0
 8009498:	d05a      	beq.n	8009550 <_dtoa_r+0xa18>
 800949a:	6869      	ldr	r1, [r5, #4]
 800949c:	4658      	mov	r0, fp
 800949e:	f000 fa0f 	bl	80098c0 <_Balloc>
 80094a2:	4606      	mov	r6, r0
 80094a4:	b928      	cbnz	r0, 80094b2 <_dtoa_r+0x97a>
 80094a6:	4b84      	ldr	r3, [pc, #528]	@ (80096b8 <_dtoa_r+0xb80>)
 80094a8:	4602      	mov	r2, r0
 80094aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80094ae:	f7ff bb5a 	b.w	8008b66 <_dtoa_r+0x2e>
 80094b2:	692a      	ldr	r2, [r5, #16]
 80094b4:	3202      	adds	r2, #2
 80094b6:	0092      	lsls	r2, r2, #2
 80094b8:	f105 010c 	add.w	r1, r5, #12
 80094bc:	300c      	adds	r0, #12
 80094be:	f001 f985 	bl	800a7cc <memcpy>
 80094c2:	2201      	movs	r2, #1
 80094c4:	4631      	mov	r1, r6
 80094c6:	4658      	mov	r0, fp
 80094c8:	f000 fc08 	bl	8009cdc <__lshift>
 80094cc:	f10a 0301 	add.w	r3, sl, #1
 80094d0:	9307      	str	r3, [sp, #28]
 80094d2:	9b00      	ldr	r3, [sp, #0]
 80094d4:	4453      	add	r3, sl
 80094d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80094d8:	9b02      	ldr	r3, [sp, #8]
 80094da:	f003 0301 	and.w	r3, r3, #1
 80094de:	462f      	mov	r7, r5
 80094e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80094e2:	4605      	mov	r5, r0
 80094e4:	9b07      	ldr	r3, [sp, #28]
 80094e6:	4621      	mov	r1, r4
 80094e8:	3b01      	subs	r3, #1
 80094ea:	4648      	mov	r0, r9
 80094ec:	9300      	str	r3, [sp, #0]
 80094ee:	f7ff fa98 	bl	8008a22 <quorem>
 80094f2:	4639      	mov	r1, r7
 80094f4:	9002      	str	r0, [sp, #8]
 80094f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80094fa:	4648      	mov	r0, r9
 80094fc:	f000 fc5a 	bl	8009db4 <__mcmp>
 8009500:	462a      	mov	r2, r5
 8009502:	9008      	str	r0, [sp, #32]
 8009504:	4621      	mov	r1, r4
 8009506:	4658      	mov	r0, fp
 8009508:	f000 fc70 	bl	8009dec <__mdiff>
 800950c:	68c2      	ldr	r2, [r0, #12]
 800950e:	4606      	mov	r6, r0
 8009510:	bb02      	cbnz	r2, 8009554 <_dtoa_r+0xa1c>
 8009512:	4601      	mov	r1, r0
 8009514:	4648      	mov	r0, r9
 8009516:	f000 fc4d 	bl	8009db4 <__mcmp>
 800951a:	4602      	mov	r2, r0
 800951c:	4631      	mov	r1, r6
 800951e:	4658      	mov	r0, fp
 8009520:	920e      	str	r2, [sp, #56]	@ 0x38
 8009522:	f000 fa0d 	bl	8009940 <_Bfree>
 8009526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009528:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800952a:	9e07      	ldr	r6, [sp, #28]
 800952c:	ea43 0102 	orr.w	r1, r3, r2
 8009530:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009532:	4319      	orrs	r1, r3
 8009534:	d110      	bne.n	8009558 <_dtoa_r+0xa20>
 8009536:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800953a:	d029      	beq.n	8009590 <_dtoa_r+0xa58>
 800953c:	9b08      	ldr	r3, [sp, #32]
 800953e:	2b00      	cmp	r3, #0
 8009540:	dd02      	ble.n	8009548 <_dtoa_r+0xa10>
 8009542:	9b02      	ldr	r3, [sp, #8]
 8009544:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009548:	9b00      	ldr	r3, [sp, #0]
 800954a:	f883 8000 	strb.w	r8, [r3]
 800954e:	e63f      	b.n	80091d0 <_dtoa_r+0x698>
 8009550:	4628      	mov	r0, r5
 8009552:	e7bb      	b.n	80094cc <_dtoa_r+0x994>
 8009554:	2201      	movs	r2, #1
 8009556:	e7e1      	b.n	800951c <_dtoa_r+0x9e4>
 8009558:	9b08      	ldr	r3, [sp, #32]
 800955a:	2b00      	cmp	r3, #0
 800955c:	db04      	blt.n	8009568 <_dtoa_r+0xa30>
 800955e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009560:	430b      	orrs	r3, r1
 8009562:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009564:	430b      	orrs	r3, r1
 8009566:	d120      	bne.n	80095aa <_dtoa_r+0xa72>
 8009568:	2a00      	cmp	r2, #0
 800956a:	dded      	ble.n	8009548 <_dtoa_r+0xa10>
 800956c:	4649      	mov	r1, r9
 800956e:	2201      	movs	r2, #1
 8009570:	4658      	mov	r0, fp
 8009572:	f000 fbb3 	bl	8009cdc <__lshift>
 8009576:	4621      	mov	r1, r4
 8009578:	4681      	mov	r9, r0
 800957a:	f000 fc1b 	bl	8009db4 <__mcmp>
 800957e:	2800      	cmp	r0, #0
 8009580:	dc03      	bgt.n	800958a <_dtoa_r+0xa52>
 8009582:	d1e1      	bne.n	8009548 <_dtoa_r+0xa10>
 8009584:	f018 0f01 	tst.w	r8, #1
 8009588:	d0de      	beq.n	8009548 <_dtoa_r+0xa10>
 800958a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800958e:	d1d8      	bne.n	8009542 <_dtoa_r+0xa0a>
 8009590:	9a00      	ldr	r2, [sp, #0]
 8009592:	2339      	movs	r3, #57	@ 0x39
 8009594:	7013      	strb	r3, [r2, #0]
 8009596:	4633      	mov	r3, r6
 8009598:	461e      	mov	r6, r3
 800959a:	3b01      	subs	r3, #1
 800959c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80095a0:	2a39      	cmp	r2, #57	@ 0x39
 80095a2:	d052      	beq.n	800964a <_dtoa_r+0xb12>
 80095a4:	3201      	adds	r2, #1
 80095a6:	701a      	strb	r2, [r3, #0]
 80095a8:	e612      	b.n	80091d0 <_dtoa_r+0x698>
 80095aa:	2a00      	cmp	r2, #0
 80095ac:	dd07      	ble.n	80095be <_dtoa_r+0xa86>
 80095ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80095b2:	d0ed      	beq.n	8009590 <_dtoa_r+0xa58>
 80095b4:	9a00      	ldr	r2, [sp, #0]
 80095b6:	f108 0301 	add.w	r3, r8, #1
 80095ba:	7013      	strb	r3, [r2, #0]
 80095bc:	e608      	b.n	80091d0 <_dtoa_r+0x698>
 80095be:	9b07      	ldr	r3, [sp, #28]
 80095c0:	9a07      	ldr	r2, [sp, #28]
 80095c2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80095c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d028      	beq.n	800961e <_dtoa_r+0xae6>
 80095cc:	4649      	mov	r1, r9
 80095ce:	2300      	movs	r3, #0
 80095d0:	220a      	movs	r2, #10
 80095d2:	4658      	mov	r0, fp
 80095d4:	f000 f9d6 	bl	8009984 <__multadd>
 80095d8:	42af      	cmp	r7, r5
 80095da:	4681      	mov	r9, r0
 80095dc:	f04f 0300 	mov.w	r3, #0
 80095e0:	f04f 020a 	mov.w	r2, #10
 80095e4:	4639      	mov	r1, r7
 80095e6:	4658      	mov	r0, fp
 80095e8:	d107      	bne.n	80095fa <_dtoa_r+0xac2>
 80095ea:	f000 f9cb 	bl	8009984 <__multadd>
 80095ee:	4607      	mov	r7, r0
 80095f0:	4605      	mov	r5, r0
 80095f2:	9b07      	ldr	r3, [sp, #28]
 80095f4:	3301      	adds	r3, #1
 80095f6:	9307      	str	r3, [sp, #28]
 80095f8:	e774      	b.n	80094e4 <_dtoa_r+0x9ac>
 80095fa:	f000 f9c3 	bl	8009984 <__multadd>
 80095fe:	4629      	mov	r1, r5
 8009600:	4607      	mov	r7, r0
 8009602:	2300      	movs	r3, #0
 8009604:	220a      	movs	r2, #10
 8009606:	4658      	mov	r0, fp
 8009608:	f000 f9bc 	bl	8009984 <__multadd>
 800960c:	4605      	mov	r5, r0
 800960e:	e7f0      	b.n	80095f2 <_dtoa_r+0xaba>
 8009610:	9b00      	ldr	r3, [sp, #0]
 8009612:	2b00      	cmp	r3, #0
 8009614:	bfcc      	ite	gt
 8009616:	461e      	movgt	r6, r3
 8009618:	2601      	movle	r6, #1
 800961a:	4456      	add	r6, sl
 800961c:	2700      	movs	r7, #0
 800961e:	4649      	mov	r1, r9
 8009620:	2201      	movs	r2, #1
 8009622:	4658      	mov	r0, fp
 8009624:	f000 fb5a 	bl	8009cdc <__lshift>
 8009628:	4621      	mov	r1, r4
 800962a:	4681      	mov	r9, r0
 800962c:	f000 fbc2 	bl	8009db4 <__mcmp>
 8009630:	2800      	cmp	r0, #0
 8009632:	dcb0      	bgt.n	8009596 <_dtoa_r+0xa5e>
 8009634:	d102      	bne.n	800963c <_dtoa_r+0xb04>
 8009636:	f018 0f01 	tst.w	r8, #1
 800963a:	d1ac      	bne.n	8009596 <_dtoa_r+0xa5e>
 800963c:	4633      	mov	r3, r6
 800963e:	461e      	mov	r6, r3
 8009640:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009644:	2a30      	cmp	r2, #48	@ 0x30
 8009646:	d0fa      	beq.n	800963e <_dtoa_r+0xb06>
 8009648:	e5c2      	b.n	80091d0 <_dtoa_r+0x698>
 800964a:	459a      	cmp	sl, r3
 800964c:	d1a4      	bne.n	8009598 <_dtoa_r+0xa60>
 800964e:	9b04      	ldr	r3, [sp, #16]
 8009650:	3301      	adds	r3, #1
 8009652:	9304      	str	r3, [sp, #16]
 8009654:	2331      	movs	r3, #49	@ 0x31
 8009656:	f88a 3000 	strb.w	r3, [sl]
 800965a:	e5b9      	b.n	80091d0 <_dtoa_r+0x698>
 800965c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800965e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80096bc <_dtoa_r+0xb84>
 8009662:	b11b      	cbz	r3, 800966c <_dtoa_r+0xb34>
 8009664:	f10a 0308 	add.w	r3, sl, #8
 8009668:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800966a:	6013      	str	r3, [r2, #0]
 800966c:	4650      	mov	r0, sl
 800966e:	b019      	add	sp, #100	@ 0x64
 8009670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009674:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009676:	2b01      	cmp	r3, #1
 8009678:	f77f ae37 	ble.w	80092ea <_dtoa_r+0x7b2>
 800967c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800967e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009680:	2001      	movs	r0, #1
 8009682:	e655      	b.n	8009330 <_dtoa_r+0x7f8>
 8009684:	9b00      	ldr	r3, [sp, #0]
 8009686:	2b00      	cmp	r3, #0
 8009688:	f77f aed6 	ble.w	8009438 <_dtoa_r+0x900>
 800968c:	4656      	mov	r6, sl
 800968e:	4621      	mov	r1, r4
 8009690:	4648      	mov	r0, r9
 8009692:	f7ff f9c6 	bl	8008a22 <quorem>
 8009696:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800969a:	f806 8b01 	strb.w	r8, [r6], #1
 800969e:	9b00      	ldr	r3, [sp, #0]
 80096a0:	eba6 020a 	sub.w	r2, r6, sl
 80096a4:	4293      	cmp	r3, r2
 80096a6:	ddb3      	ble.n	8009610 <_dtoa_r+0xad8>
 80096a8:	4649      	mov	r1, r9
 80096aa:	2300      	movs	r3, #0
 80096ac:	220a      	movs	r2, #10
 80096ae:	4658      	mov	r0, fp
 80096b0:	f000 f968 	bl	8009984 <__multadd>
 80096b4:	4681      	mov	r9, r0
 80096b6:	e7ea      	b.n	800968e <_dtoa_r+0xb56>
 80096b8:	0800ac90 	.word	0x0800ac90
 80096bc:	0800ac14 	.word	0x0800ac14

080096c0 <_free_r>:
 80096c0:	b538      	push	{r3, r4, r5, lr}
 80096c2:	4605      	mov	r5, r0
 80096c4:	2900      	cmp	r1, #0
 80096c6:	d041      	beq.n	800974c <_free_r+0x8c>
 80096c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096cc:	1f0c      	subs	r4, r1, #4
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	bfb8      	it	lt
 80096d2:	18e4      	addlt	r4, r4, r3
 80096d4:	f000 f8e8 	bl	80098a8 <__malloc_lock>
 80096d8:	4a1d      	ldr	r2, [pc, #116]	@ (8009750 <_free_r+0x90>)
 80096da:	6813      	ldr	r3, [r2, #0]
 80096dc:	b933      	cbnz	r3, 80096ec <_free_r+0x2c>
 80096de:	6063      	str	r3, [r4, #4]
 80096e0:	6014      	str	r4, [r2, #0]
 80096e2:	4628      	mov	r0, r5
 80096e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096e8:	f000 b8e4 	b.w	80098b4 <__malloc_unlock>
 80096ec:	42a3      	cmp	r3, r4
 80096ee:	d908      	bls.n	8009702 <_free_r+0x42>
 80096f0:	6820      	ldr	r0, [r4, #0]
 80096f2:	1821      	adds	r1, r4, r0
 80096f4:	428b      	cmp	r3, r1
 80096f6:	bf01      	itttt	eq
 80096f8:	6819      	ldreq	r1, [r3, #0]
 80096fa:	685b      	ldreq	r3, [r3, #4]
 80096fc:	1809      	addeq	r1, r1, r0
 80096fe:	6021      	streq	r1, [r4, #0]
 8009700:	e7ed      	b.n	80096de <_free_r+0x1e>
 8009702:	461a      	mov	r2, r3
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	b10b      	cbz	r3, 800970c <_free_r+0x4c>
 8009708:	42a3      	cmp	r3, r4
 800970a:	d9fa      	bls.n	8009702 <_free_r+0x42>
 800970c:	6811      	ldr	r1, [r2, #0]
 800970e:	1850      	adds	r0, r2, r1
 8009710:	42a0      	cmp	r0, r4
 8009712:	d10b      	bne.n	800972c <_free_r+0x6c>
 8009714:	6820      	ldr	r0, [r4, #0]
 8009716:	4401      	add	r1, r0
 8009718:	1850      	adds	r0, r2, r1
 800971a:	4283      	cmp	r3, r0
 800971c:	6011      	str	r1, [r2, #0]
 800971e:	d1e0      	bne.n	80096e2 <_free_r+0x22>
 8009720:	6818      	ldr	r0, [r3, #0]
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	6053      	str	r3, [r2, #4]
 8009726:	4408      	add	r0, r1
 8009728:	6010      	str	r0, [r2, #0]
 800972a:	e7da      	b.n	80096e2 <_free_r+0x22>
 800972c:	d902      	bls.n	8009734 <_free_r+0x74>
 800972e:	230c      	movs	r3, #12
 8009730:	602b      	str	r3, [r5, #0]
 8009732:	e7d6      	b.n	80096e2 <_free_r+0x22>
 8009734:	6820      	ldr	r0, [r4, #0]
 8009736:	1821      	adds	r1, r4, r0
 8009738:	428b      	cmp	r3, r1
 800973a:	bf04      	itt	eq
 800973c:	6819      	ldreq	r1, [r3, #0]
 800973e:	685b      	ldreq	r3, [r3, #4]
 8009740:	6063      	str	r3, [r4, #4]
 8009742:	bf04      	itt	eq
 8009744:	1809      	addeq	r1, r1, r0
 8009746:	6021      	streq	r1, [r4, #0]
 8009748:	6054      	str	r4, [r2, #4]
 800974a:	e7ca      	b.n	80096e2 <_free_r+0x22>
 800974c:	bd38      	pop	{r3, r4, r5, pc}
 800974e:	bf00      	nop
 8009750:	20000698 	.word	0x20000698

08009754 <malloc>:
 8009754:	4b02      	ldr	r3, [pc, #8]	@ (8009760 <malloc+0xc>)
 8009756:	4601      	mov	r1, r0
 8009758:	6818      	ldr	r0, [r3, #0]
 800975a:	f000 b825 	b.w	80097a8 <_malloc_r>
 800975e:	bf00      	nop
 8009760:	20000018 	.word	0x20000018

08009764 <sbrk_aligned>:
 8009764:	b570      	push	{r4, r5, r6, lr}
 8009766:	4e0f      	ldr	r6, [pc, #60]	@ (80097a4 <sbrk_aligned+0x40>)
 8009768:	460c      	mov	r4, r1
 800976a:	6831      	ldr	r1, [r6, #0]
 800976c:	4605      	mov	r5, r0
 800976e:	b911      	cbnz	r1, 8009776 <sbrk_aligned+0x12>
 8009770:	f001 f81c 	bl	800a7ac <_sbrk_r>
 8009774:	6030      	str	r0, [r6, #0]
 8009776:	4621      	mov	r1, r4
 8009778:	4628      	mov	r0, r5
 800977a:	f001 f817 	bl	800a7ac <_sbrk_r>
 800977e:	1c43      	adds	r3, r0, #1
 8009780:	d103      	bne.n	800978a <sbrk_aligned+0x26>
 8009782:	f04f 34ff 	mov.w	r4, #4294967295
 8009786:	4620      	mov	r0, r4
 8009788:	bd70      	pop	{r4, r5, r6, pc}
 800978a:	1cc4      	adds	r4, r0, #3
 800978c:	f024 0403 	bic.w	r4, r4, #3
 8009790:	42a0      	cmp	r0, r4
 8009792:	d0f8      	beq.n	8009786 <sbrk_aligned+0x22>
 8009794:	1a21      	subs	r1, r4, r0
 8009796:	4628      	mov	r0, r5
 8009798:	f001 f808 	bl	800a7ac <_sbrk_r>
 800979c:	3001      	adds	r0, #1
 800979e:	d1f2      	bne.n	8009786 <sbrk_aligned+0x22>
 80097a0:	e7ef      	b.n	8009782 <sbrk_aligned+0x1e>
 80097a2:	bf00      	nop
 80097a4:	20000694 	.word	0x20000694

080097a8 <_malloc_r>:
 80097a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097ac:	1ccd      	adds	r5, r1, #3
 80097ae:	f025 0503 	bic.w	r5, r5, #3
 80097b2:	3508      	adds	r5, #8
 80097b4:	2d0c      	cmp	r5, #12
 80097b6:	bf38      	it	cc
 80097b8:	250c      	movcc	r5, #12
 80097ba:	2d00      	cmp	r5, #0
 80097bc:	4606      	mov	r6, r0
 80097be:	db01      	blt.n	80097c4 <_malloc_r+0x1c>
 80097c0:	42a9      	cmp	r1, r5
 80097c2:	d904      	bls.n	80097ce <_malloc_r+0x26>
 80097c4:	230c      	movs	r3, #12
 80097c6:	6033      	str	r3, [r6, #0]
 80097c8:	2000      	movs	r0, #0
 80097ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80098a4 <_malloc_r+0xfc>
 80097d2:	f000 f869 	bl	80098a8 <__malloc_lock>
 80097d6:	f8d8 3000 	ldr.w	r3, [r8]
 80097da:	461c      	mov	r4, r3
 80097dc:	bb44      	cbnz	r4, 8009830 <_malloc_r+0x88>
 80097de:	4629      	mov	r1, r5
 80097e0:	4630      	mov	r0, r6
 80097e2:	f7ff ffbf 	bl	8009764 <sbrk_aligned>
 80097e6:	1c43      	adds	r3, r0, #1
 80097e8:	4604      	mov	r4, r0
 80097ea:	d158      	bne.n	800989e <_malloc_r+0xf6>
 80097ec:	f8d8 4000 	ldr.w	r4, [r8]
 80097f0:	4627      	mov	r7, r4
 80097f2:	2f00      	cmp	r7, #0
 80097f4:	d143      	bne.n	800987e <_malloc_r+0xd6>
 80097f6:	2c00      	cmp	r4, #0
 80097f8:	d04b      	beq.n	8009892 <_malloc_r+0xea>
 80097fa:	6823      	ldr	r3, [r4, #0]
 80097fc:	4639      	mov	r1, r7
 80097fe:	4630      	mov	r0, r6
 8009800:	eb04 0903 	add.w	r9, r4, r3
 8009804:	f000 ffd2 	bl	800a7ac <_sbrk_r>
 8009808:	4581      	cmp	r9, r0
 800980a:	d142      	bne.n	8009892 <_malloc_r+0xea>
 800980c:	6821      	ldr	r1, [r4, #0]
 800980e:	1a6d      	subs	r5, r5, r1
 8009810:	4629      	mov	r1, r5
 8009812:	4630      	mov	r0, r6
 8009814:	f7ff ffa6 	bl	8009764 <sbrk_aligned>
 8009818:	3001      	adds	r0, #1
 800981a:	d03a      	beq.n	8009892 <_malloc_r+0xea>
 800981c:	6823      	ldr	r3, [r4, #0]
 800981e:	442b      	add	r3, r5
 8009820:	6023      	str	r3, [r4, #0]
 8009822:	f8d8 3000 	ldr.w	r3, [r8]
 8009826:	685a      	ldr	r2, [r3, #4]
 8009828:	bb62      	cbnz	r2, 8009884 <_malloc_r+0xdc>
 800982a:	f8c8 7000 	str.w	r7, [r8]
 800982e:	e00f      	b.n	8009850 <_malloc_r+0xa8>
 8009830:	6822      	ldr	r2, [r4, #0]
 8009832:	1b52      	subs	r2, r2, r5
 8009834:	d420      	bmi.n	8009878 <_malloc_r+0xd0>
 8009836:	2a0b      	cmp	r2, #11
 8009838:	d917      	bls.n	800986a <_malloc_r+0xc2>
 800983a:	1961      	adds	r1, r4, r5
 800983c:	42a3      	cmp	r3, r4
 800983e:	6025      	str	r5, [r4, #0]
 8009840:	bf18      	it	ne
 8009842:	6059      	strne	r1, [r3, #4]
 8009844:	6863      	ldr	r3, [r4, #4]
 8009846:	bf08      	it	eq
 8009848:	f8c8 1000 	streq.w	r1, [r8]
 800984c:	5162      	str	r2, [r4, r5]
 800984e:	604b      	str	r3, [r1, #4]
 8009850:	4630      	mov	r0, r6
 8009852:	f000 f82f 	bl	80098b4 <__malloc_unlock>
 8009856:	f104 000b 	add.w	r0, r4, #11
 800985a:	1d23      	adds	r3, r4, #4
 800985c:	f020 0007 	bic.w	r0, r0, #7
 8009860:	1ac2      	subs	r2, r0, r3
 8009862:	bf1c      	itt	ne
 8009864:	1a1b      	subne	r3, r3, r0
 8009866:	50a3      	strne	r3, [r4, r2]
 8009868:	e7af      	b.n	80097ca <_malloc_r+0x22>
 800986a:	6862      	ldr	r2, [r4, #4]
 800986c:	42a3      	cmp	r3, r4
 800986e:	bf0c      	ite	eq
 8009870:	f8c8 2000 	streq.w	r2, [r8]
 8009874:	605a      	strne	r2, [r3, #4]
 8009876:	e7eb      	b.n	8009850 <_malloc_r+0xa8>
 8009878:	4623      	mov	r3, r4
 800987a:	6864      	ldr	r4, [r4, #4]
 800987c:	e7ae      	b.n	80097dc <_malloc_r+0x34>
 800987e:	463c      	mov	r4, r7
 8009880:	687f      	ldr	r7, [r7, #4]
 8009882:	e7b6      	b.n	80097f2 <_malloc_r+0x4a>
 8009884:	461a      	mov	r2, r3
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	42a3      	cmp	r3, r4
 800988a:	d1fb      	bne.n	8009884 <_malloc_r+0xdc>
 800988c:	2300      	movs	r3, #0
 800988e:	6053      	str	r3, [r2, #4]
 8009890:	e7de      	b.n	8009850 <_malloc_r+0xa8>
 8009892:	230c      	movs	r3, #12
 8009894:	6033      	str	r3, [r6, #0]
 8009896:	4630      	mov	r0, r6
 8009898:	f000 f80c 	bl	80098b4 <__malloc_unlock>
 800989c:	e794      	b.n	80097c8 <_malloc_r+0x20>
 800989e:	6005      	str	r5, [r0, #0]
 80098a0:	e7d6      	b.n	8009850 <_malloc_r+0xa8>
 80098a2:	bf00      	nop
 80098a4:	20000698 	.word	0x20000698

080098a8 <__malloc_lock>:
 80098a8:	4801      	ldr	r0, [pc, #4]	@ (80098b0 <__malloc_lock+0x8>)
 80098aa:	f7ff b8b8 	b.w	8008a1e <__retarget_lock_acquire_recursive>
 80098ae:	bf00      	nop
 80098b0:	20000690 	.word	0x20000690

080098b4 <__malloc_unlock>:
 80098b4:	4801      	ldr	r0, [pc, #4]	@ (80098bc <__malloc_unlock+0x8>)
 80098b6:	f7ff b8b3 	b.w	8008a20 <__retarget_lock_release_recursive>
 80098ba:	bf00      	nop
 80098bc:	20000690 	.word	0x20000690

080098c0 <_Balloc>:
 80098c0:	b570      	push	{r4, r5, r6, lr}
 80098c2:	69c6      	ldr	r6, [r0, #28]
 80098c4:	4604      	mov	r4, r0
 80098c6:	460d      	mov	r5, r1
 80098c8:	b976      	cbnz	r6, 80098e8 <_Balloc+0x28>
 80098ca:	2010      	movs	r0, #16
 80098cc:	f7ff ff42 	bl	8009754 <malloc>
 80098d0:	4602      	mov	r2, r0
 80098d2:	61e0      	str	r0, [r4, #28]
 80098d4:	b920      	cbnz	r0, 80098e0 <_Balloc+0x20>
 80098d6:	4b18      	ldr	r3, [pc, #96]	@ (8009938 <_Balloc+0x78>)
 80098d8:	4818      	ldr	r0, [pc, #96]	@ (800993c <_Balloc+0x7c>)
 80098da:	216b      	movs	r1, #107	@ 0x6b
 80098dc:	f000 ff84 	bl	800a7e8 <__assert_func>
 80098e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098e4:	6006      	str	r6, [r0, #0]
 80098e6:	60c6      	str	r6, [r0, #12]
 80098e8:	69e6      	ldr	r6, [r4, #28]
 80098ea:	68f3      	ldr	r3, [r6, #12]
 80098ec:	b183      	cbz	r3, 8009910 <_Balloc+0x50>
 80098ee:	69e3      	ldr	r3, [r4, #28]
 80098f0:	68db      	ldr	r3, [r3, #12]
 80098f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80098f6:	b9b8      	cbnz	r0, 8009928 <_Balloc+0x68>
 80098f8:	2101      	movs	r1, #1
 80098fa:	fa01 f605 	lsl.w	r6, r1, r5
 80098fe:	1d72      	adds	r2, r6, #5
 8009900:	0092      	lsls	r2, r2, #2
 8009902:	4620      	mov	r0, r4
 8009904:	f000 ff8e 	bl	800a824 <_calloc_r>
 8009908:	b160      	cbz	r0, 8009924 <_Balloc+0x64>
 800990a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800990e:	e00e      	b.n	800992e <_Balloc+0x6e>
 8009910:	2221      	movs	r2, #33	@ 0x21
 8009912:	2104      	movs	r1, #4
 8009914:	4620      	mov	r0, r4
 8009916:	f000 ff85 	bl	800a824 <_calloc_r>
 800991a:	69e3      	ldr	r3, [r4, #28]
 800991c:	60f0      	str	r0, [r6, #12]
 800991e:	68db      	ldr	r3, [r3, #12]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d1e4      	bne.n	80098ee <_Balloc+0x2e>
 8009924:	2000      	movs	r0, #0
 8009926:	bd70      	pop	{r4, r5, r6, pc}
 8009928:	6802      	ldr	r2, [r0, #0]
 800992a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800992e:	2300      	movs	r3, #0
 8009930:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009934:	e7f7      	b.n	8009926 <_Balloc+0x66>
 8009936:	bf00      	nop
 8009938:	0800ac21 	.word	0x0800ac21
 800993c:	0800aca1 	.word	0x0800aca1

08009940 <_Bfree>:
 8009940:	b570      	push	{r4, r5, r6, lr}
 8009942:	69c6      	ldr	r6, [r0, #28]
 8009944:	4605      	mov	r5, r0
 8009946:	460c      	mov	r4, r1
 8009948:	b976      	cbnz	r6, 8009968 <_Bfree+0x28>
 800994a:	2010      	movs	r0, #16
 800994c:	f7ff ff02 	bl	8009754 <malloc>
 8009950:	4602      	mov	r2, r0
 8009952:	61e8      	str	r0, [r5, #28]
 8009954:	b920      	cbnz	r0, 8009960 <_Bfree+0x20>
 8009956:	4b09      	ldr	r3, [pc, #36]	@ (800997c <_Bfree+0x3c>)
 8009958:	4809      	ldr	r0, [pc, #36]	@ (8009980 <_Bfree+0x40>)
 800995a:	218f      	movs	r1, #143	@ 0x8f
 800995c:	f000 ff44 	bl	800a7e8 <__assert_func>
 8009960:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009964:	6006      	str	r6, [r0, #0]
 8009966:	60c6      	str	r6, [r0, #12]
 8009968:	b13c      	cbz	r4, 800997a <_Bfree+0x3a>
 800996a:	69eb      	ldr	r3, [r5, #28]
 800996c:	6862      	ldr	r2, [r4, #4]
 800996e:	68db      	ldr	r3, [r3, #12]
 8009970:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009974:	6021      	str	r1, [r4, #0]
 8009976:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800997a:	bd70      	pop	{r4, r5, r6, pc}
 800997c:	0800ac21 	.word	0x0800ac21
 8009980:	0800aca1 	.word	0x0800aca1

08009984 <__multadd>:
 8009984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009988:	690d      	ldr	r5, [r1, #16]
 800998a:	4607      	mov	r7, r0
 800998c:	460c      	mov	r4, r1
 800998e:	461e      	mov	r6, r3
 8009990:	f101 0c14 	add.w	ip, r1, #20
 8009994:	2000      	movs	r0, #0
 8009996:	f8dc 3000 	ldr.w	r3, [ip]
 800999a:	b299      	uxth	r1, r3
 800999c:	fb02 6101 	mla	r1, r2, r1, r6
 80099a0:	0c1e      	lsrs	r6, r3, #16
 80099a2:	0c0b      	lsrs	r3, r1, #16
 80099a4:	fb02 3306 	mla	r3, r2, r6, r3
 80099a8:	b289      	uxth	r1, r1
 80099aa:	3001      	adds	r0, #1
 80099ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80099b0:	4285      	cmp	r5, r0
 80099b2:	f84c 1b04 	str.w	r1, [ip], #4
 80099b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80099ba:	dcec      	bgt.n	8009996 <__multadd+0x12>
 80099bc:	b30e      	cbz	r6, 8009a02 <__multadd+0x7e>
 80099be:	68a3      	ldr	r3, [r4, #8]
 80099c0:	42ab      	cmp	r3, r5
 80099c2:	dc19      	bgt.n	80099f8 <__multadd+0x74>
 80099c4:	6861      	ldr	r1, [r4, #4]
 80099c6:	4638      	mov	r0, r7
 80099c8:	3101      	adds	r1, #1
 80099ca:	f7ff ff79 	bl	80098c0 <_Balloc>
 80099ce:	4680      	mov	r8, r0
 80099d0:	b928      	cbnz	r0, 80099de <__multadd+0x5a>
 80099d2:	4602      	mov	r2, r0
 80099d4:	4b0c      	ldr	r3, [pc, #48]	@ (8009a08 <__multadd+0x84>)
 80099d6:	480d      	ldr	r0, [pc, #52]	@ (8009a0c <__multadd+0x88>)
 80099d8:	21ba      	movs	r1, #186	@ 0xba
 80099da:	f000 ff05 	bl	800a7e8 <__assert_func>
 80099de:	6922      	ldr	r2, [r4, #16]
 80099e0:	3202      	adds	r2, #2
 80099e2:	f104 010c 	add.w	r1, r4, #12
 80099e6:	0092      	lsls	r2, r2, #2
 80099e8:	300c      	adds	r0, #12
 80099ea:	f000 feef 	bl	800a7cc <memcpy>
 80099ee:	4621      	mov	r1, r4
 80099f0:	4638      	mov	r0, r7
 80099f2:	f7ff ffa5 	bl	8009940 <_Bfree>
 80099f6:	4644      	mov	r4, r8
 80099f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80099fc:	3501      	adds	r5, #1
 80099fe:	615e      	str	r6, [r3, #20]
 8009a00:	6125      	str	r5, [r4, #16]
 8009a02:	4620      	mov	r0, r4
 8009a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a08:	0800ac90 	.word	0x0800ac90
 8009a0c:	0800aca1 	.word	0x0800aca1

08009a10 <__hi0bits>:
 8009a10:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009a14:	4603      	mov	r3, r0
 8009a16:	bf36      	itet	cc
 8009a18:	0403      	lslcc	r3, r0, #16
 8009a1a:	2000      	movcs	r0, #0
 8009a1c:	2010      	movcc	r0, #16
 8009a1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009a22:	bf3c      	itt	cc
 8009a24:	021b      	lslcc	r3, r3, #8
 8009a26:	3008      	addcc	r0, #8
 8009a28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a2c:	bf3c      	itt	cc
 8009a2e:	011b      	lslcc	r3, r3, #4
 8009a30:	3004      	addcc	r0, #4
 8009a32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a36:	bf3c      	itt	cc
 8009a38:	009b      	lslcc	r3, r3, #2
 8009a3a:	3002      	addcc	r0, #2
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	db05      	blt.n	8009a4c <__hi0bits+0x3c>
 8009a40:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009a44:	f100 0001 	add.w	r0, r0, #1
 8009a48:	bf08      	it	eq
 8009a4a:	2020      	moveq	r0, #32
 8009a4c:	4770      	bx	lr

08009a4e <__lo0bits>:
 8009a4e:	6803      	ldr	r3, [r0, #0]
 8009a50:	4602      	mov	r2, r0
 8009a52:	f013 0007 	ands.w	r0, r3, #7
 8009a56:	d00b      	beq.n	8009a70 <__lo0bits+0x22>
 8009a58:	07d9      	lsls	r1, r3, #31
 8009a5a:	d421      	bmi.n	8009aa0 <__lo0bits+0x52>
 8009a5c:	0798      	lsls	r0, r3, #30
 8009a5e:	bf49      	itett	mi
 8009a60:	085b      	lsrmi	r3, r3, #1
 8009a62:	089b      	lsrpl	r3, r3, #2
 8009a64:	2001      	movmi	r0, #1
 8009a66:	6013      	strmi	r3, [r2, #0]
 8009a68:	bf5c      	itt	pl
 8009a6a:	6013      	strpl	r3, [r2, #0]
 8009a6c:	2002      	movpl	r0, #2
 8009a6e:	4770      	bx	lr
 8009a70:	b299      	uxth	r1, r3
 8009a72:	b909      	cbnz	r1, 8009a78 <__lo0bits+0x2a>
 8009a74:	0c1b      	lsrs	r3, r3, #16
 8009a76:	2010      	movs	r0, #16
 8009a78:	b2d9      	uxtb	r1, r3
 8009a7a:	b909      	cbnz	r1, 8009a80 <__lo0bits+0x32>
 8009a7c:	3008      	adds	r0, #8
 8009a7e:	0a1b      	lsrs	r3, r3, #8
 8009a80:	0719      	lsls	r1, r3, #28
 8009a82:	bf04      	itt	eq
 8009a84:	091b      	lsreq	r3, r3, #4
 8009a86:	3004      	addeq	r0, #4
 8009a88:	0799      	lsls	r1, r3, #30
 8009a8a:	bf04      	itt	eq
 8009a8c:	089b      	lsreq	r3, r3, #2
 8009a8e:	3002      	addeq	r0, #2
 8009a90:	07d9      	lsls	r1, r3, #31
 8009a92:	d403      	bmi.n	8009a9c <__lo0bits+0x4e>
 8009a94:	085b      	lsrs	r3, r3, #1
 8009a96:	f100 0001 	add.w	r0, r0, #1
 8009a9a:	d003      	beq.n	8009aa4 <__lo0bits+0x56>
 8009a9c:	6013      	str	r3, [r2, #0]
 8009a9e:	4770      	bx	lr
 8009aa0:	2000      	movs	r0, #0
 8009aa2:	4770      	bx	lr
 8009aa4:	2020      	movs	r0, #32
 8009aa6:	4770      	bx	lr

08009aa8 <__i2b>:
 8009aa8:	b510      	push	{r4, lr}
 8009aaa:	460c      	mov	r4, r1
 8009aac:	2101      	movs	r1, #1
 8009aae:	f7ff ff07 	bl	80098c0 <_Balloc>
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	b928      	cbnz	r0, 8009ac2 <__i2b+0x1a>
 8009ab6:	4b05      	ldr	r3, [pc, #20]	@ (8009acc <__i2b+0x24>)
 8009ab8:	4805      	ldr	r0, [pc, #20]	@ (8009ad0 <__i2b+0x28>)
 8009aba:	f240 1145 	movw	r1, #325	@ 0x145
 8009abe:	f000 fe93 	bl	800a7e8 <__assert_func>
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	6144      	str	r4, [r0, #20]
 8009ac6:	6103      	str	r3, [r0, #16]
 8009ac8:	bd10      	pop	{r4, pc}
 8009aca:	bf00      	nop
 8009acc:	0800ac90 	.word	0x0800ac90
 8009ad0:	0800aca1 	.word	0x0800aca1

08009ad4 <__multiply>:
 8009ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ad8:	4614      	mov	r4, r2
 8009ada:	690a      	ldr	r2, [r1, #16]
 8009adc:	6923      	ldr	r3, [r4, #16]
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	bfa8      	it	ge
 8009ae2:	4623      	movge	r3, r4
 8009ae4:	460f      	mov	r7, r1
 8009ae6:	bfa4      	itt	ge
 8009ae8:	460c      	movge	r4, r1
 8009aea:	461f      	movge	r7, r3
 8009aec:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009af0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009af4:	68a3      	ldr	r3, [r4, #8]
 8009af6:	6861      	ldr	r1, [r4, #4]
 8009af8:	eb0a 0609 	add.w	r6, sl, r9
 8009afc:	42b3      	cmp	r3, r6
 8009afe:	b085      	sub	sp, #20
 8009b00:	bfb8      	it	lt
 8009b02:	3101      	addlt	r1, #1
 8009b04:	f7ff fedc 	bl	80098c0 <_Balloc>
 8009b08:	b930      	cbnz	r0, 8009b18 <__multiply+0x44>
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	4b44      	ldr	r3, [pc, #272]	@ (8009c20 <__multiply+0x14c>)
 8009b0e:	4845      	ldr	r0, [pc, #276]	@ (8009c24 <__multiply+0x150>)
 8009b10:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009b14:	f000 fe68 	bl	800a7e8 <__assert_func>
 8009b18:	f100 0514 	add.w	r5, r0, #20
 8009b1c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009b20:	462b      	mov	r3, r5
 8009b22:	2200      	movs	r2, #0
 8009b24:	4543      	cmp	r3, r8
 8009b26:	d321      	bcc.n	8009b6c <__multiply+0x98>
 8009b28:	f107 0114 	add.w	r1, r7, #20
 8009b2c:	f104 0214 	add.w	r2, r4, #20
 8009b30:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009b34:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009b38:	9302      	str	r3, [sp, #8]
 8009b3a:	1b13      	subs	r3, r2, r4
 8009b3c:	3b15      	subs	r3, #21
 8009b3e:	f023 0303 	bic.w	r3, r3, #3
 8009b42:	3304      	adds	r3, #4
 8009b44:	f104 0715 	add.w	r7, r4, #21
 8009b48:	42ba      	cmp	r2, r7
 8009b4a:	bf38      	it	cc
 8009b4c:	2304      	movcc	r3, #4
 8009b4e:	9301      	str	r3, [sp, #4]
 8009b50:	9b02      	ldr	r3, [sp, #8]
 8009b52:	9103      	str	r1, [sp, #12]
 8009b54:	428b      	cmp	r3, r1
 8009b56:	d80c      	bhi.n	8009b72 <__multiply+0x9e>
 8009b58:	2e00      	cmp	r6, #0
 8009b5a:	dd03      	ble.n	8009b64 <__multiply+0x90>
 8009b5c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d05b      	beq.n	8009c1c <__multiply+0x148>
 8009b64:	6106      	str	r6, [r0, #16]
 8009b66:	b005      	add	sp, #20
 8009b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b6c:	f843 2b04 	str.w	r2, [r3], #4
 8009b70:	e7d8      	b.n	8009b24 <__multiply+0x50>
 8009b72:	f8b1 a000 	ldrh.w	sl, [r1]
 8009b76:	f1ba 0f00 	cmp.w	sl, #0
 8009b7a:	d024      	beq.n	8009bc6 <__multiply+0xf2>
 8009b7c:	f104 0e14 	add.w	lr, r4, #20
 8009b80:	46a9      	mov	r9, r5
 8009b82:	f04f 0c00 	mov.w	ip, #0
 8009b86:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009b8a:	f8d9 3000 	ldr.w	r3, [r9]
 8009b8e:	fa1f fb87 	uxth.w	fp, r7
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	fb0a 330b 	mla	r3, sl, fp, r3
 8009b98:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009b9c:	f8d9 7000 	ldr.w	r7, [r9]
 8009ba0:	4463      	add	r3, ip
 8009ba2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009ba6:	fb0a c70b 	mla	r7, sl, fp, ip
 8009baa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009bb4:	4572      	cmp	r2, lr
 8009bb6:	f849 3b04 	str.w	r3, [r9], #4
 8009bba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009bbe:	d8e2      	bhi.n	8009b86 <__multiply+0xb2>
 8009bc0:	9b01      	ldr	r3, [sp, #4]
 8009bc2:	f845 c003 	str.w	ip, [r5, r3]
 8009bc6:	9b03      	ldr	r3, [sp, #12]
 8009bc8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009bcc:	3104      	adds	r1, #4
 8009bce:	f1b9 0f00 	cmp.w	r9, #0
 8009bd2:	d021      	beq.n	8009c18 <__multiply+0x144>
 8009bd4:	682b      	ldr	r3, [r5, #0]
 8009bd6:	f104 0c14 	add.w	ip, r4, #20
 8009bda:	46ae      	mov	lr, r5
 8009bdc:	f04f 0a00 	mov.w	sl, #0
 8009be0:	f8bc b000 	ldrh.w	fp, [ip]
 8009be4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009be8:	fb09 770b 	mla	r7, r9, fp, r7
 8009bec:	4457      	add	r7, sl
 8009bee:	b29b      	uxth	r3, r3
 8009bf0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009bf4:	f84e 3b04 	str.w	r3, [lr], #4
 8009bf8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009bfc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c00:	f8be 3000 	ldrh.w	r3, [lr]
 8009c04:	fb09 330a 	mla	r3, r9, sl, r3
 8009c08:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009c0c:	4562      	cmp	r2, ip
 8009c0e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c12:	d8e5      	bhi.n	8009be0 <__multiply+0x10c>
 8009c14:	9f01      	ldr	r7, [sp, #4]
 8009c16:	51eb      	str	r3, [r5, r7]
 8009c18:	3504      	adds	r5, #4
 8009c1a:	e799      	b.n	8009b50 <__multiply+0x7c>
 8009c1c:	3e01      	subs	r6, #1
 8009c1e:	e79b      	b.n	8009b58 <__multiply+0x84>
 8009c20:	0800ac90 	.word	0x0800ac90
 8009c24:	0800aca1 	.word	0x0800aca1

08009c28 <__pow5mult>:
 8009c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c2c:	4615      	mov	r5, r2
 8009c2e:	f012 0203 	ands.w	r2, r2, #3
 8009c32:	4607      	mov	r7, r0
 8009c34:	460e      	mov	r6, r1
 8009c36:	d007      	beq.n	8009c48 <__pow5mult+0x20>
 8009c38:	4c25      	ldr	r4, [pc, #148]	@ (8009cd0 <__pow5mult+0xa8>)
 8009c3a:	3a01      	subs	r2, #1
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c42:	f7ff fe9f 	bl	8009984 <__multadd>
 8009c46:	4606      	mov	r6, r0
 8009c48:	10ad      	asrs	r5, r5, #2
 8009c4a:	d03d      	beq.n	8009cc8 <__pow5mult+0xa0>
 8009c4c:	69fc      	ldr	r4, [r7, #28]
 8009c4e:	b97c      	cbnz	r4, 8009c70 <__pow5mult+0x48>
 8009c50:	2010      	movs	r0, #16
 8009c52:	f7ff fd7f 	bl	8009754 <malloc>
 8009c56:	4602      	mov	r2, r0
 8009c58:	61f8      	str	r0, [r7, #28]
 8009c5a:	b928      	cbnz	r0, 8009c68 <__pow5mult+0x40>
 8009c5c:	4b1d      	ldr	r3, [pc, #116]	@ (8009cd4 <__pow5mult+0xac>)
 8009c5e:	481e      	ldr	r0, [pc, #120]	@ (8009cd8 <__pow5mult+0xb0>)
 8009c60:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009c64:	f000 fdc0 	bl	800a7e8 <__assert_func>
 8009c68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c6c:	6004      	str	r4, [r0, #0]
 8009c6e:	60c4      	str	r4, [r0, #12]
 8009c70:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009c74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009c78:	b94c      	cbnz	r4, 8009c8e <__pow5mult+0x66>
 8009c7a:	f240 2171 	movw	r1, #625	@ 0x271
 8009c7e:	4638      	mov	r0, r7
 8009c80:	f7ff ff12 	bl	8009aa8 <__i2b>
 8009c84:	2300      	movs	r3, #0
 8009c86:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c8a:	4604      	mov	r4, r0
 8009c8c:	6003      	str	r3, [r0, #0]
 8009c8e:	f04f 0900 	mov.w	r9, #0
 8009c92:	07eb      	lsls	r3, r5, #31
 8009c94:	d50a      	bpl.n	8009cac <__pow5mult+0x84>
 8009c96:	4631      	mov	r1, r6
 8009c98:	4622      	mov	r2, r4
 8009c9a:	4638      	mov	r0, r7
 8009c9c:	f7ff ff1a 	bl	8009ad4 <__multiply>
 8009ca0:	4631      	mov	r1, r6
 8009ca2:	4680      	mov	r8, r0
 8009ca4:	4638      	mov	r0, r7
 8009ca6:	f7ff fe4b 	bl	8009940 <_Bfree>
 8009caa:	4646      	mov	r6, r8
 8009cac:	106d      	asrs	r5, r5, #1
 8009cae:	d00b      	beq.n	8009cc8 <__pow5mult+0xa0>
 8009cb0:	6820      	ldr	r0, [r4, #0]
 8009cb2:	b938      	cbnz	r0, 8009cc4 <__pow5mult+0x9c>
 8009cb4:	4622      	mov	r2, r4
 8009cb6:	4621      	mov	r1, r4
 8009cb8:	4638      	mov	r0, r7
 8009cba:	f7ff ff0b 	bl	8009ad4 <__multiply>
 8009cbe:	6020      	str	r0, [r4, #0]
 8009cc0:	f8c0 9000 	str.w	r9, [r0]
 8009cc4:	4604      	mov	r4, r0
 8009cc6:	e7e4      	b.n	8009c92 <__pow5mult+0x6a>
 8009cc8:	4630      	mov	r0, r6
 8009cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cce:	bf00      	nop
 8009cd0:	0800acfc 	.word	0x0800acfc
 8009cd4:	0800ac21 	.word	0x0800ac21
 8009cd8:	0800aca1 	.word	0x0800aca1

08009cdc <__lshift>:
 8009cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ce0:	460c      	mov	r4, r1
 8009ce2:	6849      	ldr	r1, [r1, #4]
 8009ce4:	6923      	ldr	r3, [r4, #16]
 8009ce6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009cea:	68a3      	ldr	r3, [r4, #8]
 8009cec:	4607      	mov	r7, r0
 8009cee:	4691      	mov	r9, r2
 8009cf0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009cf4:	f108 0601 	add.w	r6, r8, #1
 8009cf8:	42b3      	cmp	r3, r6
 8009cfa:	db0b      	blt.n	8009d14 <__lshift+0x38>
 8009cfc:	4638      	mov	r0, r7
 8009cfe:	f7ff fddf 	bl	80098c0 <_Balloc>
 8009d02:	4605      	mov	r5, r0
 8009d04:	b948      	cbnz	r0, 8009d1a <__lshift+0x3e>
 8009d06:	4602      	mov	r2, r0
 8009d08:	4b28      	ldr	r3, [pc, #160]	@ (8009dac <__lshift+0xd0>)
 8009d0a:	4829      	ldr	r0, [pc, #164]	@ (8009db0 <__lshift+0xd4>)
 8009d0c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009d10:	f000 fd6a 	bl	800a7e8 <__assert_func>
 8009d14:	3101      	adds	r1, #1
 8009d16:	005b      	lsls	r3, r3, #1
 8009d18:	e7ee      	b.n	8009cf8 <__lshift+0x1c>
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	f100 0114 	add.w	r1, r0, #20
 8009d20:	f100 0210 	add.w	r2, r0, #16
 8009d24:	4618      	mov	r0, r3
 8009d26:	4553      	cmp	r3, sl
 8009d28:	db33      	blt.n	8009d92 <__lshift+0xb6>
 8009d2a:	6920      	ldr	r0, [r4, #16]
 8009d2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d30:	f104 0314 	add.w	r3, r4, #20
 8009d34:	f019 091f 	ands.w	r9, r9, #31
 8009d38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009d40:	d02b      	beq.n	8009d9a <__lshift+0xbe>
 8009d42:	f1c9 0e20 	rsb	lr, r9, #32
 8009d46:	468a      	mov	sl, r1
 8009d48:	2200      	movs	r2, #0
 8009d4a:	6818      	ldr	r0, [r3, #0]
 8009d4c:	fa00 f009 	lsl.w	r0, r0, r9
 8009d50:	4310      	orrs	r0, r2
 8009d52:	f84a 0b04 	str.w	r0, [sl], #4
 8009d56:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d5a:	459c      	cmp	ip, r3
 8009d5c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009d60:	d8f3      	bhi.n	8009d4a <__lshift+0x6e>
 8009d62:	ebac 0304 	sub.w	r3, ip, r4
 8009d66:	3b15      	subs	r3, #21
 8009d68:	f023 0303 	bic.w	r3, r3, #3
 8009d6c:	3304      	adds	r3, #4
 8009d6e:	f104 0015 	add.w	r0, r4, #21
 8009d72:	4584      	cmp	ip, r0
 8009d74:	bf38      	it	cc
 8009d76:	2304      	movcc	r3, #4
 8009d78:	50ca      	str	r2, [r1, r3]
 8009d7a:	b10a      	cbz	r2, 8009d80 <__lshift+0xa4>
 8009d7c:	f108 0602 	add.w	r6, r8, #2
 8009d80:	3e01      	subs	r6, #1
 8009d82:	4638      	mov	r0, r7
 8009d84:	612e      	str	r6, [r5, #16]
 8009d86:	4621      	mov	r1, r4
 8009d88:	f7ff fdda 	bl	8009940 <_Bfree>
 8009d8c:	4628      	mov	r0, r5
 8009d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d92:	f842 0f04 	str.w	r0, [r2, #4]!
 8009d96:	3301      	adds	r3, #1
 8009d98:	e7c5      	b.n	8009d26 <__lshift+0x4a>
 8009d9a:	3904      	subs	r1, #4
 8009d9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009da0:	f841 2f04 	str.w	r2, [r1, #4]!
 8009da4:	459c      	cmp	ip, r3
 8009da6:	d8f9      	bhi.n	8009d9c <__lshift+0xc0>
 8009da8:	e7ea      	b.n	8009d80 <__lshift+0xa4>
 8009daa:	bf00      	nop
 8009dac:	0800ac90 	.word	0x0800ac90
 8009db0:	0800aca1 	.word	0x0800aca1

08009db4 <__mcmp>:
 8009db4:	690a      	ldr	r2, [r1, #16]
 8009db6:	4603      	mov	r3, r0
 8009db8:	6900      	ldr	r0, [r0, #16]
 8009dba:	1a80      	subs	r0, r0, r2
 8009dbc:	b530      	push	{r4, r5, lr}
 8009dbe:	d10e      	bne.n	8009dde <__mcmp+0x2a>
 8009dc0:	3314      	adds	r3, #20
 8009dc2:	3114      	adds	r1, #20
 8009dc4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009dc8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009dcc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009dd0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009dd4:	4295      	cmp	r5, r2
 8009dd6:	d003      	beq.n	8009de0 <__mcmp+0x2c>
 8009dd8:	d205      	bcs.n	8009de6 <__mcmp+0x32>
 8009dda:	f04f 30ff 	mov.w	r0, #4294967295
 8009dde:	bd30      	pop	{r4, r5, pc}
 8009de0:	42a3      	cmp	r3, r4
 8009de2:	d3f3      	bcc.n	8009dcc <__mcmp+0x18>
 8009de4:	e7fb      	b.n	8009dde <__mcmp+0x2a>
 8009de6:	2001      	movs	r0, #1
 8009de8:	e7f9      	b.n	8009dde <__mcmp+0x2a>
	...

08009dec <__mdiff>:
 8009dec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009df0:	4689      	mov	r9, r1
 8009df2:	4606      	mov	r6, r0
 8009df4:	4611      	mov	r1, r2
 8009df6:	4648      	mov	r0, r9
 8009df8:	4614      	mov	r4, r2
 8009dfa:	f7ff ffdb 	bl	8009db4 <__mcmp>
 8009dfe:	1e05      	subs	r5, r0, #0
 8009e00:	d112      	bne.n	8009e28 <__mdiff+0x3c>
 8009e02:	4629      	mov	r1, r5
 8009e04:	4630      	mov	r0, r6
 8009e06:	f7ff fd5b 	bl	80098c0 <_Balloc>
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	b928      	cbnz	r0, 8009e1a <__mdiff+0x2e>
 8009e0e:	4b3f      	ldr	r3, [pc, #252]	@ (8009f0c <__mdiff+0x120>)
 8009e10:	f240 2137 	movw	r1, #567	@ 0x237
 8009e14:	483e      	ldr	r0, [pc, #248]	@ (8009f10 <__mdiff+0x124>)
 8009e16:	f000 fce7 	bl	800a7e8 <__assert_func>
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009e20:	4610      	mov	r0, r2
 8009e22:	b003      	add	sp, #12
 8009e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e28:	bfbc      	itt	lt
 8009e2a:	464b      	movlt	r3, r9
 8009e2c:	46a1      	movlt	r9, r4
 8009e2e:	4630      	mov	r0, r6
 8009e30:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009e34:	bfba      	itte	lt
 8009e36:	461c      	movlt	r4, r3
 8009e38:	2501      	movlt	r5, #1
 8009e3a:	2500      	movge	r5, #0
 8009e3c:	f7ff fd40 	bl	80098c0 <_Balloc>
 8009e40:	4602      	mov	r2, r0
 8009e42:	b918      	cbnz	r0, 8009e4c <__mdiff+0x60>
 8009e44:	4b31      	ldr	r3, [pc, #196]	@ (8009f0c <__mdiff+0x120>)
 8009e46:	f240 2145 	movw	r1, #581	@ 0x245
 8009e4a:	e7e3      	b.n	8009e14 <__mdiff+0x28>
 8009e4c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009e50:	6926      	ldr	r6, [r4, #16]
 8009e52:	60c5      	str	r5, [r0, #12]
 8009e54:	f109 0310 	add.w	r3, r9, #16
 8009e58:	f109 0514 	add.w	r5, r9, #20
 8009e5c:	f104 0e14 	add.w	lr, r4, #20
 8009e60:	f100 0b14 	add.w	fp, r0, #20
 8009e64:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009e68:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009e6c:	9301      	str	r3, [sp, #4]
 8009e6e:	46d9      	mov	r9, fp
 8009e70:	f04f 0c00 	mov.w	ip, #0
 8009e74:	9b01      	ldr	r3, [sp, #4]
 8009e76:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009e7a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009e7e:	9301      	str	r3, [sp, #4]
 8009e80:	fa1f f38a 	uxth.w	r3, sl
 8009e84:	4619      	mov	r1, r3
 8009e86:	b283      	uxth	r3, r0
 8009e88:	1acb      	subs	r3, r1, r3
 8009e8a:	0c00      	lsrs	r0, r0, #16
 8009e8c:	4463      	add	r3, ip
 8009e8e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009e92:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009e96:	b29b      	uxth	r3, r3
 8009e98:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009e9c:	4576      	cmp	r6, lr
 8009e9e:	f849 3b04 	str.w	r3, [r9], #4
 8009ea2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009ea6:	d8e5      	bhi.n	8009e74 <__mdiff+0x88>
 8009ea8:	1b33      	subs	r3, r6, r4
 8009eaa:	3b15      	subs	r3, #21
 8009eac:	f023 0303 	bic.w	r3, r3, #3
 8009eb0:	3415      	adds	r4, #21
 8009eb2:	3304      	adds	r3, #4
 8009eb4:	42a6      	cmp	r6, r4
 8009eb6:	bf38      	it	cc
 8009eb8:	2304      	movcc	r3, #4
 8009eba:	441d      	add	r5, r3
 8009ebc:	445b      	add	r3, fp
 8009ebe:	461e      	mov	r6, r3
 8009ec0:	462c      	mov	r4, r5
 8009ec2:	4544      	cmp	r4, r8
 8009ec4:	d30e      	bcc.n	8009ee4 <__mdiff+0xf8>
 8009ec6:	f108 0103 	add.w	r1, r8, #3
 8009eca:	1b49      	subs	r1, r1, r5
 8009ecc:	f021 0103 	bic.w	r1, r1, #3
 8009ed0:	3d03      	subs	r5, #3
 8009ed2:	45a8      	cmp	r8, r5
 8009ed4:	bf38      	it	cc
 8009ed6:	2100      	movcc	r1, #0
 8009ed8:	440b      	add	r3, r1
 8009eda:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009ede:	b191      	cbz	r1, 8009f06 <__mdiff+0x11a>
 8009ee0:	6117      	str	r7, [r2, #16]
 8009ee2:	e79d      	b.n	8009e20 <__mdiff+0x34>
 8009ee4:	f854 1b04 	ldr.w	r1, [r4], #4
 8009ee8:	46e6      	mov	lr, ip
 8009eea:	0c08      	lsrs	r0, r1, #16
 8009eec:	fa1c fc81 	uxtah	ip, ip, r1
 8009ef0:	4471      	add	r1, lr
 8009ef2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009ef6:	b289      	uxth	r1, r1
 8009ef8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009efc:	f846 1b04 	str.w	r1, [r6], #4
 8009f00:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009f04:	e7dd      	b.n	8009ec2 <__mdiff+0xd6>
 8009f06:	3f01      	subs	r7, #1
 8009f08:	e7e7      	b.n	8009eda <__mdiff+0xee>
 8009f0a:	bf00      	nop
 8009f0c:	0800ac90 	.word	0x0800ac90
 8009f10:	0800aca1 	.word	0x0800aca1

08009f14 <__d2b>:
 8009f14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009f18:	460f      	mov	r7, r1
 8009f1a:	2101      	movs	r1, #1
 8009f1c:	ec59 8b10 	vmov	r8, r9, d0
 8009f20:	4616      	mov	r6, r2
 8009f22:	f7ff fccd 	bl	80098c0 <_Balloc>
 8009f26:	4604      	mov	r4, r0
 8009f28:	b930      	cbnz	r0, 8009f38 <__d2b+0x24>
 8009f2a:	4602      	mov	r2, r0
 8009f2c:	4b23      	ldr	r3, [pc, #140]	@ (8009fbc <__d2b+0xa8>)
 8009f2e:	4824      	ldr	r0, [pc, #144]	@ (8009fc0 <__d2b+0xac>)
 8009f30:	f240 310f 	movw	r1, #783	@ 0x30f
 8009f34:	f000 fc58 	bl	800a7e8 <__assert_func>
 8009f38:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009f3c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f40:	b10d      	cbz	r5, 8009f46 <__d2b+0x32>
 8009f42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009f46:	9301      	str	r3, [sp, #4]
 8009f48:	f1b8 0300 	subs.w	r3, r8, #0
 8009f4c:	d023      	beq.n	8009f96 <__d2b+0x82>
 8009f4e:	4668      	mov	r0, sp
 8009f50:	9300      	str	r3, [sp, #0]
 8009f52:	f7ff fd7c 	bl	8009a4e <__lo0bits>
 8009f56:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009f5a:	b1d0      	cbz	r0, 8009f92 <__d2b+0x7e>
 8009f5c:	f1c0 0320 	rsb	r3, r0, #32
 8009f60:	fa02 f303 	lsl.w	r3, r2, r3
 8009f64:	430b      	orrs	r3, r1
 8009f66:	40c2      	lsrs	r2, r0
 8009f68:	6163      	str	r3, [r4, #20]
 8009f6a:	9201      	str	r2, [sp, #4]
 8009f6c:	9b01      	ldr	r3, [sp, #4]
 8009f6e:	61a3      	str	r3, [r4, #24]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	bf0c      	ite	eq
 8009f74:	2201      	moveq	r2, #1
 8009f76:	2202      	movne	r2, #2
 8009f78:	6122      	str	r2, [r4, #16]
 8009f7a:	b1a5      	cbz	r5, 8009fa6 <__d2b+0x92>
 8009f7c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009f80:	4405      	add	r5, r0
 8009f82:	603d      	str	r5, [r7, #0]
 8009f84:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009f88:	6030      	str	r0, [r6, #0]
 8009f8a:	4620      	mov	r0, r4
 8009f8c:	b003      	add	sp, #12
 8009f8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f92:	6161      	str	r1, [r4, #20]
 8009f94:	e7ea      	b.n	8009f6c <__d2b+0x58>
 8009f96:	a801      	add	r0, sp, #4
 8009f98:	f7ff fd59 	bl	8009a4e <__lo0bits>
 8009f9c:	9b01      	ldr	r3, [sp, #4]
 8009f9e:	6163      	str	r3, [r4, #20]
 8009fa0:	3020      	adds	r0, #32
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	e7e8      	b.n	8009f78 <__d2b+0x64>
 8009fa6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009faa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009fae:	6038      	str	r0, [r7, #0]
 8009fb0:	6918      	ldr	r0, [r3, #16]
 8009fb2:	f7ff fd2d 	bl	8009a10 <__hi0bits>
 8009fb6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009fba:	e7e5      	b.n	8009f88 <__d2b+0x74>
 8009fbc:	0800ac90 	.word	0x0800ac90
 8009fc0:	0800aca1 	.word	0x0800aca1

08009fc4 <__ssputs_r>:
 8009fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fc8:	688e      	ldr	r6, [r1, #8]
 8009fca:	461f      	mov	r7, r3
 8009fcc:	42be      	cmp	r6, r7
 8009fce:	680b      	ldr	r3, [r1, #0]
 8009fd0:	4682      	mov	sl, r0
 8009fd2:	460c      	mov	r4, r1
 8009fd4:	4690      	mov	r8, r2
 8009fd6:	d82d      	bhi.n	800a034 <__ssputs_r+0x70>
 8009fd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009fdc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009fe0:	d026      	beq.n	800a030 <__ssputs_r+0x6c>
 8009fe2:	6965      	ldr	r5, [r4, #20]
 8009fe4:	6909      	ldr	r1, [r1, #16]
 8009fe6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009fea:	eba3 0901 	sub.w	r9, r3, r1
 8009fee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ff2:	1c7b      	adds	r3, r7, #1
 8009ff4:	444b      	add	r3, r9
 8009ff6:	106d      	asrs	r5, r5, #1
 8009ff8:	429d      	cmp	r5, r3
 8009ffa:	bf38      	it	cc
 8009ffc:	461d      	movcc	r5, r3
 8009ffe:	0553      	lsls	r3, r2, #21
 800a000:	d527      	bpl.n	800a052 <__ssputs_r+0x8e>
 800a002:	4629      	mov	r1, r5
 800a004:	f7ff fbd0 	bl	80097a8 <_malloc_r>
 800a008:	4606      	mov	r6, r0
 800a00a:	b360      	cbz	r0, 800a066 <__ssputs_r+0xa2>
 800a00c:	6921      	ldr	r1, [r4, #16]
 800a00e:	464a      	mov	r2, r9
 800a010:	f000 fbdc 	bl	800a7cc <memcpy>
 800a014:	89a3      	ldrh	r3, [r4, #12]
 800a016:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a01a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a01e:	81a3      	strh	r3, [r4, #12]
 800a020:	6126      	str	r6, [r4, #16]
 800a022:	6165      	str	r5, [r4, #20]
 800a024:	444e      	add	r6, r9
 800a026:	eba5 0509 	sub.w	r5, r5, r9
 800a02a:	6026      	str	r6, [r4, #0]
 800a02c:	60a5      	str	r5, [r4, #8]
 800a02e:	463e      	mov	r6, r7
 800a030:	42be      	cmp	r6, r7
 800a032:	d900      	bls.n	800a036 <__ssputs_r+0x72>
 800a034:	463e      	mov	r6, r7
 800a036:	6820      	ldr	r0, [r4, #0]
 800a038:	4632      	mov	r2, r6
 800a03a:	4641      	mov	r1, r8
 800a03c:	f000 fb9c 	bl	800a778 <memmove>
 800a040:	68a3      	ldr	r3, [r4, #8]
 800a042:	1b9b      	subs	r3, r3, r6
 800a044:	60a3      	str	r3, [r4, #8]
 800a046:	6823      	ldr	r3, [r4, #0]
 800a048:	4433      	add	r3, r6
 800a04a:	6023      	str	r3, [r4, #0]
 800a04c:	2000      	movs	r0, #0
 800a04e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a052:	462a      	mov	r2, r5
 800a054:	f000 fc0c 	bl	800a870 <_realloc_r>
 800a058:	4606      	mov	r6, r0
 800a05a:	2800      	cmp	r0, #0
 800a05c:	d1e0      	bne.n	800a020 <__ssputs_r+0x5c>
 800a05e:	6921      	ldr	r1, [r4, #16]
 800a060:	4650      	mov	r0, sl
 800a062:	f7ff fb2d 	bl	80096c0 <_free_r>
 800a066:	230c      	movs	r3, #12
 800a068:	f8ca 3000 	str.w	r3, [sl]
 800a06c:	89a3      	ldrh	r3, [r4, #12]
 800a06e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a072:	81a3      	strh	r3, [r4, #12]
 800a074:	f04f 30ff 	mov.w	r0, #4294967295
 800a078:	e7e9      	b.n	800a04e <__ssputs_r+0x8a>
	...

0800a07c <_svfiprintf_r>:
 800a07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a080:	4698      	mov	r8, r3
 800a082:	898b      	ldrh	r3, [r1, #12]
 800a084:	061b      	lsls	r3, r3, #24
 800a086:	b09d      	sub	sp, #116	@ 0x74
 800a088:	4607      	mov	r7, r0
 800a08a:	460d      	mov	r5, r1
 800a08c:	4614      	mov	r4, r2
 800a08e:	d510      	bpl.n	800a0b2 <_svfiprintf_r+0x36>
 800a090:	690b      	ldr	r3, [r1, #16]
 800a092:	b973      	cbnz	r3, 800a0b2 <_svfiprintf_r+0x36>
 800a094:	2140      	movs	r1, #64	@ 0x40
 800a096:	f7ff fb87 	bl	80097a8 <_malloc_r>
 800a09a:	6028      	str	r0, [r5, #0]
 800a09c:	6128      	str	r0, [r5, #16]
 800a09e:	b930      	cbnz	r0, 800a0ae <_svfiprintf_r+0x32>
 800a0a0:	230c      	movs	r3, #12
 800a0a2:	603b      	str	r3, [r7, #0]
 800a0a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0a8:	b01d      	add	sp, #116	@ 0x74
 800a0aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ae:	2340      	movs	r3, #64	@ 0x40
 800a0b0:	616b      	str	r3, [r5, #20]
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0b6:	2320      	movs	r3, #32
 800a0b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a0bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0c0:	2330      	movs	r3, #48	@ 0x30
 800a0c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a260 <_svfiprintf_r+0x1e4>
 800a0c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a0ca:	f04f 0901 	mov.w	r9, #1
 800a0ce:	4623      	mov	r3, r4
 800a0d0:	469a      	mov	sl, r3
 800a0d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0d6:	b10a      	cbz	r2, 800a0dc <_svfiprintf_r+0x60>
 800a0d8:	2a25      	cmp	r2, #37	@ 0x25
 800a0da:	d1f9      	bne.n	800a0d0 <_svfiprintf_r+0x54>
 800a0dc:	ebba 0b04 	subs.w	fp, sl, r4
 800a0e0:	d00b      	beq.n	800a0fa <_svfiprintf_r+0x7e>
 800a0e2:	465b      	mov	r3, fp
 800a0e4:	4622      	mov	r2, r4
 800a0e6:	4629      	mov	r1, r5
 800a0e8:	4638      	mov	r0, r7
 800a0ea:	f7ff ff6b 	bl	8009fc4 <__ssputs_r>
 800a0ee:	3001      	adds	r0, #1
 800a0f0:	f000 80a7 	beq.w	800a242 <_svfiprintf_r+0x1c6>
 800a0f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a0f6:	445a      	add	r2, fp
 800a0f8:	9209      	str	r2, [sp, #36]	@ 0x24
 800a0fa:	f89a 3000 	ldrb.w	r3, [sl]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	f000 809f 	beq.w	800a242 <_svfiprintf_r+0x1c6>
 800a104:	2300      	movs	r3, #0
 800a106:	f04f 32ff 	mov.w	r2, #4294967295
 800a10a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a10e:	f10a 0a01 	add.w	sl, sl, #1
 800a112:	9304      	str	r3, [sp, #16]
 800a114:	9307      	str	r3, [sp, #28]
 800a116:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a11a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a11c:	4654      	mov	r4, sl
 800a11e:	2205      	movs	r2, #5
 800a120:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a124:	484e      	ldr	r0, [pc, #312]	@ (800a260 <_svfiprintf_r+0x1e4>)
 800a126:	f7f6 f85b 	bl	80001e0 <memchr>
 800a12a:	9a04      	ldr	r2, [sp, #16]
 800a12c:	b9d8      	cbnz	r0, 800a166 <_svfiprintf_r+0xea>
 800a12e:	06d0      	lsls	r0, r2, #27
 800a130:	bf44      	itt	mi
 800a132:	2320      	movmi	r3, #32
 800a134:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a138:	0711      	lsls	r1, r2, #28
 800a13a:	bf44      	itt	mi
 800a13c:	232b      	movmi	r3, #43	@ 0x2b
 800a13e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a142:	f89a 3000 	ldrb.w	r3, [sl]
 800a146:	2b2a      	cmp	r3, #42	@ 0x2a
 800a148:	d015      	beq.n	800a176 <_svfiprintf_r+0xfa>
 800a14a:	9a07      	ldr	r2, [sp, #28]
 800a14c:	4654      	mov	r4, sl
 800a14e:	2000      	movs	r0, #0
 800a150:	f04f 0c0a 	mov.w	ip, #10
 800a154:	4621      	mov	r1, r4
 800a156:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a15a:	3b30      	subs	r3, #48	@ 0x30
 800a15c:	2b09      	cmp	r3, #9
 800a15e:	d94b      	bls.n	800a1f8 <_svfiprintf_r+0x17c>
 800a160:	b1b0      	cbz	r0, 800a190 <_svfiprintf_r+0x114>
 800a162:	9207      	str	r2, [sp, #28]
 800a164:	e014      	b.n	800a190 <_svfiprintf_r+0x114>
 800a166:	eba0 0308 	sub.w	r3, r0, r8
 800a16a:	fa09 f303 	lsl.w	r3, r9, r3
 800a16e:	4313      	orrs	r3, r2
 800a170:	9304      	str	r3, [sp, #16]
 800a172:	46a2      	mov	sl, r4
 800a174:	e7d2      	b.n	800a11c <_svfiprintf_r+0xa0>
 800a176:	9b03      	ldr	r3, [sp, #12]
 800a178:	1d19      	adds	r1, r3, #4
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	9103      	str	r1, [sp, #12]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	bfbb      	ittet	lt
 800a182:	425b      	neglt	r3, r3
 800a184:	f042 0202 	orrlt.w	r2, r2, #2
 800a188:	9307      	strge	r3, [sp, #28]
 800a18a:	9307      	strlt	r3, [sp, #28]
 800a18c:	bfb8      	it	lt
 800a18e:	9204      	strlt	r2, [sp, #16]
 800a190:	7823      	ldrb	r3, [r4, #0]
 800a192:	2b2e      	cmp	r3, #46	@ 0x2e
 800a194:	d10a      	bne.n	800a1ac <_svfiprintf_r+0x130>
 800a196:	7863      	ldrb	r3, [r4, #1]
 800a198:	2b2a      	cmp	r3, #42	@ 0x2a
 800a19a:	d132      	bne.n	800a202 <_svfiprintf_r+0x186>
 800a19c:	9b03      	ldr	r3, [sp, #12]
 800a19e:	1d1a      	adds	r2, r3, #4
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	9203      	str	r2, [sp, #12]
 800a1a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a1a8:	3402      	adds	r4, #2
 800a1aa:	9305      	str	r3, [sp, #20]
 800a1ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a270 <_svfiprintf_r+0x1f4>
 800a1b0:	7821      	ldrb	r1, [r4, #0]
 800a1b2:	2203      	movs	r2, #3
 800a1b4:	4650      	mov	r0, sl
 800a1b6:	f7f6 f813 	bl	80001e0 <memchr>
 800a1ba:	b138      	cbz	r0, 800a1cc <_svfiprintf_r+0x150>
 800a1bc:	9b04      	ldr	r3, [sp, #16]
 800a1be:	eba0 000a 	sub.w	r0, r0, sl
 800a1c2:	2240      	movs	r2, #64	@ 0x40
 800a1c4:	4082      	lsls	r2, r0
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	3401      	adds	r4, #1
 800a1ca:	9304      	str	r3, [sp, #16]
 800a1cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1d0:	4824      	ldr	r0, [pc, #144]	@ (800a264 <_svfiprintf_r+0x1e8>)
 800a1d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a1d6:	2206      	movs	r2, #6
 800a1d8:	f7f6 f802 	bl	80001e0 <memchr>
 800a1dc:	2800      	cmp	r0, #0
 800a1de:	d036      	beq.n	800a24e <_svfiprintf_r+0x1d2>
 800a1e0:	4b21      	ldr	r3, [pc, #132]	@ (800a268 <_svfiprintf_r+0x1ec>)
 800a1e2:	bb1b      	cbnz	r3, 800a22c <_svfiprintf_r+0x1b0>
 800a1e4:	9b03      	ldr	r3, [sp, #12]
 800a1e6:	3307      	adds	r3, #7
 800a1e8:	f023 0307 	bic.w	r3, r3, #7
 800a1ec:	3308      	adds	r3, #8
 800a1ee:	9303      	str	r3, [sp, #12]
 800a1f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1f2:	4433      	add	r3, r6
 800a1f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1f6:	e76a      	b.n	800a0ce <_svfiprintf_r+0x52>
 800a1f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1fc:	460c      	mov	r4, r1
 800a1fe:	2001      	movs	r0, #1
 800a200:	e7a8      	b.n	800a154 <_svfiprintf_r+0xd8>
 800a202:	2300      	movs	r3, #0
 800a204:	3401      	adds	r4, #1
 800a206:	9305      	str	r3, [sp, #20]
 800a208:	4619      	mov	r1, r3
 800a20a:	f04f 0c0a 	mov.w	ip, #10
 800a20e:	4620      	mov	r0, r4
 800a210:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a214:	3a30      	subs	r2, #48	@ 0x30
 800a216:	2a09      	cmp	r2, #9
 800a218:	d903      	bls.n	800a222 <_svfiprintf_r+0x1a6>
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d0c6      	beq.n	800a1ac <_svfiprintf_r+0x130>
 800a21e:	9105      	str	r1, [sp, #20]
 800a220:	e7c4      	b.n	800a1ac <_svfiprintf_r+0x130>
 800a222:	fb0c 2101 	mla	r1, ip, r1, r2
 800a226:	4604      	mov	r4, r0
 800a228:	2301      	movs	r3, #1
 800a22a:	e7f0      	b.n	800a20e <_svfiprintf_r+0x192>
 800a22c:	ab03      	add	r3, sp, #12
 800a22e:	9300      	str	r3, [sp, #0]
 800a230:	462a      	mov	r2, r5
 800a232:	4b0e      	ldr	r3, [pc, #56]	@ (800a26c <_svfiprintf_r+0x1f0>)
 800a234:	a904      	add	r1, sp, #16
 800a236:	4638      	mov	r0, r7
 800a238:	f7fd fe96 	bl	8007f68 <_printf_float>
 800a23c:	1c42      	adds	r2, r0, #1
 800a23e:	4606      	mov	r6, r0
 800a240:	d1d6      	bne.n	800a1f0 <_svfiprintf_r+0x174>
 800a242:	89ab      	ldrh	r3, [r5, #12]
 800a244:	065b      	lsls	r3, r3, #25
 800a246:	f53f af2d 	bmi.w	800a0a4 <_svfiprintf_r+0x28>
 800a24a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a24c:	e72c      	b.n	800a0a8 <_svfiprintf_r+0x2c>
 800a24e:	ab03      	add	r3, sp, #12
 800a250:	9300      	str	r3, [sp, #0]
 800a252:	462a      	mov	r2, r5
 800a254:	4b05      	ldr	r3, [pc, #20]	@ (800a26c <_svfiprintf_r+0x1f0>)
 800a256:	a904      	add	r1, sp, #16
 800a258:	4638      	mov	r0, r7
 800a25a:	f7fe f91d 	bl	8008498 <_printf_i>
 800a25e:	e7ed      	b.n	800a23c <_svfiprintf_r+0x1c0>
 800a260:	0800adf8 	.word	0x0800adf8
 800a264:	0800ae02 	.word	0x0800ae02
 800a268:	08007f69 	.word	0x08007f69
 800a26c:	08009fc5 	.word	0x08009fc5
 800a270:	0800adfe 	.word	0x0800adfe

0800a274 <__sfputc_r>:
 800a274:	6893      	ldr	r3, [r2, #8]
 800a276:	3b01      	subs	r3, #1
 800a278:	2b00      	cmp	r3, #0
 800a27a:	b410      	push	{r4}
 800a27c:	6093      	str	r3, [r2, #8]
 800a27e:	da08      	bge.n	800a292 <__sfputc_r+0x1e>
 800a280:	6994      	ldr	r4, [r2, #24]
 800a282:	42a3      	cmp	r3, r4
 800a284:	db01      	blt.n	800a28a <__sfputc_r+0x16>
 800a286:	290a      	cmp	r1, #10
 800a288:	d103      	bne.n	800a292 <__sfputc_r+0x1e>
 800a28a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a28e:	f000 b9df 	b.w	800a650 <__swbuf_r>
 800a292:	6813      	ldr	r3, [r2, #0]
 800a294:	1c58      	adds	r0, r3, #1
 800a296:	6010      	str	r0, [r2, #0]
 800a298:	7019      	strb	r1, [r3, #0]
 800a29a:	4608      	mov	r0, r1
 800a29c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2a0:	4770      	bx	lr

0800a2a2 <__sfputs_r>:
 800a2a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2a4:	4606      	mov	r6, r0
 800a2a6:	460f      	mov	r7, r1
 800a2a8:	4614      	mov	r4, r2
 800a2aa:	18d5      	adds	r5, r2, r3
 800a2ac:	42ac      	cmp	r4, r5
 800a2ae:	d101      	bne.n	800a2b4 <__sfputs_r+0x12>
 800a2b0:	2000      	movs	r0, #0
 800a2b2:	e007      	b.n	800a2c4 <__sfputs_r+0x22>
 800a2b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2b8:	463a      	mov	r2, r7
 800a2ba:	4630      	mov	r0, r6
 800a2bc:	f7ff ffda 	bl	800a274 <__sfputc_r>
 800a2c0:	1c43      	adds	r3, r0, #1
 800a2c2:	d1f3      	bne.n	800a2ac <__sfputs_r+0xa>
 800a2c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a2c8 <_vfiprintf_r>:
 800a2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2cc:	460d      	mov	r5, r1
 800a2ce:	b09d      	sub	sp, #116	@ 0x74
 800a2d0:	4614      	mov	r4, r2
 800a2d2:	4698      	mov	r8, r3
 800a2d4:	4606      	mov	r6, r0
 800a2d6:	b118      	cbz	r0, 800a2e0 <_vfiprintf_r+0x18>
 800a2d8:	6a03      	ldr	r3, [r0, #32]
 800a2da:	b90b      	cbnz	r3, 800a2e0 <_vfiprintf_r+0x18>
 800a2dc:	f7fe fa88 	bl	80087f0 <__sinit>
 800a2e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a2e2:	07d9      	lsls	r1, r3, #31
 800a2e4:	d405      	bmi.n	800a2f2 <_vfiprintf_r+0x2a>
 800a2e6:	89ab      	ldrh	r3, [r5, #12]
 800a2e8:	059a      	lsls	r2, r3, #22
 800a2ea:	d402      	bmi.n	800a2f2 <_vfiprintf_r+0x2a>
 800a2ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a2ee:	f7fe fb96 	bl	8008a1e <__retarget_lock_acquire_recursive>
 800a2f2:	89ab      	ldrh	r3, [r5, #12]
 800a2f4:	071b      	lsls	r3, r3, #28
 800a2f6:	d501      	bpl.n	800a2fc <_vfiprintf_r+0x34>
 800a2f8:	692b      	ldr	r3, [r5, #16]
 800a2fa:	b99b      	cbnz	r3, 800a324 <_vfiprintf_r+0x5c>
 800a2fc:	4629      	mov	r1, r5
 800a2fe:	4630      	mov	r0, r6
 800a300:	f000 f9e4 	bl	800a6cc <__swsetup_r>
 800a304:	b170      	cbz	r0, 800a324 <_vfiprintf_r+0x5c>
 800a306:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a308:	07dc      	lsls	r4, r3, #31
 800a30a:	d504      	bpl.n	800a316 <_vfiprintf_r+0x4e>
 800a30c:	f04f 30ff 	mov.w	r0, #4294967295
 800a310:	b01d      	add	sp, #116	@ 0x74
 800a312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a316:	89ab      	ldrh	r3, [r5, #12]
 800a318:	0598      	lsls	r0, r3, #22
 800a31a:	d4f7      	bmi.n	800a30c <_vfiprintf_r+0x44>
 800a31c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a31e:	f7fe fb7f 	bl	8008a20 <__retarget_lock_release_recursive>
 800a322:	e7f3      	b.n	800a30c <_vfiprintf_r+0x44>
 800a324:	2300      	movs	r3, #0
 800a326:	9309      	str	r3, [sp, #36]	@ 0x24
 800a328:	2320      	movs	r3, #32
 800a32a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a32e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a332:	2330      	movs	r3, #48	@ 0x30
 800a334:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a4e4 <_vfiprintf_r+0x21c>
 800a338:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a33c:	f04f 0901 	mov.w	r9, #1
 800a340:	4623      	mov	r3, r4
 800a342:	469a      	mov	sl, r3
 800a344:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a348:	b10a      	cbz	r2, 800a34e <_vfiprintf_r+0x86>
 800a34a:	2a25      	cmp	r2, #37	@ 0x25
 800a34c:	d1f9      	bne.n	800a342 <_vfiprintf_r+0x7a>
 800a34e:	ebba 0b04 	subs.w	fp, sl, r4
 800a352:	d00b      	beq.n	800a36c <_vfiprintf_r+0xa4>
 800a354:	465b      	mov	r3, fp
 800a356:	4622      	mov	r2, r4
 800a358:	4629      	mov	r1, r5
 800a35a:	4630      	mov	r0, r6
 800a35c:	f7ff ffa1 	bl	800a2a2 <__sfputs_r>
 800a360:	3001      	adds	r0, #1
 800a362:	f000 80a7 	beq.w	800a4b4 <_vfiprintf_r+0x1ec>
 800a366:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a368:	445a      	add	r2, fp
 800a36a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a36c:	f89a 3000 	ldrb.w	r3, [sl]
 800a370:	2b00      	cmp	r3, #0
 800a372:	f000 809f 	beq.w	800a4b4 <_vfiprintf_r+0x1ec>
 800a376:	2300      	movs	r3, #0
 800a378:	f04f 32ff 	mov.w	r2, #4294967295
 800a37c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a380:	f10a 0a01 	add.w	sl, sl, #1
 800a384:	9304      	str	r3, [sp, #16]
 800a386:	9307      	str	r3, [sp, #28]
 800a388:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a38c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a38e:	4654      	mov	r4, sl
 800a390:	2205      	movs	r2, #5
 800a392:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a396:	4853      	ldr	r0, [pc, #332]	@ (800a4e4 <_vfiprintf_r+0x21c>)
 800a398:	f7f5 ff22 	bl	80001e0 <memchr>
 800a39c:	9a04      	ldr	r2, [sp, #16]
 800a39e:	b9d8      	cbnz	r0, 800a3d8 <_vfiprintf_r+0x110>
 800a3a0:	06d1      	lsls	r1, r2, #27
 800a3a2:	bf44      	itt	mi
 800a3a4:	2320      	movmi	r3, #32
 800a3a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a3aa:	0713      	lsls	r3, r2, #28
 800a3ac:	bf44      	itt	mi
 800a3ae:	232b      	movmi	r3, #43	@ 0x2b
 800a3b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a3b4:	f89a 3000 	ldrb.w	r3, [sl]
 800a3b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3ba:	d015      	beq.n	800a3e8 <_vfiprintf_r+0x120>
 800a3bc:	9a07      	ldr	r2, [sp, #28]
 800a3be:	4654      	mov	r4, sl
 800a3c0:	2000      	movs	r0, #0
 800a3c2:	f04f 0c0a 	mov.w	ip, #10
 800a3c6:	4621      	mov	r1, r4
 800a3c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3cc:	3b30      	subs	r3, #48	@ 0x30
 800a3ce:	2b09      	cmp	r3, #9
 800a3d0:	d94b      	bls.n	800a46a <_vfiprintf_r+0x1a2>
 800a3d2:	b1b0      	cbz	r0, 800a402 <_vfiprintf_r+0x13a>
 800a3d4:	9207      	str	r2, [sp, #28]
 800a3d6:	e014      	b.n	800a402 <_vfiprintf_r+0x13a>
 800a3d8:	eba0 0308 	sub.w	r3, r0, r8
 800a3dc:	fa09 f303 	lsl.w	r3, r9, r3
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	9304      	str	r3, [sp, #16]
 800a3e4:	46a2      	mov	sl, r4
 800a3e6:	e7d2      	b.n	800a38e <_vfiprintf_r+0xc6>
 800a3e8:	9b03      	ldr	r3, [sp, #12]
 800a3ea:	1d19      	adds	r1, r3, #4
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	9103      	str	r1, [sp, #12]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	bfbb      	ittet	lt
 800a3f4:	425b      	neglt	r3, r3
 800a3f6:	f042 0202 	orrlt.w	r2, r2, #2
 800a3fa:	9307      	strge	r3, [sp, #28]
 800a3fc:	9307      	strlt	r3, [sp, #28]
 800a3fe:	bfb8      	it	lt
 800a400:	9204      	strlt	r2, [sp, #16]
 800a402:	7823      	ldrb	r3, [r4, #0]
 800a404:	2b2e      	cmp	r3, #46	@ 0x2e
 800a406:	d10a      	bne.n	800a41e <_vfiprintf_r+0x156>
 800a408:	7863      	ldrb	r3, [r4, #1]
 800a40a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a40c:	d132      	bne.n	800a474 <_vfiprintf_r+0x1ac>
 800a40e:	9b03      	ldr	r3, [sp, #12]
 800a410:	1d1a      	adds	r2, r3, #4
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	9203      	str	r2, [sp, #12]
 800a416:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a41a:	3402      	adds	r4, #2
 800a41c:	9305      	str	r3, [sp, #20]
 800a41e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a4f4 <_vfiprintf_r+0x22c>
 800a422:	7821      	ldrb	r1, [r4, #0]
 800a424:	2203      	movs	r2, #3
 800a426:	4650      	mov	r0, sl
 800a428:	f7f5 feda 	bl	80001e0 <memchr>
 800a42c:	b138      	cbz	r0, 800a43e <_vfiprintf_r+0x176>
 800a42e:	9b04      	ldr	r3, [sp, #16]
 800a430:	eba0 000a 	sub.w	r0, r0, sl
 800a434:	2240      	movs	r2, #64	@ 0x40
 800a436:	4082      	lsls	r2, r0
 800a438:	4313      	orrs	r3, r2
 800a43a:	3401      	adds	r4, #1
 800a43c:	9304      	str	r3, [sp, #16]
 800a43e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a442:	4829      	ldr	r0, [pc, #164]	@ (800a4e8 <_vfiprintf_r+0x220>)
 800a444:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a448:	2206      	movs	r2, #6
 800a44a:	f7f5 fec9 	bl	80001e0 <memchr>
 800a44e:	2800      	cmp	r0, #0
 800a450:	d03f      	beq.n	800a4d2 <_vfiprintf_r+0x20a>
 800a452:	4b26      	ldr	r3, [pc, #152]	@ (800a4ec <_vfiprintf_r+0x224>)
 800a454:	bb1b      	cbnz	r3, 800a49e <_vfiprintf_r+0x1d6>
 800a456:	9b03      	ldr	r3, [sp, #12]
 800a458:	3307      	adds	r3, #7
 800a45a:	f023 0307 	bic.w	r3, r3, #7
 800a45e:	3308      	adds	r3, #8
 800a460:	9303      	str	r3, [sp, #12]
 800a462:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a464:	443b      	add	r3, r7
 800a466:	9309      	str	r3, [sp, #36]	@ 0x24
 800a468:	e76a      	b.n	800a340 <_vfiprintf_r+0x78>
 800a46a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a46e:	460c      	mov	r4, r1
 800a470:	2001      	movs	r0, #1
 800a472:	e7a8      	b.n	800a3c6 <_vfiprintf_r+0xfe>
 800a474:	2300      	movs	r3, #0
 800a476:	3401      	adds	r4, #1
 800a478:	9305      	str	r3, [sp, #20]
 800a47a:	4619      	mov	r1, r3
 800a47c:	f04f 0c0a 	mov.w	ip, #10
 800a480:	4620      	mov	r0, r4
 800a482:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a486:	3a30      	subs	r2, #48	@ 0x30
 800a488:	2a09      	cmp	r2, #9
 800a48a:	d903      	bls.n	800a494 <_vfiprintf_r+0x1cc>
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d0c6      	beq.n	800a41e <_vfiprintf_r+0x156>
 800a490:	9105      	str	r1, [sp, #20]
 800a492:	e7c4      	b.n	800a41e <_vfiprintf_r+0x156>
 800a494:	fb0c 2101 	mla	r1, ip, r1, r2
 800a498:	4604      	mov	r4, r0
 800a49a:	2301      	movs	r3, #1
 800a49c:	e7f0      	b.n	800a480 <_vfiprintf_r+0x1b8>
 800a49e:	ab03      	add	r3, sp, #12
 800a4a0:	9300      	str	r3, [sp, #0]
 800a4a2:	462a      	mov	r2, r5
 800a4a4:	4b12      	ldr	r3, [pc, #72]	@ (800a4f0 <_vfiprintf_r+0x228>)
 800a4a6:	a904      	add	r1, sp, #16
 800a4a8:	4630      	mov	r0, r6
 800a4aa:	f7fd fd5d 	bl	8007f68 <_printf_float>
 800a4ae:	4607      	mov	r7, r0
 800a4b0:	1c78      	adds	r0, r7, #1
 800a4b2:	d1d6      	bne.n	800a462 <_vfiprintf_r+0x19a>
 800a4b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a4b6:	07d9      	lsls	r1, r3, #31
 800a4b8:	d405      	bmi.n	800a4c6 <_vfiprintf_r+0x1fe>
 800a4ba:	89ab      	ldrh	r3, [r5, #12]
 800a4bc:	059a      	lsls	r2, r3, #22
 800a4be:	d402      	bmi.n	800a4c6 <_vfiprintf_r+0x1fe>
 800a4c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a4c2:	f7fe faad 	bl	8008a20 <__retarget_lock_release_recursive>
 800a4c6:	89ab      	ldrh	r3, [r5, #12]
 800a4c8:	065b      	lsls	r3, r3, #25
 800a4ca:	f53f af1f 	bmi.w	800a30c <_vfiprintf_r+0x44>
 800a4ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a4d0:	e71e      	b.n	800a310 <_vfiprintf_r+0x48>
 800a4d2:	ab03      	add	r3, sp, #12
 800a4d4:	9300      	str	r3, [sp, #0]
 800a4d6:	462a      	mov	r2, r5
 800a4d8:	4b05      	ldr	r3, [pc, #20]	@ (800a4f0 <_vfiprintf_r+0x228>)
 800a4da:	a904      	add	r1, sp, #16
 800a4dc:	4630      	mov	r0, r6
 800a4de:	f7fd ffdb 	bl	8008498 <_printf_i>
 800a4e2:	e7e4      	b.n	800a4ae <_vfiprintf_r+0x1e6>
 800a4e4:	0800adf8 	.word	0x0800adf8
 800a4e8:	0800ae02 	.word	0x0800ae02
 800a4ec:	08007f69 	.word	0x08007f69
 800a4f0:	0800a2a3 	.word	0x0800a2a3
 800a4f4:	0800adfe 	.word	0x0800adfe

0800a4f8 <__sflush_r>:
 800a4f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a4fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a500:	0716      	lsls	r6, r2, #28
 800a502:	4605      	mov	r5, r0
 800a504:	460c      	mov	r4, r1
 800a506:	d454      	bmi.n	800a5b2 <__sflush_r+0xba>
 800a508:	684b      	ldr	r3, [r1, #4]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	dc02      	bgt.n	800a514 <__sflush_r+0x1c>
 800a50e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a510:	2b00      	cmp	r3, #0
 800a512:	dd48      	ble.n	800a5a6 <__sflush_r+0xae>
 800a514:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a516:	2e00      	cmp	r6, #0
 800a518:	d045      	beq.n	800a5a6 <__sflush_r+0xae>
 800a51a:	2300      	movs	r3, #0
 800a51c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a520:	682f      	ldr	r7, [r5, #0]
 800a522:	6a21      	ldr	r1, [r4, #32]
 800a524:	602b      	str	r3, [r5, #0]
 800a526:	d030      	beq.n	800a58a <__sflush_r+0x92>
 800a528:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a52a:	89a3      	ldrh	r3, [r4, #12]
 800a52c:	0759      	lsls	r1, r3, #29
 800a52e:	d505      	bpl.n	800a53c <__sflush_r+0x44>
 800a530:	6863      	ldr	r3, [r4, #4]
 800a532:	1ad2      	subs	r2, r2, r3
 800a534:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a536:	b10b      	cbz	r3, 800a53c <__sflush_r+0x44>
 800a538:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a53a:	1ad2      	subs	r2, r2, r3
 800a53c:	2300      	movs	r3, #0
 800a53e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a540:	6a21      	ldr	r1, [r4, #32]
 800a542:	4628      	mov	r0, r5
 800a544:	47b0      	blx	r6
 800a546:	1c43      	adds	r3, r0, #1
 800a548:	89a3      	ldrh	r3, [r4, #12]
 800a54a:	d106      	bne.n	800a55a <__sflush_r+0x62>
 800a54c:	6829      	ldr	r1, [r5, #0]
 800a54e:	291d      	cmp	r1, #29
 800a550:	d82b      	bhi.n	800a5aa <__sflush_r+0xb2>
 800a552:	4a2a      	ldr	r2, [pc, #168]	@ (800a5fc <__sflush_r+0x104>)
 800a554:	410a      	asrs	r2, r1
 800a556:	07d6      	lsls	r6, r2, #31
 800a558:	d427      	bmi.n	800a5aa <__sflush_r+0xb2>
 800a55a:	2200      	movs	r2, #0
 800a55c:	6062      	str	r2, [r4, #4]
 800a55e:	04d9      	lsls	r1, r3, #19
 800a560:	6922      	ldr	r2, [r4, #16]
 800a562:	6022      	str	r2, [r4, #0]
 800a564:	d504      	bpl.n	800a570 <__sflush_r+0x78>
 800a566:	1c42      	adds	r2, r0, #1
 800a568:	d101      	bne.n	800a56e <__sflush_r+0x76>
 800a56a:	682b      	ldr	r3, [r5, #0]
 800a56c:	b903      	cbnz	r3, 800a570 <__sflush_r+0x78>
 800a56e:	6560      	str	r0, [r4, #84]	@ 0x54
 800a570:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a572:	602f      	str	r7, [r5, #0]
 800a574:	b1b9      	cbz	r1, 800a5a6 <__sflush_r+0xae>
 800a576:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a57a:	4299      	cmp	r1, r3
 800a57c:	d002      	beq.n	800a584 <__sflush_r+0x8c>
 800a57e:	4628      	mov	r0, r5
 800a580:	f7ff f89e 	bl	80096c0 <_free_r>
 800a584:	2300      	movs	r3, #0
 800a586:	6363      	str	r3, [r4, #52]	@ 0x34
 800a588:	e00d      	b.n	800a5a6 <__sflush_r+0xae>
 800a58a:	2301      	movs	r3, #1
 800a58c:	4628      	mov	r0, r5
 800a58e:	47b0      	blx	r6
 800a590:	4602      	mov	r2, r0
 800a592:	1c50      	adds	r0, r2, #1
 800a594:	d1c9      	bne.n	800a52a <__sflush_r+0x32>
 800a596:	682b      	ldr	r3, [r5, #0]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d0c6      	beq.n	800a52a <__sflush_r+0x32>
 800a59c:	2b1d      	cmp	r3, #29
 800a59e:	d001      	beq.n	800a5a4 <__sflush_r+0xac>
 800a5a0:	2b16      	cmp	r3, #22
 800a5a2:	d11e      	bne.n	800a5e2 <__sflush_r+0xea>
 800a5a4:	602f      	str	r7, [r5, #0]
 800a5a6:	2000      	movs	r0, #0
 800a5a8:	e022      	b.n	800a5f0 <__sflush_r+0xf8>
 800a5aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5ae:	b21b      	sxth	r3, r3
 800a5b0:	e01b      	b.n	800a5ea <__sflush_r+0xf2>
 800a5b2:	690f      	ldr	r7, [r1, #16]
 800a5b4:	2f00      	cmp	r7, #0
 800a5b6:	d0f6      	beq.n	800a5a6 <__sflush_r+0xae>
 800a5b8:	0793      	lsls	r3, r2, #30
 800a5ba:	680e      	ldr	r6, [r1, #0]
 800a5bc:	bf08      	it	eq
 800a5be:	694b      	ldreq	r3, [r1, #20]
 800a5c0:	600f      	str	r7, [r1, #0]
 800a5c2:	bf18      	it	ne
 800a5c4:	2300      	movne	r3, #0
 800a5c6:	eba6 0807 	sub.w	r8, r6, r7
 800a5ca:	608b      	str	r3, [r1, #8]
 800a5cc:	f1b8 0f00 	cmp.w	r8, #0
 800a5d0:	dde9      	ble.n	800a5a6 <__sflush_r+0xae>
 800a5d2:	6a21      	ldr	r1, [r4, #32]
 800a5d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a5d6:	4643      	mov	r3, r8
 800a5d8:	463a      	mov	r2, r7
 800a5da:	4628      	mov	r0, r5
 800a5dc:	47b0      	blx	r6
 800a5de:	2800      	cmp	r0, #0
 800a5e0:	dc08      	bgt.n	800a5f4 <__sflush_r+0xfc>
 800a5e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5ea:	81a3      	strh	r3, [r4, #12]
 800a5ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a5f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5f4:	4407      	add	r7, r0
 800a5f6:	eba8 0800 	sub.w	r8, r8, r0
 800a5fa:	e7e7      	b.n	800a5cc <__sflush_r+0xd4>
 800a5fc:	dfbffffe 	.word	0xdfbffffe

0800a600 <_fflush_r>:
 800a600:	b538      	push	{r3, r4, r5, lr}
 800a602:	690b      	ldr	r3, [r1, #16]
 800a604:	4605      	mov	r5, r0
 800a606:	460c      	mov	r4, r1
 800a608:	b913      	cbnz	r3, 800a610 <_fflush_r+0x10>
 800a60a:	2500      	movs	r5, #0
 800a60c:	4628      	mov	r0, r5
 800a60e:	bd38      	pop	{r3, r4, r5, pc}
 800a610:	b118      	cbz	r0, 800a61a <_fflush_r+0x1a>
 800a612:	6a03      	ldr	r3, [r0, #32]
 800a614:	b90b      	cbnz	r3, 800a61a <_fflush_r+0x1a>
 800a616:	f7fe f8eb 	bl	80087f0 <__sinit>
 800a61a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d0f3      	beq.n	800a60a <_fflush_r+0xa>
 800a622:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a624:	07d0      	lsls	r0, r2, #31
 800a626:	d404      	bmi.n	800a632 <_fflush_r+0x32>
 800a628:	0599      	lsls	r1, r3, #22
 800a62a:	d402      	bmi.n	800a632 <_fflush_r+0x32>
 800a62c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a62e:	f7fe f9f6 	bl	8008a1e <__retarget_lock_acquire_recursive>
 800a632:	4628      	mov	r0, r5
 800a634:	4621      	mov	r1, r4
 800a636:	f7ff ff5f 	bl	800a4f8 <__sflush_r>
 800a63a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a63c:	07da      	lsls	r2, r3, #31
 800a63e:	4605      	mov	r5, r0
 800a640:	d4e4      	bmi.n	800a60c <_fflush_r+0xc>
 800a642:	89a3      	ldrh	r3, [r4, #12]
 800a644:	059b      	lsls	r3, r3, #22
 800a646:	d4e1      	bmi.n	800a60c <_fflush_r+0xc>
 800a648:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a64a:	f7fe f9e9 	bl	8008a20 <__retarget_lock_release_recursive>
 800a64e:	e7dd      	b.n	800a60c <_fflush_r+0xc>

0800a650 <__swbuf_r>:
 800a650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a652:	460e      	mov	r6, r1
 800a654:	4614      	mov	r4, r2
 800a656:	4605      	mov	r5, r0
 800a658:	b118      	cbz	r0, 800a662 <__swbuf_r+0x12>
 800a65a:	6a03      	ldr	r3, [r0, #32]
 800a65c:	b90b      	cbnz	r3, 800a662 <__swbuf_r+0x12>
 800a65e:	f7fe f8c7 	bl	80087f0 <__sinit>
 800a662:	69a3      	ldr	r3, [r4, #24]
 800a664:	60a3      	str	r3, [r4, #8]
 800a666:	89a3      	ldrh	r3, [r4, #12]
 800a668:	071a      	lsls	r2, r3, #28
 800a66a:	d501      	bpl.n	800a670 <__swbuf_r+0x20>
 800a66c:	6923      	ldr	r3, [r4, #16]
 800a66e:	b943      	cbnz	r3, 800a682 <__swbuf_r+0x32>
 800a670:	4621      	mov	r1, r4
 800a672:	4628      	mov	r0, r5
 800a674:	f000 f82a 	bl	800a6cc <__swsetup_r>
 800a678:	b118      	cbz	r0, 800a682 <__swbuf_r+0x32>
 800a67a:	f04f 37ff 	mov.w	r7, #4294967295
 800a67e:	4638      	mov	r0, r7
 800a680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a682:	6823      	ldr	r3, [r4, #0]
 800a684:	6922      	ldr	r2, [r4, #16]
 800a686:	1a98      	subs	r0, r3, r2
 800a688:	6963      	ldr	r3, [r4, #20]
 800a68a:	b2f6      	uxtb	r6, r6
 800a68c:	4283      	cmp	r3, r0
 800a68e:	4637      	mov	r7, r6
 800a690:	dc05      	bgt.n	800a69e <__swbuf_r+0x4e>
 800a692:	4621      	mov	r1, r4
 800a694:	4628      	mov	r0, r5
 800a696:	f7ff ffb3 	bl	800a600 <_fflush_r>
 800a69a:	2800      	cmp	r0, #0
 800a69c:	d1ed      	bne.n	800a67a <__swbuf_r+0x2a>
 800a69e:	68a3      	ldr	r3, [r4, #8]
 800a6a0:	3b01      	subs	r3, #1
 800a6a2:	60a3      	str	r3, [r4, #8]
 800a6a4:	6823      	ldr	r3, [r4, #0]
 800a6a6:	1c5a      	adds	r2, r3, #1
 800a6a8:	6022      	str	r2, [r4, #0]
 800a6aa:	701e      	strb	r6, [r3, #0]
 800a6ac:	6962      	ldr	r2, [r4, #20]
 800a6ae:	1c43      	adds	r3, r0, #1
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d004      	beq.n	800a6be <__swbuf_r+0x6e>
 800a6b4:	89a3      	ldrh	r3, [r4, #12]
 800a6b6:	07db      	lsls	r3, r3, #31
 800a6b8:	d5e1      	bpl.n	800a67e <__swbuf_r+0x2e>
 800a6ba:	2e0a      	cmp	r6, #10
 800a6bc:	d1df      	bne.n	800a67e <__swbuf_r+0x2e>
 800a6be:	4621      	mov	r1, r4
 800a6c0:	4628      	mov	r0, r5
 800a6c2:	f7ff ff9d 	bl	800a600 <_fflush_r>
 800a6c6:	2800      	cmp	r0, #0
 800a6c8:	d0d9      	beq.n	800a67e <__swbuf_r+0x2e>
 800a6ca:	e7d6      	b.n	800a67a <__swbuf_r+0x2a>

0800a6cc <__swsetup_r>:
 800a6cc:	b538      	push	{r3, r4, r5, lr}
 800a6ce:	4b29      	ldr	r3, [pc, #164]	@ (800a774 <__swsetup_r+0xa8>)
 800a6d0:	4605      	mov	r5, r0
 800a6d2:	6818      	ldr	r0, [r3, #0]
 800a6d4:	460c      	mov	r4, r1
 800a6d6:	b118      	cbz	r0, 800a6e0 <__swsetup_r+0x14>
 800a6d8:	6a03      	ldr	r3, [r0, #32]
 800a6da:	b90b      	cbnz	r3, 800a6e0 <__swsetup_r+0x14>
 800a6dc:	f7fe f888 	bl	80087f0 <__sinit>
 800a6e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6e4:	0719      	lsls	r1, r3, #28
 800a6e6:	d422      	bmi.n	800a72e <__swsetup_r+0x62>
 800a6e8:	06da      	lsls	r2, r3, #27
 800a6ea:	d407      	bmi.n	800a6fc <__swsetup_r+0x30>
 800a6ec:	2209      	movs	r2, #9
 800a6ee:	602a      	str	r2, [r5, #0]
 800a6f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6f4:	81a3      	strh	r3, [r4, #12]
 800a6f6:	f04f 30ff 	mov.w	r0, #4294967295
 800a6fa:	e033      	b.n	800a764 <__swsetup_r+0x98>
 800a6fc:	0758      	lsls	r0, r3, #29
 800a6fe:	d512      	bpl.n	800a726 <__swsetup_r+0x5a>
 800a700:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a702:	b141      	cbz	r1, 800a716 <__swsetup_r+0x4a>
 800a704:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a708:	4299      	cmp	r1, r3
 800a70a:	d002      	beq.n	800a712 <__swsetup_r+0x46>
 800a70c:	4628      	mov	r0, r5
 800a70e:	f7fe ffd7 	bl	80096c0 <_free_r>
 800a712:	2300      	movs	r3, #0
 800a714:	6363      	str	r3, [r4, #52]	@ 0x34
 800a716:	89a3      	ldrh	r3, [r4, #12]
 800a718:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a71c:	81a3      	strh	r3, [r4, #12]
 800a71e:	2300      	movs	r3, #0
 800a720:	6063      	str	r3, [r4, #4]
 800a722:	6923      	ldr	r3, [r4, #16]
 800a724:	6023      	str	r3, [r4, #0]
 800a726:	89a3      	ldrh	r3, [r4, #12]
 800a728:	f043 0308 	orr.w	r3, r3, #8
 800a72c:	81a3      	strh	r3, [r4, #12]
 800a72e:	6923      	ldr	r3, [r4, #16]
 800a730:	b94b      	cbnz	r3, 800a746 <__swsetup_r+0x7a>
 800a732:	89a3      	ldrh	r3, [r4, #12]
 800a734:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a738:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a73c:	d003      	beq.n	800a746 <__swsetup_r+0x7a>
 800a73e:	4621      	mov	r1, r4
 800a740:	4628      	mov	r0, r5
 800a742:	f000 f909 	bl	800a958 <__smakebuf_r>
 800a746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a74a:	f013 0201 	ands.w	r2, r3, #1
 800a74e:	d00a      	beq.n	800a766 <__swsetup_r+0x9a>
 800a750:	2200      	movs	r2, #0
 800a752:	60a2      	str	r2, [r4, #8]
 800a754:	6962      	ldr	r2, [r4, #20]
 800a756:	4252      	negs	r2, r2
 800a758:	61a2      	str	r2, [r4, #24]
 800a75a:	6922      	ldr	r2, [r4, #16]
 800a75c:	b942      	cbnz	r2, 800a770 <__swsetup_r+0xa4>
 800a75e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a762:	d1c5      	bne.n	800a6f0 <__swsetup_r+0x24>
 800a764:	bd38      	pop	{r3, r4, r5, pc}
 800a766:	0799      	lsls	r1, r3, #30
 800a768:	bf58      	it	pl
 800a76a:	6962      	ldrpl	r2, [r4, #20]
 800a76c:	60a2      	str	r2, [r4, #8]
 800a76e:	e7f4      	b.n	800a75a <__swsetup_r+0x8e>
 800a770:	2000      	movs	r0, #0
 800a772:	e7f7      	b.n	800a764 <__swsetup_r+0x98>
 800a774:	20000018 	.word	0x20000018

0800a778 <memmove>:
 800a778:	4288      	cmp	r0, r1
 800a77a:	b510      	push	{r4, lr}
 800a77c:	eb01 0402 	add.w	r4, r1, r2
 800a780:	d902      	bls.n	800a788 <memmove+0x10>
 800a782:	4284      	cmp	r4, r0
 800a784:	4623      	mov	r3, r4
 800a786:	d807      	bhi.n	800a798 <memmove+0x20>
 800a788:	1e43      	subs	r3, r0, #1
 800a78a:	42a1      	cmp	r1, r4
 800a78c:	d008      	beq.n	800a7a0 <memmove+0x28>
 800a78e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a792:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a796:	e7f8      	b.n	800a78a <memmove+0x12>
 800a798:	4402      	add	r2, r0
 800a79a:	4601      	mov	r1, r0
 800a79c:	428a      	cmp	r2, r1
 800a79e:	d100      	bne.n	800a7a2 <memmove+0x2a>
 800a7a0:	bd10      	pop	{r4, pc}
 800a7a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a7a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a7aa:	e7f7      	b.n	800a79c <memmove+0x24>

0800a7ac <_sbrk_r>:
 800a7ac:	b538      	push	{r3, r4, r5, lr}
 800a7ae:	4d06      	ldr	r5, [pc, #24]	@ (800a7c8 <_sbrk_r+0x1c>)
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	4604      	mov	r4, r0
 800a7b4:	4608      	mov	r0, r1
 800a7b6:	602b      	str	r3, [r5, #0]
 800a7b8:	f7f7 fe26 	bl	8002408 <_sbrk>
 800a7bc:	1c43      	adds	r3, r0, #1
 800a7be:	d102      	bne.n	800a7c6 <_sbrk_r+0x1a>
 800a7c0:	682b      	ldr	r3, [r5, #0]
 800a7c2:	b103      	cbz	r3, 800a7c6 <_sbrk_r+0x1a>
 800a7c4:	6023      	str	r3, [r4, #0]
 800a7c6:	bd38      	pop	{r3, r4, r5, pc}
 800a7c8:	2000068c 	.word	0x2000068c

0800a7cc <memcpy>:
 800a7cc:	440a      	add	r2, r1
 800a7ce:	4291      	cmp	r1, r2
 800a7d0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7d4:	d100      	bne.n	800a7d8 <memcpy+0xc>
 800a7d6:	4770      	bx	lr
 800a7d8:	b510      	push	{r4, lr}
 800a7da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7e2:	4291      	cmp	r1, r2
 800a7e4:	d1f9      	bne.n	800a7da <memcpy+0xe>
 800a7e6:	bd10      	pop	{r4, pc}

0800a7e8 <__assert_func>:
 800a7e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a7ea:	4614      	mov	r4, r2
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	4b09      	ldr	r3, [pc, #36]	@ (800a814 <__assert_func+0x2c>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	4605      	mov	r5, r0
 800a7f4:	68d8      	ldr	r0, [r3, #12]
 800a7f6:	b954      	cbnz	r4, 800a80e <__assert_func+0x26>
 800a7f8:	4b07      	ldr	r3, [pc, #28]	@ (800a818 <__assert_func+0x30>)
 800a7fa:	461c      	mov	r4, r3
 800a7fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a800:	9100      	str	r1, [sp, #0]
 800a802:	462b      	mov	r3, r5
 800a804:	4905      	ldr	r1, [pc, #20]	@ (800a81c <__assert_func+0x34>)
 800a806:	f000 f86f 	bl	800a8e8 <fiprintf>
 800a80a:	f000 f903 	bl	800aa14 <abort>
 800a80e:	4b04      	ldr	r3, [pc, #16]	@ (800a820 <__assert_func+0x38>)
 800a810:	e7f4      	b.n	800a7fc <__assert_func+0x14>
 800a812:	bf00      	nop
 800a814:	20000018 	.word	0x20000018
 800a818:	0800ae4e 	.word	0x0800ae4e
 800a81c:	0800ae20 	.word	0x0800ae20
 800a820:	0800ae13 	.word	0x0800ae13

0800a824 <_calloc_r>:
 800a824:	b570      	push	{r4, r5, r6, lr}
 800a826:	fba1 5402 	umull	r5, r4, r1, r2
 800a82a:	b93c      	cbnz	r4, 800a83c <_calloc_r+0x18>
 800a82c:	4629      	mov	r1, r5
 800a82e:	f7fe ffbb 	bl	80097a8 <_malloc_r>
 800a832:	4606      	mov	r6, r0
 800a834:	b928      	cbnz	r0, 800a842 <_calloc_r+0x1e>
 800a836:	2600      	movs	r6, #0
 800a838:	4630      	mov	r0, r6
 800a83a:	bd70      	pop	{r4, r5, r6, pc}
 800a83c:	220c      	movs	r2, #12
 800a83e:	6002      	str	r2, [r0, #0]
 800a840:	e7f9      	b.n	800a836 <_calloc_r+0x12>
 800a842:	462a      	mov	r2, r5
 800a844:	4621      	mov	r1, r4
 800a846:	f7fe f86c 	bl	8008922 <memset>
 800a84a:	e7f5      	b.n	800a838 <_calloc_r+0x14>

0800a84c <__ascii_mbtowc>:
 800a84c:	b082      	sub	sp, #8
 800a84e:	b901      	cbnz	r1, 800a852 <__ascii_mbtowc+0x6>
 800a850:	a901      	add	r1, sp, #4
 800a852:	b142      	cbz	r2, 800a866 <__ascii_mbtowc+0x1a>
 800a854:	b14b      	cbz	r3, 800a86a <__ascii_mbtowc+0x1e>
 800a856:	7813      	ldrb	r3, [r2, #0]
 800a858:	600b      	str	r3, [r1, #0]
 800a85a:	7812      	ldrb	r2, [r2, #0]
 800a85c:	1e10      	subs	r0, r2, #0
 800a85e:	bf18      	it	ne
 800a860:	2001      	movne	r0, #1
 800a862:	b002      	add	sp, #8
 800a864:	4770      	bx	lr
 800a866:	4610      	mov	r0, r2
 800a868:	e7fb      	b.n	800a862 <__ascii_mbtowc+0x16>
 800a86a:	f06f 0001 	mvn.w	r0, #1
 800a86e:	e7f8      	b.n	800a862 <__ascii_mbtowc+0x16>

0800a870 <_realloc_r>:
 800a870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a874:	4680      	mov	r8, r0
 800a876:	4615      	mov	r5, r2
 800a878:	460c      	mov	r4, r1
 800a87a:	b921      	cbnz	r1, 800a886 <_realloc_r+0x16>
 800a87c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a880:	4611      	mov	r1, r2
 800a882:	f7fe bf91 	b.w	80097a8 <_malloc_r>
 800a886:	b92a      	cbnz	r2, 800a894 <_realloc_r+0x24>
 800a888:	f7fe ff1a 	bl	80096c0 <_free_r>
 800a88c:	2400      	movs	r4, #0
 800a88e:	4620      	mov	r0, r4
 800a890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a894:	f000 f8c5 	bl	800aa22 <_malloc_usable_size_r>
 800a898:	4285      	cmp	r5, r0
 800a89a:	4606      	mov	r6, r0
 800a89c:	d802      	bhi.n	800a8a4 <_realloc_r+0x34>
 800a89e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a8a2:	d8f4      	bhi.n	800a88e <_realloc_r+0x1e>
 800a8a4:	4629      	mov	r1, r5
 800a8a6:	4640      	mov	r0, r8
 800a8a8:	f7fe ff7e 	bl	80097a8 <_malloc_r>
 800a8ac:	4607      	mov	r7, r0
 800a8ae:	2800      	cmp	r0, #0
 800a8b0:	d0ec      	beq.n	800a88c <_realloc_r+0x1c>
 800a8b2:	42b5      	cmp	r5, r6
 800a8b4:	462a      	mov	r2, r5
 800a8b6:	4621      	mov	r1, r4
 800a8b8:	bf28      	it	cs
 800a8ba:	4632      	movcs	r2, r6
 800a8bc:	f7ff ff86 	bl	800a7cc <memcpy>
 800a8c0:	4621      	mov	r1, r4
 800a8c2:	4640      	mov	r0, r8
 800a8c4:	f7fe fefc 	bl	80096c0 <_free_r>
 800a8c8:	463c      	mov	r4, r7
 800a8ca:	e7e0      	b.n	800a88e <_realloc_r+0x1e>

0800a8cc <__ascii_wctomb>:
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	4608      	mov	r0, r1
 800a8d0:	b141      	cbz	r1, 800a8e4 <__ascii_wctomb+0x18>
 800a8d2:	2aff      	cmp	r2, #255	@ 0xff
 800a8d4:	d904      	bls.n	800a8e0 <__ascii_wctomb+0x14>
 800a8d6:	228a      	movs	r2, #138	@ 0x8a
 800a8d8:	601a      	str	r2, [r3, #0]
 800a8da:	f04f 30ff 	mov.w	r0, #4294967295
 800a8de:	4770      	bx	lr
 800a8e0:	700a      	strb	r2, [r1, #0]
 800a8e2:	2001      	movs	r0, #1
 800a8e4:	4770      	bx	lr
	...

0800a8e8 <fiprintf>:
 800a8e8:	b40e      	push	{r1, r2, r3}
 800a8ea:	b503      	push	{r0, r1, lr}
 800a8ec:	4601      	mov	r1, r0
 800a8ee:	ab03      	add	r3, sp, #12
 800a8f0:	4805      	ldr	r0, [pc, #20]	@ (800a908 <fiprintf+0x20>)
 800a8f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8f6:	6800      	ldr	r0, [r0, #0]
 800a8f8:	9301      	str	r3, [sp, #4]
 800a8fa:	f7ff fce5 	bl	800a2c8 <_vfiprintf_r>
 800a8fe:	b002      	add	sp, #8
 800a900:	f85d eb04 	ldr.w	lr, [sp], #4
 800a904:	b003      	add	sp, #12
 800a906:	4770      	bx	lr
 800a908:	20000018 	.word	0x20000018

0800a90c <__swhatbuf_r>:
 800a90c:	b570      	push	{r4, r5, r6, lr}
 800a90e:	460c      	mov	r4, r1
 800a910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a914:	2900      	cmp	r1, #0
 800a916:	b096      	sub	sp, #88	@ 0x58
 800a918:	4615      	mov	r5, r2
 800a91a:	461e      	mov	r6, r3
 800a91c:	da0d      	bge.n	800a93a <__swhatbuf_r+0x2e>
 800a91e:	89a3      	ldrh	r3, [r4, #12]
 800a920:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a924:	f04f 0100 	mov.w	r1, #0
 800a928:	bf14      	ite	ne
 800a92a:	2340      	movne	r3, #64	@ 0x40
 800a92c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a930:	2000      	movs	r0, #0
 800a932:	6031      	str	r1, [r6, #0]
 800a934:	602b      	str	r3, [r5, #0]
 800a936:	b016      	add	sp, #88	@ 0x58
 800a938:	bd70      	pop	{r4, r5, r6, pc}
 800a93a:	466a      	mov	r2, sp
 800a93c:	f000 f848 	bl	800a9d0 <_fstat_r>
 800a940:	2800      	cmp	r0, #0
 800a942:	dbec      	blt.n	800a91e <__swhatbuf_r+0x12>
 800a944:	9901      	ldr	r1, [sp, #4]
 800a946:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a94a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a94e:	4259      	negs	r1, r3
 800a950:	4159      	adcs	r1, r3
 800a952:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a956:	e7eb      	b.n	800a930 <__swhatbuf_r+0x24>

0800a958 <__smakebuf_r>:
 800a958:	898b      	ldrh	r3, [r1, #12]
 800a95a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a95c:	079d      	lsls	r5, r3, #30
 800a95e:	4606      	mov	r6, r0
 800a960:	460c      	mov	r4, r1
 800a962:	d507      	bpl.n	800a974 <__smakebuf_r+0x1c>
 800a964:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a968:	6023      	str	r3, [r4, #0]
 800a96a:	6123      	str	r3, [r4, #16]
 800a96c:	2301      	movs	r3, #1
 800a96e:	6163      	str	r3, [r4, #20]
 800a970:	b003      	add	sp, #12
 800a972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a974:	ab01      	add	r3, sp, #4
 800a976:	466a      	mov	r2, sp
 800a978:	f7ff ffc8 	bl	800a90c <__swhatbuf_r>
 800a97c:	9f00      	ldr	r7, [sp, #0]
 800a97e:	4605      	mov	r5, r0
 800a980:	4639      	mov	r1, r7
 800a982:	4630      	mov	r0, r6
 800a984:	f7fe ff10 	bl	80097a8 <_malloc_r>
 800a988:	b948      	cbnz	r0, 800a99e <__smakebuf_r+0x46>
 800a98a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a98e:	059a      	lsls	r2, r3, #22
 800a990:	d4ee      	bmi.n	800a970 <__smakebuf_r+0x18>
 800a992:	f023 0303 	bic.w	r3, r3, #3
 800a996:	f043 0302 	orr.w	r3, r3, #2
 800a99a:	81a3      	strh	r3, [r4, #12]
 800a99c:	e7e2      	b.n	800a964 <__smakebuf_r+0xc>
 800a99e:	89a3      	ldrh	r3, [r4, #12]
 800a9a0:	6020      	str	r0, [r4, #0]
 800a9a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9a6:	81a3      	strh	r3, [r4, #12]
 800a9a8:	9b01      	ldr	r3, [sp, #4]
 800a9aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a9ae:	b15b      	cbz	r3, 800a9c8 <__smakebuf_r+0x70>
 800a9b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9b4:	4630      	mov	r0, r6
 800a9b6:	f000 f81d 	bl	800a9f4 <_isatty_r>
 800a9ba:	b128      	cbz	r0, 800a9c8 <__smakebuf_r+0x70>
 800a9bc:	89a3      	ldrh	r3, [r4, #12]
 800a9be:	f023 0303 	bic.w	r3, r3, #3
 800a9c2:	f043 0301 	orr.w	r3, r3, #1
 800a9c6:	81a3      	strh	r3, [r4, #12]
 800a9c8:	89a3      	ldrh	r3, [r4, #12]
 800a9ca:	431d      	orrs	r5, r3
 800a9cc:	81a5      	strh	r5, [r4, #12]
 800a9ce:	e7cf      	b.n	800a970 <__smakebuf_r+0x18>

0800a9d0 <_fstat_r>:
 800a9d0:	b538      	push	{r3, r4, r5, lr}
 800a9d2:	4d07      	ldr	r5, [pc, #28]	@ (800a9f0 <_fstat_r+0x20>)
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	4604      	mov	r4, r0
 800a9d8:	4608      	mov	r0, r1
 800a9da:	4611      	mov	r1, r2
 800a9dc:	602b      	str	r3, [r5, #0]
 800a9de:	f7f7 fceb 	bl	80023b8 <_fstat>
 800a9e2:	1c43      	adds	r3, r0, #1
 800a9e4:	d102      	bne.n	800a9ec <_fstat_r+0x1c>
 800a9e6:	682b      	ldr	r3, [r5, #0]
 800a9e8:	b103      	cbz	r3, 800a9ec <_fstat_r+0x1c>
 800a9ea:	6023      	str	r3, [r4, #0]
 800a9ec:	bd38      	pop	{r3, r4, r5, pc}
 800a9ee:	bf00      	nop
 800a9f0:	2000068c 	.word	0x2000068c

0800a9f4 <_isatty_r>:
 800a9f4:	b538      	push	{r3, r4, r5, lr}
 800a9f6:	4d06      	ldr	r5, [pc, #24]	@ (800aa10 <_isatty_r+0x1c>)
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	4604      	mov	r4, r0
 800a9fc:	4608      	mov	r0, r1
 800a9fe:	602b      	str	r3, [r5, #0]
 800aa00:	f7f7 fcea 	bl	80023d8 <_isatty>
 800aa04:	1c43      	adds	r3, r0, #1
 800aa06:	d102      	bne.n	800aa0e <_isatty_r+0x1a>
 800aa08:	682b      	ldr	r3, [r5, #0]
 800aa0a:	b103      	cbz	r3, 800aa0e <_isatty_r+0x1a>
 800aa0c:	6023      	str	r3, [r4, #0]
 800aa0e:	bd38      	pop	{r3, r4, r5, pc}
 800aa10:	2000068c 	.word	0x2000068c

0800aa14 <abort>:
 800aa14:	b508      	push	{r3, lr}
 800aa16:	2006      	movs	r0, #6
 800aa18:	f000 f834 	bl	800aa84 <raise>
 800aa1c:	2001      	movs	r0, #1
 800aa1e:	f7f7 fc7b 	bl	8002318 <_exit>

0800aa22 <_malloc_usable_size_r>:
 800aa22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa26:	1f18      	subs	r0, r3, #4
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	bfbc      	itt	lt
 800aa2c:	580b      	ldrlt	r3, [r1, r0]
 800aa2e:	18c0      	addlt	r0, r0, r3
 800aa30:	4770      	bx	lr

0800aa32 <_raise_r>:
 800aa32:	291f      	cmp	r1, #31
 800aa34:	b538      	push	{r3, r4, r5, lr}
 800aa36:	4605      	mov	r5, r0
 800aa38:	460c      	mov	r4, r1
 800aa3a:	d904      	bls.n	800aa46 <_raise_r+0x14>
 800aa3c:	2316      	movs	r3, #22
 800aa3e:	6003      	str	r3, [r0, #0]
 800aa40:	f04f 30ff 	mov.w	r0, #4294967295
 800aa44:	bd38      	pop	{r3, r4, r5, pc}
 800aa46:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800aa48:	b112      	cbz	r2, 800aa50 <_raise_r+0x1e>
 800aa4a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aa4e:	b94b      	cbnz	r3, 800aa64 <_raise_r+0x32>
 800aa50:	4628      	mov	r0, r5
 800aa52:	f000 f831 	bl	800aab8 <_getpid_r>
 800aa56:	4622      	mov	r2, r4
 800aa58:	4601      	mov	r1, r0
 800aa5a:	4628      	mov	r0, r5
 800aa5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa60:	f000 b818 	b.w	800aa94 <_kill_r>
 800aa64:	2b01      	cmp	r3, #1
 800aa66:	d00a      	beq.n	800aa7e <_raise_r+0x4c>
 800aa68:	1c59      	adds	r1, r3, #1
 800aa6a:	d103      	bne.n	800aa74 <_raise_r+0x42>
 800aa6c:	2316      	movs	r3, #22
 800aa6e:	6003      	str	r3, [r0, #0]
 800aa70:	2001      	movs	r0, #1
 800aa72:	e7e7      	b.n	800aa44 <_raise_r+0x12>
 800aa74:	2100      	movs	r1, #0
 800aa76:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	4798      	blx	r3
 800aa7e:	2000      	movs	r0, #0
 800aa80:	e7e0      	b.n	800aa44 <_raise_r+0x12>
	...

0800aa84 <raise>:
 800aa84:	4b02      	ldr	r3, [pc, #8]	@ (800aa90 <raise+0xc>)
 800aa86:	4601      	mov	r1, r0
 800aa88:	6818      	ldr	r0, [r3, #0]
 800aa8a:	f7ff bfd2 	b.w	800aa32 <_raise_r>
 800aa8e:	bf00      	nop
 800aa90:	20000018 	.word	0x20000018

0800aa94 <_kill_r>:
 800aa94:	b538      	push	{r3, r4, r5, lr}
 800aa96:	4d07      	ldr	r5, [pc, #28]	@ (800aab4 <_kill_r+0x20>)
 800aa98:	2300      	movs	r3, #0
 800aa9a:	4604      	mov	r4, r0
 800aa9c:	4608      	mov	r0, r1
 800aa9e:	4611      	mov	r1, r2
 800aaa0:	602b      	str	r3, [r5, #0]
 800aaa2:	f7f7 fc29 	bl	80022f8 <_kill>
 800aaa6:	1c43      	adds	r3, r0, #1
 800aaa8:	d102      	bne.n	800aab0 <_kill_r+0x1c>
 800aaaa:	682b      	ldr	r3, [r5, #0]
 800aaac:	b103      	cbz	r3, 800aab0 <_kill_r+0x1c>
 800aaae:	6023      	str	r3, [r4, #0]
 800aab0:	bd38      	pop	{r3, r4, r5, pc}
 800aab2:	bf00      	nop
 800aab4:	2000068c 	.word	0x2000068c

0800aab8 <_getpid_r>:
 800aab8:	f7f7 bc16 	b.w	80022e8 <_getpid>

0800aabc <_init>:
 800aabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aabe:	bf00      	nop
 800aac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aac2:	bc08      	pop	{r3}
 800aac4:	469e      	mov	lr, r3
 800aac6:	4770      	bx	lr

0800aac8 <_fini>:
 800aac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaca:	bf00      	nop
 800aacc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aace:	bc08      	pop	{r3}
 800aad0:	469e      	mov	lr, r3
 800aad2:	4770      	bx	lr
