
Client_TUYA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1ac  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000510  0800b350  0800b350  0000c350  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b860  0800b860  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b860  0800b860  0000c860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b868  0800b868  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b868  0800b868  0000c868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b86c  0800b86c  0000c86c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b870  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000468  200001d4  0800ba44  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000063c  0800ba44  0000d63c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ef1  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a5b  00000000  00000000  000210f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001280  00000000  00000000  00023b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e97  00000000  00000000  00024dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003bd5  00000000  00000000  00025c67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000173d2  00000000  00000000  0002983c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4442  00000000  00000000  00040c0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e5050  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060e8  00000000  00000000  000e5094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  000eb17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b334 	.word	0x0800b334

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	0800b334 	.word	0x0800b334

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <calcCRC16>:

       // Обрабатываем полученные данные
       process_received_data(rx_buffer, received_length);
       HAL_UARTEx_ReceiveToIdle_DMA(&huart1,rx_buffer, RX_BUFFER_SIZE);
}*/
uint16_t calcCRC16(uint8_t *buffer, uint8_t u8length) {
 8000f48:	b480      	push	{r7}
 8000f4a:	b087      	sub	sp, #28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	460b      	mov	r3, r1
 8000f52:	70fb      	strb	r3, [r7, #3]
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
 8000f54:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f58:	617b      	str	r3, [r7, #20]
	for (unsigned char i = 0; i < u8length; i++) {
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	74fb      	strb	r3, [r7, #19]
 8000f5e:	e023      	b.n	8000fa8 <calcCRC16+0x60>
		temp = temp ^ buffer[i];
 8000f60:	7cfb      	ldrb	r3, [r7, #19]
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	4053      	eors	r3, r2
 8000f6e:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 8000f70:	2301      	movs	r3, #1
 8000f72:	74bb      	strb	r3, [r7, #18]
 8000f74:	e012      	b.n	8000f9c <calcCRC16+0x54>
			flag = temp & 0x0001;
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	60bb      	str	r3, [r7, #8]
			temp >>= 1;
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	085b      	lsrs	r3, r3, #1
 8000f82:	617b      	str	r3, [r7, #20]
			if (flag)
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d005      	beq.n	8000f96 <calcCRC16+0x4e>
				temp ^= 0xA001;
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	f483 4320 	eor.w	r3, r3, #40960	@ 0xa000
 8000f90:	f083 0301 	eor.w	r3, r3, #1
 8000f94:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 8000f96:	7cbb      	ldrb	r3, [r7, #18]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	74bb      	strb	r3, [r7, #18]
 8000f9c:	7cbb      	ldrb	r3, [r7, #18]
 8000f9e:	2b08      	cmp	r3, #8
 8000fa0:	d9e9      	bls.n	8000f76 <calcCRC16+0x2e>
	for (unsigned char i = 0; i < u8length; i++) {
 8000fa2:	7cfb      	ldrb	r3, [r7, #19]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	74fb      	strb	r3, [r7, #19]
 8000fa8:	7cfa      	ldrb	r2, [r7, #19]
 8000faa:	78fb      	ldrb	r3, [r7, #3]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d3d7      	bcc.n	8000f60 <calcCRC16+0x18>
		}
	}
	// Reverse byte order.
	temp2 = temp >> 8;
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	0a1b      	lsrs	r3, r3, #8
 8000fb4:	60fb      	str	r3, [r7, #12]
	temp = (temp << 8) | temp2;
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	021b      	lsls	r3, r3, #8
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	617b      	str	r3, [r7, #20]
	temp &= 0xFFFF;
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	617b      	str	r3, [r7, #20]
	// the returned value is already swapped
	// crcLo byte is first & crcHi byte is last
	return temp;
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	b29b      	uxth	r3, r3

}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	371c      	adds	r7, #28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
	...

08000fd8 <send_updated_data>:

void send_updated_data() {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b096      	sub	sp, #88	@ 0x58
 8000fdc:	af00      	add	r7, sp, #0
    uint8_t response[64];
    uint16_t pos = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

    // Заголовок
    response[pos] = HEADER_1;
 8000fe4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8000fe8:	3358      	adds	r3, #88	@ 0x58
 8000fea:	443b      	add	r3, r7
 8000fec:	2255      	movs	r2, #85	@ 0x55
 8000fee:	f803 2c58 	strb.w	r2, [r3, #-88]
    response[pos++] = HEADER_2;
 8000ff2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8000ff6:	1c5a      	adds	r2, r3, #1
 8000ff8:	f8a7 2056 	strh.w	r2, [r7, #86]	@ 0x56
 8000ffc:	3358      	adds	r3, #88	@ 0x58
 8000ffe:	443b      	add	r3, r7
 8001000:	22aa      	movs	r2, #170	@ 0xaa
 8001002:	f803 2c58 	strb.w	r2, [r3, #-88]

    // Тип пакета: ответ
    response[pos++] = 0x01;
 8001006:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800100a:	1c5a      	adds	r2, r3, #1
 800100c:	f8a7 2056 	strh.w	r2, [r7, #86]	@ 0x56
 8001010:	3358      	adds	r3, #88	@ 0x58
 8001012:	443b      	add	r3, r7
 8001014:	2201      	movs	r2, #1
 8001016:	f803 2c58 	strb.w	r2, [r3, #-88]

    // Команда: 0x05, например, для отправки обновленных данных
    response[pos++] = 0x05;
 800101a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800101e:	1c5a      	adds	r2, r3, #1
 8001020:	f8a7 2056 	strh.w	r2, [r7, #86]	@ 0x56
 8001024:	3358      	adds	r3, #88	@ 0x58
 8001026:	443b      	add	r3, r7
 8001028:	2205      	movs	r2, #5
 800102a:	f803 2c58 	strb.w	r2, [r3, #-88]

    // Данные — пример значений напряжения, тока и других параметров
    float voltage = 230.5;
 800102e:	4b54      	ldr	r3, [pc, #336]	@ (8001180 <send_updated_data+0x1a8>)
 8001030:	653b      	str	r3, [r7, #80]	@ 0x50
    float current = 5.2;
 8001032:	4b54      	ldr	r3, [pc, #336]	@ (8001184 <send_updated_data+0x1ac>)
 8001034:	64fb      	str	r3, [r7, #76]	@ 0x4c
    float temperature = 24.3;
 8001036:	4b54      	ldr	r3, [pc, #336]	@ (8001188 <send_updated_data+0x1b0>)
 8001038:	64bb      	str	r3, [r7, #72]	@ 0x48

    uint16_t voltage_val = (uint16_t)(voltage * 10);
 800103a:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800103e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001042:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001046:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800104a:	ee17 3a90 	vmov	r3, s15
 800104e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    uint16_t current_val = (uint16_t)(current * 10);
 8001052:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001056:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800105a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800105e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001062:	ee17 3a90 	vmov	r3, s15
 8001066:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    uint16_t temp_val = (uint16_t)(temperature * 10);
 800106a:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800106e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001072:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001076:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800107a:	ee17 3a90 	vmov	r3, s15
 800107e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

    response[pos++] = (voltage_val >> 8) & 0xFF;
 8001082:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001086:	0a1b      	lsrs	r3, r3, #8
 8001088:	b29a      	uxth	r2, r3
 800108a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800108e:	1c59      	adds	r1, r3, #1
 8001090:	f8a7 1056 	strh.w	r1, [r7, #86]	@ 0x56
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	3358      	adds	r3, #88	@ 0x58
 8001098:	443b      	add	r3, r7
 800109a:	f803 2c58 	strb.w	r2, [r3, #-88]
    response[pos++] = voltage_val & 0xFF;
 800109e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80010a2:	1c5a      	adds	r2, r3, #1
 80010a4:	f8a7 2056 	strh.w	r2, [r7, #86]	@ 0x56
 80010a8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80010ac:	b2d2      	uxtb	r2, r2
 80010ae:	3358      	adds	r3, #88	@ 0x58
 80010b0:	443b      	add	r3, r7
 80010b2:	f803 2c58 	strb.w	r2, [r3, #-88]
    response[pos++] = (current_val >> 8) & 0xFF;
 80010b6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80010ba:	0a1b      	lsrs	r3, r3, #8
 80010bc:	b29a      	uxth	r2, r3
 80010be:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80010c2:	1c59      	adds	r1, r3, #1
 80010c4:	f8a7 1056 	strh.w	r1, [r7, #86]	@ 0x56
 80010c8:	b2d2      	uxtb	r2, r2
 80010ca:	3358      	adds	r3, #88	@ 0x58
 80010cc:	443b      	add	r3, r7
 80010ce:	f803 2c58 	strb.w	r2, [r3, #-88]
    response[pos++] = current_val & 0xFF;
 80010d2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80010d6:	1c5a      	adds	r2, r3, #1
 80010d8:	f8a7 2056 	strh.w	r2, [r7, #86]	@ 0x56
 80010dc:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80010e0:	b2d2      	uxtb	r2, r2
 80010e2:	3358      	adds	r3, #88	@ 0x58
 80010e4:	443b      	add	r3, r7
 80010e6:	f803 2c58 	strb.w	r2, [r3, #-88]
    response[pos++] = (temp_val >> 8) & 0xFF;
 80010ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80010ee:	0a1b      	lsrs	r3, r3, #8
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80010f6:	1c59      	adds	r1, r3, #1
 80010f8:	f8a7 1056 	strh.w	r1, [r7, #86]	@ 0x56
 80010fc:	b2d2      	uxtb	r2, r2
 80010fe:	3358      	adds	r3, #88	@ 0x58
 8001100:	443b      	add	r3, r7
 8001102:	f803 2c58 	strb.w	r2, [r3, #-88]
    response[pos++] = temp_val & 0xFF;
 8001106:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800110a:	1c5a      	adds	r2, r3, #1
 800110c:	f8a7 2056 	strh.w	r2, [r7, #86]	@ 0x56
 8001110:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8001114:	b2d2      	uxtb	r2, r2
 8001116:	3358      	adds	r3, #88	@ 0x58
 8001118:	443b      	add	r3, r7
 800111a:	f803 2c58 	strb.w	r2, [r3, #-88]

    // Вычисляем CRC
    uint16_t crc = calcCRC16(response, pos);
 800111e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8001122:	b2da      	uxtb	r2, r3
 8001124:	463b      	mov	r3, r7
 8001126:	4611      	mov	r1, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff0d 	bl	8000f48 <calcCRC16>
 800112e:	4603      	mov	r3, r0
 8001130:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    response[pos++] = crc & 0xFF;
 8001134:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8001138:	1c5a      	adds	r2, r3, #1
 800113a:	f8a7 2056 	strh.w	r2, [r7, #86]	@ 0x56
 800113e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	3358      	adds	r3, #88	@ 0x58
 8001146:	443b      	add	r3, r7
 8001148:	f803 2c58 	strb.w	r2, [r3, #-88]
    response[pos++] = (crc >> 8) & 0xFF;
 800114c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001150:	0a1b      	lsrs	r3, r3, #8
 8001152:	b29a      	uxth	r2, r3
 8001154:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8001158:	1c59      	adds	r1, r3, #1
 800115a:	f8a7 1056 	strh.w	r1, [r7, #86]	@ 0x56
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	3358      	adds	r3, #88	@ 0x58
 8001162:	443b      	add	r3, r7
 8001164:	f803 2c58 	strb.w	r2, [r3, #-88]

    // Отправляем ответ через UART
    HAL_UART_Transmit_DMA(&huart1, response, pos);
 8001168:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 800116c:	463b      	mov	r3, r7
 800116e:	4619      	mov	r1, r3
 8001170:	4806      	ldr	r0, [pc, #24]	@ (800118c <send_updated_data+0x1b4>)
 8001172:	f006 f8cd 	bl	8007310 <HAL_UART_Transmit_DMA>
}
 8001176:	bf00      	nop
 8001178:	3758      	adds	r7, #88	@ 0x58
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	43668000 	.word	0x43668000
 8001184:	40a66666 	.word	0x40a66666
 8001188:	41c26666 	.word	0x41c26666
 800118c:	200003a4 	.word	0x200003a4

08001190 <process_received_data>:

// Функция для обработки полученных данных
void process_received_data(uint8_t *data, uint16_t length) {
 8001190:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001194:	b096      	sub	sp, #88	@ 0x58
 8001196:	af04      	add	r7, sp, #16
 8001198:	6078      	str	r0, [r7, #4]
 800119a:	460b      	mov	r3, r1
 800119c:	807b      	strh	r3, [r7, #2]

    // Минимальная длина пакета: заголовок (2 байта) + тип пакета (1 байт) + команда (1 байт) + длина данных (2 байта) + CRC (2 байта)
    if (length < 8) {
 800119e:	887b      	ldrh	r3, [r7, #2]
 80011a0:	2b07      	cmp	r3, #7
 80011a2:	d805      	bhi.n	80011b0 <process_received_data+0x20>
        // Пакет слишком короткий
    	 HAL_UARTEx_ReceiveToIdle_DMA(&huart1,rx_buffer, RX_BUFFER_SIZE);
 80011a4:	2220      	movs	r2, #32
 80011a6:	4989      	ldr	r1, [pc, #548]	@ (80013cc <process_received_data+0x23c>)
 80011a8:	4889      	ldr	r0, [pc, #548]	@ (80013d0 <process_received_data+0x240>)
 80011aa:	f006 f921 	bl	80073f0 <HAL_UARTEx_ReceiveToIdle_DMA>

        return;
 80011ae:	e195      	b.n	80014dc <process_received_data+0x34c>
    }

    // Проверяем заголовок
    if (data[0] != HEADER_1 || data[1] != HEADER_2) {
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b55      	cmp	r3, #85	@ 0x55
 80011b6:	d104      	bne.n	80011c2 <process_received_data+0x32>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3301      	adds	r3, #1
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2baa      	cmp	r3, #170	@ 0xaa
 80011c0:	d005      	beq.n	80011ce <process_received_data+0x3e>
        // Неверный заголовок
    	 HAL_UARTEx_ReceiveToIdle_DMA(&huart1,rx_buffer, RX_BUFFER_SIZE);
 80011c2:	2220      	movs	r2, #32
 80011c4:	4981      	ldr	r1, [pc, #516]	@ (80013cc <process_received_data+0x23c>)
 80011c6:	4882      	ldr	r0, [pc, #520]	@ (80013d0 <process_received_data+0x240>)
 80011c8:	f006 f912 	bl	80073f0 <HAL_UARTEx_ReceiveToIdle_DMA>

        return;
 80011cc:	e186      	b.n	80014dc <process_received_data+0x34c>
    }

    // Извлекаем тип пакета и команду
    uint8_t packet_type = data[2];
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	789b      	ldrb	r3, [r3, #2]
 80011d2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if(packet_type==0){
 80011d6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d130      	bne.n	8001240 <process_received_data+0xb0>

    	 // Если данные не обновлялись
if (update_data == 0) {
 80011de:	4b7d      	ldr	r3, [pc, #500]	@ (80013d4 <process_received_data+0x244>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d122      	bne.n	800122c <process_received_data+0x9c>
// Отправляем ответ «пульс» (без полезной нагрузки)
		uint8_t heartbeat[6];
		heartbeat[0] = HEADER_1;
 80011e6:	2355      	movs	r3, #85	@ 0x55
 80011e8:	723b      	strb	r3, [r7, #8]
		heartbeat[1] = HEADER_2;
 80011ea:	23aa      	movs	r3, #170	@ 0xaa
 80011ec:	727b      	strb	r3, [r7, #9]
		heartbeat[2] = 0x01;  // Тип пакета: ответ
 80011ee:	2301      	movs	r3, #1
 80011f0:	72bb      	strb	r3, [r7, #10]
		heartbeat[3] = 0x00;  // Команда для "пульса" или пустого ответа
 80011f2:	2300      	movs	r3, #0
 80011f4:	72fb      	strb	r3, [r7, #11]
		// Отправляем ответ через UART
		uint16_t crc = calcCRC16(heartbeat, 4);
 80011f6:	f107 0308 	add.w	r3, r7, #8
 80011fa:	2104      	movs	r1, #4
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff fea3 	bl	8000f48 <calcCRC16>
 8001202:	4603      	mov	r3, r0
 8001204:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
		heartbeat[4] = crc & 0xFF;
 8001208:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800120c:	b2db      	uxtb	r3, r3
 800120e:	733b      	strb	r3, [r7, #12]
		heartbeat[5] = (crc >> 8) & 0xFF;
 8001210:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8001214:	0a1b      	lsrs	r3, r3, #8
 8001216:	b29b      	uxth	r3, r3
 8001218:	b2db      	uxtb	r3, r3
 800121a:	737b      	strb	r3, [r7, #13]
		HAL_UART_Transmit_DMA(&huart1, heartbeat, 6);  // Передаем пакет
 800121c:	f107 0308 	add.w	r3, r7, #8
 8001220:	2206      	movs	r2, #6
 8001222:	4619      	mov	r1, r3
 8001224:	486a      	ldr	r0, [pc, #424]	@ (80013d0 <process_received_data+0x240>)
 8001226:	f006 f873 	bl	8007310 <HAL_UART_Transmit_DMA>
 800122a:	e009      	b.n	8001240 <process_received_data+0xb0>
}

			// Если данные обновились
    	        else if (update_data == 1) {
 800122c:	4b69      	ldr	r3, [pc, #420]	@ (80013d4 <process_received_data+0x244>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d105      	bne.n	8001240 <process_received_data+0xb0>
    	       // Отправляем новые данные
    	            send_updated_data();
 8001234:	f7ff fed0 	bl	8000fd8 <send_updated_data>
    	            update_data = 0;  // Сбрасываем флаг обновления после отправки
 8001238:	4b66      	ldr	r3, [pc, #408]	@ (80013d4 <process_received_data+0x244>)
 800123a:	2200      	movs	r2, #0
 800123c:	701a      	strb	r2, [r3, #0]
    	            return;
 800123e:	e14d      	b.n	80014dc <process_received_data+0x34c>
    	           }

    }
    uint8_t command = data[3];
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	78db      	ldrb	r3, [r3, #3]
 8001244:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    cmd_in=data[3];
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	78da      	ldrb	r2, [r3, #3]
 800124c:	4b62      	ldr	r3, [pc, #392]	@ (80013d8 <process_received_data+0x248>)
 800124e:	701a      	strb	r2, [r3, #0]
    // Извлекаем длину полезной нагрузки
    uint16_t payload_len = (data[4] << 8) | data[5];
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3304      	adds	r3, #4
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	021b      	lsls	r3, r3, #8
 8001258:	b21a      	sxth	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	3305      	adds	r3, #5
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	b21b      	sxth	r3, r3
 8001262:	4313      	orrs	r3, r2
 8001264:	b21b      	sxth	r3, r3
 8001266:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    // Проверяем корректность длины пакета
    if (payload_len + 8 != length) {
 800126a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800126e:	f103 0208 	add.w	r2, r3, #8
 8001272:	887b      	ldrh	r3, [r7, #2]
 8001274:	429a      	cmp	r2, r3
 8001276:	d005      	beq.n	8001284 <process_received_data+0xf4>
        // Неверная длина пакета
    	HAL_UARTEx_ReceiveToIdle_DMA(&huart1,rx_buffer, RX_BUFFER_SIZE);
 8001278:	2220      	movs	r2, #32
 800127a:	4954      	ldr	r1, [pc, #336]	@ (80013cc <process_received_data+0x23c>)
 800127c:	4854      	ldr	r0, [pc, #336]	@ (80013d0 <process_received_data+0x240>)
 800127e:	f006 f8b7 	bl	80073f0 <HAL_UARTEx_ReceiveToIdle_DMA>

        return;
 8001282:	e12b      	b.n	80014dc <process_received_data+0x34c>
    }

    // Проверяем CRC
    uint16_t crc_received = (data[length - 2] << 8) | data[length - 1];
 8001284:	887b      	ldrh	r3, [r7, #2]
 8001286:	3b02      	subs	r3, #2
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	4413      	add	r3, r2
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	021b      	lsls	r3, r3, #8
 8001290:	b21a      	sxth	r2, r3
 8001292:	887b      	ldrh	r3, [r7, #2]
 8001294:	3b01      	subs	r3, #1
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	440b      	add	r3, r1
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	b21b      	sxth	r3, r3
 800129e:	4313      	orrs	r3, r2
 80012a0:	b21b      	sxth	r3, r3
 80012a2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    uint16_t crc_calculated = calcCRC16(data, length - 2);
 80012a4:	887b      	ldrh	r3, [r7, #2]
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	3b02      	subs	r3, #2
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	4619      	mov	r1, r3
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff fe4a 	bl	8000f48 <calcCRC16>
 80012b4:	4603      	mov	r3, r0
 80012b6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (crc_received != crc_calculated) {
 80012b8:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80012ba:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80012bc:	429a      	cmp	r2, r3
 80012be:	d005      	beq.n	80012cc <process_received_data+0x13c>
        // Неверный CRC
    	HAL_UARTEx_ReceiveToIdle_DMA(&huart1,rx_buffer, RX_BUFFER_SIZE);
 80012c0:	2220      	movs	r2, #32
 80012c2:	4942      	ldr	r1, [pc, #264]	@ (80013cc <process_received_data+0x23c>)
 80012c4:	4842      	ldr	r0, [pc, #264]	@ (80013d0 <process_received_data+0x240>)
 80012c6:	f006 f893 	bl	80073f0 <HAL_UARTEx_ReceiveToIdle_DMA>


        return;
 80012ca:	e107      	b.n	80014dc <process_received_data+0x34c>
    }

    // Извлекаем полезную нагрузку
    uint8_t *payload = &data[6];
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3306      	adds	r3, #6
 80012d0:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Обрабатываем команду
    switch (command) {
 80012d2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80012d6:	2b03      	cmp	r3, #3
 80012d8:	d003      	beq.n	80012e2 <process_received_data+0x152>
 80012da:	2b04      	cmp	r3, #4
 80012dc:	f000 8082 	beq.w	80013e4 <process_received_data+0x254>
 80012e0:	e0f3      	b.n	80014ca <process_received_data+0x33a>
        case 0x03: // Параметры батареи
                if (payload_len == 6) {
 80012e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80012e6:	2b06      	cmp	r3, #6
 80012e8:	f040 80f5 	bne.w	80014d6 <process_received_data+0x346>
                uint16_t lowThreshold = (payload[0] << 8) | payload[1];
 80012ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	021b      	lsls	r3, r3, #8
 80012f2:	b21a      	sxth	r2, r3
 80012f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012f6:	3301      	adds	r3, #1
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	4313      	orrs	r3, r2
 80012fe:	b21b      	sxth	r3, r3
 8001300:	847b      	strh	r3, [r7, #34]	@ 0x22
                uint16_t highThreshold = (payload[2] << 8) | payload[3];
 8001302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001304:	3302      	adds	r3, #2
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	021b      	lsls	r3, r3, #8
 800130a:	b21a      	sxth	r2, r3
 800130c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800130e:	3303      	adds	r3, #3
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	b21b      	sxth	r3, r3
 8001314:	4313      	orrs	r3, r2
 8001316:	b21b      	sxth	r3, r3
 8001318:	843b      	strh	r3, [r7, #32]
                uint16_t maxCurrentRange = (payload[4] << 8) | payload[5];
 800131a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800131c:	3304      	adds	r3, #4
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	b21a      	sxth	r2, r3
 8001324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001326:	3305      	adds	r3, #5
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	b21b      	sxth	r3, r3
 800132c:	4313      	orrs	r3, r2
 800132e:	b21b      	sxth	r3, r3
 8001330:	83fb      	strh	r3, [r7, #30]

                // Преобразуем значения обратно в float
                float low = lowThreshold / 10.0;
 8001332:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff f8fd 	bl	8000534 <__aeabi_i2d>
 800133a:	f04f 0200 	mov.w	r2, #0
 800133e:	4b27      	ldr	r3, [pc, #156]	@ (80013dc <process_received_data+0x24c>)
 8001340:	f7ff fa8c 	bl	800085c <__aeabi_ddiv>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	f7ff fc34 	bl	8000bb8 <__aeabi_d2f>
 8001350:	4603      	mov	r3, r0
 8001352:	61bb      	str	r3, [r7, #24]
                float high = highThreshold / 10.0;
 8001354:	8c3b      	ldrh	r3, [r7, #32]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff f8ec 	bl	8000534 <__aeabi_i2d>
 800135c:	f04f 0200 	mov.w	r2, #0
 8001360:	4b1e      	ldr	r3, [pc, #120]	@ (80013dc <process_received_data+0x24c>)
 8001362:	f7ff fa7b 	bl	800085c <__aeabi_ddiv>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4610      	mov	r0, r2
 800136c:	4619      	mov	r1, r3
 800136e:	f7ff fc23 	bl	8000bb8 <__aeabi_d2f>
 8001372:	4603      	mov	r3, r0
 8001374:	617b      	str	r3, [r7, #20]
                float maxCurrent = maxCurrentRange / 10.0;
 8001376:	8bfb      	ldrh	r3, [r7, #30]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff f8db 	bl	8000534 <__aeabi_i2d>
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	4b16      	ldr	r3, [pc, #88]	@ (80013dc <process_received_data+0x24c>)
 8001384:	f7ff fa6a 	bl	800085c <__aeabi_ddiv>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4610      	mov	r0, r2
 800138e:	4619      	mov	r1, r3
 8001390:	f7ff fc12 	bl	8000bb8 <__aeabi_d2f>
 8001394:	4603      	mov	r3, r0
 8001396:	613b      	str	r3, [r7, #16]

                // Сохраняем в переменные или используем
                // Пример: отображение значений
                printf("Battery settings - Low: %.2f, High: %.2f, Max Current: %.2f\n", low, high, maxCurrent);
 8001398:	69b8      	ldr	r0, [r7, #24]
 800139a:	f7ff f8dd 	bl	8000558 <__aeabi_f2d>
 800139e:	4680      	mov	r8, r0
 80013a0:	4689      	mov	r9, r1
 80013a2:	6978      	ldr	r0, [r7, #20]
 80013a4:	f7ff f8d8 	bl	8000558 <__aeabi_f2d>
 80013a8:	4604      	mov	r4, r0
 80013aa:	460d      	mov	r5, r1
 80013ac:	6938      	ldr	r0, [r7, #16]
 80013ae:	f7ff f8d3 	bl	8000558 <__aeabi_f2d>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80013ba:	e9cd 4500 	strd	r4, r5, [sp]
 80013be:	4642      	mov	r2, r8
 80013c0:	464b      	mov	r3, r9
 80013c2:	4807      	ldr	r0, [pc, #28]	@ (80013e0 <process_received_data+0x250>)
 80013c4:	f007 fe74 	bl	80090b0 <iprintf>
               }
            break;
 80013c8:	e085      	b.n	80014d6 <process_received_data+0x346>
 80013ca:	bf00      	nop
 80013cc:	200001f0 	.word	0x200001f0
 80013d0:	200003a4 	.word	0x200003a4
 80013d4:	200004e4 	.word	0x200004e4
 80013d8:	200004e5 	.word	0x200004e5
 80013dc:	40240000 	.word	0x40240000
 80013e0:	0800b350 	.word	0x0800b350

        case 0x04: // Параметры нагрузки
                if (payload_len == 6) {
 80013e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80013e8:	2b06      	cmp	r3, #6
 80013ea:	d176      	bne.n	80014da <process_received_data+0x34a>
                uint16_t maxLoad = (payload[0] << 8) | payload[1];
 80013ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	021b      	lsls	r3, r3, #8
 80013f2:	b21a      	sxth	r2, r3
 80013f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013f6:	3301      	adds	r3, #1
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	b21b      	sxth	r3, r3
 80013fc:	4313      	orrs	r3, r2
 80013fe:	b21b      	sxth	r3, r3
 8001400:	86fb      	strh	r3, [r7, #54]	@ 0x36
                uint16_t outputVoltage = (payload[2] << 8) | payload[3];
 8001402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001404:	3302      	adds	r3, #2
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	021b      	lsls	r3, r3, #8
 800140a:	b21a      	sxth	r2, r3
 800140c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800140e:	3303      	adds	r3, #3
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	b21b      	sxth	r3, r3
 8001414:	4313      	orrs	r3, r2
 8001416:	b21b      	sxth	r3, r3
 8001418:	86bb      	strh	r3, [r7, #52]	@ 0x34
                uint16_t maxCurrentDifference = (payload[4] << 8) | payload[5];
 800141a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800141c:	3304      	adds	r3, #4
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	021b      	lsls	r3, r3, #8
 8001422:	b21a      	sxth	r2, r3
 8001424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001426:	3305      	adds	r3, #5
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	b21b      	sxth	r3, r3
 800142c:	4313      	orrs	r3, r2
 800142e:	b21b      	sxth	r3, r3
 8001430:	867b      	strh	r3, [r7, #50]	@ 0x32

                // Преобразуем значения обратно в float
                float load = maxLoad / 10.0;
 8001432:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff f87d 	bl	8000534 <__aeabi_i2d>
 800143a:	f04f 0200 	mov.w	r2, #0
 800143e:	4b29      	ldr	r3, [pc, #164]	@ (80014e4 <process_received_data+0x354>)
 8001440:	f7ff fa0c 	bl	800085c <__aeabi_ddiv>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	4610      	mov	r0, r2
 800144a:	4619      	mov	r1, r3
 800144c:	f7ff fbb4 	bl	8000bb8 <__aeabi_d2f>
 8001450:	4603      	mov	r3, r0
 8001452:	62fb      	str	r3, [r7, #44]	@ 0x2c
                float voltage = outputVoltage / 10.0;
 8001454:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff f86c 	bl	8000534 <__aeabi_i2d>
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	4b20      	ldr	r3, [pc, #128]	@ (80014e4 <process_received_data+0x354>)
 8001462:	f7ff f9fb 	bl	800085c <__aeabi_ddiv>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	4610      	mov	r0, r2
 800146c:	4619      	mov	r1, r3
 800146e:	f7ff fba3 	bl	8000bb8 <__aeabi_d2f>
 8001472:	4603      	mov	r3, r0
 8001474:	62bb      	str	r3, [r7, #40]	@ 0x28
                float currentDiff = maxCurrentDifference / 10.0;
 8001476:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff f85b 	bl	8000534 <__aeabi_i2d>
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	4b18      	ldr	r3, [pc, #96]	@ (80014e4 <process_received_data+0x354>)
 8001484:	f7ff f9ea 	bl	800085c <__aeabi_ddiv>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	4610      	mov	r0, r2
 800148e:	4619      	mov	r1, r3
 8001490:	f7ff fb92 	bl	8000bb8 <__aeabi_d2f>
 8001494:	4603      	mov	r3, r0
 8001496:	627b      	str	r3, [r7, #36]	@ 0x24

                // Сохраняем в переменные или используем
                // Пример: отображение значений
                printf("Load settings - Max Load: %.2f, Output Voltage: %.2f, Max Current Difference: %.2f\n", load, voltage, currentDiff);
 8001498:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800149a:	f7ff f85d 	bl	8000558 <__aeabi_f2d>
 800149e:	4680      	mov	r8, r0
 80014a0:	4689      	mov	r9, r1
 80014a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80014a4:	f7ff f858 	bl	8000558 <__aeabi_f2d>
 80014a8:	4604      	mov	r4, r0
 80014aa:	460d      	mov	r5, r1
 80014ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80014ae:	f7ff f853 	bl	8000558 <__aeabi_f2d>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80014ba:	e9cd 4500 	strd	r4, r5, [sp]
 80014be:	4642      	mov	r2, r8
 80014c0:	464b      	mov	r3, r9
 80014c2:	4809      	ldr	r0, [pc, #36]	@ (80014e8 <process_received_data+0x358>)
 80014c4:	f007 fdf4 	bl	80090b0 <iprintf>
                }
              break;
 80014c8:	e007      	b.n	80014da <process_received_data+0x34a>

        default:
            // Обработка других команд
        	HAL_UARTEx_ReceiveToIdle_DMA(&huart1,rx_buffer, RX_BUFFER_SIZE);
 80014ca:	2220      	movs	r2, #32
 80014cc:	4907      	ldr	r1, [pc, #28]	@ (80014ec <process_received_data+0x35c>)
 80014ce:	4808      	ldr	r0, [pc, #32]	@ (80014f0 <process_received_data+0x360>)
 80014d0:	f005 ff8e 	bl	80073f0 <HAL_UARTEx_ReceiveToIdle_DMA>

            break;
 80014d4:	e002      	b.n	80014dc <process_received_data+0x34c>
            break;
 80014d6:	bf00      	nop
 80014d8:	e000      	b.n	80014dc <process_received_data+0x34c>
              break;
 80014da:	bf00      	nop
    }
}
 80014dc:	3748      	adds	r7, #72	@ 0x48
 80014de:	46bd      	mov	sp, r7
 80014e0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80014e4:	40240000 	.word	0x40240000
 80014e8:	0800b390 	.word	0x0800b390
 80014ec:	200001f0 	.word	0x200001f0
 80014f0:	200003a4 	.word	0x200003a4

080014f4 <HAL_UART_TxCpltCallback>:

// Колбэк завершения передачи данных по DMA
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
    if (huart == &huart1) {
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a09      	ldr	r2, [pc, #36]	@ (8001524 <HAL_UART_TxCpltCallback+0x30>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d10a      	bne.n	800151a <HAL_UART_TxCpltCallback+0x26>
        // Запускаем прием данных через DMA
        // Включаем прерывание по IDLE для отслеживания завершения приема данных
        HAL_UARTEx_ReceiveToIdle_DMA(&huart1,rx_buffer, RX_BUFFER_SIZE);
 8001504:	2220      	movs	r2, #32
 8001506:	4908      	ldr	r1, [pc, #32]	@ (8001528 <HAL_UART_TxCpltCallback+0x34>)
 8001508:	4806      	ldr	r0, [pc, #24]	@ (8001524 <HAL_UART_TxCpltCallback+0x30>)
 800150a:	f005 ff71 	bl	80073f0 <HAL_UARTEx_ReceiveToIdle_DMA>

        LED_1_OFF;
 800150e:	2201      	movs	r2, #1
 8001510:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001514:	4805      	ldr	r0, [pc, #20]	@ (800152c <HAL_UART_TxCpltCallback+0x38>)
 8001516:	f002 fe6f 	bl	80041f8 <HAL_GPIO_WritePin>
    }
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200003a4 	.word	0x200003a4
 8001528:	200001f0 	.word	0x200001f0
 800152c:	40020800 	.word	0x40020800

08001530 <I2C_send>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void I2C_send(uint8_t data, uint8_t flags)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af02      	add	r7, sp, #8
 8001536:	4603      	mov	r3, r0
 8001538:	460a      	mov	r2, r1
 800153a:	71fb      	strb	r3, [r7, #7]
 800153c:	4613      	mov	r3, r2
 800153e:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef res;
	    for(;;) {                                                                     // бесконечный цикл
	        res = HAL_I2C_IsDeviceReady(&hi2c1, LCD_ADDR, 1, HAL_MAX_DELAY);          // проверяем, готово ли устройство по адресу lcd_addr для связи
 8001540:	f04f 33ff 	mov.w	r3, #4294967295
 8001544:	2201      	movs	r2, #1
 8001546:	214e      	movs	r1, #78	@ 0x4e
 8001548:	4820      	ldr	r0, [pc, #128]	@ (80015cc <I2C_send+0x9c>)
 800154a:	f003 f8d5 	bl	80046f8 <HAL_I2C_IsDeviceReady>
 800154e:	4603      	mov	r3, r0
 8001550:	73fb      	strb	r3, [r7, #15]
	        if(res == HAL_OK) break;                                                  // если да, то выходим из бесконечного цикла
 8001552:	7bfb      	ldrb	r3, [r7, #15]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d000      	beq.n	800155a <I2C_send+0x2a>
	        res = HAL_I2C_IsDeviceReady(&hi2c1, LCD_ADDR, 1, HAL_MAX_DELAY);          // проверяем, готово ли устройство по адресу lcd_addr для связи
 8001558:	e7f2      	b.n	8001540 <I2C_send+0x10>
	        if(res == HAL_OK) break;                                                  // если да, то выходим из бесконечного цикла
 800155a:	bf00      	nop
	    }

	uint8_t up = data & 0xF0;                 // операция �? с 1111 0000, приводит к обнулению последних бит с 0 по 3, остаются биты с 4 по 7
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	f023 030f 	bic.w	r3, r3, #15
 8001562:	73bb      	strb	r3, [r7, #14]
	uint8_t lo = (data << 4) & 0xF0;          // тоже самое, но data сдвигается на 4 бита влево, т.е. в этой
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	011b      	lsls	r3, r3, #4
 8001568:	737b      	strb	r3, [r7, #13]
	                                           // переменной остаются  биты с 0 по 3
	uint8_t data_arr[4];
	data_arr[0] = up|flags|BACKLIGHT|PIN_EN;  // 4-7 биты содержат информацию, биты 0-3 конфигурируют работу
 800156a:	7bba      	ldrb	r2, [r7, #14]
 800156c:	79bb      	ldrb	r3, [r7, #6]
 800156e:	4313      	orrs	r3, r2
 8001570:	b2db      	uxtb	r3, r3
 8001572:	f043 030c 	orr.w	r3, r3, #12
 8001576:	b2db      	uxtb	r3, r3
 8001578:	723b      	strb	r3, [r7, #8]
	data_arr[1] = up|flags|BACKLIGHT;         // ублирование сигнала, на выводе Е в этот раз 0
 800157a:	7bba      	ldrb	r2, [r7, #14]
 800157c:	79bb      	ldrb	r3, [r7, #6]
 800157e:	4313      	orrs	r3, r2
 8001580:	b2db      	uxtb	r3, r3
 8001582:	f043 0308 	orr.w	r3, r3, #8
 8001586:	b2db      	uxtb	r3, r3
 8001588:	727b      	strb	r3, [r7, #9]
	data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 800158a:	7b7a      	ldrb	r2, [r7, #13]
 800158c:	79bb      	ldrb	r3, [r7, #6]
 800158e:	4313      	orrs	r3, r2
 8001590:	b2db      	uxtb	r3, r3
 8001592:	f043 030c 	orr.w	r3, r3, #12
 8001596:	b2db      	uxtb	r3, r3
 8001598:	72bb      	strb	r3, [r7, #10]
	data_arr[3] = lo|flags|BACKLIGHT;
 800159a:	7b7a      	ldrb	r2, [r7, #13]
 800159c:	79bb      	ldrb	r3, [r7, #6]
 800159e:	4313      	orrs	r3, r2
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	f043 0308 	orr.w	r3, r3, #8
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 80015aa:	f107 0208 	add.w	r2, r7, #8
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	2304      	movs	r3, #4
 80015b6:	214e      	movs	r1, #78	@ 0x4e
 80015b8:	4804      	ldr	r0, [pc, #16]	@ (80015cc <I2C_send+0x9c>)
 80015ba:	f002 ff9f 	bl	80044fc <HAL_I2C_Master_Transmit>
	HAL_Delay(LCD_DELAY_MS);
 80015be:	2005      	movs	r0, #5
 80015c0:	f001 fb64 	bl	8002c8c <HAL_Delay>
}
 80015c4:	bf00      	nop
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000258 	.word	0x20000258

080015d0 <LCD_SendString>:


void LCD_SendString(char *str)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]

	while(*str) {                                   // пока строчка не закончится
 80015d8:	e008      	b.n	80015ec <LCD_SendString+0x1c>
		I2C_send((uint8_t)(*str), 1);               // передача первого символа строки
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2101      	movs	r1, #1
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ffa5 	bl	8001530 <I2C_send>
        str++;                                      // сдвиг строки налево на 1 символ
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	3301      	adds	r3, #1
 80015ea:	607b      	str	r3, [r7, #4]
	while(*str) {                                   // пока строчка не закончится
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1f2      	bne.n	80015da <LCD_SendString+0xa>
    }
}
 80015f4:	bf00      	nop
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001600:	b5b0      	push	{r4, r5, r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001606:	f001 facf 	bl	8002ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800160a:	f000 faa7 	bl	8001b5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800160e:	f000 fdd3 	bl	80021b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001612:	f000 fda9 	bl	8002168 <MX_DMA_Init>
  MX_I2C1_Init();
 8001616:	f000 fb5f 	bl	8001cd8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800161a:	f000 fd7b 	bl	8002114 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800161e:	f000 fbe3 	bl	8001de8 <MX_TIM1_Init>
  MX_RTC_Init();
 8001622:	f000 fb87 	bl	8001d34 <MX_RTC_Init>
  MX_ADC1_Init();
 8001626:	f000 fb05 	bl	8001c34 <MX_ADC1_Init>
  MX_TIM2_Init();
 800162a:	f000 fc7f 	bl	8001f2c <MX_TIM2_Init>
  MX_TIM3_Init();
 800162e:	f000 fcfb 	bl	8002028 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  LED_1_ON;
 8001632:	2200      	movs	r2, #0
 8001634:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001638:	48ae      	ldr	r0, [pc, #696]	@ (80018f4 <main+0x2f4>)
 800163a:	f002 fddd 	bl	80041f8 <HAL_GPIO_WritePin>
   I2C_send(0b00110000,0);   // 8ми битный интерфейс
 800163e:	2100      	movs	r1, #0
 8001640:	2030      	movs	r0, #48	@ 0x30
 8001642:	f7ff ff75 	bl	8001530 <I2C_send>
   I2C_send(0b00000010,0);   // установка курсора в начале строки
 8001646:	2100      	movs	r1, #0
 8001648:	2002      	movs	r0, #2
 800164a:	f7ff ff71 	bl	8001530 <I2C_send>
   I2C_send(0b00001100,0);   // нормальный режим работы
 800164e:	2100      	movs	r1, #0
 8001650:	200c      	movs	r0, #12
 8001652:	f7ff ff6d 	bl	8001530 <I2C_send>
   I2C_send(0b00000001,0);   // очистка дисплея
 8001656:	2100      	movs	r1, #0
 8001658:	2001      	movs	r0, #1
 800165a:	f7ff ff69 	bl	8001530 <I2C_send>
   //  LCD_SendString("  Hello ");
   //  I2C_send(0b11000000,0);   // переход на 2 строку

   //  I2C_send(0b10010100,0);   // переход на 3 строку

     I2C_send(0b11010100,0);   // переход на 4 строку
 800165e:	2100      	movs	r1, #0
 8001660:	20d4      	movs	r0, #212	@ 0xd4
 8001662:	f7ff ff65 	bl	8001530 <I2C_send>
     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001666:	2100      	movs	r1, #0
 8001668:	48a3      	ldr	r0, [pc, #652]	@ (80018f8 <main+0x2f8>)
 800166a:	f004 fbff 	bl	8005e6c <HAL_TIM_PWM_Start>
     void HAL_UART_IDLECallback(UART_HandleTypeDef *huart);
     // Запускаем прием по DMA с буфером для приема данных
     HAL_UARTEx_ReceiveToIdle_DMA(&huart1,rx_buffer, RX_BUFFER_SIZE);
 800166e:	2220      	movs	r2, #32
 8001670:	49a2      	ldr	r1, [pc, #648]	@ (80018fc <main+0x2fc>)
 8001672:	48a3      	ldr	r0, [pc, #652]	@ (8001900 <main+0x300>)
 8001674:	f005 febc 	bl	80073f0 <HAL_UARTEx_ReceiveToIdle_DMA>
           __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001678:	4ba2      	ldr	r3, [pc, #648]	@ (8001904 <main+0x304>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	4ba1      	ldr	r3, [pc, #644]	@ (8001904 <main+0x304>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f022 0208 	bic.w	r2, r2, #8
 8001686:	601a      	str	r2, [r3, #0]



     LED_1_OFF;
 8001688:	2201      	movs	r2, #1
 800168a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800168e:	4899      	ldr	r0, [pc, #612]	@ (80018f4 <main+0x2f4>)
 8001690:	f002 fdb2 	bl	80041f8 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)==0)&&(flag==0)){
 8001694:	2110      	movs	r1, #16
 8001696:	489c      	ldr	r0, [pc, #624]	@ (8001908 <main+0x308>)
 8001698:	f002 fd96 	bl	80041c8 <HAL_GPIO_ReadPin>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d11c      	bne.n	80016dc <main+0xdc>
 80016a2:	4b9a      	ldr	r3, [pc, #616]	@ (800190c <main+0x30c>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d118      	bne.n	80016dc <main+0xdc>
		  regim++;
 80016aa:	4b99      	ldr	r3, [pc, #612]	@ (8001910 <main+0x310>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	3301      	adds	r3, #1
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	4b97      	ldr	r3, [pc, #604]	@ (8001910 <main+0x310>)
 80016b4:	701a      	strb	r2, [r3, #0]
		  flag=1;
 80016b6:	4b95      	ldr	r3, [pc, #596]	@ (800190c <main+0x30c>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	701a      	strb	r2, [r3, #0]
		  arm=0;
 80016bc:	4b95      	ldr	r3, [pc, #596]	@ (8001914 <main+0x314>)
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
		  run=0;
 80016c2:	4b95      	ldr	r3, [pc, #596]	@ (8001918 <main+0x318>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(150);
 80016c8:	2096      	movs	r0, #150	@ 0x96
 80016ca:	f001 fadf 	bl	8002c8c <HAL_Delay>
		  if(regim>3){regim=1;}
 80016ce:	4b90      	ldr	r3, [pc, #576]	@ (8001910 <main+0x310>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b03      	cmp	r3, #3
 80016d4:	d902      	bls.n	80016dc <main+0xdc>
 80016d6:	4b8e      	ldr	r3, [pc, #568]	@ (8001910 <main+0x310>)
 80016d8:	2201      	movs	r2, #1
 80016da:	701a      	strb	r2, [r3, #0]
         }


	  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)==1)&&(flag==1)){
 80016dc:	2110      	movs	r1, #16
 80016de:	488a      	ldr	r0, [pc, #552]	@ (8001908 <main+0x308>)
 80016e0:	f002 fd72 	bl	80041c8 <HAL_GPIO_ReadPin>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d109      	bne.n	80016fe <main+0xfe>
 80016ea:	4b88      	ldr	r3, [pc, #544]	@ (800190c <main+0x30c>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d105      	bne.n	80016fe <main+0xfe>

		  flag=0;
 80016f2:	4b86      	ldr	r3, [pc, #536]	@ (800190c <main+0x30c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(150);
 80016f8:	2096      	movs	r0, #150	@ 0x96
 80016fa:	f001 fac7 	bl	8002c8c <HAL_Delay>

	  }

	  sprintf(time_buffer,"%04d-%02d-%02d  %02d:%02d:%02d",year, month, date,hour, minute, second);
 80016fe:	4b87      	ldr	r3, [pc, #540]	@ (800191c <main+0x31c>)
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	461c      	mov	r4, r3
 8001704:	4b86      	ldr	r3, [pc, #536]	@ (8001920 <main+0x320>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	461d      	mov	r5, r3
 800170a:	4b86      	ldr	r3, [pc, #536]	@ (8001924 <main+0x324>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	461a      	mov	r2, r3
 8001710:	4b85      	ldr	r3, [pc, #532]	@ (8001928 <main+0x328>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	4619      	mov	r1, r3
 8001716:	4b85      	ldr	r3, [pc, #532]	@ (800192c <main+0x32c>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	4b84      	ldr	r3, [pc, #528]	@ (8001930 <main+0x330>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	9303      	str	r3, [sp, #12]
 8001722:	9002      	str	r0, [sp, #8]
 8001724:	9101      	str	r1, [sp, #4]
 8001726:	9200      	str	r2, [sp, #0]
 8001728:	462b      	mov	r3, r5
 800172a:	4622      	mov	r2, r4
 800172c:	4981      	ldr	r1, [pc, #516]	@ (8001934 <main+0x334>)
 800172e:	4882      	ldr	r0, [pc, #520]	@ (8001938 <main+0x338>)
 8001730:	f007 fcd0 	bl	80090d4 <siprintf>
	  	  		//I2C_send(0b00000001,0);   // очистка дисплея
	  	  	    I2C_send(0b11010100,0);   // переход на 4 строку
 8001734:	2100      	movs	r1, #0
 8001736:	20d4      	movs	r0, #212	@ 0xd4
 8001738:	f7ff fefa 	bl	8001530 <I2C_send>
	  	  		LCD_SendString(time_buffer);
 800173c:	487e      	ldr	r0, [pc, #504]	@ (8001938 <main+0x338>)
 800173e:	f7ff ff47 	bl	80015d0 <LCD_SendString>




	  if(regim==1){
 8001742:	4b73      	ldr	r3, [pc, #460]	@ (8001910 <main+0x310>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b01      	cmp	r3, #1
 8001748:	f040 8117 	bne.w	800197a <main+0x37a>
		  I2C_send(0b10000000,0);   // переход на 1 строку
 800174c:	2100      	movs	r1, #0
 800174e:	2080      	movs	r0, #128	@ 0x80
 8001750:	f7ff feee 	bl	8001530 <I2C_send>
		  LCD_SendString("RUN MODE-           ");
 8001754:	4879      	ldr	r0, [pc, #484]	@ (800193c <main+0x33c>)
 8001756:	f7ff ff3b 	bl	80015d0 <LCD_SendString>
		  I2C_send(0b11000000,0);   // переход на 2 строку
 800175a:	2100      	movs	r1, #0
 800175c:	20c0      	movs	r0, #192	@ 0xc0
 800175e:	f7ff fee7 	bl	8001530 <I2C_send>
		  sprintf(info_buffer,"Turns=%04d      ",cmd_in);
 8001762:	4b77      	ldr	r3, [pc, #476]	@ (8001940 <main+0x340>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	461a      	mov	r2, r3
 8001768:	4976      	ldr	r1, [pc, #472]	@ (8001944 <main+0x344>)
 800176a:	4877      	ldr	r0, [pc, #476]	@ (8001948 <main+0x348>)
 800176c:	f007 fcb2 	bl	80090d4 <siprintf>
		  LCD_SendString(info_buffer);
 8001770:	4875      	ldr	r0, [pc, #468]	@ (8001948 <main+0x348>)
 8001772:	f7ff ff2d 	bl	80015d0 <LCD_SendString>
		  FORVARD;
 8001776:	2200      	movs	r2, #0
 8001778:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800177c:	4873      	ldr	r0, [pc, #460]	@ (800194c <main+0x34c>)
 800177e:	f002 fd3b 	bl	80041f8 <HAL_GPIO_WritePin>
		  I2C_send(0b10010100,0);   // переход на 3 строку
 8001782:	2100      	movs	r1, #0
 8001784:	2094      	movs	r0, #148	@ 0x94
 8001786:	f7ff fed3 	bl	8001530 <I2C_send>
		  sprintf(info_buffer,"Speed=%04d RPM     ",speed);
 800178a:	4b71      	ldr	r3, [pc, #452]	@ (8001950 <main+0x350>)
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	461a      	mov	r2, r3
 8001790:	4970      	ldr	r1, [pc, #448]	@ (8001954 <main+0x354>)
 8001792:	486d      	ldr	r0, [pc, #436]	@ (8001948 <main+0x348>)
 8001794:	f007 fc9e 	bl	80090d4 <siprintf>
		  		  LCD_SendString(info_buffer);
 8001798:	486b      	ldr	r0, [pc, #428]	@ (8001948 <main+0x348>)
 800179a:	f7ff ff19 	bl	80015d0 <LCD_SendString>



		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==1)&&(arm==0)&&(run==0)){
 800179e:	2108      	movs	r1, #8
 80017a0:	4859      	ldr	r0, [pc, #356]	@ (8001908 <main+0x308>)
 80017a2:	f002 fd11 	bl	80041c8 <HAL_GPIO_ReadPin>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d119      	bne.n	80017e0 <main+0x1e0>
 80017ac:	4b59      	ldr	r3, [pc, #356]	@ (8001914 <main+0x314>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d115      	bne.n	80017e0 <main+0x1e0>
 80017b4:	4b58      	ldr	r3, [pc, #352]	@ (8001918 <main+0x318>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d111      	bne.n	80017e0 <main+0x1e0>
			  HAL_Delay(50);
 80017bc:	2032      	movs	r0, #50	@ 0x32
 80017be:	f001 fa65 	bl	8002c8c <HAL_Delay>
			  I2C_send(0b10000000,0);   // переход на 1 строку
 80017c2:	2100      	movs	r1, #0
 80017c4:	2080      	movs	r0, #128	@ 0x80
 80017c6:	f7ff feb3 	bl	8001530 <I2C_send>
			  		  LCD_SendString("RUN MODE- READY...  ");
 80017ca:	4863      	ldr	r0, [pc, #396]	@ (8001958 <main+0x358>)
 80017cc:	f7ff ff00 	bl	80015d0 <LCD_SendString>
			  		 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80017d0:	2100      	movs	r1, #0
 80017d2:	4849      	ldr	r0, [pc, #292]	@ (80018f8 <main+0x2f8>)
 80017d4:	f004 fbfa 	bl	8005fcc <HAL_TIM_PWM_Stop>
			  		 HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80017d8:	2100      	movs	r1, #0
 80017da:	4847      	ldr	r0, [pc, #284]	@ (80018f8 <main+0x2f8>)
 80017dc:	f005 fbf1 	bl	8006fc2 <HAL_TIMEx_PWMN_Stop>
		  }

		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==0)&&(arm==0)&&(run==0)){
 80017e0:	2108      	movs	r1, #8
 80017e2:	4849      	ldr	r0, [pc, #292]	@ (8001908 <main+0x308>)
 80017e4:	f002 fcf0 	bl	80041c8 <HAL_GPIO_ReadPin>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10d      	bne.n	800180a <main+0x20a>
 80017ee:	4b49      	ldr	r3, [pc, #292]	@ (8001914 <main+0x314>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d109      	bne.n	800180a <main+0x20a>
 80017f6:	4b48      	ldr	r3, [pc, #288]	@ (8001918 <main+0x318>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d105      	bne.n	800180a <main+0x20a>
                 arm=1;
 80017fe:	4b45      	ldr	r3, [pc, #276]	@ (8001914 <main+0x314>)
 8001800:	2201      	movs	r2, #1
 8001802:	701a      	strb	r2, [r3, #0]
					  HAL_Delay(150); }
 8001804:	2096      	movs	r0, #150	@ 0x96
 8001806:	f001 fa41 	bl	8002c8c <HAL_Delay>

		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==1)&&(arm==1)&&(run==0)){
 800180a:	2108      	movs	r1, #8
 800180c:	483e      	ldr	r0, [pc, #248]	@ (8001908 <main+0x308>)
 800180e:	f002 fcdb 	bl	80041c8 <HAL_GPIO_ReadPin>
 8001812:	4603      	mov	r3, r0
 8001814:	2b01      	cmp	r3, #1
 8001816:	d114      	bne.n	8001842 <main+0x242>
 8001818:	4b3e      	ldr	r3, [pc, #248]	@ (8001914 <main+0x314>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d110      	bne.n	8001842 <main+0x242>
 8001820:	4b3d      	ldr	r3, [pc, #244]	@ (8001918 <main+0x318>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d10c      	bne.n	8001842 <main+0x242>
		 			  HAL_Delay(50);
 8001828:	2032      	movs	r0, #50	@ 0x32
 800182a:	f001 fa2f 	bl	8002c8c <HAL_Delay>
		 			  run=1;
 800182e:	4b3a      	ldr	r3, [pc, #232]	@ (8001918 <main+0x318>)
 8001830:	2201      	movs	r2, #1
 8001832:	701a      	strb	r2, [r3, #0]
		 			  I2C_send(0b10000000,0);   // переход на 1 строку
 8001834:	2100      	movs	r1, #0
 8001836:	2080      	movs	r0, #128	@ 0x80
 8001838:	f7ff fe7a 	bl	8001530 <I2C_send>
		 			  		  LCD_SendString("RUN MODE- RUNING    ");
 800183c:	4847      	ldr	r0, [pc, #284]	@ (800195c <main+0x35c>)
 800183e:	f7ff fec7 	bl	80015d0 <LCD_SendString>

                }


		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==1)&&(arm==1)&&(run==1)){
 8001842:	2108      	movs	r1, #8
 8001844:	4830      	ldr	r0, [pc, #192]	@ (8001908 <main+0x308>)
 8001846:	f002 fcbf 	bl	80041c8 <HAL_GPIO_ReadPin>
 800184a:	4603      	mov	r3, r0
 800184c:	2b01      	cmp	r3, #1
 800184e:	d125      	bne.n	800189c <main+0x29c>
 8001850:	4b30      	ldr	r3, [pc, #192]	@ (8001914 <main+0x314>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d121      	bne.n	800189c <main+0x29c>
 8001858:	4b2f      	ldr	r3, [pc, #188]	@ (8001918 <main+0x318>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d11d      	bne.n	800189c <main+0x29c>

		 		                      I2C_send(0b10000000,0);   // переход на 1 строку
 8001860:	2100      	movs	r1, #0
 8001862:	2080      	movs	r0, #128	@ 0x80
 8001864:	f7ff fe64 	bl	8001530 <I2C_send>
		 		                      LCD_SendString("RUN MODE- RUNING    ");
 8001868:	483c      	ldr	r0, [pc, #240]	@ (800195c <main+0x35c>)
 800186a:	f7ff feb1 	bl	80015d0 <LCD_SendString>

		 		                     HAL_ADC_Start(&hadc1); // запускаем преобразование сигнала АЦП
 800186e:	483c      	ldr	r0, [pc, #240]	@ (8001960 <main+0x360>)
 8001870:	f001 fa74 	bl	8002d5c <HAL_ADC_Start>
		 		                     HAL_ADC_PollForConversion(&hadc1, 100); // ожидаем окончания преобразования
 8001874:	2164      	movs	r1, #100	@ 0x64
 8001876:	483a      	ldr	r0, [pc, #232]	@ (8001960 <main+0x360>)
 8001878:	f001 fb57 	bl	8002f2a <HAL_ADC_PollForConversion>
		 		                     adc = HAL_ADC_GetValue(&hadc1); // читаем полученное значение в переменную adc
 800187c:	4838      	ldr	r0, [pc, #224]	@ (8001960 <main+0x360>)
 800187e:	f001 fbdf 	bl	8003040 <HAL_ADC_GetValue>
 8001882:	4603      	mov	r3, r0
 8001884:	b29a      	uxth	r2, r3
 8001886:	4b37      	ldr	r3, [pc, #220]	@ (8001964 <main+0x364>)
 8001888:	801a      	strh	r2, [r3, #0]
		 		                     HAL_ADC_Stop(&hadc1); // останавливаем АЦП (не обязательно)
 800188a:	4835      	ldr	r0, [pc, #212]	@ (8001960 <main+0x360>)
 800188c:	f001 fb1a 	bl	8002ec4 <HAL_ADC_Stop>
		 		                     speed=adc-230;
 8001890:	4b34      	ldr	r3, [pc, #208]	@ (8001964 <main+0x364>)
 8001892:	881b      	ldrh	r3, [r3, #0]
 8001894:	3be6      	subs	r3, #230	@ 0xe6
 8001896:	b29a      	uxth	r2, r3
 8001898:	4b2d      	ldr	r3, [pc, #180]	@ (8001950 <main+0x350>)
 800189a:	801a      	strh	r2, [r3, #0]
		 	*/

		 		 					}


		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==0)&&(arm==1)&&(run==1)){
 800189c:	2108      	movs	r1, #8
 800189e:	481a      	ldr	r0, [pc, #104]	@ (8001908 <main+0x308>)
 80018a0:	f002 fc92 	bl	80041c8 <HAL_GPIO_ReadPin>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d114      	bne.n	80018d4 <main+0x2d4>
 80018aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001914 <main+0x314>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d110      	bne.n	80018d4 <main+0x2d4>
 80018b2:	4b19      	ldr	r3, [pc, #100]	@ (8001918 <main+0x318>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d10c      	bne.n	80018d4 <main+0x2d4>
		                       arm=0;
 80018ba:	4b16      	ldr	r3, [pc, #88]	@ (8001914 <main+0x314>)
 80018bc:	2200      	movs	r2, #0
 80018be:	701a      	strb	r2, [r3, #0]
		                       I2C_send(0b10000000,0);   // переход на 1 строку
 80018c0:	2100      	movs	r1, #0
 80018c2:	2080      	movs	r0, #128	@ 0x80
 80018c4:	f7ff fe34 	bl	8001530 <I2C_send>
		                        LCD_SendString("RUN MODE- RUNING    ");
 80018c8:	4824      	ldr	r0, [pc, #144]	@ (800195c <main+0x35c>)
 80018ca:	f7ff fe81 	bl	80015d0 <LCD_SendString>
		 					  HAL_Delay(150); }
 80018ce:	2096      	movs	r0, #150	@ 0x96
 80018d0:	f001 f9dc 	bl	8002c8c <HAL_Delay>

		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==1)&&(arm==0)&&(run==1)){
 80018d4:	2108      	movs	r1, #8
 80018d6:	480c      	ldr	r0, [pc, #48]	@ (8001908 <main+0x308>)
 80018d8:	f002 fc76 	bl	80041c8 <HAL_GPIO_ReadPin>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d14b      	bne.n	800197a <main+0x37a>
 80018e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001914 <main+0x314>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d147      	bne.n	800197a <main+0x37a>
 80018ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001918 <main+0x318>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d143      	bne.n	800197a <main+0x37a>
 80018f2:	e039      	b.n	8001968 <main+0x368>
 80018f4:	40020800 	.word	0x40020800
 80018f8:	200002cc 	.word	0x200002cc
 80018fc:	200001f0 	.word	0x200001f0
 8001900:	200003a4 	.word	0x200003a4
 8001904:	200003ec 	.word	0x200003ec
 8001908:	40020400 	.word	0x40020400
 800190c:	200004db 	.word	0x200004db
 8001910:	200004dc 	.word	0x200004dc
 8001914:	200004dd 	.word	0x200004dd
 8001918:	200004de 	.word	0x200004de
 800191c:	200004d4 	.word	0x200004d4
 8001920:	200004d6 	.word	0x200004d6
 8001924:	200004d7 	.word	0x200004d7
 8001928:	200004d8 	.word	0x200004d8
 800192c:	200004d9 	.word	0x200004d9
 8001930:	200004da 	.word	0x200004da
 8001934:	0800b3e4 	.word	0x0800b3e4
 8001938:	200004ac 	.word	0x200004ac
 800193c:	0800b404 	.word	0x0800b404
 8001940:	200004e5 	.word	0x200004e5
 8001944:	0800b41c 	.word	0x0800b41c
 8001948:	200004c0 	.word	0x200004c0
 800194c:	40020000 	.word	0x40020000
 8001950:	200004e0 	.word	0x200004e0
 8001954:	0800b430 	.word	0x0800b430
 8001958:	0800b444 	.word	0x0800b444
 800195c:	0800b45c 	.word	0x0800b45c
 8001960:	20000210 	.word	0x20000210
 8001964:	200004e2 	.word	0x200004e2
				                       arm=0;
 8001968:	4b70      	ldr	r3, [pc, #448]	@ (8001b2c <main+0x52c>)
 800196a:	2200      	movs	r2, #0
 800196c:	701a      	strb	r2, [r3, #0]
				                       run=0;
 800196e:	4b70      	ldr	r3, [pc, #448]	@ (8001b30 <main+0x530>)
 8001970:	2200      	movs	r2, #0
 8001972:	701a      	strb	r2, [r3, #0]
				 					  HAL_Delay(150); }
 8001974:	2096      	movs	r0, #150	@ 0x96
 8001976:	f001 f989 	bl	8002c8c <HAL_Delay>

	  }

	  if(regim==2){
 800197a:	4b6e      	ldr	r3, [pc, #440]	@ (8001b34 <main+0x534>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b02      	cmp	r3, #2
 8001980:	f040 80c7 	bne.w	8001b12 <main+0x512>
	 		  I2C_send(0b10000000,0);   // переход на 1 строку
 8001984:	2100      	movs	r1, #0
 8001986:	2080      	movs	r0, #128	@ 0x80
 8001988:	f7ff fdd2 	bl	8001530 <I2C_send>
	 		  LCD_SendString("REVERS MODE         ");
 800198c:	486a      	ldr	r0, [pc, #424]	@ (8001b38 <main+0x538>)
 800198e:	f7ff fe1f 	bl	80015d0 <LCD_SendString>
	 		  REVERS;
 8001992:	2201      	movs	r2, #1
 8001994:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001998:	4868      	ldr	r0, [pc, #416]	@ (8001b3c <main+0x53c>)
 800199a:	f002 fc2d 	bl	80041f8 <HAL_GPIO_WritePin>
	/////////////////////////////////////REVERS/////////////////////////////////////////////
	 		 if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==1)&&(arm==0)&&(run==0)){
 800199e:	2108      	movs	r1, #8
 80019a0:	4867      	ldr	r0, [pc, #412]	@ (8001b40 <main+0x540>)
 80019a2:	f002 fc11 	bl	80041c8 <HAL_GPIO_ReadPin>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d111      	bne.n	80019d0 <main+0x3d0>
 80019ac:	4b5f      	ldr	r3, [pc, #380]	@ (8001b2c <main+0x52c>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d10d      	bne.n	80019d0 <main+0x3d0>
 80019b4:	4b5e      	ldr	r3, [pc, #376]	@ (8001b30 <main+0x530>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d109      	bne.n	80019d0 <main+0x3d0>
	 		 			  HAL_Delay(50);
 80019bc:	2032      	movs	r0, #50	@ 0x32
 80019be:	f001 f965 	bl	8002c8c <HAL_Delay>
	 		 			  I2C_send(0b10000000,0);   // переход на 1 строку
 80019c2:	2100      	movs	r1, #0
 80019c4:	2080      	movs	r0, #128	@ 0x80
 80019c6:	f7ff fdb3 	bl	8001530 <I2C_send>
	 		 			  		  LCD_SendString("REVERS MODE- READY...  ");
 80019ca:	485e      	ldr	r0, [pc, #376]	@ (8001b44 <main+0x544>)
 80019cc:	f7ff fe00 	bl	80015d0 <LCD_SendString>
	 		 			  	//	 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
	 		 			  	//	 HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
	 		 		  }

	 		 		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==0)&&(arm==0)&&(run==0)){
 80019d0:	2108      	movs	r1, #8
 80019d2:	485b      	ldr	r0, [pc, #364]	@ (8001b40 <main+0x540>)
 80019d4:	f002 fbf8 	bl	80041c8 <HAL_GPIO_ReadPin>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10d      	bne.n	80019fa <main+0x3fa>
 80019de:	4b53      	ldr	r3, [pc, #332]	@ (8001b2c <main+0x52c>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d109      	bne.n	80019fa <main+0x3fa>
 80019e6:	4b52      	ldr	r3, [pc, #328]	@ (8001b30 <main+0x530>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d105      	bne.n	80019fa <main+0x3fa>
	 		                       arm=1;
 80019ee:	4b4f      	ldr	r3, [pc, #316]	@ (8001b2c <main+0x52c>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	701a      	strb	r2, [r3, #0]
	 		 					  HAL_Delay(150); }
 80019f4:	2096      	movs	r0, #150	@ 0x96
 80019f6:	f001 f949 	bl	8002c8c <HAL_Delay>

	 		 		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==1)&&(arm==1)&&(run==0)){
 80019fa:	2108      	movs	r1, #8
 80019fc:	4850      	ldr	r0, [pc, #320]	@ (8001b40 <main+0x540>)
 80019fe:	f002 fbe3 	bl	80041c8 <HAL_GPIO_ReadPin>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d125      	bne.n	8001a54 <main+0x454>
 8001a08:	4b48      	ldr	r3, [pc, #288]	@ (8001b2c <main+0x52c>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d121      	bne.n	8001a54 <main+0x454>
 8001a10:	4b47      	ldr	r3, [pc, #284]	@ (8001b30 <main+0x530>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d11d      	bne.n	8001a54 <main+0x454>
	 		 		 			  HAL_Delay(50);
 8001a18:	2032      	movs	r0, #50	@ 0x32
 8001a1a:	f001 f937 	bl	8002c8c <HAL_Delay>
	 		 		 			  run=1;
 8001a1e:	4b44      	ldr	r3, [pc, #272]	@ (8001b30 <main+0x530>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	701a      	strb	r2, [r3, #0]
	 		 		 			  I2C_send(0b10000000,0);   // переход на 1 строку
 8001a24:	2100      	movs	r1, #0
 8001a26:	2080      	movs	r0, #128	@ 0x80
 8001a28:	f7ff fd82 	bl	8001530 <I2C_send>
	 		 		 			  		  LCD_SendString("REVERS MODE- RUNING    ");
 8001a2c:	4846      	ldr	r0, [pc, #280]	@ (8001b48 <main+0x548>)
 8001a2e:	f7ff fdcf 	bl	80015d0 <LCD_SendString>

	 		 		 			  	  HAL_ADC_Start(&hadc1); // запускаем преобразование сигнала АЦП
 8001a32:	4846      	ldr	r0, [pc, #280]	@ (8001b4c <main+0x54c>)
 8001a34:	f001 f992 	bl	8002d5c <HAL_ADC_Start>
	 		 		 			      HAL_ADC_PollForConversion(&hadc1, 100); // ожидаем окончания преобразования
 8001a38:	2164      	movs	r1, #100	@ 0x64
 8001a3a:	4844      	ldr	r0, [pc, #272]	@ (8001b4c <main+0x54c>)
 8001a3c:	f001 fa75 	bl	8002f2a <HAL_ADC_PollForConversion>
	 		 		 			      adc = HAL_ADC_GetValue(&hadc1); // читаем полученное значение в переменную adc
 8001a40:	4842      	ldr	r0, [pc, #264]	@ (8001b4c <main+0x54c>)
 8001a42:	f001 fafd 	bl	8003040 <HAL_ADC_GetValue>
 8001a46:	4603      	mov	r3, r0
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	4b41      	ldr	r3, [pc, #260]	@ (8001b50 <main+0x550>)
 8001a4c:	801a      	strh	r2, [r3, #0]
	 		 		 			      HAL_ADC_Stop(&hadc1); // останавливаем АЦП (не обязательно)
 8001a4e:	483f      	ldr	r0, [pc, #252]	@ (8001b4c <main+0x54c>)
 8001a50:	f001 fa38 	bl	8002ec4 <HAL_ADC_Stop>

	 		                      }


	 		 		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==1)&&(arm==1)&&(run==1)){
 8001a54:	2108      	movs	r1, #8
 8001a56:	483a      	ldr	r0, [pc, #232]	@ (8001b40 <main+0x540>)
 8001a58:	f002 fbb6 	bl	80041c8 <HAL_GPIO_ReadPin>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d123      	bne.n	8001aaa <main+0x4aa>
 8001a62:	4b32      	ldr	r3, [pc, #200]	@ (8001b2c <main+0x52c>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d11f      	bne.n	8001aaa <main+0x4aa>
 8001a6a:	4b31      	ldr	r3, [pc, #196]	@ (8001b30 <main+0x530>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d11b      	bne.n	8001aaa <main+0x4aa>

	 		 		 		                      I2C_send(0b10000000,0);   // переход на 1 строку
 8001a72:	2100      	movs	r1, #0
 8001a74:	2080      	movs	r0, #128	@ 0x80
 8001a76:	f7ff fd5b 	bl	8001530 <I2C_send>
	 		 		 		                      LCD_SendString("REVERS MODE- RUNING    ");
 8001a7a:	4833      	ldr	r0, [pc, #204]	@ (8001b48 <main+0x548>)
 8001a7c:	f7ff fda8 	bl	80015d0 <LCD_SendString>
	 		 		 		                    //   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	 		 		 		                    //   HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);

	 		 		 		                    HAL_ADC_Start(&hadc1); // запускаем преобразование сигнала АЦП
 8001a80:	4832      	ldr	r0, [pc, #200]	@ (8001b4c <main+0x54c>)
 8001a82:	f001 f96b 	bl	8002d5c <HAL_ADC_Start>
	 		 		 		                    HAL_ADC_PollForConversion(&hadc1, 100); // ожидаем окончания преобразования
 8001a86:	2164      	movs	r1, #100	@ 0x64
 8001a88:	4830      	ldr	r0, [pc, #192]	@ (8001b4c <main+0x54c>)
 8001a8a:	f001 fa4e 	bl	8002f2a <HAL_ADC_PollForConversion>
	 		 		 		                    adc = HAL_ADC_GetValue(&hadc1); // читаем полученное значение в переменную adc
 8001a8e:	482f      	ldr	r0, [pc, #188]	@ (8001b4c <main+0x54c>)
 8001a90:	f001 fad6 	bl	8003040 <HAL_ADC_GetValue>
 8001a94:	4603      	mov	r3, r0
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	4b2d      	ldr	r3, [pc, #180]	@ (8001b50 <main+0x550>)
 8001a9a:	801a      	strh	r2, [r3, #0]
	 		 		 		                     HAL_ADC_Stop(&hadc1); // останавливаем АЦП (не обязательно)
 8001a9c:	482b      	ldr	r0, [pc, #172]	@ (8001b4c <main+0x54c>)
 8001a9e:	f001 fa11 	bl	8002ec4 <HAL_ADC_Stop>
	 		 		 		                     speed=adc;
 8001aa2:	4b2b      	ldr	r3, [pc, #172]	@ (8001b50 <main+0x550>)
 8001aa4:	881a      	ldrh	r2, [r3, #0]
 8001aa6:	4b2b      	ldr	r3, [pc, #172]	@ (8001b54 <main+0x554>)
 8001aa8:	801a      	strh	r2, [r3, #0]
	 		 		 		 					}


	 		 		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==0)&&(arm==1)&&(run==1)){
 8001aaa:	2108      	movs	r1, #8
 8001aac:	4824      	ldr	r0, [pc, #144]	@ (8001b40 <main+0x540>)
 8001aae:	f002 fb8b 	bl	80041c8 <HAL_GPIO_ReadPin>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d114      	bne.n	8001ae2 <main+0x4e2>
 8001ab8:	4b1c      	ldr	r3, [pc, #112]	@ (8001b2c <main+0x52c>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d110      	bne.n	8001ae2 <main+0x4e2>
 8001ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b30 <main+0x530>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d10c      	bne.n	8001ae2 <main+0x4e2>
	 		 		                       arm=0;
 8001ac8:	4b18      	ldr	r3, [pc, #96]	@ (8001b2c <main+0x52c>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]
	 		 		                       I2C_send(0b10000000,0);   // переход на 1 строку
 8001ace:	2100      	movs	r1, #0
 8001ad0:	2080      	movs	r0, #128	@ 0x80
 8001ad2:	f7ff fd2d 	bl	8001530 <I2C_send>
	 		 		                        LCD_SendString("REVERS MODE- RUNING    ");
 8001ad6:	481c      	ldr	r0, [pc, #112]	@ (8001b48 <main+0x548>)
 8001ad8:	f7ff fd7a 	bl	80015d0 <LCD_SendString>
	 		 		 					  HAL_Delay(150); }
 8001adc:	2096      	movs	r0, #150	@ 0x96
 8001ade:	f001 f8d5 	bl	8002c8c <HAL_Delay>

	 		 		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==1)&&(arm==0)&&(run==1)){
 8001ae2:	2108      	movs	r1, #8
 8001ae4:	4816      	ldr	r0, [pc, #88]	@ (8001b40 <main+0x540>)
 8001ae6:	f002 fb6f 	bl	80041c8 <HAL_GPIO_ReadPin>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d110      	bne.n	8001b12 <main+0x512>
 8001af0:	4b0e      	ldr	r3, [pc, #56]	@ (8001b2c <main+0x52c>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d10c      	bne.n	8001b12 <main+0x512>
 8001af8:	4b0d      	ldr	r3, [pc, #52]	@ (8001b30 <main+0x530>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d108      	bne.n	8001b12 <main+0x512>
	 		 				                       arm=0;
 8001b00:	4b0a      	ldr	r3, [pc, #40]	@ (8001b2c <main+0x52c>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	701a      	strb	r2, [r3, #0]
	 		 				                       run=0;
 8001b06:	4b0a      	ldr	r3, [pc, #40]	@ (8001b30 <main+0x530>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	701a      	strb	r2, [r3, #0]
	 		 				 					  HAL_Delay(150); }
 8001b0c:	2096      	movs	r0, #150	@ 0x96
 8001b0e:	f001 f8bd 	bl	8002c8c <HAL_Delay>


	 	  }

	  if(regim==3){
 8001b12:	4b08      	ldr	r3, [pc, #32]	@ (8001b34 <main+0x534>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b03      	cmp	r3, #3
 8001b18:	f47f adbc 	bne.w	8001694 <main+0x94>
		 		  I2C_send(0b10000000,0);   // переход на 1 строку
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	2080      	movs	r0, #128	@ 0x80
 8001b20:	f7ff fd06 	bl	8001530 <I2C_send>
		 		  LCD_SendString("SETUP MODE     ");
 8001b24:	480c      	ldr	r0, [pc, #48]	@ (8001b58 <main+0x558>)
 8001b26:	f7ff fd53 	bl	80015d0 <LCD_SendString>
	  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)==0)&&(flag==0)){
 8001b2a:	e5b3      	b.n	8001694 <main+0x94>
 8001b2c:	200004dd 	.word	0x200004dd
 8001b30:	200004de 	.word	0x200004de
 8001b34:	200004dc 	.word	0x200004dc
 8001b38:	0800b474 	.word	0x0800b474
 8001b3c:	40020000 	.word	0x40020000
 8001b40:	40020400 	.word	0x40020400
 8001b44:	0800b48c 	.word	0x0800b48c
 8001b48:	0800b4a4 	.word	0x0800b4a4
 8001b4c:	20000210 	.word	0x20000210
 8001b50:	200004e2 	.word	0x200004e2
 8001b54:	200004e0 	.word	0x200004e0
 8001b58:	0800b4bc 	.word	0x0800b4bc

08001b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b094      	sub	sp, #80	@ 0x50
 8001b60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b62:	f107 0320 	add.w	r3, r7, #32
 8001b66:	2230      	movs	r2, #48	@ 0x30
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f007 fb15 	bl	800919a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b70:	f107 030c 	add.w	r3, r7, #12
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b80:	2300      	movs	r3, #0
 8001b82:	60bb      	str	r3, [r7, #8]
 8001b84:	4b29      	ldr	r3, [pc, #164]	@ (8001c2c <SystemClock_Config+0xd0>)
 8001b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b88:	4a28      	ldr	r2, [pc, #160]	@ (8001c2c <SystemClock_Config+0xd0>)
 8001b8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b90:	4b26      	ldr	r3, [pc, #152]	@ (8001c2c <SystemClock_Config+0xd0>)
 8001b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b98:	60bb      	str	r3, [r7, #8]
 8001b9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	4b23      	ldr	r3, [pc, #140]	@ (8001c30 <SystemClock_Config+0xd4>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001ba8:	4a21      	ldr	r2, [pc, #132]	@ (8001c30 <SystemClock_Config+0xd4>)
 8001baa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8001c30 <SystemClock_Config+0xd4>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001bb8:	607b      	str	r3, [r7, #4]
 8001bba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001bbc:	230a      	movs	r3, #10
 8001bbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bc4:	2310      	movs	r3, #16
 8001bc6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001bd4:	2308      	movs	r3, #8
 8001bd6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001bd8:	2354      	movs	r3, #84	@ 0x54
 8001bda:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001be0:	2304      	movs	r3, #4
 8001be2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001be4:	f107 0320 	add.w	r3, r7, #32
 8001be8:	4618      	mov	r0, r3
 8001bea:	f003 f90f 	bl	8004e0c <HAL_RCC_OscConfig>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001bf4:	f000 fbc0 	bl	8002378 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bf8:	230f      	movs	r3, #15
 8001bfa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c0e:	f107 030c 	add.w	r3, r7, #12
 8001c12:	2102      	movs	r1, #2
 8001c14:	4618      	mov	r0, r3
 8001c16:	f003 fb71 	bl	80052fc <HAL_RCC_ClockConfig>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001c20:	f000 fbaa 	bl	8002378 <Error_Handler>
  }
}
 8001c24:	bf00      	nop
 8001c26:	3750      	adds	r7, #80	@ 0x50
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40007000 	.word	0x40007000

08001c34 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c3a:	463b      	mov	r3, r7
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001c46:	4b21      	ldr	r3, [pc, #132]	@ (8001ccc <MX_ADC1_Init+0x98>)
 8001c48:	4a21      	ldr	r2, [pc, #132]	@ (8001cd0 <MX_ADC1_Init+0x9c>)
 8001c4a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001ccc <MX_ADC1_Init+0x98>)
 8001c4e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001c52:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c54:	4b1d      	ldr	r3, [pc, #116]	@ (8001ccc <MX_ADC1_Init+0x98>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001c5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001ccc <MX_ADC1_Init+0x98>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c60:	4b1a      	ldr	r3, [pc, #104]	@ (8001ccc <MX_ADC1_Init+0x98>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c66:	4b19      	ldr	r3, [pc, #100]	@ (8001ccc <MX_ADC1_Init+0x98>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c6e:	4b17      	ldr	r3, [pc, #92]	@ (8001ccc <MX_ADC1_Init+0x98>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c74:	4b15      	ldr	r3, [pc, #84]	@ (8001ccc <MX_ADC1_Init+0x98>)
 8001c76:	4a17      	ldr	r2, [pc, #92]	@ (8001cd4 <MX_ADC1_Init+0xa0>)
 8001c78:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c7a:	4b14      	ldr	r3, [pc, #80]	@ (8001ccc <MX_ADC1_Init+0x98>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001c80:	4b12      	ldr	r3, [pc, #72]	@ (8001ccc <MX_ADC1_Init+0x98>)
 8001c82:	2201      	movs	r2, #1
 8001c84:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c86:	4b11      	ldr	r3, [pc, #68]	@ (8001ccc <MX_ADC1_Init+0x98>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001ccc <MX_ADC1_Init+0x98>)
 8001c90:	2201      	movs	r2, #1
 8001c92:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c94:	480d      	ldr	r0, [pc, #52]	@ (8001ccc <MX_ADC1_Init+0x98>)
 8001c96:	f001 f81d 	bl	8002cd4 <HAL_ADC_Init>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001ca0:	f000 fb6a 	bl	8002378 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001ca4:	2306      	movs	r3, #6
 8001ca6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001cac:	2301      	movs	r3, #1
 8001cae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cb0:	463b      	mov	r3, r7
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4805      	ldr	r0, [pc, #20]	@ (8001ccc <MX_ADC1_Init+0x98>)
 8001cb6:	f001 f9d1 	bl	800305c <HAL_ADC_ConfigChannel>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001cc0:	f000 fb5a 	bl	8002378 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cc4:	bf00      	nop
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20000210 	.word	0x20000210
 8001cd0:	40012000 	.word	0x40012000
 8001cd4:	0f000001 	.word	0x0f000001

08001cd8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cdc:	4b12      	ldr	r3, [pc, #72]	@ (8001d28 <MX_I2C1_Init+0x50>)
 8001cde:	4a13      	ldr	r2, [pc, #76]	@ (8001d2c <MX_I2C1_Init+0x54>)
 8001ce0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ce2:	4b11      	ldr	r3, [pc, #68]	@ (8001d28 <MX_I2C1_Init+0x50>)
 8001ce4:	4a12      	ldr	r2, [pc, #72]	@ (8001d30 <MX_I2C1_Init+0x58>)
 8001ce6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d28 <MX_I2C1_Init+0x50>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001cee:	4b0e      	ldr	r3, [pc, #56]	@ (8001d28 <MX_I2C1_Init+0x50>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d28 <MX_I2C1_Init+0x50>)
 8001cf6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001cfa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8001d28 <MX_I2C1_Init+0x50>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d02:	4b09      	ldr	r3, [pc, #36]	@ (8001d28 <MX_I2C1_Init+0x50>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d08:	4b07      	ldr	r3, [pc, #28]	@ (8001d28 <MX_I2C1_Init+0x50>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d0e:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <MX_I2C1_Init+0x50>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d14:	4804      	ldr	r0, [pc, #16]	@ (8001d28 <MX_I2C1_Init+0x50>)
 8001d16:	f002 faad 	bl	8004274 <HAL_I2C_Init>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d20:	f000 fb2a 	bl	8002378 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d24:	bf00      	nop
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000258 	.word	0x20000258
 8001d2c:	40005400 	.word	0x40005400
 8001d30:	000186a0 	.word	0x000186a0

08001d34 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001d3a:	1d3b      	adds	r3, r7, #4
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001d48:	2300      	movs	r3, #0
 8001d4a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001d4c:	4b24      	ldr	r3, [pc, #144]	@ (8001de0 <MX_RTC_Init+0xac>)
 8001d4e:	4a25      	ldr	r2, [pc, #148]	@ (8001de4 <MX_RTC_Init+0xb0>)
 8001d50:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001d52:	4b23      	ldr	r3, [pc, #140]	@ (8001de0 <MX_RTC_Init+0xac>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001d58:	4b21      	ldr	r3, [pc, #132]	@ (8001de0 <MX_RTC_Init+0xac>)
 8001d5a:	227f      	movs	r2, #127	@ 0x7f
 8001d5c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001d5e:	4b20      	ldr	r3, [pc, #128]	@ (8001de0 <MX_RTC_Init+0xac>)
 8001d60:	22ff      	movs	r2, #255	@ 0xff
 8001d62:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001d64:	4b1e      	ldr	r3, [pc, #120]	@ (8001de0 <MX_RTC_Init+0xac>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001d6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001de0 <MX_RTC_Init+0xac>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001d70:	4b1b      	ldr	r3, [pc, #108]	@ (8001de0 <MX_RTC_Init+0xac>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d76:	481a      	ldr	r0, [pc, #104]	@ (8001de0 <MX_RTC_Init+0xac>)
 8001d78:	f003 fd8e 	bl	8005898 <HAL_RTC_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001d82:	f000 faf9 	bl	8002378 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d92:	2300      	movs	r3, #0
 8001d94:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d96:	2300      	movs	r3, #0
 8001d98:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001d9a:	1d3b      	adds	r3, r7, #4
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	4619      	mov	r1, r3
 8001da0:	480f      	ldr	r0, [pc, #60]	@ (8001de0 <MX_RTC_Init+0xac>)
 8001da2:	f003 fdfc 	bl	800599e <HAL_RTC_SetTime>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001dac:	f000 fae4 	bl	8002378 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001db0:	2301      	movs	r3, #1
 8001db2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;
 8001db4:	2304      	movs	r3, #4
 8001db6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001db8:	2301      	movs	r3, #1
 8001dba:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001dc0:	463b      	mov	r3, r7
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4806      	ldr	r0, [pc, #24]	@ (8001de0 <MX_RTC_Init+0xac>)
 8001dc8:	f003 fe83 	bl	8005ad2 <HAL_RTC_SetDate>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001dd2:	f000 fad1 	bl	8002378 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001dd6:	bf00      	nop
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	200002ac 	.word	0x200002ac
 8001de4:	40002800 	.word	0x40002800

08001de8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b096      	sub	sp, #88	@ 0x58
 8001dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dee:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	605a      	str	r2, [r3, #4]
 8001df8:	609a      	str	r2, [r3, #8]
 8001dfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dfc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	605a      	str	r2, [r3, #4]
 8001e10:	609a      	str	r2, [r3, #8]
 8001e12:	60da      	str	r2, [r3, #12]
 8001e14:	611a      	str	r2, [r3, #16]
 8001e16:	615a      	str	r2, [r3, #20]
 8001e18:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e1a:	1d3b      	adds	r3, r7, #4
 8001e1c:	2220      	movs	r2, #32
 8001e1e:	2100      	movs	r1, #0
 8001e20:	4618      	mov	r0, r3
 8001e22:	f007 f9ba 	bl	800919a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e26:	4b3f      	ldr	r3, [pc, #252]	@ (8001f24 <MX_TIM1_Init+0x13c>)
 8001e28:	4a3f      	ldr	r2, [pc, #252]	@ (8001f28 <MX_TIM1_Init+0x140>)
 8001e2a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e2c:	4b3d      	ldr	r3, [pc, #244]	@ (8001f24 <MX_TIM1_Init+0x13c>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e32:	4b3c      	ldr	r3, [pc, #240]	@ (8001f24 <MX_TIM1_Init+0x13c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1500;
 8001e38:	4b3a      	ldr	r3, [pc, #232]	@ (8001f24 <MX_TIM1_Init+0x13c>)
 8001e3a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001e3e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e40:	4b38      	ldr	r3, [pc, #224]	@ (8001f24 <MX_TIM1_Init+0x13c>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e46:	4b37      	ldr	r3, [pc, #220]	@ (8001f24 <MX_TIM1_Init+0x13c>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e4c:	4b35      	ldr	r3, [pc, #212]	@ (8001f24 <MX_TIM1_Init+0x13c>)
 8001e4e:	2280      	movs	r2, #128	@ 0x80
 8001e50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e52:	4834      	ldr	r0, [pc, #208]	@ (8001f24 <MX_TIM1_Init+0x13c>)
 8001e54:	f003 ff62 	bl	8005d1c <HAL_TIM_Base_Init>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001e5e:	f000 fa8b 	bl	8002378 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e66:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e68:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	482d      	ldr	r0, [pc, #180]	@ (8001f24 <MX_TIM1_Init+0x13c>)
 8001e70:	f004 fbb8 	bl	80065e4 <HAL_TIM_ConfigClockSource>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001e7a:	f000 fa7d 	bl	8002378 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e7e:	4829      	ldr	r0, [pc, #164]	@ (8001f24 <MX_TIM1_Init+0x13c>)
 8001e80:	f003 ff9b 	bl	8005dba <HAL_TIM_PWM_Init>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001e8a:	f000 fa75 	bl	8002378 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e92:	2300      	movs	r3, #0
 8001e94:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e96:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4821      	ldr	r0, [pc, #132]	@ (8001f24 <MX_TIM1_Init+0x13c>)
 8001e9e:	f005 f8ed 	bl	800707c <HAL_TIMEx_MasterConfigSynchronization>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001ea8:	f000 fa66 	bl	8002378 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eac:	2360      	movs	r3, #96	@ 0x60
 8001eae:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 750;
 8001eb0:	f240 23ee 	movw	r3, #750	@ 0x2ee
 8001eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001ebe:	2304      	movs	r3, #4
 8001ec0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001eca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ece:	2200      	movs	r2, #0
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4814      	ldr	r0, [pc, #80]	@ (8001f24 <MX_TIM1_Init+0x13c>)
 8001ed4:	f004 fac4 	bl	8006460 <HAL_TIM_PWM_ConfigChannel>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001ede:	f000 fa4b 	bl	8002378 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ef6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001efa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001efc:	2300      	movs	r3, #0
 8001efe:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	4619      	mov	r1, r3
 8001f04:	4807      	ldr	r0, [pc, #28]	@ (8001f24 <MX_TIM1_Init+0x13c>)
 8001f06:	f005 f927 	bl	8007158 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001f10:	f000 fa32 	bl	8002378 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f14:	4803      	ldr	r0, [pc, #12]	@ (8001f24 <MX_TIM1_Init+0x13c>)
 8001f16:	f000 fb95 	bl	8002644 <HAL_TIM_MspPostInit>

}
 8001f1a:	bf00      	nop
 8001f1c:	3758      	adds	r7, #88	@ 0x58
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	200002cc 	.word	0x200002cc
 8001f28:	40010000 	.word	0x40010000

08001f2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08a      	sub	sp, #40	@ 0x28
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f32:	f107 0318 	add.w	r3, r7, #24
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	605a      	str	r2, [r3, #4]
 8001f3c:	609a      	str	r2, [r3, #8]
 8001f3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f40:	f107 0310 	add.w	r3, r7, #16
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001f4a:	463b      	mov	r3, r7
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f56:	4b33      	ldr	r3, [pc, #204]	@ (8002024 <MX_TIM2_Init+0xf8>)
 8001f58:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f5c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f5e:	4b31      	ldr	r3, [pc, #196]	@ (8002024 <MX_TIM2_Init+0xf8>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f64:	4b2f      	ldr	r3, [pc, #188]	@ (8002024 <MX_TIM2_Init+0xf8>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001f6a:	4b2e      	ldr	r3, [pc, #184]	@ (8002024 <MX_TIM2_Init+0xf8>)
 8001f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f70:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f72:	4b2c      	ldr	r3, [pc, #176]	@ (8002024 <MX_TIM2_Init+0xf8>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f78:	4b2a      	ldr	r3, [pc, #168]	@ (8002024 <MX_TIM2_Init+0xf8>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f7e:	4829      	ldr	r0, [pc, #164]	@ (8002024 <MX_TIM2_Init+0xf8>)
 8001f80:	f003 fecc 	bl	8005d1c <HAL_TIM_Base_Init>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001f8a:	f000 f9f5 	bl	8002378 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f92:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f94:	f107 0318 	add.w	r3, r7, #24
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4822      	ldr	r0, [pc, #136]	@ (8002024 <MX_TIM2_Init+0xf8>)
 8001f9c:	f004 fb22 	bl	80065e4 <HAL_TIM_ConfigClockSource>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001fa6:	f000 f9e7 	bl	8002378 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001faa:	481e      	ldr	r0, [pc, #120]	@ (8002024 <MX_TIM2_Init+0xf8>)
 8001fac:	f004 f872 	bl	8006094 <HAL_TIM_IC_Init>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001fb6:	f000 f9df 	bl	8002378 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fc2:	f107 0310 	add.w	r3, r7, #16
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4816      	ldr	r0, [pc, #88]	@ (8002024 <MX_TIM2_Init+0xf8>)
 8001fca:	f005 f857 	bl	800707c <HAL_TIMEx_MasterConfigSynchronization>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001fd4:	f000 f9d0 	bl	8002378 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001fe8:	463b      	mov	r3, r7
 8001fea:	2200      	movs	r2, #0
 8001fec:	4619      	mov	r1, r3
 8001fee:	480d      	ldr	r0, [pc, #52]	@ (8002024 <MX_TIM2_Init+0xf8>)
 8001ff0:	f004 f999 	bl	8006326 <HAL_TIM_IC_ConfigChannel>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001ffa:	f000 f9bd 	bl	8002378 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001ffe:	2302      	movs	r3, #2
 8002000:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002002:	2302      	movs	r3, #2
 8002004:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002006:	463b      	mov	r3, r7
 8002008:	2204      	movs	r2, #4
 800200a:	4619      	mov	r1, r3
 800200c:	4805      	ldr	r0, [pc, #20]	@ (8002024 <MX_TIM2_Init+0xf8>)
 800200e:	f004 f98a 	bl	8006326 <HAL_TIM_IC_ConfigChannel>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8002018:	f000 f9ae 	bl	8002378 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800201c:	bf00      	nop
 800201e:	3728      	adds	r7, #40	@ 0x28
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	20000314 	.word	0x20000314

08002028 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08e      	sub	sp, #56	@ 0x38
 800202c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800202e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	605a      	str	r2, [r3, #4]
 8002038:	609a      	str	r2, [r3, #8]
 800203a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800203c:	f107 0320 	add.w	r3, r7, #32
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002046:	1d3b      	adds	r3, r7, #4
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	60da      	str	r2, [r3, #12]
 8002052:	611a      	str	r2, [r3, #16]
 8002054:	615a      	str	r2, [r3, #20]
 8002056:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002058:	4b2c      	ldr	r3, [pc, #176]	@ (800210c <MX_TIM3_Init+0xe4>)
 800205a:	4a2d      	ldr	r2, [pc, #180]	@ (8002110 <MX_TIM3_Init+0xe8>)
 800205c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800205e:	4b2b      	ldr	r3, [pc, #172]	@ (800210c <MX_TIM3_Init+0xe4>)
 8002060:	2200      	movs	r2, #0
 8002062:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002064:	4b29      	ldr	r3, [pc, #164]	@ (800210c <MX_TIM3_Init+0xe4>)
 8002066:	2200      	movs	r2, #0
 8002068:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800206a:	4b28      	ldr	r3, [pc, #160]	@ (800210c <MX_TIM3_Init+0xe4>)
 800206c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002070:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002072:	4b26      	ldr	r3, [pc, #152]	@ (800210c <MX_TIM3_Init+0xe4>)
 8002074:	2200      	movs	r2, #0
 8002076:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002078:	4b24      	ldr	r3, [pc, #144]	@ (800210c <MX_TIM3_Init+0xe4>)
 800207a:	2200      	movs	r2, #0
 800207c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800207e:	4823      	ldr	r0, [pc, #140]	@ (800210c <MX_TIM3_Init+0xe4>)
 8002080:	f003 fe4c 	bl	8005d1c <HAL_TIM_Base_Init>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800208a:	f000 f975 	bl	8002378 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800208e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002092:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002094:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002098:	4619      	mov	r1, r3
 800209a:	481c      	ldr	r0, [pc, #112]	@ (800210c <MX_TIM3_Init+0xe4>)
 800209c:	f004 faa2 	bl	80065e4 <HAL_TIM_ConfigClockSource>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80020a6:	f000 f967 	bl	8002378 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80020aa:	4818      	ldr	r0, [pc, #96]	@ (800210c <MX_TIM3_Init+0xe4>)
 80020ac:	f003 fe85 	bl	8005dba <HAL_TIM_PWM_Init>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80020b6:	f000 f95f 	bl	8002378 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ba:	2300      	movs	r3, #0
 80020bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020be:	2300      	movs	r3, #0
 80020c0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020c2:	f107 0320 	add.w	r3, r7, #32
 80020c6:	4619      	mov	r1, r3
 80020c8:	4810      	ldr	r0, [pc, #64]	@ (800210c <MX_TIM3_Init+0xe4>)
 80020ca:	f004 ffd7 	bl	800707c <HAL_TIMEx_MasterConfigSynchronization>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80020d4:	f000 f950 	bl	8002378 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020d8:	2360      	movs	r3, #96	@ 0x60
 80020da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020dc:	2300      	movs	r3, #0
 80020de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020e0:	2300      	movs	r3, #0
 80020e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020e8:	1d3b      	adds	r3, r7, #4
 80020ea:	2204      	movs	r2, #4
 80020ec:	4619      	mov	r1, r3
 80020ee:	4807      	ldr	r0, [pc, #28]	@ (800210c <MX_TIM3_Init+0xe4>)
 80020f0:	f004 f9b6 	bl	8006460 <HAL_TIM_PWM_ConfigChannel>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80020fa:	f000 f93d 	bl	8002378 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80020fe:	4803      	ldr	r0, [pc, #12]	@ (800210c <MX_TIM3_Init+0xe4>)
 8002100:	f000 faa0 	bl	8002644 <HAL_TIM_MspPostInit>

}
 8002104:	bf00      	nop
 8002106:	3738      	adds	r7, #56	@ 0x38
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	2000035c 	.word	0x2000035c
 8002110:	40000400 	.word	0x40000400

08002114 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002118:	4b11      	ldr	r3, [pc, #68]	@ (8002160 <MX_USART1_UART_Init+0x4c>)
 800211a:	4a12      	ldr	r2, [pc, #72]	@ (8002164 <MX_USART1_UART_Init+0x50>)
 800211c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800211e:	4b10      	ldr	r3, [pc, #64]	@ (8002160 <MX_USART1_UART_Init+0x4c>)
 8002120:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8002124:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002126:	4b0e      	ldr	r3, [pc, #56]	@ (8002160 <MX_USART1_UART_Init+0x4c>)
 8002128:	2200      	movs	r2, #0
 800212a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800212c:	4b0c      	ldr	r3, [pc, #48]	@ (8002160 <MX_USART1_UART_Init+0x4c>)
 800212e:	2200      	movs	r2, #0
 8002130:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002132:	4b0b      	ldr	r3, [pc, #44]	@ (8002160 <MX_USART1_UART_Init+0x4c>)
 8002134:	2200      	movs	r2, #0
 8002136:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002138:	4b09      	ldr	r3, [pc, #36]	@ (8002160 <MX_USART1_UART_Init+0x4c>)
 800213a:	220c      	movs	r2, #12
 800213c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800213e:	4b08      	ldr	r3, [pc, #32]	@ (8002160 <MX_USART1_UART_Init+0x4c>)
 8002140:	2200      	movs	r2, #0
 8002142:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002144:	4b06      	ldr	r3, [pc, #24]	@ (8002160 <MX_USART1_UART_Init+0x4c>)
 8002146:	2200      	movs	r2, #0
 8002148:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800214a:	4805      	ldr	r0, [pc, #20]	@ (8002160 <MX_USART1_UART_Init+0x4c>)
 800214c:	f005 f88f 	bl	800726e <HAL_UART_Init>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002156:	f000 f90f 	bl	8002378 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	200003a4 	.word	0x200003a4
 8002164:	40011000 	.word	0x40011000

08002168 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	607b      	str	r3, [r7, #4]
 8002172:	4b10      	ldr	r3, [pc, #64]	@ (80021b4 <MX_DMA_Init+0x4c>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002176:	4a0f      	ldr	r2, [pc, #60]	@ (80021b4 <MX_DMA_Init+0x4c>)
 8002178:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800217c:	6313      	str	r3, [r2, #48]	@ 0x30
 800217e:	4b0d      	ldr	r3, [pc, #52]	@ (80021b4 <MX_DMA_Init+0x4c>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002182:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002186:	607b      	str	r3, [r7, #4]
 8002188:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800218a:	2200      	movs	r2, #0
 800218c:	2100      	movs	r1, #0
 800218e:	203a      	movs	r0, #58	@ 0x3a
 8002190:	f001 fa5d 	bl	800364e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002194:	203a      	movs	r0, #58	@ 0x3a
 8002196:	f001 fa76 	bl	8003686 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800219a:	2200      	movs	r2, #0
 800219c:	2100      	movs	r1, #0
 800219e:	2046      	movs	r0, #70	@ 0x46
 80021a0:	f001 fa55 	bl	800364e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80021a4:	2046      	movs	r0, #70	@ 0x46
 80021a6:	f001 fa6e 	bl	8003686 <HAL_NVIC_EnableIRQ>

}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40023800 	.word	0x40023800

080021b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b088      	sub	sp, #32
 80021bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021be:	f107 030c 	add.w	r3, r7, #12
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	605a      	str	r2, [r3, #4]
 80021c8:	609a      	str	r2, [r3, #8]
 80021ca:	60da      	str	r2, [r3, #12]
 80021cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	4b4c      	ldr	r3, [pc, #304]	@ (8002304 <MX_GPIO_Init+0x14c>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d6:	4a4b      	ldr	r2, [pc, #300]	@ (8002304 <MX_GPIO_Init+0x14c>)
 80021d8:	f043 0304 	orr.w	r3, r3, #4
 80021dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021de:	4b49      	ldr	r3, [pc, #292]	@ (8002304 <MX_GPIO_Init+0x14c>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	60bb      	str	r3, [r7, #8]
 80021e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	607b      	str	r3, [r7, #4]
 80021ee:	4b45      	ldr	r3, [pc, #276]	@ (8002304 <MX_GPIO_Init+0x14c>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f2:	4a44      	ldr	r2, [pc, #272]	@ (8002304 <MX_GPIO_Init+0x14c>)
 80021f4:	f043 0301 	orr.w	r3, r3, #1
 80021f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021fa:	4b42      	ldr	r3, [pc, #264]	@ (8002304 <MX_GPIO_Init+0x14c>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	607b      	str	r3, [r7, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	603b      	str	r3, [r7, #0]
 800220a:	4b3e      	ldr	r3, [pc, #248]	@ (8002304 <MX_GPIO_Init+0x14c>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220e:	4a3d      	ldr	r2, [pc, #244]	@ (8002304 <MX_GPIO_Init+0x14c>)
 8002210:	f043 0302 	orr.w	r3, r3, #2
 8002214:	6313      	str	r3, [r2, #48]	@ 0x30
 8002216:	4b3b      	ldr	r3, [pc, #236]	@ (8002304 <MX_GPIO_Init+0x14c>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	603b      	str	r3, [r7, #0]
 8002220:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002222:	2200      	movs	r2, #0
 8002224:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002228:	4837      	ldr	r0, [pc, #220]	@ (8002308 <MX_GPIO_Init+0x150>)
 800222a:	f001 ffe5 	bl	80041f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZ_Pin|DIRECTION_2_Pin, GPIO_PIN_RESET);
 800222e:	2200      	movs	r2, #0
 8002230:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8002234:	4835      	ldr	r0, [pc, #212]	@ (800230c <MX_GPIO_Init+0x154>)
 8002236:	f001 ffdf 	bl	80041f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STOP_2_Pin|STOP_DRIVER_Pin|DIRECTION_Pin, GPIO_PIN_RESET);
 800223a:	2200      	movs	r2, #0
 800223c:	f44f 4118 	mov.w	r1, #38912	@ 0x9800
 8002240:	4833      	ldr	r0, [pc, #204]	@ (8002310 <MX_GPIO_Init+0x158>)
 8002242:	f001 ffd9 	bl	80041f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002246:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800224a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800224c:	2301      	movs	r3, #1
 800224e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002254:	2300      	movs	r3, #0
 8002256:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002258:	f107 030c 	add.w	r3, r7, #12
 800225c:	4619      	mov	r1, r3
 800225e:	482a      	ldr	r0, [pc, #168]	@ (8002308 <MX_GPIO_Init+0x150>)
 8002260:	f001 fe2e 	bl	8003ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZ_Pin DIRECTION_2_Pin */
  GPIO_InitStruct.Pin = BUZZ_Pin|DIRECTION_2_Pin;
 8002264:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002268:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800226a:	2301      	movs	r3, #1
 800226c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002272:	2300      	movs	r3, #0
 8002274:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002276:	f107 030c 	add.w	r3, r7, #12
 800227a:	4619      	mov	r1, r3
 800227c:	4823      	ldr	r0, [pc, #140]	@ (800230c <MX_GPIO_Init+0x154>)
 800227e:	f001 fe1f 	bl	8003ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STOP_2_Pin STOP_DRIVER_Pin DIRECTION_Pin */
  GPIO_InitStruct.Pin = STOP_2_Pin|STOP_DRIVER_Pin|DIRECTION_Pin;
 8002282:	f44f 4318 	mov.w	r3, #38912	@ 0x9800
 8002286:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002288:	2301      	movs	r3, #1
 800228a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002290:	2300      	movs	r3, #0
 8002292:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002294:	f107 030c 	add.w	r3, r7, #12
 8002298:	4619      	mov	r1, r3
 800229a:	481d      	ldr	r0, [pc, #116]	@ (8002310 <MX_GPIO_Init+0x158>)
 800229c:	f001 fe10 	bl	8003ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIRECT_BUTTON_Pin */
  GPIO_InitStruct.Pin = DIRECT_BUTTON_Pin;
 80022a0:	2308      	movs	r3, #8
 80022a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022a4:	2300      	movs	r3, #0
 80022a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DIRECT_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80022ac:	f107 030c 	add.w	r3, r7, #12
 80022b0:	4619      	mov	r1, r3
 80022b2:	4816      	ldr	r0, [pc, #88]	@ (800230c <MX_GPIO_Init+0x154>)
 80022b4:	f001 fe04 	bl	8003ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MODE_BUT_Pin */
  GPIO_InitStruct.Pin = MODE_BUT_Pin;
 80022b8:	2310      	movs	r3, #16
 80022ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022bc:	2300      	movs	r3, #0
 80022be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022c0:	2301      	movs	r3, #1
 80022c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MODE_BUT_GPIO_Port, &GPIO_InitStruct);
 80022c4:	f107 030c 	add.w	r3, r7, #12
 80022c8:	4619      	mov	r1, r3
 80022ca:	4810      	ldr	r0, [pc, #64]	@ (800230c <MX_GPIO_Init+0x154>)
 80022cc:	f001 fdf8 	bl	8003ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Counter_Pin */
  GPIO_InitStruct.Pin = Counter_Pin;
 80022d0:	2320      	movs	r3, #32
 80022d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022d4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80022d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Counter_GPIO_Port, &GPIO_InitStruct);
 80022de:	f107 030c 	add.w	r3, r7, #12
 80022e2:	4619      	mov	r1, r3
 80022e4:	4809      	ldr	r0, [pc, #36]	@ (800230c <MX_GPIO_Init+0x154>)
 80022e6:	f001 fdeb 	bl	8003ec0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80022ea:	2200      	movs	r2, #0
 80022ec:	2100      	movs	r1, #0
 80022ee:	2017      	movs	r0, #23
 80022f0:	f001 f9ad 	bl	800364e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80022f4:	2017      	movs	r0, #23
 80022f6:	f001 f9c6 	bl	8003686 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022fa:	bf00      	nop
 80022fc:	3720      	adds	r7, #32
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40023800 	.word	0x40023800
 8002308:	40020800 	.word	0x40020800
 800230c:	40020400 	.word	0x40020400
 8002310:	40020000 	.word	0x40020000

08002314 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	460b      	mov	r3, r1
 800231e:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a0f      	ldr	r2, [pc, #60]	@ (8002364 <HAL_UARTEx_RxEventCallback+0x50>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d117      	bne.n	800235a <HAL_UARTEx_RxEventCallback+0x46>
	{
		//lastActivityTime = HAL_GetTick();
		LED_1_ON;
 800232a:	2200      	movs	r2, #0
 800232c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002330:	480d      	ldr	r0, [pc, #52]	@ (8002368 <HAL_UARTEx_RxEventCallback+0x54>)
 8002332:	f001 ff61 	bl	80041f8 <HAL_GPIO_WritePin>

	    __HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 8002336:	4b0d      	ldr	r3, [pc, #52]	@ (800236c <HAL_UARTEx_RxEventCallback+0x58>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68da      	ldr	r2, [r3, #12]
 800233c:	4b0b      	ldr	r3, [pc, #44]	@ (800236c <HAL_UARTEx_RxEventCallback+0x58>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0210 	bic.w	r2, r2, #16
 8002344:	60da      	str	r2, [r3, #12]

	    HAL_DMA_Abort(&hdma_usart1_rx);
 8002346:	480a      	ldr	r0, [pc, #40]	@ (8002370 <HAL_UARTEx_RxEventCallback+0x5c>)
 8002348:	f001 fabe 	bl	80038c8 <HAL_DMA_Abort>
	    uint16_t    received_length = Size;
 800234c:	887b      	ldrh	r3, [r7, #2]
 800234e:	81fb      	strh	r3, [r7, #14]
	    process_received_data(rx_buffer, received_length);
 8002350:	89fb      	ldrh	r3, [r7, #14]
 8002352:	4619      	mov	r1, r3
 8002354:	4807      	ldr	r0, [pc, #28]	@ (8002374 <HAL_UARTEx_RxEventCallback+0x60>)
 8002356:	f7fe ff1b 	bl	8001190 <process_received_data>

	}
}
 800235a:	bf00      	nop
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40011000 	.word	0x40011000
 8002368:	40020800 	.word	0x40020800
 800236c:	200003a4 	.word	0x200003a4
 8002370:	200003ec 	.word	0x200003ec
 8002374:	200001f0 	.word	0x200001f0

08002378 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800237c:	b672      	cpsid	i
}
 800237e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002380:	bf00      	nop
 8002382:	e7fd      	b.n	8002380 <Error_Handler+0x8>

08002384 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	607b      	str	r3, [r7, #4]
 800238e:	4b13      	ldr	r3, [pc, #76]	@ (80023dc <HAL_MspInit+0x58>)
 8002390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002392:	4a12      	ldr	r2, [pc, #72]	@ (80023dc <HAL_MspInit+0x58>)
 8002394:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002398:	6453      	str	r3, [r2, #68]	@ 0x44
 800239a:	4b10      	ldr	r3, [pc, #64]	@ (80023dc <HAL_MspInit+0x58>)
 800239c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800239e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023a2:	607b      	str	r3, [r7, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	603b      	str	r3, [r7, #0]
 80023aa:	4b0c      	ldr	r3, [pc, #48]	@ (80023dc <HAL_MspInit+0x58>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ae:	4a0b      	ldr	r2, [pc, #44]	@ (80023dc <HAL_MspInit+0x58>)
 80023b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80023b6:	4b09      	ldr	r3, [pc, #36]	@ (80023dc <HAL_MspInit+0x58>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023be:	603b      	str	r3, [r7, #0]
 80023c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80023c2:	2200      	movs	r2, #0
 80023c4:	2100      	movs	r1, #0
 80023c6:	2005      	movs	r0, #5
 80023c8:	f001 f941 	bl	800364e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80023cc:	2005      	movs	r0, #5
 80023ce:	f001 f95a 	bl	8003686 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023d2:	bf00      	nop
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40023800 	.word	0x40023800

080023e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08a      	sub	sp, #40	@ 0x28
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e8:	f107 0314 	add.w	r3, r7, #20
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	605a      	str	r2, [r3, #4]
 80023f2:	609a      	str	r2, [r3, #8]
 80023f4:	60da      	str	r2, [r3, #12]
 80023f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a17      	ldr	r2, [pc, #92]	@ (800245c <HAL_ADC_MspInit+0x7c>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d127      	bne.n	8002452 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	4b16      	ldr	r3, [pc, #88]	@ (8002460 <HAL_ADC_MspInit+0x80>)
 8002408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800240a:	4a15      	ldr	r2, [pc, #84]	@ (8002460 <HAL_ADC_MspInit+0x80>)
 800240c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002410:	6453      	str	r3, [r2, #68]	@ 0x44
 8002412:	4b13      	ldr	r3, [pc, #76]	@ (8002460 <HAL_ADC_MspInit+0x80>)
 8002414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002416:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800241a:	613b      	str	r3, [r7, #16]
 800241c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	60fb      	str	r3, [r7, #12]
 8002422:	4b0f      	ldr	r3, [pc, #60]	@ (8002460 <HAL_ADC_MspInit+0x80>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002426:	4a0e      	ldr	r2, [pc, #56]	@ (8002460 <HAL_ADC_MspInit+0x80>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	6313      	str	r3, [r2, #48]	@ 0x30
 800242e:	4b0c      	ldr	r3, [pc, #48]	@ (8002460 <HAL_ADC_MspInit+0x80>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = INP_1_Pin|INP_2_Pin|SPEED_Pin|Pedal_Pin;
 800243a:	2378      	movs	r3, #120	@ 0x78
 800243c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800243e:	2303      	movs	r3, #3
 8002440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002446:	f107 0314 	add.w	r3, r7, #20
 800244a:	4619      	mov	r1, r3
 800244c:	4805      	ldr	r0, [pc, #20]	@ (8002464 <HAL_ADC_MspInit+0x84>)
 800244e:	f001 fd37 	bl	8003ec0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002452:	bf00      	nop
 8002454:	3728      	adds	r7, #40	@ 0x28
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40012000 	.word	0x40012000
 8002460:	40023800 	.word	0x40023800
 8002464:	40020000 	.word	0x40020000

08002468 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b08a      	sub	sp, #40	@ 0x28
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002470:	f107 0314 	add.w	r3, r7, #20
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	605a      	str	r2, [r3, #4]
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	60da      	str	r2, [r3, #12]
 800247e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a19      	ldr	r2, [pc, #100]	@ (80024ec <HAL_I2C_MspInit+0x84>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d12b      	bne.n	80024e2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	613b      	str	r3, [r7, #16]
 800248e:	4b18      	ldr	r3, [pc, #96]	@ (80024f0 <HAL_I2C_MspInit+0x88>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002492:	4a17      	ldr	r2, [pc, #92]	@ (80024f0 <HAL_I2C_MspInit+0x88>)
 8002494:	f043 0302 	orr.w	r3, r3, #2
 8002498:	6313      	str	r3, [r2, #48]	@ 0x30
 800249a:	4b15      	ldr	r3, [pc, #84]	@ (80024f0 <HAL_I2C_MspInit+0x88>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	613b      	str	r3, [r7, #16]
 80024a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024a6:	23c0      	movs	r3, #192	@ 0xc0
 80024a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024aa:	2312      	movs	r3, #18
 80024ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b2:	2303      	movs	r3, #3
 80024b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024b6:	2304      	movs	r3, #4
 80024b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ba:	f107 0314 	add.w	r3, r7, #20
 80024be:	4619      	mov	r1, r3
 80024c0:	480c      	ldr	r0, [pc, #48]	@ (80024f4 <HAL_I2C_MspInit+0x8c>)
 80024c2:	f001 fcfd 	bl	8003ec0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	4b09      	ldr	r3, [pc, #36]	@ (80024f0 <HAL_I2C_MspInit+0x88>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ce:	4a08      	ldr	r2, [pc, #32]	@ (80024f0 <HAL_I2C_MspInit+0x88>)
 80024d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80024d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80024d6:	4b06      	ldr	r3, [pc, #24]	@ (80024f0 <HAL_I2C_MspInit+0x88>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80024e2:	bf00      	nop
 80024e4:	3728      	adds	r7, #40	@ 0x28
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40005400 	.word	0x40005400
 80024f0:	40023800 	.word	0x40023800
 80024f4:	40020400 	.word	0x40020400

080024f8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b088      	sub	sp, #32
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002500:	f107 030c 	add.w	r3, r7, #12
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	60da      	str	r2, [r3, #12]
 800250e:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a0c      	ldr	r2, [pc, #48]	@ (8002548 <HAL_RTC_MspInit+0x50>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d111      	bne.n	800253e <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800251a:	2302      	movs	r3, #2
 800251c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800251e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002522:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002524:	f107 030c 	add.w	r3, r7, #12
 8002528:	4618      	mov	r0, r3
 800252a:	f003 f8c7 	bl	80056bc <HAL_RCCEx_PeriphCLKConfig>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002534:	f7ff ff20 	bl	8002378 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002538:	4b04      	ldr	r3, [pc, #16]	@ (800254c <HAL_RTC_MspInit+0x54>)
 800253a:	2201      	movs	r2, #1
 800253c:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800253e:	bf00      	nop
 8002540:	3720      	adds	r7, #32
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40002800 	.word	0x40002800
 800254c:	42470e3c 	.word	0x42470e3c

08002550 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b08c      	sub	sp, #48	@ 0x30
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002558:	f107 031c 	add.w	r3, r7, #28
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	605a      	str	r2, [r3, #4]
 8002562:	609a      	str	r2, [r3, #8]
 8002564:	60da      	str	r2, [r3, #12]
 8002566:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a31      	ldr	r2, [pc, #196]	@ (8002634 <HAL_TIM_Base_MspInit+0xe4>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d10e      	bne.n	8002590 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	61bb      	str	r3, [r7, #24]
 8002576:	4b30      	ldr	r3, [pc, #192]	@ (8002638 <HAL_TIM_Base_MspInit+0xe8>)
 8002578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257a:	4a2f      	ldr	r2, [pc, #188]	@ (8002638 <HAL_TIM_Base_MspInit+0xe8>)
 800257c:	f043 0301 	orr.w	r3, r3, #1
 8002580:	6453      	str	r3, [r2, #68]	@ 0x44
 8002582:	4b2d      	ldr	r3, [pc, #180]	@ (8002638 <HAL_TIM_Base_MspInit+0xe8>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	61bb      	str	r3, [r7, #24]
 800258c:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800258e:	e04c      	b.n	800262a <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM2)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002598:	d134      	bne.n	8002604 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	4b26      	ldr	r3, [pc, #152]	@ (8002638 <HAL_TIM_Base_MspInit+0xe8>)
 80025a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a2:	4a25      	ldr	r2, [pc, #148]	@ (8002638 <HAL_TIM_Base_MspInit+0xe8>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80025aa:	4b23      	ldr	r3, [pc, #140]	@ (8002638 <HAL_TIM_Base_MspInit+0xe8>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002638 <HAL_TIM_Base_MspInit+0xe8>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025be:	4a1e      	ldr	r2, [pc, #120]	@ (8002638 <HAL_TIM_Base_MspInit+0xe8>)
 80025c0:	f043 0301 	orr.w	r3, r3, #1
 80025c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002638 <HAL_TIM_Base_MspInit+0xe8>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Counter_2_Pin;
 80025d2:	2301      	movs	r3, #1
 80025d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d6:	2302      	movs	r3, #2
 80025d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025de:	2300      	movs	r3, #0
 80025e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025e2:	2301      	movs	r3, #1
 80025e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Counter_2_GPIO_Port, &GPIO_InitStruct);
 80025e6:	f107 031c 	add.w	r3, r7, #28
 80025ea:	4619      	mov	r1, r3
 80025ec:	4813      	ldr	r0, [pc, #76]	@ (800263c <HAL_TIM_Base_MspInit+0xec>)
 80025ee:	f001 fc67 	bl	8003ec0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80025f2:	2200      	movs	r2, #0
 80025f4:	2100      	movs	r1, #0
 80025f6:	201c      	movs	r0, #28
 80025f8:	f001 f829 	bl	800364e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025fc:	201c      	movs	r0, #28
 80025fe:	f001 f842 	bl	8003686 <HAL_NVIC_EnableIRQ>
}
 8002602:	e012      	b.n	800262a <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM3)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a0d      	ldr	r2, [pc, #52]	@ (8002640 <HAL_TIM_Base_MspInit+0xf0>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d10d      	bne.n	800262a <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	4b09      	ldr	r3, [pc, #36]	@ (8002638 <HAL_TIM_Base_MspInit+0xe8>)
 8002614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002616:	4a08      	ldr	r2, [pc, #32]	@ (8002638 <HAL_TIM_Base_MspInit+0xe8>)
 8002618:	f043 0302 	orr.w	r3, r3, #2
 800261c:	6413      	str	r3, [r2, #64]	@ 0x40
 800261e:	4b06      	ldr	r3, [pc, #24]	@ (8002638 <HAL_TIM_Base_MspInit+0xe8>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]
}
 800262a:	bf00      	nop
 800262c:	3730      	adds	r7, #48	@ 0x30
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40010000 	.word	0x40010000
 8002638:	40023800 	.word	0x40023800
 800263c:	40020000 	.word	0x40020000
 8002640:	40000400 	.word	0x40000400

08002644 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08a      	sub	sp, #40	@ 0x28
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264c:	f107 0314 	add.w	r3, r7, #20
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	60da      	str	r2, [r3, #12]
 800265a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a34      	ldr	r2, [pc, #208]	@ (8002734 <HAL_TIM_MspPostInit+0xf0>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d13e      	bne.n	80026e4 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	4b33      	ldr	r3, [pc, #204]	@ (8002738 <HAL_TIM_MspPostInit+0xf4>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266e:	4a32      	ldr	r2, [pc, #200]	@ (8002738 <HAL_TIM_MspPostInit+0xf4>)
 8002670:	f043 0302 	orr.w	r3, r3, #2
 8002674:	6313      	str	r3, [r2, #48]	@ 0x30
 8002676:	4b30      	ldr	r3, [pc, #192]	@ (8002738 <HAL_TIM_MspPostInit+0xf4>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	613b      	str	r3, [r7, #16]
 8002680:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	4b2c      	ldr	r3, [pc, #176]	@ (8002738 <HAL_TIM_MspPostInit+0xf4>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268a:	4a2b      	ldr	r2, [pc, #172]	@ (8002738 <HAL_TIM_MspPostInit+0xf4>)
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	6313      	str	r3, [r2, #48]	@ 0x30
 8002692:	4b29      	ldr	r3, [pc, #164]	@ (8002738 <HAL_TIM_MspPostInit+0xf4>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB13     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800269e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a4:	2302      	movs	r3, #2
 80026a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ac:	2300      	movs	r3, #0
 80026ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80026b0:	2301      	movs	r3, #1
 80026b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b4:	f107 0314 	add.w	r3, r7, #20
 80026b8:	4619      	mov	r1, r3
 80026ba:	4820      	ldr	r0, [pc, #128]	@ (800273c <HAL_TIM_MspPostInit+0xf8>)
 80026bc:	f001 fc00 	bl	8003ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80026c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c6:	2302      	movs	r3, #2
 80026c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ce:	2300      	movs	r3, #0
 80026d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80026d2:	2301      	movs	r3, #1
 80026d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d6:	f107 0314 	add.w	r3, r7, #20
 80026da:	4619      	mov	r1, r3
 80026dc:	4818      	ldr	r0, [pc, #96]	@ (8002740 <HAL_TIM_MspPostInit+0xfc>)
 80026de:	f001 fbef 	bl	8003ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80026e2:	e022      	b.n	800272a <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM3)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a16      	ldr	r2, [pc, #88]	@ (8002744 <HAL_TIM_MspPostInit+0x100>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d11d      	bne.n	800272a <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	4b11      	ldr	r3, [pc, #68]	@ (8002738 <HAL_TIM_MspPostInit+0xf4>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f6:	4a10      	ldr	r2, [pc, #64]	@ (8002738 <HAL_TIM_MspPostInit+0xf4>)
 80026f8:	f043 0301 	orr.w	r3, r3, #1
 80026fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80026fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002738 <HAL_TIM_MspPostInit+0xf4>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	60bb      	str	r3, [r7, #8]
 8002708:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800270a:	2380      	movs	r3, #128	@ 0x80
 800270c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270e:	2302      	movs	r3, #2
 8002710:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002712:	2300      	movs	r3, #0
 8002714:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002716:	2300      	movs	r3, #0
 8002718:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800271a:	2302      	movs	r3, #2
 800271c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800271e:	f107 0314 	add.w	r3, r7, #20
 8002722:	4619      	mov	r1, r3
 8002724:	4806      	ldr	r0, [pc, #24]	@ (8002740 <HAL_TIM_MspPostInit+0xfc>)
 8002726:	f001 fbcb 	bl	8003ec0 <HAL_GPIO_Init>
}
 800272a:	bf00      	nop
 800272c:	3728      	adds	r7, #40	@ 0x28
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40010000 	.word	0x40010000
 8002738:	40023800 	.word	0x40023800
 800273c:	40020400 	.word	0x40020400
 8002740:	40020000 	.word	0x40020000
 8002744:	40000400 	.word	0x40000400

08002748 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08a      	sub	sp, #40	@ 0x28
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002750:	f107 0314 	add.w	r3, r7, #20
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	609a      	str	r2, [r3, #8]
 800275c:	60da      	str	r2, [r3, #12]
 800275e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a55      	ldr	r2, [pc, #340]	@ (80028bc <HAL_UART_MspInit+0x174>)
 8002766:	4293      	cmp	r3, r2
 8002768:	f040 80a3 	bne.w	80028b2 <HAL_UART_MspInit+0x16a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800276c:	2300      	movs	r3, #0
 800276e:	613b      	str	r3, [r7, #16]
 8002770:	4b53      	ldr	r3, [pc, #332]	@ (80028c0 <HAL_UART_MspInit+0x178>)
 8002772:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002774:	4a52      	ldr	r2, [pc, #328]	@ (80028c0 <HAL_UART_MspInit+0x178>)
 8002776:	f043 0310 	orr.w	r3, r3, #16
 800277a:	6453      	str	r3, [r2, #68]	@ 0x44
 800277c:	4b50      	ldr	r3, [pc, #320]	@ (80028c0 <HAL_UART_MspInit+0x178>)
 800277e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002780:	f003 0310 	and.w	r3, r3, #16
 8002784:	613b      	str	r3, [r7, #16]
 8002786:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002788:	2300      	movs	r3, #0
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	4b4c      	ldr	r3, [pc, #304]	@ (80028c0 <HAL_UART_MspInit+0x178>)
 800278e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002790:	4a4b      	ldr	r2, [pc, #300]	@ (80028c0 <HAL_UART_MspInit+0x178>)
 8002792:	f043 0301 	orr.w	r3, r3, #1
 8002796:	6313      	str	r3, [r2, #48]	@ 0x30
 8002798:	4b49      	ldr	r3, [pc, #292]	@ (80028c0 <HAL_UART_MspInit+0x178>)
 800279a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80027a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027aa:	2302      	movs	r3, #2
 80027ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b2:	2303      	movs	r3, #3
 80027b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027b6:	2307      	movs	r3, #7
 80027b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ba:	f107 0314 	add.w	r3, r7, #20
 80027be:	4619      	mov	r1, r3
 80027c0:	4840      	ldr	r0, [pc, #256]	@ (80028c4 <HAL_UART_MspInit+0x17c>)
 80027c2:	f001 fb7d 	bl	8003ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80027c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027cc:	2302      	movs	r3, #2
 80027ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027d0:	2301      	movs	r3, #1
 80027d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d4:	2303      	movs	r3, #3
 80027d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027d8:	2307      	movs	r3, #7
 80027da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027dc:	f107 0314 	add.w	r3, r7, #20
 80027e0:	4619      	mov	r1, r3
 80027e2:	4838      	ldr	r0, [pc, #224]	@ (80028c4 <HAL_UART_MspInit+0x17c>)
 80027e4:	f001 fb6c 	bl	8003ec0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80027e8:	4b37      	ldr	r3, [pc, #220]	@ (80028c8 <HAL_UART_MspInit+0x180>)
 80027ea:	4a38      	ldr	r2, [pc, #224]	@ (80028cc <HAL_UART_MspInit+0x184>)
 80027ec:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80027ee:	4b36      	ldr	r3, [pc, #216]	@ (80028c8 <HAL_UART_MspInit+0x180>)
 80027f0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80027f4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027f6:	4b34      	ldr	r3, [pc, #208]	@ (80028c8 <HAL_UART_MspInit+0x180>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027fc:	4b32      	ldr	r3, [pc, #200]	@ (80028c8 <HAL_UART_MspInit+0x180>)
 80027fe:	2200      	movs	r2, #0
 8002800:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002802:	4b31      	ldr	r3, [pc, #196]	@ (80028c8 <HAL_UART_MspInit+0x180>)
 8002804:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002808:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800280a:	4b2f      	ldr	r3, [pc, #188]	@ (80028c8 <HAL_UART_MspInit+0x180>)
 800280c:	2200      	movs	r2, #0
 800280e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002810:	4b2d      	ldr	r3, [pc, #180]	@ (80028c8 <HAL_UART_MspInit+0x180>)
 8002812:	2200      	movs	r2, #0
 8002814:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002816:	4b2c      	ldr	r3, [pc, #176]	@ (80028c8 <HAL_UART_MspInit+0x180>)
 8002818:	2200      	movs	r2, #0
 800281a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800281c:	4b2a      	ldr	r3, [pc, #168]	@ (80028c8 <HAL_UART_MspInit+0x180>)
 800281e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002822:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002824:	4b28      	ldr	r3, [pc, #160]	@ (80028c8 <HAL_UART_MspInit+0x180>)
 8002826:	2200      	movs	r2, #0
 8002828:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800282a:	4827      	ldr	r0, [pc, #156]	@ (80028c8 <HAL_UART_MspInit+0x180>)
 800282c:	f000 ff46 	bl	80036bc <HAL_DMA_Init>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 8002836:	f7ff fd9f 	bl	8002378 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a22      	ldr	r2, [pc, #136]	@ (80028c8 <HAL_UART_MspInit+0x180>)
 800283e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002840:	4a21      	ldr	r2, [pc, #132]	@ (80028c8 <HAL_UART_MspInit+0x180>)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002846:	4b22      	ldr	r3, [pc, #136]	@ (80028d0 <HAL_UART_MspInit+0x188>)
 8002848:	4a22      	ldr	r2, [pc, #136]	@ (80028d4 <HAL_UART_MspInit+0x18c>)
 800284a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800284c:	4b20      	ldr	r3, [pc, #128]	@ (80028d0 <HAL_UART_MspInit+0x188>)
 800284e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002852:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002854:	4b1e      	ldr	r3, [pc, #120]	@ (80028d0 <HAL_UART_MspInit+0x188>)
 8002856:	2240      	movs	r2, #64	@ 0x40
 8002858:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800285a:	4b1d      	ldr	r3, [pc, #116]	@ (80028d0 <HAL_UART_MspInit+0x188>)
 800285c:	2200      	movs	r2, #0
 800285e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002860:	4b1b      	ldr	r3, [pc, #108]	@ (80028d0 <HAL_UART_MspInit+0x188>)
 8002862:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002866:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002868:	4b19      	ldr	r3, [pc, #100]	@ (80028d0 <HAL_UART_MspInit+0x188>)
 800286a:	2200      	movs	r2, #0
 800286c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800286e:	4b18      	ldr	r3, [pc, #96]	@ (80028d0 <HAL_UART_MspInit+0x188>)
 8002870:	2200      	movs	r2, #0
 8002872:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002874:	4b16      	ldr	r3, [pc, #88]	@ (80028d0 <HAL_UART_MspInit+0x188>)
 8002876:	2200      	movs	r2, #0
 8002878:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800287a:	4b15      	ldr	r3, [pc, #84]	@ (80028d0 <HAL_UART_MspInit+0x188>)
 800287c:	2200      	movs	r2, #0
 800287e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002880:	4b13      	ldr	r3, [pc, #76]	@ (80028d0 <HAL_UART_MspInit+0x188>)
 8002882:	2200      	movs	r2, #0
 8002884:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002886:	4812      	ldr	r0, [pc, #72]	@ (80028d0 <HAL_UART_MspInit+0x188>)
 8002888:	f000 ff18 	bl	80036bc <HAL_DMA_Init>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <HAL_UART_MspInit+0x14e>
    {
      Error_Handler();
 8002892:	f7ff fd71 	bl	8002378 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a0d      	ldr	r2, [pc, #52]	@ (80028d0 <HAL_UART_MspInit+0x188>)
 800289a:	639a      	str	r2, [r3, #56]	@ 0x38
 800289c:	4a0c      	ldr	r2, [pc, #48]	@ (80028d0 <HAL_UART_MspInit+0x188>)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80028a2:	2200      	movs	r2, #0
 80028a4:	2100      	movs	r1, #0
 80028a6:	2025      	movs	r0, #37	@ 0x25
 80028a8:	f000 fed1 	bl	800364e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028ac:	2025      	movs	r0, #37	@ 0x25
 80028ae:	f000 feea 	bl	8003686 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80028b2:	bf00      	nop
 80028b4:	3728      	adds	r7, #40	@ 0x28
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40011000 	.word	0x40011000
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40020000 	.word	0x40020000
 80028c8:	200003ec 	.word	0x200003ec
 80028cc:	40026440 	.word	0x40026440
 80028d0:	2000044c 	.word	0x2000044c
 80028d4:	400264b8 	.word	0x400264b8

080028d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028dc:	bf00      	nop
 80028de:	e7fd      	b.n	80028dc <NMI_Handler+0x4>

080028e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028e4:	bf00      	nop
 80028e6:	e7fd      	b.n	80028e4 <HardFault_Handler+0x4>

080028e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028ec:	bf00      	nop
 80028ee:	e7fd      	b.n	80028ec <MemManage_Handler+0x4>

080028f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028f4:	bf00      	nop
 80028f6:	e7fd      	b.n	80028f4 <BusFault_Handler+0x4>

080028f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028fc:	bf00      	nop
 80028fe:	e7fd      	b.n	80028fc <UsageFault_Handler+0x4>

08002900 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002904:	bf00      	nop
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800290e:	b480      	push	{r7}
 8002910:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002912:	bf00      	nop
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002920:	bf00      	nop
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800292e:	f000 f98d 	bl	8002c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002932:	bf00      	nop
 8002934:	bd80      	pop	{r7, pc}

08002936 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002936:	b480      	push	{r7}
 8002938:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800293a:	bf00      	nop
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Counter_Pin);
 8002948:	2020      	movs	r0, #32
 800294a:	f001 fc6f 	bl	800422c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
	...

08002954 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002958:	4802      	ldr	r0, [pc, #8]	@ (8002964 <TIM2_IRQHandler+0x10>)
 800295a:	f003 fbf4 	bl	8006146 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800295e:	bf00      	nop
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	20000314 	.word	0x20000314

08002968 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800296c:	4802      	ldr	r0, [pc, #8]	@ (8002978 <USART1_IRQHandler+0x10>)
 800296e:	f004 fd9d 	bl	80074ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	200003a4 	.word	0x200003a4

0800297c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002980:	4802      	ldr	r0, [pc, #8]	@ (800298c <DMA2_Stream2_IRQHandler+0x10>)
 8002982:	f001 f833 	bl	80039ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	200003ec 	.word	0x200003ec

08002990 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002994:	4802      	ldr	r0, [pc, #8]	@ (80029a0 <DMA2_Stream7_IRQHandler+0x10>)
 8002996:	f001 f829 	bl	80039ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	2000044c 	.word	0x2000044c

080029a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  return 1;
 80029a8:	2301      	movs	r3, #1
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <_kill>:

int _kill(int pid, int sig)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029be:	f006 fc3f 	bl	8009240 <__errno>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2216      	movs	r2, #22
 80029c6:	601a      	str	r2, [r3, #0]
  return -1;
 80029c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <_exit>:

void _exit (int status)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80029dc:	f04f 31ff 	mov.w	r1, #4294967295
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7ff ffe7 	bl	80029b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80029e6:	bf00      	nop
 80029e8:	e7fd      	b.n	80029e6 <_exit+0x12>

080029ea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b086      	sub	sp, #24
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	60f8      	str	r0, [r7, #12]
 80029f2:	60b9      	str	r1, [r7, #8]
 80029f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029f6:	2300      	movs	r3, #0
 80029f8:	617b      	str	r3, [r7, #20]
 80029fa:	e00a      	b.n	8002a12 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029fc:	f3af 8000 	nop.w
 8002a00:	4601      	mov	r1, r0
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	1c5a      	adds	r2, r3, #1
 8002a06:	60ba      	str	r2, [r7, #8]
 8002a08:	b2ca      	uxtb	r2, r1
 8002a0a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	617b      	str	r3, [r7, #20]
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	dbf0      	blt.n	80029fc <_read+0x12>
  }

  return len;
 8002a1a:	687b      	ldr	r3, [r7, #4]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a30:	2300      	movs	r3, #0
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	e009      	b.n	8002a4a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	1c5a      	adds	r2, r3, #1
 8002a3a:	60ba      	str	r2, [r7, #8]
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	3301      	adds	r3, #1
 8002a48:	617b      	str	r3, [r7, #20]
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	dbf1      	blt.n	8002a36 <_write+0x12>
  }
  return len;
 8002a52:	687b      	ldr	r3, [r7, #4]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <_close>:

int _close(int file)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a84:	605a      	str	r2, [r3, #4]
  return 0;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <_isatty>:

int _isatty(int file)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a9c:	2301      	movs	r3, #1
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b085      	sub	sp, #20
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	60f8      	str	r0, [r7, #12]
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002acc:	4a14      	ldr	r2, [pc, #80]	@ (8002b20 <_sbrk+0x5c>)
 8002ace:	4b15      	ldr	r3, [pc, #84]	@ (8002b24 <_sbrk+0x60>)
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ad8:	4b13      	ldr	r3, [pc, #76]	@ (8002b28 <_sbrk+0x64>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d102      	bne.n	8002ae6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ae0:	4b11      	ldr	r3, [pc, #68]	@ (8002b28 <_sbrk+0x64>)
 8002ae2:	4a12      	ldr	r2, [pc, #72]	@ (8002b2c <_sbrk+0x68>)
 8002ae4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ae6:	4b10      	ldr	r3, [pc, #64]	@ (8002b28 <_sbrk+0x64>)
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4413      	add	r3, r2
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d207      	bcs.n	8002b04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002af4:	f006 fba4 	bl	8009240 <__errno>
 8002af8:	4603      	mov	r3, r0
 8002afa:	220c      	movs	r2, #12
 8002afc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002afe:	f04f 33ff 	mov.w	r3, #4294967295
 8002b02:	e009      	b.n	8002b18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b04:	4b08      	ldr	r3, [pc, #32]	@ (8002b28 <_sbrk+0x64>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b0a:	4b07      	ldr	r3, [pc, #28]	@ (8002b28 <_sbrk+0x64>)
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4413      	add	r3, r2
 8002b12:	4a05      	ldr	r2, [pc, #20]	@ (8002b28 <_sbrk+0x64>)
 8002b14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b16:	68fb      	ldr	r3, [r7, #12]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	20010000 	.word	0x20010000
 8002b24:	00000400 	.word	0x00000400
 8002b28:	200004e8 	.word	0x200004e8
 8002b2c:	20000640 	.word	0x20000640

08002b30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b34:	4b06      	ldr	r3, [pc, #24]	@ (8002b50 <SystemInit+0x20>)
 8002b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b3a:	4a05      	ldr	r2, [pc, #20]	@ (8002b50 <SystemInit+0x20>)
 8002b3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b44:	bf00      	nop
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	e000ed00 	.word	0xe000ed00

08002b54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b8c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002b58:	f7ff ffea 	bl	8002b30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b5c:	480c      	ldr	r0, [pc, #48]	@ (8002b90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b5e:	490d      	ldr	r1, [pc, #52]	@ (8002b94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b60:	4a0d      	ldr	r2, [pc, #52]	@ (8002b98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b64:	e002      	b.n	8002b6c <LoopCopyDataInit>

08002b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b6a:	3304      	adds	r3, #4

08002b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b70:	d3f9      	bcc.n	8002b66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b72:	4a0a      	ldr	r2, [pc, #40]	@ (8002b9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b74:	4c0a      	ldr	r4, [pc, #40]	@ (8002ba0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b78:	e001      	b.n	8002b7e <LoopFillZerobss>

08002b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b7c:	3204      	adds	r2, #4

08002b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b80:	d3fb      	bcc.n	8002b7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b82:	f006 fb63 	bl	800924c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b86:	f7fe fd3b 	bl	8001600 <main>
  bx  lr    
 8002b8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b8c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b94:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002b98:	0800b870 	.word	0x0800b870
  ldr r2, =_sbss
 8002b9c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002ba0:	2000063c 	.word	0x2000063c

08002ba4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ba4:	e7fe      	b.n	8002ba4 <ADC_IRQHandler>
	...

08002ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bac:	4b0e      	ldr	r3, [pc, #56]	@ (8002be8 <HAL_Init+0x40>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a0d      	ldr	r2, [pc, #52]	@ (8002be8 <HAL_Init+0x40>)
 8002bb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8002be8 <HAL_Init+0x40>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a0a      	ldr	r2, [pc, #40]	@ (8002be8 <HAL_Init+0x40>)
 8002bbe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002bc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bc4:	4b08      	ldr	r3, [pc, #32]	@ (8002be8 <HAL_Init+0x40>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a07      	ldr	r2, [pc, #28]	@ (8002be8 <HAL_Init+0x40>)
 8002bca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bd0:	2003      	movs	r0, #3
 8002bd2:	f000 fd31 	bl	8003638 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bd6:	200f      	movs	r0, #15
 8002bd8:	f000 f808 	bl	8002bec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bdc:	f7ff fbd2 	bl	8002384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40023c00 	.word	0x40023c00

08002bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bf4:	4b12      	ldr	r3, [pc, #72]	@ (8002c40 <HAL_InitTick+0x54>)
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	4b12      	ldr	r3, [pc, #72]	@ (8002c44 <HAL_InitTick+0x58>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 fd49 	bl	80036a2 <HAL_SYSTICK_Config>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e00e      	b.n	8002c38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b0f      	cmp	r3, #15
 8002c1e:	d80a      	bhi.n	8002c36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c20:	2200      	movs	r2, #0
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	f04f 30ff 	mov.w	r0, #4294967295
 8002c28:	f000 fd11 	bl	800364e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c2c:	4a06      	ldr	r2, [pc, #24]	@ (8002c48 <HAL_InitTick+0x5c>)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
 8002c34:	e000      	b.n	8002c38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	20000000 	.word	0x20000000
 8002c44:	20000008 	.word	0x20000008
 8002c48:	20000004 	.word	0x20000004

08002c4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c50:	4b06      	ldr	r3, [pc, #24]	@ (8002c6c <HAL_IncTick+0x20>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	461a      	mov	r2, r3
 8002c56:	4b06      	ldr	r3, [pc, #24]	@ (8002c70 <HAL_IncTick+0x24>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	4a04      	ldr	r2, [pc, #16]	@ (8002c70 <HAL_IncTick+0x24>)
 8002c5e:	6013      	str	r3, [r2, #0]
}
 8002c60:	bf00      	nop
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	20000008 	.word	0x20000008
 8002c70:	200004ec 	.word	0x200004ec

08002c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  return uwTick;
 8002c78:	4b03      	ldr	r3, [pc, #12]	@ (8002c88 <HAL_GetTick+0x14>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	200004ec 	.word	0x200004ec

08002c8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c94:	f7ff ffee 	bl	8002c74 <HAL_GetTick>
 8002c98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca4:	d005      	beq.n	8002cb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd0 <HAL_Delay+0x44>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	461a      	mov	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	4413      	add	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cb2:	bf00      	nop
 8002cb4:	f7ff ffde 	bl	8002c74 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d8f7      	bhi.n	8002cb4 <HAL_Delay+0x28>
  {
  }
}
 8002cc4:	bf00      	nop
 8002cc6:	bf00      	nop
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	20000008 	.word	0x20000008

08002cd4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e033      	b.n	8002d52 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d109      	bne.n	8002d06 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7ff fb74 	bl	80023e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0a:	f003 0310 	and.w	r3, r3, #16
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d118      	bne.n	8002d44 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d16:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002d1a:	f023 0302 	bic.w	r3, r3, #2
 8002d1e:	f043 0202 	orr.w	r2, r3, #2
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 faba 	bl	80032a0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d36:	f023 0303 	bic.w	r3, r3, #3
 8002d3a:	f043 0201 	orr.w	r2, r3, #1
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d42:	e001      	b.n	8002d48 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
	...

08002d5c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002d64:	2300      	movs	r3, #0
 8002d66:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d101      	bne.n	8002d76 <HAL_ADC_Start+0x1a>
 8002d72:	2302      	movs	r3, #2
 8002d74:	e097      	b.n	8002ea6 <HAL_ADC_Start+0x14a>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d018      	beq.n	8002dbe <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f042 0201 	orr.w	r2, r2, #1
 8002d9a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d9c:	4b45      	ldr	r3, [pc, #276]	@ (8002eb4 <HAL_ADC_Start+0x158>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a45      	ldr	r2, [pc, #276]	@ (8002eb8 <HAL_ADC_Start+0x15c>)
 8002da2:	fba2 2303 	umull	r2, r3, r2, r3
 8002da6:	0c9a      	lsrs	r2, r3, #18
 8002da8:	4613      	mov	r3, r2
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	4413      	add	r3, r2
 8002dae:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002db0:	e002      	b.n	8002db8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	3b01      	subs	r3, #1
 8002db6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1f9      	bne.n	8002db2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d15f      	bne.n	8002e8c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002dd4:	f023 0301 	bic.w	r3, r3, #1
 8002dd8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d007      	beq.n	8002dfe <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002df6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e0a:	d106      	bne.n	8002e1a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e10:	f023 0206 	bic.w	r2, r3, #6
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	645a      	str	r2, [r3, #68]	@ 0x44
 8002e18:	e002      	b.n	8002e20 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e28:	4b24      	ldr	r3, [pc, #144]	@ (8002ebc <HAL_ADC_Start+0x160>)
 8002e2a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002e34:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f003 031f 	and.w	r3, r3, #31
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10f      	bne.n	8002e62 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d129      	bne.n	8002ea4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002e5e:	609a      	str	r2, [r3, #8]
 8002e60:	e020      	b.n	8002ea4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a16      	ldr	r2, [pc, #88]	@ (8002ec0 <HAL_ADC_Start+0x164>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d11b      	bne.n	8002ea4 <HAL_ADC_Start+0x148>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d114      	bne.n	8002ea4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002e88:	609a      	str	r2, [r3, #8]
 8002e8a:	e00b      	b.n	8002ea4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e90:	f043 0210 	orr.w	r2, r3, #16
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9c:	f043 0201 	orr.w	r2, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	20000000 	.word	0x20000000
 8002eb8:	431bde83 	.word	0x431bde83
 8002ebc:	40012300 	.word	0x40012300
 8002ec0:	40012000 	.word	0x40012000

08002ec4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d101      	bne.n	8002eda <HAL_ADC_Stop+0x16>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e021      	b.n	8002f1e <HAL_ADC_Stop+0x5a>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 0201 	bic.w	r2, r2, #1
 8002ef0:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d109      	bne.n	8002f14 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f04:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002f08:	f023 0301 	bic.w	r3, r3, #1
 8002f0c:	f043 0201 	orr.w	r2, r3, #1
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b084      	sub	sp, #16
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
 8002f32:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f46:	d113      	bne.n	8002f70 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002f52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f56:	d10b      	bne.n	8002f70 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5c:	f043 0220 	orr.w	r2, r3, #32
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e063      	b.n	8003038 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f70:	f7ff fe80 	bl	8002c74 <HAL_GetTick>
 8002f74:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002f76:	e021      	b.n	8002fbc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7e:	d01d      	beq.n	8002fbc <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d007      	beq.n	8002f96 <HAL_ADC_PollForConversion+0x6c>
 8002f86:	f7ff fe75 	bl	8002c74 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d212      	bcs.n	8002fbc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d00b      	beq.n	8002fbc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa8:	f043 0204 	orr.w	r2, r3, #4
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e03d      	b.n	8003038 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d1d6      	bne.n	8002f78 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f06f 0212 	mvn.w	r2, #18
 8002fd2:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d123      	bne.n	8003036 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d11f      	bne.n	8003036 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ffc:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003000:	2b00      	cmp	r3, #0
 8003002:	d006      	beq.n	8003012 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800300e:	2b00      	cmp	r3, #0
 8003010:	d111      	bne.n	8003036 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003016:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003022:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d105      	bne.n	8003036 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302e:	f043 0201 	orr.w	r2, r3, #1
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800304e:	4618      	mov	r0, r3
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
	...

0800305c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003066:	2300      	movs	r3, #0
 8003068:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003070:	2b01      	cmp	r3, #1
 8003072:	d101      	bne.n	8003078 <HAL_ADC_ConfigChannel+0x1c>
 8003074:	2302      	movs	r3, #2
 8003076:	e105      	b.n	8003284 <HAL_ADC_ConfigChannel+0x228>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2b09      	cmp	r3, #9
 8003086:	d925      	bls.n	80030d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68d9      	ldr	r1, [r3, #12]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	b29b      	uxth	r3, r3
 8003094:	461a      	mov	r2, r3
 8003096:	4613      	mov	r3, r2
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	4413      	add	r3, r2
 800309c:	3b1e      	subs	r3, #30
 800309e:	2207      	movs	r2, #7
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	43da      	mvns	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	400a      	ands	r2, r1
 80030ac:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68d9      	ldr	r1, [r3, #12]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	b29b      	uxth	r3, r3
 80030be:	4618      	mov	r0, r3
 80030c0:	4603      	mov	r3, r0
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	4403      	add	r3, r0
 80030c6:	3b1e      	subs	r3, #30
 80030c8:	409a      	lsls	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	60da      	str	r2, [r3, #12]
 80030d2:	e022      	b.n	800311a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6919      	ldr	r1, [r3, #16]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	b29b      	uxth	r3, r3
 80030e0:	461a      	mov	r2, r3
 80030e2:	4613      	mov	r3, r2
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	4413      	add	r3, r2
 80030e8:	2207      	movs	r2, #7
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	43da      	mvns	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	400a      	ands	r2, r1
 80030f6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6919      	ldr	r1, [r3, #16]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	689a      	ldr	r2, [r3, #8]
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	b29b      	uxth	r3, r3
 8003108:	4618      	mov	r0, r3
 800310a:	4603      	mov	r3, r0
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	4403      	add	r3, r0
 8003110:	409a      	lsls	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b06      	cmp	r3, #6
 8003120:	d824      	bhi.n	800316c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	3b05      	subs	r3, #5
 8003134:	221f      	movs	r2, #31
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	43da      	mvns	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	400a      	ands	r2, r1
 8003142:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	b29b      	uxth	r3, r3
 8003150:	4618      	mov	r0, r3
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	4613      	mov	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	3b05      	subs	r3, #5
 800315e:	fa00 f203 	lsl.w	r2, r0, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	635a      	str	r2, [r3, #52]	@ 0x34
 800316a:	e04c      	b.n	8003206 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	2b0c      	cmp	r3, #12
 8003172:	d824      	bhi.n	80031be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	4613      	mov	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	3b23      	subs	r3, #35	@ 0x23
 8003186:	221f      	movs	r2, #31
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	43da      	mvns	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	400a      	ands	r2, r1
 8003194:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	4618      	mov	r0, r3
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	4613      	mov	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	3b23      	subs	r3, #35	@ 0x23
 80031b0:	fa00 f203 	lsl.w	r2, r0, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80031bc:	e023      	b.n	8003206 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	4613      	mov	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	3b41      	subs	r3, #65	@ 0x41
 80031d0:	221f      	movs	r2, #31
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	43da      	mvns	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	400a      	ands	r2, r1
 80031de:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	4618      	mov	r0, r3
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	4613      	mov	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	3b41      	subs	r3, #65	@ 0x41
 80031fa:	fa00 f203 	lsl.w	r2, r0, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003206:	4b22      	ldr	r3, [pc, #136]	@ (8003290 <HAL_ADC_ConfigChannel+0x234>)
 8003208:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a21      	ldr	r2, [pc, #132]	@ (8003294 <HAL_ADC_ConfigChannel+0x238>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d109      	bne.n	8003228 <HAL_ADC_ConfigChannel+0x1cc>
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2b12      	cmp	r3, #18
 800321a:	d105      	bne.n	8003228 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a19      	ldr	r2, [pc, #100]	@ (8003294 <HAL_ADC_ConfigChannel+0x238>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d123      	bne.n	800327a <HAL_ADC_ConfigChannel+0x21e>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2b10      	cmp	r3, #16
 8003238:	d003      	beq.n	8003242 <HAL_ADC_ConfigChannel+0x1e6>
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2b11      	cmp	r3, #17
 8003240:	d11b      	bne.n	800327a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b10      	cmp	r3, #16
 8003254:	d111      	bne.n	800327a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003256:	4b10      	ldr	r3, [pc, #64]	@ (8003298 <HAL_ADC_ConfigChannel+0x23c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a10      	ldr	r2, [pc, #64]	@ (800329c <HAL_ADC_ConfigChannel+0x240>)
 800325c:	fba2 2303 	umull	r2, r3, r2, r3
 8003260:	0c9a      	lsrs	r2, r3, #18
 8003262:	4613      	mov	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800326c:	e002      	b.n	8003274 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	3b01      	subs	r3, #1
 8003272:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f9      	bne.n	800326e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	40012300 	.word	0x40012300
 8003294:	40012000 	.word	0x40012000
 8003298:	20000000 	.word	0x20000000
 800329c:	431bde83 	.word	0x431bde83

080032a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032a8:	4b79      	ldr	r3, [pc, #484]	@ (8003490 <ADC_Init+0x1f0>)
 80032aa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	431a      	orrs	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80032d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6859      	ldr	r1, [r3, #4]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	021a      	lsls	r2, r3, #8
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80032f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6859      	ldr	r1, [r3, #4]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800331a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6899      	ldr	r1, [r3, #8]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68da      	ldr	r2, [r3, #12]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003332:	4a58      	ldr	r2, [pc, #352]	@ (8003494 <ADC_Init+0x1f4>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d022      	beq.n	800337e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689a      	ldr	r2, [r3, #8]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003346:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6899      	ldr	r1, [r3, #8]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003368:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6899      	ldr	r1, [r3, #8]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	609a      	str	r2, [r3, #8]
 800337c:	e00f      	b.n	800339e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800338c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800339c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0202 	bic.w	r2, r2, #2
 80033ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6899      	ldr	r1, [r3, #8]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	7e1b      	ldrb	r3, [r3, #24]
 80033b8:	005a      	lsls	r2, r3, #1
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d01b      	beq.n	8003404 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685a      	ldr	r2, [r3, #4]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033da:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80033ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6859      	ldr	r1, [r3, #4]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f6:	3b01      	subs	r3, #1
 80033f8:	035a      	lsls	r2, r3, #13
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	605a      	str	r2, [r3, #4]
 8003402:	e007      	b.n	8003414 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003412:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003422:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	3b01      	subs	r3, #1
 8003430:	051a      	lsls	r2, r3, #20
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	430a      	orrs	r2, r1
 8003438:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003448:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6899      	ldr	r1, [r3, #8]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003456:	025a      	lsls	r2, r3, #9
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689a      	ldr	r2, [r3, #8]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800346e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6899      	ldr	r1, [r3, #8]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	029a      	lsls	r2, r3, #10
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	609a      	str	r2, [r3, #8]
}
 8003484:	bf00      	nop
 8003486:	3714      	adds	r7, #20
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	40012300 	.word	0x40012300
 8003494:	0f000001 	.word	0x0f000001

08003498 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034a8:	4b0c      	ldr	r3, [pc, #48]	@ (80034dc <__NVIC_SetPriorityGrouping+0x44>)
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034b4:	4013      	ands	r3, r2
 80034b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034ca:	4a04      	ldr	r2, [pc, #16]	@ (80034dc <__NVIC_SetPriorityGrouping+0x44>)
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	60d3      	str	r3, [r2, #12]
}
 80034d0:	bf00      	nop
 80034d2:	3714      	adds	r7, #20
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	e000ed00 	.word	0xe000ed00

080034e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034e4:	4b04      	ldr	r3, [pc, #16]	@ (80034f8 <__NVIC_GetPriorityGrouping+0x18>)
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	0a1b      	lsrs	r3, r3, #8
 80034ea:	f003 0307 	and.w	r3, r3, #7
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	e000ed00 	.word	0xe000ed00

080034fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	4603      	mov	r3, r0
 8003504:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350a:	2b00      	cmp	r3, #0
 800350c:	db0b      	blt.n	8003526 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800350e:	79fb      	ldrb	r3, [r7, #7]
 8003510:	f003 021f 	and.w	r2, r3, #31
 8003514:	4907      	ldr	r1, [pc, #28]	@ (8003534 <__NVIC_EnableIRQ+0x38>)
 8003516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351a:	095b      	lsrs	r3, r3, #5
 800351c:	2001      	movs	r0, #1
 800351e:	fa00 f202 	lsl.w	r2, r0, r2
 8003522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	e000e100 	.word	0xe000e100

08003538 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	4603      	mov	r3, r0
 8003540:	6039      	str	r1, [r7, #0]
 8003542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003548:	2b00      	cmp	r3, #0
 800354a:	db0a      	blt.n	8003562 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	b2da      	uxtb	r2, r3
 8003550:	490c      	ldr	r1, [pc, #48]	@ (8003584 <__NVIC_SetPriority+0x4c>)
 8003552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003556:	0112      	lsls	r2, r2, #4
 8003558:	b2d2      	uxtb	r2, r2
 800355a:	440b      	add	r3, r1
 800355c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003560:	e00a      	b.n	8003578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	b2da      	uxtb	r2, r3
 8003566:	4908      	ldr	r1, [pc, #32]	@ (8003588 <__NVIC_SetPriority+0x50>)
 8003568:	79fb      	ldrb	r3, [r7, #7]
 800356a:	f003 030f 	and.w	r3, r3, #15
 800356e:	3b04      	subs	r3, #4
 8003570:	0112      	lsls	r2, r2, #4
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	440b      	add	r3, r1
 8003576:	761a      	strb	r2, [r3, #24]
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	e000e100 	.word	0xe000e100
 8003588:	e000ed00 	.word	0xe000ed00

0800358c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800358c:	b480      	push	{r7}
 800358e:	b089      	sub	sp, #36	@ 0x24
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f003 0307 	and.w	r3, r3, #7
 800359e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	f1c3 0307 	rsb	r3, r3, #7
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	bf28      	it	cs
 80035aa:	2304      	movcs	r3, #4
 80035ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	3304      	adds	r3, #4
 80035b2:	2b06      	cmp	r3, #6
 80035b4:	d902      	bls.n	80035bc <NVIC_EncodePriority+0x30>
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	3b03      	subs	r3, #3
 80035ba:	e000      	b.n	80035be <NVIC_EncodePriority+0x32>
 80035bc:	2300      	movs	r3, #0
 80035be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035c0:	f04f 32ff 	mov.w	r2, #4294967295
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	43da      	mvns	r2, r3
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	401a      	ands	r2, r3
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035d4:	f04f 31ff 	mov.w	r1, #4294967295
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	fa01 f303 	lsl.w	r3, r1, r3
 80035de:	43d9      	mvns	r1, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e4:	4313      	orrs	r3, r2
         );
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3724      	adds	r7, #36	@ 0x24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
	...

080035f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3b01      	subs	r3, #1
 8003600:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003604:	d301      	bcc.n	800360a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003606:	2301      	movs	r3, #1
 8003608:	e00f      	b.n	800362a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800360a:	4a0a      	ldr	r2, [pc, #40]	@ (8003634 <SysTick_Config+0x40>)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3b01      	subs	r3, #1
 8003610:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003612:	210f      	movs	r1, #15
 8003614:	f04f 30ff 	mov.w	r0, #4294967295
 8003618:	f7ff ff8e 	bl	8003538 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800361c:	4b05      	ldr	r3, [pc, #20]	@ (8003634 <SysTick_Config+0x40>)
 800361e:	2200      	movs	r2, #0
 8003620:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003622:	4b04      	ldr	r3, [pc, #16]	@ (8003634 <SysTick_Config+0x40>)
 8003624:	2207      	movs	r2, #7
 8003626:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	e000e010 	.word	0xe000e010

08003638 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f7ff ff29 	bl	8003498 <__NVIC_SetPriorityGrouping>
}
 8003646:	bf00      	nop
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800364e:	b580      	push	{r7, lr}
 8003650:	b086      	sub	sp, #24
 8003652:	af00      	add	r7, sp, #0
 8003654:	4603      	mov	r3, r0
 8003656:	60b9      	str	r1, [r7, #8]
 8003658:	607a      	str	r2, [r7, #4]
 800365a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800365c:	2300      	movs	r3, #0
 800365e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003660:	f7ff ff3e 	bl	80034e0 <__NVIC_GetPriorityGrouping>
 8003664:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	68b9      	ldr	r1, [r7, #8]
 800366a:	6978      	ldr	r0, [r7, #20]
 800366c:	f7ff ff8e 	bl	800358c <NVIC_EncodePriority>
 8003670:	4602      	mov	r2, r0
 8003672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003676:	4611      	mov	r1, r2
 8003678:	4618      	mov	r0, r3
 800367a:	f7ff ff5d 	bl	8003538 <__NVIC_SetPriority>
}
 800367e:	bf00      	nop
 8003680:	3718      	adds	r7, #24
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b082      	sub	sp, #8
 800368a:	af00      	add	r7, sp, #0
 800368c:	4603      	mov	r3, r0
 800368e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003694:	4618      	mov	r0, r3
 8003696:	f7ff ff31 	bl	80034fc <__NVIC_EnableIRQ>
}
 800369a:	bf00      	nop
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b082      	sub	sp, #8
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7ff ffa2 	bl	80035f4 <SysTick_Config>
 80036b0:	4603      	mov	r3, r0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
	...

080036bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036c4:	2300      	movs	r3, #0
 80036c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80036c8:	f7ff fad4 	bl	8002c74 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e099      	b.n	800380c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2202      	movs	r2, #2
 80036dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 0201 	bic.w	r2, r2, #1
 80036f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036f8:	e00f      	b.n	800371a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036fa:	f7ff fabb 	bl	8002c74 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b05      	cmp	r3, #5
 8003706:	d908      	bls.n	800371a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2220      	movs	r2, #32
 800370c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2203      	movs	r2, #3
 8003712:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e078      	b.n	800380c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1e8      	bne.n	80036fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	4b38      	ldr	r3, [pc, #224]	@ (8003814 <HAL_DMA_Init+0x158>)
 8003734:	4013      	ands	r3, r2
 8003736:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003746:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003752:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800375e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	4313      	orrs	r3, r2
 800376a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003770:	2b04      	cmp	r3, #4
 8003772:	d107      	bne.n	8003784 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800377c:	4313      	orrs	r3, r2
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	4313      	orrs	r3, r2
 8003782:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f023 0307 	bic.w	r3, r3, #7
 800379a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d117      	bne.n	80037de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00e      	beq.n	80037de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 fb01 	bl	8003dc8 <DMA_CheckFifoParam>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d008      	beq.n	80037de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2240      	movs	r2, #64	@ 0x40
 80037d0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80037da:	2301      	movs	r3, #1
 80037dc:	e016      	b.n	800380c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 fab8 	bl	8003d5c <DMA_CalcBaseAndBitshift>
 80037ec:	4603      	mov	r3, r0
 80037ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037f4:	223f      	movs	r2, #63	@ 0x3f
 80037f6:	409a      	lsls	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3718      	adds	r7, #24
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	f010803f 	.word	0xf010803f

08003818 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
 8003824:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003826:	2300      	movs	r3, #0
 8003828:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800382e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003836:	2b01      	cmp	r3, #1
 8003838:	d101      	bne.n	800383e <HAL_DMA_Start_IT+0x26>
 800383a:	2302      	movs	r3, #2
 800383c:	e040      	b.n	80038c0 <HAL_DMA_Start_IT+0xa8>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b01      	cmp	r3, #1
 8003850:	d12f      	bne.n	80038b2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2202      	movs	r2, #2
 8003856:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	68b9      	ldr	r1, [r7, #8]
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f000 fa4a 	bl	8003d00 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003870:	223f      	movs	r2, #63	@ 0x3f
 8003872:	409a      	lsls	r2, r3
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f042 0216 	orr.w	r2, r2, #22
 8003886:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388c:	2b00      	cmp	r3, #0
 800388e:	d007      	beq.n	80038a0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f042 0208 	orr.w	r2, r2, #8
 800389e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0201 	orr.w	r2, r2, #1
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	e005      	b.n	80038be <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80038ba:	2302      	movs	r3, #2
 80038bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80038be:	7dfb      	ldrb	r3, [r7, #23]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3718      	adds	r7, #24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80038d6:	f7ff f9cd 	bl	8002c74 <HAL_GetTick>
 80038da:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d008      	beq.n	80038fa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2280      	movs	r2, #128	@ 0x80
 80038ec:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e052      	b.n	80039a0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0216 	bic.w	r2, r2, #22
 8003908:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	695a      	ldr	r2, [r3, #20]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003918:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391e:	2b00      	cmp	r3, #0
 8003920:	d103      	bne.n	800392a <HAL_DMA_Abort+0x62>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003926:	2b00      	cmp	r3, #0
 8003928:	d007      	beq.n	800393a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0208 	bic.w	r2, r2, #8
 8003938:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 0201 	bic.w	r2, r2, #1
 8003948:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800394a:	e013      	b.n	8003974 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800394c:	f7ff f992 	bl	8002c74 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b05      	cmp	r3, #5
 8003958:	d90c      	bls.n	8003974 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2220      	movs	r2, #32
 800395e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2203      	movs	r2, #3
 8003964:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e015      	b.n	80039a0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1e4      	bne.n	800394c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003986:	223f      	movs	r2, #63	@ 0x3f
 8003988:	409a      	lsls	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d004      	beq.n	80039c6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2280      	movs	r2, #128	@ 0x80
 80039c0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e00c      	b.n	80039e0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2205      	movs	r2, #5
 80039ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 0201 	bic.w	r2, r2, #1
 80039dc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039f8:	4b8e      	ldr	r3, [pc, #568]	@ (8003c34 <HAL_DMA_IRQHandler+0x248>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a8e      	ldr	r2, [pc, #568]	@ (8003c38 <HAL_DMA_IRQHandler+0x24c>)
 80039fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003a02:	0a9b      	lsrs	r3, r3, #10
 8003a04:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a0a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a16:	2208      	movs	r2, #8
 8003a18:	409a      	lsls	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d01a      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0304 	and.w	r3, r3, #4
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d013      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0204 	bic.w	r2, r2, #4
 8003a3e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a44:	2208      	movs	r2, #8
 8003a46:	409a      	lsls	r2, r3
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a50:	f043 0201 	orr.w	r2, r3, #1
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	409a      	lsls	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	4013      	ands	r3, r2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d012      	beq.n	8003a8e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00b      	beq.n	8003a8e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	409a      	lsls	r2, r3
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a86:	f043 0202 	orr.w	r2, r3, #2
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a92:	2204      	movs	r2, #4
 8003a94:	409a      	lsls	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d012      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00b      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ab0:	2204      	movs	r2, #4
 8003ab2:	409a      	lsls	r2, r3
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003abc:	f043 0204 	orr.w	r2, r3, #4
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ac8:	2210      	movs	r2, #16
 8003aca:	409a      	lsls	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d043      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d03c      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae6:	2210      	movs	r2, #16
 8003ae8:	409a      	lsls	r2, r3
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d018      	beq.n	8003b2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d108      	bne.n	8003b1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d024      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	4798      	blx	r3
 8003b1a:	e01f      	b.n	8003b5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d01b      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	4798      	blx	r3
 8003b2c:	e016      	b.n	8003b5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d107      	bne.n	8003b4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0208 	bic.w	r2, r2, #8
 8003b4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d003      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b60:	2220      	movs	r2, #32
 8003b62:	409a      	lsls	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	4013      	ands	r3, r2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 808f 	beq.w	8003c8c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0310 	and.w	r3, r3, #16
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f000 8087 	beq.w	8003c8c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b82:	2220      	movs	r2, #32
 8003b84:	409a      	lsls	r2, r3
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b05      	cmp	r3, #5
 8003b94:	d136      	bne.n	8003c04 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 0216 	bic.w	r2, r2, #22
 8003ba4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	695a      	ldr	r2, [r3, #20]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003bb4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d103      	bne.n	8003bc6 <HAL_DMA_IRQHandler+0x1da>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d007      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 0208 	bic.w	r2, r2, #8
 8003bd4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bda:	223f      	movs	r2, #63	@ 0x3f
 8003bdc:	409a      	lsls	r2, r3
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d07e      	beq.n	8003cf8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	4798      	blx	r3
        }
        return;
 8003c02:	e079      	b.n	8003cf8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d01d      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10d      	bne.n	8003c3c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d031      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	4798      	blx	r3
 8003c30:	e02c      	b.n	8003c8c <HAL_DMA_IRQHandler+0x2a0>
 8003c32:	bf00      	nop
 8003c34:	20000000 	.word	0x20000000
 8003c38:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d023      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	4798      	blx	r3
 8003c4c:	e01e      	b.n	8003c8c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d10f      	bne.n	8003c7c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 0210 	bic.w	r2, r2, #16
 8003c6a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d003      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d032      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c98:	f003 0301 	and.w	r3, r3, #1
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d022      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2205      	movs	r2, #5
 8003ca4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 0201 	bic.w	r2, r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	60bb      	str	r3, [r7, #8]
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d307      	bcc.n	8003cd4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1f2      	bne.n	8003cb8 <HAL_DMA_IRQHandler+0x2cc>
 8003cd2:	e000      	b.n	8003cd6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003cd4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d005      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	4798      	blx	r3
 8003cf6:	e000      	b.n	8003cfa <HAL_DMA_IRQHandler+0x30e>
        return;
 8003cf8:	bf00      	nop
    }
  }
}
 8003cfa:	3718      	adds	r7, #24
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
 8003d0c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003d1c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	2b40      	cmp	r3, #64	@ 0x40
 8003d2c:	d108      	bne.n	8003d40 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d3e:	e007      	b.n	8003d50 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	60da      	str	r2, [r3, #12]
}
 8003d50:	bf00      	nop
 8003d52:	3714      	adds	r7, #20
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	3b10      	subs	r3, #16
 8003d6c:	4a14      	ldr	r2, [pc, #80]	@ (8003dc0 <DMA_CalcBaseAndBitshift+0x64>)
 8003d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d72:	091b      	lsrs	r3, r3, #4
 8003d74:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d76:	4a13      	ldr	r2, [pc, #76]	@ (8003dc4 <DMA_CalcBaseAndBitshift+0x68>)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2b03      	cmp	r3, #3
 8003d88:	d909      	bls.n	8003d9e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003d92:	f023 0303 	bic.w	r3, r3, #3
 8003d96:	1d1a      	adds	r2, r3, #4
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d9c:	e007      	b.n	8003dae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003da6:	f023 0303 	bic.w	r3, r3, #3
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3714      	adds	r7, #20
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	aaaaaaab 	.word	0xaaaaaaab
 8003dc4:	0800b4e4 	.word	0x0800b4e4

08003dc8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d11f      	bne.n	8003e22 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	2b03      	cmp	r3, #3
 8003de6:	d856      	bhi.n	8003e96 <DMA_CheckFifoParam+0xce>
 8003de8:	a201      	add	r2, pc, #4	@ (adr r2, 8003df0 <DMA_CheckFifoParam+0x28>)
 8003dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dee:	bf00      	nop
 8003df0:	08003e01 	.word	0x08003e01
 8003df4:	08003e13 	.word	0x08003e13
 8003df8:	08003e01 	.word	0x08003e01
 8003dfc:	08003e97 	.word	0x08003e97
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d046      	beq.n	8003e9a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e10:	e043      	b.n	8003e9a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e16:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e1a:	d140      	bne.n	8003e9e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e20:	e03d      	b.n	8003e9e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e2a:	d121      	bne.n	8003e70 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	2b03      	cmp	r3, #3
 8003e30:	d837      	bhi.n	8003ea2 <DMA_CheckFifoParam+0xda>
 8003e32:	a201      	add	r2, pc, #4	@ (adr r2, 8003e38 <DMA_CheckFifoParam+0x70>)
 8003e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e38:	08003e49 	.word	0x08003e49
 8003e3c:	08003e4f 	.word	0x08003e4f
 8003e40:	08003e49 	.word	0x08003e49
 8003e44:	08003e61 	.word	0x08003e61
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e4c:	e030      	b.n	8003eb0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e52:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d025      	beq.n	8003ea6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e5e:	e022      	b.n	8003ea6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e64:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e68:	d11f      	bne.n	8003eaa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e6e:	e01c      	b.n	8003eaa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d903      	bls.n	8003e7e <DMA_CheckFifoParam+0xb6>
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2b03      	cmp	r3, #3
 8003e7a:	d003      	beq.n	8003e84 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e7c:	e018      	b.n	8003eb0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	73fb      	strb	r3, [r7, #15]
      break;
 8003e82:	e015      	b.n	8003eb0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00e      	beq.n	8003eae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	73fb      	strb	r3, [r7, #15]
      break;
 8003e94:	e00b      	b.n	8003eae <DMA_CheckFifoParam+0xe6>
      break;
 8003e96:	bf00      	nop
 8003e98:	e00a      	b.n	8003eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8003e9a:	bf00      	nop
 8003e9c:	e008      	b.n	8003eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8003e9e:	bf00      	nop
 8003ea0:	e006      	b.n	8003eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ea2:	bf00      	nop
 8003ea4:	e004      	b.n	8003eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ea6:	bf00      	nop
 8003ea8:	e002      	b.n	8003eb0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003eaa:	bf00      	nop
 8003eac:	e000      	b.n	8003eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8003eae:	bf00      	nop
    }
  } 
  
  return status; 
 8003eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop

08003ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b089      	sub	sp, #36	@ 0x24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	61fb      	str	r3, [r7, #28]
 8003eda:	e159      	b.n	8004190 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003edc:	2201      	movs	r2, #1
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	4013      	ands	r3, r2
 8003eee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	f040 8148 	bne.w	800418a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f003 0303 	and.w	r3, r3, #3
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d005      	beq.n	8003f12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d130      	bne.n	8003f74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	005b      	lsls	r3, r3, #1
 8003f1c:	2203      	movs	r2, #3
 8003f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f22:	43db      	mvns	r3, r3
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	4013      	ands	r3, r2
 8003f28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	68da      	ldr	r2, [r3, #12]
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	fa02 f303 	lsl.w	r3, r2, r3
 8003f36:	69ba      	ldr	r2, [r7, #24]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f48:	2201      	movs	r2, #1
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	43db      	mvns	r3, r3
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	4013      	ands	r3, r2
 8003f56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	091b      	lsrs	r3, r3, #4
 8003f5e:	f003 0201 	and.w	r2, r3, #1
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	fa02 f303 	lsl.w	r3, r2, r3
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f003 0303 	and.w	r3, r3, #3
 8003f7c:	2b03      	cmp	r3, #3
 8003f7e:	d017      	beq.n	8003fb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	2203      	movs	r2, #3
 8003f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f90:	43db      	mvns	r3, r3
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	4013      	ands	r3, r2
 8003f96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f003 0303 	and.w	r3, r3, #3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d123      	bne.n	8004004 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	08da      	lsrs	r2, r3, #3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3208      	adds	r2, #8
 8003fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	f003 0307 	and.w	r3, r3, #7
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	220f      	movs	r2, #15
 8003fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd8:	43db      	mvns	r3, r3
 8003fda:	69ba      	ldr	r2, [r7, #24]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	691a      	ldr	r2, [r3, #16]
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	f003 0307 	and.w	r3, r3, #7
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	08da      	lsrs	r2, r3, #3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	3208      	adds	r2, #8
 8003ffe:	69b9      	ldr	r1, [r7, #24]
 8004000:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	005b      	lsls	r3, r3, #1
 800400e:	2203      	movs	r2, #3
 8004010:	fa02 f303 	lsl.w	r3, r2, r3
 8004014:	43db      	mvns	r3, r3
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	4013      	ands	r3, r2
 800401a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f003 0203 	and.w	r2, r3, #3
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	fa02 f303 	lsl.w	r3, r2, r3
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	4313      	orrs	r3, r2
 8004030:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 80a2 	beq.w	800418a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004046:	2300      	movs	r3, #0
 8004048:	60fb      	str	r3, [r7, #12]
 800404a:	4b57      	ldr	r3, [pc, #348]	@ (80041a8 <HAL_GPIO_Init+0x2e8>)
 800404c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800404e:	4a56      	ldr	r2, [pc, #344]	@ (80041a8 <HAL_GPIO_Init+0x2e8>)
 8004050:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004054:	6453      	str	r3, [r2, #68]	@ 0x44
 8004056:	4b54      	ldr	r3, [pc, #336]	@ (80041a8 <HAL_GPIO_Init+0x2e8>)
 8004058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800405a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004062:	4a52      	ldr	r2, [pc, #328]	@ (80041ac <HAL_GPIO_Init+0x2ec>)
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	089b      	lsrs	r3, r3, #2
 8004068:	3302      	adds	r3, #2
 800406a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800406e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	f003 0303 	and.w	r3, r3, #3
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	220f      	movs	r2, #15
 800407a:	fa02 f303 	lsl.w	r3, r2, r3
 800407e:	43db      	mvns	r3, r3
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	4013      	ands	r3, r2
 8004084:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a49      	ldr	r2, [pc, #292]	@ (80041b0 <HAL_GPIO_Init+0x2f0>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d019      	beq.n	80040c2 <HAL_GPIO_Init+0x202>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a48      	ldr	r2, [pc, #288]	@ (80041b4 <HAL_GPIO_Init+0x2f4>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d013      	beq.n	80040be <HAL_GPIO_Init+0x1fe>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a47      	ldr	r2, [pc, #284]	@ (80041b8 <HAL_GPIO_Init+0x2f8>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d00d      	beq.n	80040ba <HAL_GPIO_Init+0x1fa>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a46      	ldr	r2, [pc, #280]	@ (80041bc <HAL_GPIO_Init+0x2fc>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d007      	beq.n	80040b6 <HAL_GPIO_Init+0x1f6>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a45      	ldr	r2, [pc, #276]	@ (80041c0 <HAL_GPIO_Init+0x300>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d101      	bne.n	80040b2 <HAL_GPIO_Init+0x1f2>
 80040ae:	2304      	movs	r3, #4
 80040b0:	e008      	b.n	80040c4 <HAL_GPIO_Init+0x204>
 80040b2:	2307      	movs	r3, #7
 80040b4:	e006      	b.n	80040c4 <HAL_GPIO_Init+0x204>
 80040b6:	2303      	movs	r3, #3
 80040b8:	e004      	b.n	80040c4 <HAL_GPIO_Init+0x204>
 80040ba:	2302      	movs	r3, #2
 80040bc:	e002      	b.n	80040c4 <HAL_GPIO_Init+0x204>
 80040be:	2301      	movs	r3, #1
 80040c0:	e000      	b.n	80040c4 <HAL_GPIO_Init+0x204>
 80040c2:	2300      	movs	r3, #0
 80040c4:	69fa      	ldr	r2, [r7, #28]
 80040c6:	f002 0203 	and.w	r2, r2, #3
 80040ca:	0092      	lsls	r2, r2, #2
 80040cc:	4093      	lsls	r3, r2
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040d4:	4935      	ldr	r1, [pc, #212]	@ (80041ac <HAL_GPIO_Init+0x2ec>)
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	089b      	lsrs	r3, r3, #2
 80040da:	3302      	adds	r3, #2
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040e2:	4b38      	ldr	r3, [pc, #224]	@ (80041c4 <HAL_GPIO_Init+0x304>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	43db      	mvns	r3, r3
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	4013      	ands	r3, r2
 80040f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d003      	beq.n	8004106 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	4313      	orrs	r3, r2
 8004104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004106:	4a2f      	ldr	r2, [pc, #188]	@ (80041c4 <HAL_GPIO_Init+0x304>)
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800410c:	4b2d      	ldr	r3, [pc, #180]	@ (80041c4 <HAL_GPIO_Init+0x304>)
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	43db      	mvns	r3, r3
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	4013      	ands	r3, r2
 800411a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d003      	beq.n	8004130 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	4313      	orrs	r3, r2
 800412e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004130:	4a24      	ldr	r2, [pc, #144]	@ (80041c4 <HAL_GPIO_Init+0x304>)
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004136:	4b23      	ldr	r3, [pc, #140]	@ (80041c4 <HAL_GPIO_Init+0x304>)
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	43db      	mvns	r3, r3
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	4013      	ands	r3, r2
 8004144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	4313      	orrs	r3, r2
 8004158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800415a:	4a1a      	ldr	r2, [pc, #104]	@ (80041c4 <HAL_GPIO_Init+0x304>)
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004160:	4b18      	ldr	r3, [pc, #96]	@ (80041c4 <HAL_GPIO_Init+0x304>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	43db      	mvns	r3, r3
 800416a:	69ba      	ldr	r2, [r7, #24]
 800416c:	4013      	ands	r3, r2
 800416e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	4313      	orrs	r3, r2
 8004182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004184:	4a0f      	ldr	r2, [pc, #60]	@ (80041c4 <HAL_GPIO_Init+0x304>)
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	3301      	adds	r3, #1
 800418e:	61fb      	str	r3, [r7, #28]
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	2b0f      	cmp	r3, #15
 8004194:	f67f aea2 	bls.w	8003edc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004198:	bf00      	nop
 800419a:	bf00      	nop
 800419c:	3724      	adds	r7, #36	@ 0x24
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	40023800 	.word	0x40023800
 80041ac:	40013800 	.word	0x40013800
 80041b0:	40020000 	.word	0x40020000
 80041b4:	40020400 	.word	0x40020400
 80041b8:	40020800 	.word	0x40020800
 80041bc:	40020c00 	.word	0x40020c00
 80041c0:	40021000 	.word	0x40021000
 80041c4:	40013c00 	.word	0x40013c00

080041c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	460b      	mov	r3, r1
 80041d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	691a      	ldr	r2, [r3, #16]
 80041d8:	887b      	ldrh	r3, [r7, #2]
 80041da:	4013      	ands	r3, r2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d002      	beq.n	80041e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041e0:	2301      	movs	r3, #1
 80041e2:	73fb      	strb	r3, [r7, #15]
 80041e4:	e001      	b.n	80041ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041e6:	2300      	movs	r3, #0
 80041e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	460b      	mov	r3, r1
 8004202:	807b      	strh	r3, [r7, #2]
 8004204:	4613      	mov	r3, r2
 8004206:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004208:	787b      	ldrb	r3, [r7, #1]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800420e:	887a      	ldrh	r2, [r7, #2]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004214:	e003      	b.n	800421e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004216:	887b      	ldrh	r3, [r7, #2]
 8004218:	041a      	lsls	r2, r3, #16
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	619a      	str	r2, [r3, #24]
}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
	...

0800422c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	4603      	mov	r3, r0
 8004234:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004236:	4b08      	ldr	r3, [pc, #32]	@ (8004258 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004238:	695a      	ldr	r2, [r3, #20]
 800423a:	88fb      	ldrh	r3, [r7, #6]
 800423c:	4013      	ands	r3, r2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d006      	beq.n	8004250 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004242:	4a05      	ldr	r2, [pc, #20]	@ (8004258 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004244:	88fb      	ldrh	r3, [r7, #6]
 8004246:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004248:	88fb      	ldrh	r3, [r7, #6]
 800424a:	4618      	mov	r0, r3
 800424c:	f000 f806 	bl	800425c <HAL_GPIO_EXTI_Callback>
  }
}
 8004250:	bf00      	nop
 8004252:	3708      	adds	r7, #8
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40013c00 	.word	0x40013c00

0800425c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	4603      	mov	r3, r0
 8004264:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004266:	bf00      	nop
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
	...

08004274 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e12b      	b.n	80044de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d106      	bne.n	80042a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7fe f8e4 	bl	8002468 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2224      	movs	r2, #36	@ 0x24
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 0201 	bic.w	r2, r2, #1
 80042b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80042d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042d8:	f001 f9c8 	bl	800566c <HAL_RCC_GetPCLK1Freq>
 80042dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	4a81      	ldr	r2, [pc, #516]	@ (80044e8 <HAL_I2C_Init+0x274>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d807      	bhi.n	80042f8 <HAL_I2C_Init+0x84>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	4a80      	ldr	r2, [pc, #512]	@ (80044ec <HAL_I2C_Init+0x278>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	bf94      	ite	ls
 80042f0:	2301      	movls	r3, #1
 80042f2:	2300      	movhi	r3, #0
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	e006      	b.n	8004306 <HAL_I2C_Init+0x92>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4a7d      	ldr	r2, [pc, #500]	@ (80044f0 <HAL_I2C_Init+0x27c>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	bf94      	ite	ls
 8004300:	2301      	movls	r3, #1
 8004302:	2300      	movhi	r3, #0
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e0e7      	b.n	80044de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	4a78      	ldr	r2, [pc, #480]	@ (80044f4 <HAL_I2C_Init+0x280>)
 8004312:	fba2 2303 	umull	r2, r3, r2, r3
 8004316:	0c9b      	lsrs	r3, r3, #18
 8004318:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	430a      	orrs	r2, r1
 800432c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	4a6a      	ldr	r2, [pc, #424]	@ (80044e8 <HAL_I2C_Init+0x274>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d802      	bhi.n	8004348 <HAL_I2C_Init+0xd4>
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	3301      	adds	r3, #1
 8004346:	e009      	b.n	800435c <HAL_I2C_Init+0xe8>
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800434e:	fb02 f303 	mul.w	r3, r2, r3
 8004352:	4a69      	ldr	r2, [pc, #420]	@ (80044f8 <HAL_I2C_Init+0x284>)
 8004354:	fba2 2303 	umull	r2, r3, r2, r3
 8004358:	099b      	lsrs	r3, r3, #6
 800435a:	3301      	adds	r3, #1
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	6812      	ldr	r2, [r2, #0]
 8004360:	430b      	orrs	r3, r1
 8004362:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800436e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	495c      	ldr	r1, [pc, #368]	@ (80044e8 <HAL_I2C_Init+0x274>)
 8004378:	428b      	cmp	r3, r1
 800437a:	d819      	bhi.n	80043b0 <HAL_I2C_Init+0x13c>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	1e59      	subs	r1, r3, #1
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	fbb1 f3f3 	udiv	r3, r1, r3
 800438a:	1c59      	adds	r1, r3, #1
 800438c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004390:	400b      	ands	r3, r1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00a      	beq.n	80043ac <HAL_I2C_Init+0x138>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	1e59      	subs	r1, r3, #1
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80043a4:	3301      	adds	r3, #1
 80043a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043aa:	e051      	b.n	8004450 <HAL_I2C_Init+0x1dc>
 80043ac:	2304      	movs	r3, #4
 80043ae:	e04f      	b.n	8004450 <HAL_I2C_Init+0x1dc>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d111      	bne.n	80043dc <HAL_I2C_Init+0x168>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	1e58      	subs	r0, r3, #1
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6859      	ldr	r1, [r3, #4]
 80043c0:	460b      	mov	r3, r1
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	440b      	add	r3, r1
 80043c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ca:	3301      	adds	r3, #1
 80043cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	bf0c      	ite	eq
 80043d4:	2301      	moveq	r3, #1
 80043d6:	2300      	movne	r3, #0
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	e012      	b.n	8004402 <HAL_I2C_Init+0x18e>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	1e58      	subs	r0, r3, #1
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6859      	ldr	r1, [r3, #4]
 80043e4:	460b      	mov	r3, r1
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	440b      	add	r3, r1
 80043ea:	0099      	lsls	r1, r3, #2
 80043ec:	440b      	add	r3, r1
 80043ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80043f2:	3301      	adds	r3, #1
 80043f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	bf0c      	ite	eq
 80043fc:	2301      	moveq	r3, #1
 80043fe:	2300      	movne	r3, #0
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <HAL_I2C_Init+0x196>
 8004406:	2301      	movs	r3, #1
 8004408:	e022      	b.n	8004450 <HAL_I2C_Init+0x1dc>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10e      	bne.n	8004430 <HAL_I2C_Init+0x1bc>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	1e58      	subs	r0, r3, #1
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6859      	ldr	r1, [r3, #4]
 800441a:	460b      	mov	r3, r1
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	440b      	add	r3, r1
 8004420:	fbb0 f3f3 	udiv	r3, r0, r3
 8004424:	3301      	adds	r3, #1
 8004426:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800442a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800442e:	e00f      	b.n	8004450 <HAL_I2C_Init+0x1dc>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	1e58      	subs	r0, r3, #1
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6859      	ldr	r1, [r3, #4]
 8004438:	460b      	mov	r3, r1
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	440b      	add	r3, r1
 800443e:	0099      	lsls	r1, r3, #2
 8004440:	440b      	add	r3, r1
 8004442:	fbb0 f3f3 	udiv	r3, r0, r3
 8004446:	3301      	adds	r3, #1
 8004448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800444c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004450:	6879      	ldr	r1, [r7, #4]
 8004452:	6809      	ldr	r1, [r1, #0]
 8004454:	4313      	orrs	r3, r2
 8004456:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	69da      	ldr	r2, [r3, #28]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	431a      	orrs	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	430a      	orrs	r2, r1
 8004472:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800447e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	6911      	ldr	r1, [r2, #16]
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	68d2      	ldr	r2, [r2, #12]
 800448a:	4311      	orrs	r1, r2
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	6812      	ldr	r2, [r2, #0]
 8004490:	430b      	orrs	r3, r1
 8004492:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	695a      	ldr	r2, [r3, #20]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	431a      	orrs	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	430a      	orrs	r2, r1
 80044ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f042 0201 	orr.w	r2, r2, #1
 80044be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2220      	movs	r2, #32
 80044ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	000186a0 	.word	0x000186a0
 80044ec:	001e847f 	.word	0x001e847f
 80044f0:	003d08ff 	.word	0x003d08ff
 80044f4:	431bde83 	.word	0x431bde83
 80044f8:	10624dd3 	.word	0x10624dd3

080044fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b088      	sub	sp, #32
 8004500:	af02      	add	r7, sp, #8
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	607a      	str	r2, [r7, #4]
 8004506:	461a      	mov	r2, r3
 8004508:	460b      	mov	r3, r1
 800450a:	817b      	strh	r3, [r7, #10]
 800450c:	4613      	mov	r3, r2
 800450e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004510:	f7fe fbb0 	bl	8002c74 <HAL_GetTick>
 8004514:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b20      	cmp	r3, #32
 8004520:	f040 80e0 	bne.w	80046e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	2319      	movs	r3, #25
 800452a:	2201      	movs	r2, #1
 800452c:	4970      	ldr	r1, [pc, #448]	@ (80046f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 fa92 	bl	8004a58 <I2C_WaitOnFlagUntilTimeout>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800453a:	2302      	movs	r3, #2
 800453c:	e0d3      	b.n	80046e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004544:	2b01      	cmp	r3, #1
 8004546:	d101      	bne.n	800454c <HAL_I2C_Master_Transmit+0x50>
 8004548:	2302      	movs	r3, #2
 800454a:	e0cc      	b.n	80046e6 <HAL_I2C_Master_Transmit+0x1ea>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b01      	cmp	r3, #1
 8004560:	d007      	beq.n	8004572 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f042 0201 	orr.w	r2, r2, #1
 8004570:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004580:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2221      	movs	r2, #33	@ 0x21
 8004586:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2210      	movs	r2, #16
 800458e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	893a      	ldrh	r2, [r7, #8]
 80045a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	4a50      	ldr	r2, [pc, #320]	@ (80046f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80045b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80045b4:	8979      	ldrh	r1, [r7, #10]
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	6a3a      	ldr	r2, [r7, #32]
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f000 f9ca 	bl	8004954 <I2C_MasterRequestWrite>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e08d      	b.n	80046e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ca:	2300      	movs	r3, #0
 80045cc:	613b      	str	r3, [r7, #16]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	613b      	str	r3, [r7, #16]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	613b      	str	r3, [r7, #16]
 80045de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80045e0:	e066      	b.n	80046b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	6a39      	ldr	r1, [r7, #32]
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 fb50 	bl	8004c8c <I2C_WaitOnTXEFlagUntilTimeout>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00d      	beq.n	800460e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f6:	2b04      	cmp	r3, #4
 80045f8:	d107      	bne.n	800460a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004608:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e06b      	b.n	80046e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004612:	781a      	ldrb	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461e:	1c5a      	adds	r2, r3, #1
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004628:	b29b      	uxth	r3, r3
 800462a:	3b01      	subs	r3, #1
 800462c:	b29a      	uxth	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004636:	3b01      	subs	r3, #1
 8004638:	b29a      	uxth	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	f003 0304 	and.w	r3, r3, #4
 8004648:	2b04      	cmp	r3, #4
 800464a:	d11b      	bne.n	8004684 <HAL_I2C_Master_Transmit+0x188>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004650:	2b00      	cmp	r3, #0
 8004652:	d017      	beq.n	8004684 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004658:	781a      	ldrb	r2, [r3, #0]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004664:	1c5a      	adds	r2, r3, #1
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800466e:	b29b      	uxth	r3, r3
 8004670:	3b01      	subs	r3, #1
 8004672:	b29a      	uxth	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800467c:	3b01      	subs	r3, #1
 800467e:	b29a      	uxth	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	6a39      	ldr	r1, [r7, #32]
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f000 fb47 	bl	8004d1c <I2C_WaitOnBTFFlagUntilTimeout>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00d      	beq.n	80046b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004698:	2b04      	cmp	r3, #4
 800469a:	d107      	bne.n	80046ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e01a      	b.n	80046e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d194      	bne.n	80045e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2220      	movs	r2, #32
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80046e0:	2300      	movs	r3, #0
 80046e2:	e000      	b.n	80046e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80046e4:	2302      	movs	r3, #2
  }
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3718      	adds	r7, #24
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	00100002 	.word	0x00100002
 80046f4:	ffff0000 	.word	0xffff0000

080046f8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b08a      	sub	sp, #40	@ 0x28
 80046fc:	af02      	add	r7, sp, #8
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	607a      	str	r2, [r7, #4]
 8004702:	603b      	str	r3, [r7, #0]
 8004704:	460b      	mov	r3, r1
 8004706:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004708:	f7fe fab4 	bl	8002c74 <HAL_GetTick>
 800470c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800470e:	2300      	movs	r3, #0
 8004710:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b20      	cmp	r3, #32
 800471c:	f040 8111 	bne.w	8004942 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	2319      	movs	r3, #25
 8004726:	2201      	movs	r2, #1
 8004728:	4988      	ldr	r1, [pc, #544]	@ (800494c <HAL_I2C_IsDeviceReady+0x254>)
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 f994 	bl	8004a58 <I2C_WaitOnFlagUntilTimeout>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004736:	2302      	movs	r3, #2
 8004738:	e104      	b.n	8004944 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004740:	2b01      	cmp	r3, #1
 8004742:	d101      	bne.n	8004748 <HAL_I2C_IsDeviceReady+0x50>
 8004744:	2302      	movs	r3, #2
 8004746:	e0fd      	b.n	8004944 <HAL_I2C_IsDeviceReady+0x24c>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b01      	cmp	r3, #1
 800475c:	d007      	beq.n	800476e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f042 0201 	orr.w	r2, r2, #1
 800476c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800477c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2224      	movs	r2, #36	@ 0x24
 8004782:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4a70      	ldr	r2, [pc, #448]	@ (8004950 <HAL_I2C_IsDeviceReady+0x258>)
 8004790:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047a0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	9300      	str	r3, [sp, #0]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 f952 	bl	8004a58 <I2C_WaitOnFlagUntilTimeout>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00d      	beq.n	80047d6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047c8:	d103      	bne.n	80047d2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047d0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e0b6      	b.n	8004944 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047d6:	897b      	ldrh	r3, [r7, #10]
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	461a      	mov	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80047e4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80047e6:	f7fe fa45 	bl	8002c74 <HAL_GetTick>
 80047ea:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	bf0c      	ite	eq
 80047fa:	2301      	moveq	r3, #1
 80047fc:	2300      	movne	r3, #0
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800480c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004810:	bf0c      	ite	eq
 8004812:	2301      	moveq	r3, #1
 8004814:	2300      	movne	r3, #0
 8004816:	b2db      	uxtb	r3, r3
 8004818:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800481a:	e025      	b.n	8004868 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800481c:	f7fe fa2a 	bl	8002c74 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	683a      	ldr	r2, [r7, #0]
 8004828:	429a      	cmp	r2, r3
 800482a:	d302      	bcc.n	8004832 <HAL_I2C_IsDeviceReady+0x13a>
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d103      	bne.n	800483a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	22a0      	movs	r2, #160	@ 0xa0
 8004836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b02      	cmp	r3, #2
 8004846:	bf0c      	ite	eq
 8004848:	2301      	moveq	r3, #1
 800484a:	2300      	movne	r3, #0
 800484c:	b2db      	uxtb	r3, r3
 800484e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800485a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800485e:	bf0c      	ite	eq
 8004860:	2301      	moveq	r3, #1
 8004862:	2300      	movne	r3, #0
 8004864:	b2db      	uxtb	r3, r3
 8004866:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2ba0      	cmp	r3, #160	@ 0xa0
 8004872:	d005      	beq.n	8004880 <HAL_I2C_IsDeviceReady+0x188>
 8004874:	7dfb      	ldrb	r3, [r7, #23]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d102      	bne.n	8004880 <HAL_I2C_IsDeviceReady+0x188>
 800487a:	7dbb      	ldrb	r3, [r7, #22]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d0cd      	beq.n	800481c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2220      	movs	r2, #32
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b02      	cmp	r3, #2
 8004894:	d129      	bne.n	80048ea <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048a4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048a6:	2300      	movs	r3, #0
 80048a8:	613b      	str	r3, [r7, #16]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	613b      	str	r3, [r7, #16]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	613b      	str	r3, [r7, #16]
 80048ba:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	2319      	movs	r3, #25
 80048c2:	2201      	movs	r2, #1
 80048c4:	4921      	ldr	r1, [pc, #132]	@ (800494c <HAL_I2C_IsDeviceReady+0x254>)
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f000 f8c6 	bl	8004a58 <I2C_WaitOnFlagUntilTimeout>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e036      	b.n	8004944 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2220      	movs	r2, #32
 80048da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80048e6:	2300      	movs	r3, #0
 80048e8:	e02c      	b.n	8004944 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048f8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004902:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	2319      	movs	r3, #25
 800490a:	2201      	movs	r2, #1
 800490c:	490f      	ldr	r1, [pc, #60]	@ (800494c <HAL_I2C_IsDeviceReady+0x254>)
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f000 f8a2 	bl	8004a58 <I2C_WaitOnFlagUntilTimeout>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e012      	b.n	8004944 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	3301      	adds	r3, #1
 8004922:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	429a      	cmp	r2, r3
 800492a:	f4ff af32 	bcc.w	8004792 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2220      	movs	r2, #32
 8004932:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e000      	b.n	8004944 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004942:	2302      	movs	r3, #2
  }
}
 8004944:	4618      	mov	r0, r3
 8004946:	3720      	adds	r7, #32
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	00100002 	.word	0x00100002
 8004950:	ffff0000 	.word	0xffff0000

08004954 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b088      	sub	sp, #32
 8004958:	af02      	add	r7, sp, #8
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	607a      	str	r2, [r7, #4]
 800495e:	603b      	str	r3, [r7, #0]
 8004960:	460b      	mov	r3, r1
 8004962:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004968:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2b08      	cmp	r3, #8
 800496e:	d006      	beq.n	800497e <I2C_MasterRequestWrite+0x2a>
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d003      	beq.n	800497e <I2C_MasterRequestWrite+0x2a>
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800497c:	d108      	bne.n	8004990 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	e00b      	b.n	80049a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004994:	2b12      	cmp	r3, #18
 8004996:	d107      	bne.n	80049a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f000 f84f 	bl	8004a58 <I2C_WaitOnFlagUntilTimeout>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00d      	beq.n	80049dc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049ce:	d103      	bne.n	80049d8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e035      	b.n	8004a48 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80049e4:	d108      	bne.n	80049f8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049e6:	897b      	ldrh	r3, [r7, #10]
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	461a      	mov	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80049f4:	611a      	str	r2, [r3, #16]
 80049f6:	e01b      	b.n	8004a30 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80049f8:	897b      	ldrh	r3, [r7, #10]
 80049fa:	11db      	asrs	r3, r3, #7
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	f003 0306 	and.w	r3, r3, #6
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	f063 030f 	orn	r3, r3, #15
 8004a08:	b2da      	uxtb	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	490e      	ldr	r1, [pc, #56]	@ (8004a50 <I2C_MasterRequestWrite+0xfc>)
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f000 f898 	bl	8004b4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d001      	beq.n	8004a26 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e010      	b.n	8004a48 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a26:	897b      	ldrh	r3, [r7, #10]
 8004a28:	b2da      	uxtb	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	4907      	ldr	r1, [pc, #28]	@ (8004a54 <I2C_MasterRequestWrite+0x100>)
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f000 f888 	bl	8004b4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e000      	b.n	8004a48 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3718      	adds	r7, #24
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	00010008 	.word	0x00010008
 8004a54:	00010002 	.word	0x00010002

08004a58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	603b      	str	r3, [r7, #0]
 8004a64:	4613      	mov	r3, r2
 8004a66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a68:	e048      	b.n	8004afc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a70:	d044      	beq.n	8004afc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a72:	f7fe f8ff 	bl	8002c74 <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d302      	bcc.n	8004a88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d139      	bne.n	8004afc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	0c1b      	lsrs	r3, r3, #16
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d10d      	bne.n	8004aae <I2C_WaitOnFlagUntilTimeout+0x56>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	43da      	mvns	r2, r3
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	bf0c      	ite	eq
 8004aa4:	2301      	moveq	r3, #1
 8004aa6:	2300      	movne	r3, #0
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	461a      	mov	r2, r3
 8004aac:	e00c      	b.n	8004ac8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	43da      	mvns	r2, r3
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	4013      	ands	r3, r2
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	bf0c      	ite	eq
 8004ac0:	2301      	moveq	r3, #1
 8004ac2:	2300      	movne	r3, #0
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	79fb      	ldrb	r3, [r7, #7]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d116      	bne.n	8004afc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae8:	f043 0220 	orr.w	r2, r3, #32
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e023      	b.n	8004b44 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	0c1b      	lsrs	r3, r3, #16
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d10d      	bne.n	8004b22 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	695b      	ldr	r3, [r3, #20]
 8004b0c:	43da      	mvns	r2, r3
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	4013      	ands	r3, r2
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	bf0c      	ite	eq
 8004b18:	2301      	moveq	r3, #1
 8004b1a:	2300      	movne	r3, #0
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	461a      	mov	r2, r3
 8004b20:	e00c      	b.n	8004b3c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	43da      	mvns	r2, r3
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	bf0c      	ite	eq
 8004b34:	2301      	moveq	r3, #1
 8004b36:	2300      	movne	r3, #0
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	79fb      	ldrb	r3, [r7, #7]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d093      	beq.n	8004a6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
 8004b58:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b5a:	e071      	b.n	8004c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b6a:	d123      	bne.n	8004bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b7a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba0:	f043 0204 	orr.w	r2, r3, #4
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e067      	b.n	8004c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bba:	d041      	beq.n	8004c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bbc:	f7fe f85a 	bl	8002c74 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d302      	bcc.n	8004bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d136      	bne.n	8004c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	0c1b      	lsrs	r3, r3, #16
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d10c      	bne.n	8004bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	43da      	mvns	r2, r3
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	4013      	ands	r3, r2
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	bf14      	ite	ne
 8004bee:	2301      	movne	r3, #1
 8004bf0:	2300      	moveq	r3, #0
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	e00b      	b.n	8004c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	43da      	mvns	r2, r3
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	4013      	ands	r3, r2
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	bf14      	ite	ne
 8004c08:	2301      	movne	r3, #1
 8004c0a:	2300      	moveq	r3, #0
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d016      	beq.n	8004c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2c:	f043 0220 	orr.w	r2, r3, #32
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e021      	b.n	8004c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	0c1b      	lsrs	r3, r3, #16
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d10c      	bne.n	8004c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	43da      	mvns	r2, r3
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	4013      	ands	r3, r2
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	bf14      	ite	ne
 8004c5c:	2301      	movne	r3, #1
 8004c5e:	2300      	moveq	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	e00b      	b.n	8004c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	43da      	mvns	r2, r3
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	4013      	ands	r3, r2
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	bf14      	ite	ne
 8004c76:	2301      	movne	r3, #1
 8004c78:	2300      	moveq	r3, #0
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f47f af6d 	bne.w	8004b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c98:	e034      	b.n	8004d04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f000 f886 	bl	8004dac <I2C_IsAcknowledgeFailed>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e034      	b.n	8004d14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb0:	d028      	beq.n	8004d04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cb2:	f7fd ffdf 	bl	8002c74 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	68ba      	ldr	r2, [r7, #8]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d302      	bcc.n	8004cc8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d11d      	bne.n	8004d04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cd2:	2b80      	cmp	r3, #128	@ 0x80
 8004cd4:	d016      	beq.n	8004d04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf0:	f043 0220 	orr.w	r2, r3, #32
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e007      	b.n	8004d14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d0e:	2b80      	cmp	r3, #128	@ 0x80
 8004d10:	d1c3      	bne.n	8004c9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3710      	adds	r7, #16
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d28:	e034      	b.n	8004d94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f000 f83e 	bl	8004dac <I2C_IsAcknowledgeFailed>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e034      	b.n	8004da4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d40:	d028      	beq.n	8004d94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d42:	f7fd ff97 	bl	8002c74 <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d302      	bcc.n	8004d58 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d11d      	bne.n	8004d94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	f003 0304 	and.w	r3, r3, #4
 8004d62:	2b04      	cmp	r3, #4
 8004d64:	d016      	beq.n	8004d94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d80:	f043 0220 	orr.w	r2, r3, #32
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e007      	b.n	8004da4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	f003 0304 	and.w	r3, r3, #4
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	d1c3      	bne.n	8004d2a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dc2:	d11b      	bne.n	8004dfc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004dcc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de8:	f043 0204 	orr.w	r2, r3, #4
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e000      	b.n	8004dfe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
	...

08004e0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b086      	sub	sp, #24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d101      	bne.n	8004e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e267      	b.n	80052ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d075      	beq.n	8004f16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004e2a:	4b88      	ldr	r3, [pc, #544]	@ (800504c <HAL_RCC_OscConfig+0x240>)
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f003 030c 	and.w	r3, r3, #12
 8004e32:	2b04      	cmp	r3, #4
 8004e34:	d00c      	beq.n	8004e50 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e36:	4b85      	ldr	r3, [pc, #532]	@ (800504c <HAL_RCC_OscConfig+0x240>)
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004e3e:	2b08      	cmp	r3, #8
 8004e40:	d112      	bne.n	8004e68 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e42:	4b82      	ldr	r3, [pc, #520]	@ (800504c <HAL_RCC_OscConfig+0x240>)
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e4e:	d10b      	bne.n	8004e68 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e50:	4b7e      	ldr	r3, [pc, #504]	@ (800504c <HAL_RCC_OscConfig+0x240>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d05b      	beq.n	8004f14 <HAL_RCC_OscConfig+0x108>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d157      	bne.n	8004f14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e242      	b.n	80052ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e70:	d106      	bne.n	8004e80 <HAL_RCC_OscConfig+0x74>
 8004e72:	4b76      	ldr	r3, [pc, #472]	@ (800504c <HAL_RCC_OscConfig+0x240>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a75      	ldr	r2, [pc, #468]	@ (800504c <HAL_RCC_OscConfig+0x240>)
 8004e78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e7c:	6013      	str	r3, [r2, #0]
 8004e7e:	e01d      	b.n	8004ebc <HAL_RCC_OscConfig+0xb0>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e88:	d10c      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x98>
 8004e8a:	4b70      	ldr	r3, [pc, #448]	@ (800504c <HAL_RCC_OscConfig+0x240>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a6f      	ldr	r2, [pc, #444]	@ (800504c <HAL_RCC_OscConfig+0x240>)
 8004e90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e94:	6013      	str	r3, [r2, #0]
 8004e96:	4b6d      	ldr	r3, [pc, #436]	@ (800504c <HAL_RCC_OscConfig+0x240>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a6c      	ldr	r2, [pc, #432]	@ (800504c <HAL_RCC_OscConfig+0x240>)
 8004e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ea0:	6013      	str	r3, [r2, #0]
 8004ea2:	e00b      	b.n	8004ebc <HAL_RCC_OscConfig+0xb0>
 8004ea4:	4b69      	ldr	r3, [pc, #420]	@ (800504c <HAL_RCC_OscConfig+0x240>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a68      	ldr	r2, [pc, #416]	@ (800504c <HAL_RCC_OscConfig+0x240>)
 8004eaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004eae:	6013      	str	r3, [r2, #0]
 8004eb0:	4b66      	ldr	r3, [pc, #408]	@ (800504c <HAL_RCC_OscConfig+0x240>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a65      	ldr	r2, [pc, #404]	@ (800504c <HAL_RCC_OscConfig+0x240>)
 8004eb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004eba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d013      	beq.n	8004eec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec4:	f7fd fed6 	bl	8002c74 <HAL_GetTick>
 8004ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eca:	e008      	b.n	8004ede <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ecc:	f7fd fed2 	bl	8002c74 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b64      	cmp	r3, #100	@ 0x64
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e207      	b.n	80052ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ede:	4b5b      	ldr	r3, [pc, #364]	@ (800504c <HAL_RCC_OscConfig+0x240>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d0f0      	beq.n	8004ecc <HAL_RCC_OscConfig+0xc0>
 8004eea:	e014      	b.n	8004f16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eec:	f7fd fec2 	bl	8002c74 <HAL_GetTick>
 8004ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ef2:	e008      	b.n	8004f06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ef4:	f7fd febe 	bl	8002c74 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b64      	cmp	r3, #100	@ 0x64
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e1f3      	b.n	80052ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f06:	4b51      	ldr	r3, [pc, #324]	@ (800504c <HAL_RCC_OscConfig+0x240>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1f0      	bne.n	8004ef4 <HAL_RCC_OscConfig+0xe8>
 8004f12:	e000      	b.n	8004f16 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d063      	beq.n	8004fea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004f22:	4b4a      	ldr	r3, [pc, #296]	@ (800504c <HAL_RCC_OscConfig+0x240>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f003 030c 	and.w	r3, r3, #12
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00b      	beq.n	8004f46 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f2e:	4b47      	ldr	r3, [pc, #284]	@ (800504c <HAL_RCC_OscConfig+0x240>)
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004f36:	2b08      	cmp	r3, #8
 8004f38:	d11c      	bne.n	8004f74 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f3a:	4b44      	ldr	r3, [pc, #272]	@ (800504c <HAL_RCC_OscConfig+0x240>)
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d116      	bne.n	8004f74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f46:	4b41      	ldr	r3, [pc, #260]	@ (800504c <HAL_RCC_OscConfig+0x240>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d005      	beq.n	8004f5e <HAL_RCC_OscConfig+0x152>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d001      	beq.n	8004f5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e1c7      	b.n	80052ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f5e:	4b3b      	ldr	r3, [pc, #236]	@ (800504c <HAL_RCC_OscConfig+0x240>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	00db      	lsls	r3, r3, #3
 8004f6c:	4937      	ldr	r1, [pc, #220]	@ (800504c <HAL_RCC_OscConfig+0x240>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f72:	e03a      	b.n	8004fea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d020      	beq.n	8004fbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f7c:	4b34      	ldr	r3, [pc, #208]	@ (8005050 <HAL_RCC_OscConfig+0x244>)
 8004f7e:	2201      	movs	r2, #1
 8004f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f82:	f7fd fe77 	bl	8002c74 <HAL_GetTick>
 8004f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f88:	e008      	b.n	8004f9c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f8a:	f7fd fe73 	bl	8002c74 <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d901      	bls.n	8004f9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e1a8      	b.n	80052ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f9c:	4b2b      	ldr	r3, [pc, #172]	@ (800504c <HAL_RCC_OscConfig+0x240>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0302 	and.w	r3, r3, #2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0f0      	beq.n	8004f8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fa8:	4b28      	ldr	r3, [pc, #160]	@ (800504c <HAL_RCC_OscConfig+0x240>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	00db      	lsls	r3, r3, #3
 8004fb6:	4925      	ldr	r1, [pc, #148]	@ (800504c <HAL_RCC_OscConfig+0x240>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	600b      	str	r3, [r1, #0]
 8004fbc:	e015      	b.n	8004fea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fbe:	4b24      	ldr	r3, [pc, #144]	@ (8005050 <HAL_RCC_OscConfig+0x244>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc4:	f7fd fe56 	bl	8002c74 <HAL_GetTick>
 8004fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fca:	e008      	b.n	8004fde <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fcc:	f7fd fe52 	bl	8002c74 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e187      	b.n	80052ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fde:	4b1b      	ldr	r3, [pc, #108]	@ (800504c <HAL_RCC_OscConfig+0x240>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1f0      	bne.n	8004fcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0308 	and.w	r3, r3, #8
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d036      	beq.n	8005064 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d016      	beq.n	800502c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ffe:	4b15      	ldr	r3, [pc, #84]	@ (8005054 <HAL_RCC_OscConfig+0x248>)
 8005000:	2201      	movs	r2, #1
 8005002:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005004:	f7fd fe36 	bl	8002c74 <HAL_GetTick>
 8005008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800500a:	e008      	b.n	800501e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800500c:	f7fd fe32 	bl	8002c74 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d901      	bls.n	800501e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e167      	b.n	80052ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800501e:	4b0b      	ldr	r3, [pc, #44]	@ (800504c <HAL_RCC_OscConfig+0x240>)
 8005020:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b00      	cmp	r3, #0
 8005028:	d0f0      	beq.n	800500c <HAL_RCC_OscConfig+0x200>
 800502a:	e01b      	b.n	8005064 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800502c:	4b09      	ldr	r3, [pc, #36]	@ (8005054 <HAL_RCC_OscConfig+0x248>)
 800502e:	2200      	movs	r2, #0
 8005030:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005032:	f7fd fe1f 	bl	8002c74 <HAL_GetTick>
 8005036:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005038:	e00e      	b.n	8005058 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800503a:	f7fd fe1b 	bl	8002c74 <HAL_GetTick>
 800503e:	4602      	mov	r2, r0
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	2b02      	cmp	r3, #2
 8005046:	d907      	bls.n	8005058 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e150      	b.n	80052ee <HAL_RCC_OscConfig+0x4e2>
 800504c:	40023800 	.word	0x40023800
 8005050:	42470000 	.word	0x42470000
 8005054:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005058:	4b88      	ldr	r3, [pc, #544]	@ (800527c <HAL_RCC_OscConfig+0x470>)
 800505a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800505c:	f003 0302 	and.w	r3, r3, #2
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1ea      	bne.n	800503a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0304 	and.w	r3, r3, #4
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 8097 	beq.w	80051a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005072:	2300      	movs	r3, #0
 8005074:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005076:	4b81      	ldr	r3, [pc, #516]	@ (800527c <HAL_RCC_OscConfig+0x470>)
 8005078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800507a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d10f      	bne.n	80050a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005082:	2300      	movs	r3, #0
 8005084:	60bb      	str	r3, [r7, #8]
 8005086:	4b7d      	ldr	r3, [pc, #500]	@ (800527c <HAL_RCC_OscConfig+0x470>)
 8005088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800508a:	4a7c      	ldr	r2, [pc, #496]	@ (800527c <HAL_RCC_OscConfig+0x470>)
 800508c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005090:	6413      	str	r3, [r2, #64]	@ 0x40
 8005092:	4b7a      	ldr	r3, [pc, #488]	@ (800527c <HAL_RCC_OscConfig+0x470>)
 8005094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005096:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800509a:	60bb      	str	r3, [r7, #8]
 800509c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800509e:	2301      	movs	r3, #1
 80050a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050a2:	4b77      	ldr	r3, [pc, #476]	@ (8005280 <HAL_RCC_OscConfig+0x474>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d118      	bne.n	80050e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050ae:	4b74      	ldr	r3, [pc, #464]	@ (8005280 <HAL_RCC_OscConfig+0x474>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a73      	ldr	r2, [pc, #460]	@ (8005280 <HAL_RCC_OscConfig+0x474>)
 80050b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050ba:	f7fd fddb 	bl	8002c74 <HAL_GetTick>
 80050be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050c0:	e008      	b.n	80050d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050c2:	f7fd fdd7 	bl	8002c74 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d901      	bls.n	80050d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e10c      	b.n	80052ee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050d4:	4b6a      	ldr	r3, [pc, #424]	@ (8005280 <HAL_RCC_OscConfig+0x474>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d0f0      	beq.n	80050c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d106      	bne.n	80050f6 <HAL_RCC_OscConfig+0x2ea>
 80050e8:	4b64      	ldr	r3, [pc, #400]	@ (800527c <HAL_RCC_OscConfig+0x470>)
 80050ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ec:	4a63      	ldr	r2, [pc, #396]	@ (800527c <HAL_RCC_OscConfig+0x470>)
 80050ee:	f043 0301 	orr.w	r3, r3, #1
 80050f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80050f4:	e01c      	b.n	8005130 <HAL_RCC_OscConfig+0x324>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	2b05      	cmp	r3, #5
 80050fc:	d10c      	bne.n	8005118 <HAL_RCC_OscConfig+0x30c>
 80050fe:	4b5f      	ldr	r3, [pc, #380]	@ (800527c <HAL_RCC_OscConfig+0x470>)
 8005100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005102:	4a5e      	ldr	r2, [pc, #376]	@ (800527c <HAL_RCC_OscConfig+0x470>)
 8005104:	f043 0304 	orr.w	r3, r3, #4
 8005108:	6713      	str	r3, [r2, #112]	@ 0x70
 800510a:	4b5c      	ldr	r3, [pc, #368]	@ (800527c <HAL_RCC_OscConfig+0x470>)
 800510c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800510e:	4a5b      	ldr	r2, [pc, #364]	@ (800527c <HAL_RCC_OscConfig+0x470>)
 8005110:	f043 0301 	orr.w	r3, r3, #1
 8005114:	6713      	str	r3, [r2, #112]	@ 0x70
 8005116:	e00b      	b.n	8005130 <HAL_RCC_OscConfig+0x324>
 8005118:	4b58      	ldr	r3, [pc, #352]	@ (800527c <HAL_RCC_OscConfig+0x470>)
 800511a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800511c:	4a57      	ldr	r2, [pc, #348]	@ (800527c <HAL_RCC_OscConfig+0x470>)
 800511e:	f023 0301 	bic.w	r3, r3, #1
 8005122:	6713      	str	r3, [r2, #112]	@ 0x70
 8005124:	4b55      	ldr	r3, [pc, #340]	@ (800527c <HAL_RCC_OscConfig+0x470>)
 8005126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005128:	4a54      	ldr	r2, [pc, #336]	@ (800527c <HAL_RCC_OscConfig+0x470>)
 800512a:	f023 0304 	bic.w	r3, r3, #4
 800512e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d015      	beq.n	8005164 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005138:	f7fd fd9c 	bl	8002c74 <HAL_GetTick>
 800513c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800513e:	e00a      	b.n	8005156 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005140:	f7fd fd98 	bl	8002c74 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800514e:	4293      	cmp	r3, r2
 8005150:	d901      	bls.n	8005156 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e0cb      	b.n	80052ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005156:	4b49      	ldr	r3, [pc, #292]	@ (800527c <HAL_RCC_OscConfig+0x470>)
 8005158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	2b00      	cmp	r3, #0
 8005160:	d0ee      	beq.n	8005140 <HAL_RCC_OscConfig+0x334>
 8005162:	e014      	b.n	800518e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005164:	f7fd fd86 	bl	8002c74 <HAL_GetTick>
 8005168:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800516a:	e00a      	b.n	8005182 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800516c:	f7fd fd82 	bl	8002c74 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	f241 3288 	movw	r2, #5000	@ 0x1388
 800517a:	4293      	cmp	r3, r2
 800517c:	d901      	bls.n	8005182 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e0b5      	b.n	80052ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005182:	4b3e      	ldr	r3, [pc, #248]	@ (800527c <HAL_RCC_OscConfig+0x470>)
 8005184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005186:	f003 0302 	and.w	r3, r3, #2
 800518a:	2b00      	cmp	r3, #0
 800518c:	d1ee      	bne.n	800516c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800518e:	7dfb      	ldrb	r3, [r7, #23]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d105      	bne.n	80051a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005194:	4b39      	ldr	r3, [pc, #228]	@ (800527c <HAL_RCC_OscConfig+0x470>)
 8005196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005198:	4a38      	ldr	r2, [pc, #224]	@ (800527c <HAL_RCC_OscConfig+0x470>)
 800519a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800519e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f000 80a1 	beq.w	80052ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051aa:	4b34      	ldr	r3, [pc, #208]	@ (800527c <HAL_RCC_OscConfig+0x470>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f003 030c 	and.w	r3, r3, #12
 80051b2:	2b08      	cmp	r3, #8
 80051b4:	d05c      	beq.n	8005270 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d141      	bne.n	8005242 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051be:	4b31      	ldr	r3, [pc, #196]	@ (8005284 <HAL_RCC_OscConfig+0x478>)
 80051c0:	2200      	movs	r2, #0
 80051c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051c4:	f7fd fd56 	bl	8002c74 <HAL_GetTick>
 80051c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ca:	e008      	b.n	80051de <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051cc:	f7fd fd52 	bl	8002c74 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d901      	bls.n	80051de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e087      	b.n	80052ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051de:	4b27      	ldr	r3, [pc, #156]	@ (800527c <HAL_RCC_OscConfig+0x470>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1f0      	bne.n	80051cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	69da      	ldr	r2, [r3, #28]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	431a      	orrs	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f8:	019b      	lsls	r3, r3, #6
 80051fa:	431a      	orrs	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005200:	085b      	lsrs	r3, r3, #1
 8005202:	3b01      	subs	r3, #1
 8005204:	041b      	lsls	r3, r3, #16
 8005206:	431a      	orrs	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800520c:	061b      	lsls	r3, r3, #24
 800520e:	491b      	ldr	r1, [pc, #108]	@ (800527c <HAL_RCC_OscConfig+0x470>)
 8005210:	4313      	orrs	r3, r2
 8005212:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005214:	4b1b      	ldr	r3, [pc, #108]	@ (8005284 <HAL_RCC_OscConfig+0x478>)
 8005216:	2201      	movs	r2, #1
 8005218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800521a:	f7fd fd2b 	bl	8002c74 <HAL_GetTick>
 800521e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005220:	e008      	b.n	8005234 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005222:	f7fd fd27 	bl	8002c74 <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	2b02      	cmp	r3, #2
 800522e:	d901      	bls.n	8005234 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e05c      	b.n	80052ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005234:	4b11      	ldr	r3, [pc, #68]	@ (800527c <HAL_RCC_OscConfig+0x470>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d0f0      	beq.n	8005222 <HAL_RCC_OscConfig+0x416>
 8005240:	e054      	b.n	80052ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005242:	4b10      	ldr	r3, [pc, #64]	@ (8005284 <HAL_RCC_OscConfig+0x478>)
 8005244:	2200      	movs	r2, #0
 8005246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005248:	f7fd fd14 	bl	8002c74 <HAL_GetTick>
 800524c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800524e:	e008      	b.n	8005262 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005250:	f7fd fd10 	bl	8002c74 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b02      	cmp	r3, #2
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e045      	b.n	80052ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005262:	4b06      	ldr	r3, [pc, #24]	@ (800527c <HAL_RCC_OscConfig+0x470>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1f0      	bne.n	8005250 <HAL_RCC_OscConfig+0x444>
 800526e:	e03d      	b.n	80052ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d107      	bne.n	8005288 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e038      	b.n	80052ee <HAL_RCC_OscConfig+0x4e2>
 800527c:	40023800 	.word	0x40023800
 8005280:	40007000 	.word	0x40007000
 8005284:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005288:	4b1b      	ldr	r3, [pc, #108]	@ (80052f8 <HAL_RCC_OscConfig+0x4ec>)
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d028      	beq.n	80052e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d121      	bne.n	80052e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d11a      	bne.n	80052e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80052b8:	4013      	ands	r3, r2
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80052be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d111      	bne.n	80052e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ce:	085b      	lsrs	r3, r3, #1
 80052d0:	3b01      	subs	r3, #1
 80052d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d107      	bne.n	80052e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d001      	beq.n	80052ec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e000      	b.n	80052ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3718      	adds	r7, #24
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	40023800 	.word	0x40023800

080052fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d101      	bne.n	8005310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e0cc      	b.n	80054aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005310:	4b68      	ldr	r3, [pc, #416]	@ (80054b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0307 	and.w	r3, r3, #7
 8005318:	683a      	ldr	r2, [r7, #0]
 800531a:	429a      	cmp	r2, r3
 800531c:	d90c      	bls.n	8005338 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800531e:	4b65      	ldr	r3, [pc, #404]	@ (80054b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005320:	683a      	ldr	r2, [r7, #0]
 8005322:	b2d2      	uxtb	r2, r2
 8005324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005326:	4b63      	ldr	r3, [pc, #396]	@ (80054b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0307 	and.w	r3, r3, #7
 800532e:	683a      	ldr	r2, [r7, #0]
 8005330:	429a      	cmp	r2, r3
 8005332:	d001      	beq.n	8005338 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e0b8      	b.n	80054aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0302 	and.w	r3, r3, #2
 8005340:	2b00      	cmp	r3, #0
 8005342:	d020      	beq.n	8005386 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0304 	and.w	r3, r3, #4
 800534c:	2b00      	cmp	r3, #0
 800534e:	d005      	beq.n	800535c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005350:	4b59      	ldr	r3, [pc, #356]	@ (80054b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	4a58      	ldr	r2, [pc, #352]	@ (80054b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005356:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800535a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0308 	and.w	r3, r3, #8
 8005364:	2b00      	cmp	r3, #0
 8005366:	d005      	beq.n	8005374 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005368:	4b53      	ldr	r3, [pc, #332]	@ (80054b8 <HAL_RCC_ClockConfig+0x1bc>)
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	4a52      	ldr	r2, [pc, #328]	@ (80054b8 <HAL_RCC_ClockConfig+0x1bc>)
 800536e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005372:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005374:	4b50      	ldr	r3, [pc, #320]	@ (80054b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	494d      	ldr	r1, [pc, #308]	@ (80054b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005382:	4313      	orrs	r3, r2
 8005384:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	2b00      	cmp	r3, #0
 8005390:	d044      	beq.n	800541c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d107      	bne.n	80053aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800539a:	4b47      	ldr	r3, [pc, #284]	@ (80054b8 <HAL_RCC_ClockConfig+0x1bc>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d119      	bne.n	80053da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e07f      	b.n	80054aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d003      	beq.n	80053ba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053b6:	2b03      	cmp	r3, #3
 80053b8:	d107      	bne.n	80053ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053ba:	4b3f      	ldr	r3, [pc, #252]	@ (80054b8 <HAL_RCC_ClockConfig+0x1bc>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d109      	bne.n	80053da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e06f      	b.n	80054aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053ca:	4b3b      	ldr	r3, [pc, #236]	@ (80054b8 <HAL_RCC_ClockConfig+0x1bc>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d101      	bne.n	80053da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e067      	b.n	80054aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053da:	4b37      	ldr	r3, [pc, #220]	@ (80054b8 <HAL_RCC_ClockConfig+0x1bc>)
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f023 0203 	bic.w	r2, r3, #3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	4934      	ldr	r1, [pc, #208]	@ (80054b8 <HAL_RCC_ClockConfig+0x1bc>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053ec:	f7fd fc42 	bl	8002c74 <HAL_GetTick>
 80053f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053f2:	e00a      	b.n	800540a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053f4:	f7fd fc3e 	bl	8002c74 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005402:	4293      	cmp	r3, r2
 8005404:	d901      	bls.n	800540a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e04f      	b.n	80054aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800540a:	4b2b      	ldr	r3, [pc, #172]	@ (80054b8 <HAL_RCC_ClockConfig+0x1bc>)
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f003 020c 	and.w	r2, r3, #12
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	429a      	cmp	r2, r3
 800541a:	d1eb      	bne.n	80053f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800541c:	4b25      	ldr	r3, [pc, #148]	@ (80054b4 <HAL_RCC_ClockConfig+0x1b8>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0307 	and.w	r3, r3, #7
 8005424:	683a      	ldr	r2, [r7, #0]
 8005426:	429a      	cmp	r2, r3
 8005428:	d20c      	bcs.n	8005444 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800542a:	4b22      	ldr	r3, [pc, #136]	@ (80054b4 <HAL_RCC_ClockConfig+0x1b8>)
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	b2d2      	uxtb	r2, r2
 8005430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005432:	4b20      	ldr	r3, [pc, #128]	@ (80054b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0307 	and.w	r3, r3, #7
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	429a      	cmp	r2, r3
 800543e:	d001      	beq.n	8005444 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e032      	b.n	80054aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0304 	and.w	r3, r3, #4
 800544c:	2b00      	cmp	r3, #0
 800544e:	d008      	beq.n	8005462 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005450:	4b19      	ldr	r3, [pc, #100]	@ (80054b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	4916      	ldr	r1, [pc, #88]	@ (80054b8 <HAL_RCC_ClockConfig+0x1bc>)
 800545e:	4313      	orrs	r3, r2
 8005460:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0308 	and.w	r3, r3, #8
 800546a:	2b00      	cmp	r3, #0
 800546c:	d009      	beq.n	8005482 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800546e:	4b12      	ldr	r3, [pc, #72]	@ (80054b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	00db      	lsls	r3, r3, #3
 800547c:	490e      	ldr	r1, [pc, #56]	@ (80054b8 <HAL_RCC_ClockConfig+0x1bc>)
 800547e:	4313      	orrs	r3, r2
 8005480:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005482:	f000 f821 	bl	80054c8 <HAL_RCC_GetSysClockFreq>
 8005486:	4602      	mov	r2, r0
 8005488:	4b0b      	ldr	r3, [pc, #44]	@ (80054b8 <HAL_RCC_ClockConfig+0x1bc>)
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	091b      	lsrs	r3, r3, #4
 800548e:	f003 030f 	and.w	r3, r3, #15
 8005492:	490a      	ldr	r1, [pc, #40]	@ (80054bc <HAL_RCC_ClockConfig+0x1c0>)
 8005494:	5ccb      	ldrb	r3, [r1, r3]
 8005496:	fa22 f303 	lsr.w	r3, r2, r3
 800549a:	4a09      	ldr	r2, [pc, #36]	@ (80054c0 <HAL_RCC_ClockConfig+0x1c4>)
 800549c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800549e:	4b09      	ldr	r3, [pc, #36]	@ (80054c4 <HAL_RCC_ClockConfig+0x1c8>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7fd fba2 	bl	8002bec <HAL_InitTick>

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	40023c00 	.word	0x40023c00
 80054b8:	40023800 	.word	0x40023800
 80054bc:	0800b4cc 	.word	0x0800b4cc
 80054c0:	20000000 	.word	0x20000000
 80054c4:	20000004 	.word	0x20000004

080054c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054cc:	b090      	sub	sp, #64	@ 0x40
 80054ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80054d0:	2300      	movs	r3, #0
 80054d2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80054d4:	2300      	movs	r3, #0
 80054d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80054d8:	2300      	movs	r3, #0
 80054da:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80054dc:	2300      	movs	r3, #0
 80054de:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054e0:	4b59      	ldr	r3, [pc, #356]	@ (8005648 <HAL_RCC_GetSysClockFreq+0x180>)
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f003 030c 	and.w	r3, r3, #12
 80054e8:	2b08      	cmp	r3, #8
 80054ea:	d00d      	beq.n	8005508 <HAL_RCC_GetSysClockFreq+0x40>
 80054ec:	2b08      	cmp	r3, #8
 80054ee:	f200 80a1 	bhi.w	8005634 <HAL_RCC_GetSysClockFreq+0x16c>
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d002      	beq.n	80054fc <HAL_RCC_GetSysClockFreq+0x34>
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	d003      	beq.n	8005502 <HAL_RCC_GetSysClockFreq+0x3a>
 80054fa:	e09b      	b.n	8005634 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054fc:	4b53      	ldr	r3, [pc, #332]	@ (800564c <HAL_RCC_GetSysClockFreq+0x184>)
 80054fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005500:	e09b      	b.n	800563a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005502:	4b53      	ldr	r3, [pc, #332]	@ (8005650 <HAL_RCC_GetSysClockFreq+0x188>)
 8005504:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005506:	e098      	b.n	800563a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005508:	4b4f      	ldr	r3, [pc, #316]	@ (8005648 <HAL_RCC_GetSysClockFreq+0x180>)
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005510:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005512:	4b4d      	ldr	r3, [pc, #308]	@ (8005648 <HAL_RCC_GetSysClockFreq+0x180>)
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d028      	beq.n	8005570 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800551e:	4b4a      	ldr	r3, [pc, #296]	@ (8005648 <HAL_RCC_GetSysClockFreq+0x180>)
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	099b      	lsrs	r3, r3, #6
 8005524:	2200      	movs	r2, #0
 8005526:	623b      	str	r3, [r7, #32]
 8005528:	627a      	str	r2, [r7, #36]	@ 0x24
 800552a:	6a3b      	ldr	r3, [r7, #32]
 800552c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005530:	2100      	movs	r1, #0
 8005532:	4b47      	ldr	r3, [pc, #284]	@ (8005650 <HAL_RCC_GetSysClockFreq+0x188>)
 8005534:	fb03 f201 	mul.w	r2, r3, r1
 8005538:	2300      	movs	r3, #0
 800553a:	fb00 f303 	mul.w	r3, r0, r3
 800553e:	4413      	add	r3, r2
 8005540:	4a43      	ldr	r2, [pc, #268]	@ (8005650 <HAL_RCC_GetSysClockFreq+0x188>)
 8005542:	fba0 1202 	umull	r1, r2, r0, r2
 8005546:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005548:	460a      	mov	r2, r1
 800554a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800554c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800554e:	4413      	add	r3, r2
 8005550:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005554:	2200      	movs	r2, #0
 8005556:	61bb      	str	r3, [r7, #24]
 8005558:	61fa      	str	r2, [r7, #28]
 800555a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800555e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005562:	f7fb fb79 	bl	8000c58 <__aeabi_uldivmod>
 8005566:	4602      	mov	r2, r0
 8005568:	460b      	mov	r3, r1
 800556a:	4613      	mov	r3, r2
 800556c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800556e:	e053      	b.n	8005618 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005570:	4b35      	ldr	r3, [pc, #212]	@ (8005648 <HAL_RCC_GetSysClockFreq+0x180>)
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	099b      	lsrs	r3, r3, #6
 8005576:	2200      	movs	r2, #0
 8005578:	613b      	str	r3, [r7, #16]
 800557a:	617a      	str	r2, [r7, #20]
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005582:	f04f 0b00 	mov.w	fp, #0
 8005586:	4652      	mov	r2, sl
 8005588:	465b      	mov	r3, fp
 800558a:	f04f 0000 	mov.w	r0, #0
 800558e:	f04f 0100 	mov.w	r1, #0
 8005592:	0159      	lsls	r1, r3, #5
 8005594:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005598:	0150      	lsls	r0, r2, #5
 800559a:	4602      	mov	r2, r0
 800559c:	460b      	mov	r3, r1
 800559e:	ebb2 080a 	subs.w	r8, r2, sl
 80055a2:	eb63 090b 	sbc.w	r9, r3, fp
 80055a6:	f04f 0200 	mov.w	r2, #0
 80055aa:	f04f 0300 	mov.w	r3, #0
 80055ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80055b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80055b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80055ba:	ebb2 0408 	subs.w	r4, r2, r8
 80055be:	eb63 0509 	sbc.w	r5, r3, r9
 80055c2:	f04f 0200 	mov.w	r2, #0
 80055c6:	f04f 0300 	mov.w	r3, #0
 80055ca:	00eb      	lsls	r3, r5, #3
 80055cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055d0:	00e2      	lsls	r2, r4, #3
 80055d2:	4614      	mov	r4, r2
 80055d4:	461d      	mov	r5, r3
 80055d6:	eb14 030a 	adds.w	r3, r4, sl
 80055da:	603b      	str	r3, [r7, #0]
 80055dc:	eb45 030b 	adc.w	r3, r5, fp
 80055e0:	607b      	str	r3, [r7, #4]
 80055e2:	f04f 0200 	mov.w	r2, #0
 80055e6:	f04f 0300 	mov.w	r3, #0
 80055ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055ee:	4629      	mov	r1, r5
 80055f0:	028b      	lsls	r3, r1, #10
 80055f2:	4621      	mov	r1, r4
 80055f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055f8:	4621      	mov	r1, r4
 80055fa:	028a      	lsls	r2, r1, #10
 80055fc:	4610      	mov	r0, r2
 80055fe:	4619      	mov	r1, r3
 8005600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005602:	2200      	movs	r2, #0
 8005604:	60bb      	str	r3, [r7, #8]
 8005606:	60fa      	str	r2, [r7, #12]
 8005608:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800560c:	f7fb fb24 	bl	8000c58 <__aeabi_uldivmod>
 8005610:	4602      	mov	r2, r0
 8005612:	460b      	mov	r3, r1
 8005614:	4613      	mov	r3, r2
 8005616:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005618:	4b0b      	ldr	r3, [pc, #44]	@ (8005648 <HAL_RCC_GetSysClockFreq+0x180>)
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	0c1b      	lsrs	r3, r3, #16
 800561e:	f003 0303 	and.w	r3, r3, #3
 8005622:	3301      	adds	r3, #1
 8005624:	005b      	lsls	r3, r3, #1
 8005626:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005628:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800562a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800562c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005630:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005632:	e002      	b.n	800563a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005634:	4b05      	ldr	r3, [pc, #20]	@ (800564c <HAL_RCC_GetSysClockFreq+0x184>)
 8005636:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005638:	bf00      	nop
    }
  }
  return sysclockfreq;
 800563a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800563c:	4618      	mov	r0, r3
 800563e:	3740      	adds	r7, #64	@ 0x40
 8005640:	46bd      	mov	sp, r7
 8005642:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005646:	bf00      	nop
 8005648:	40023800 	.word	0x40023800
 800564c:	00f42400 	.word	0x00f42400
 8005650:	017d7840 	.word	0x017d7840

08005654 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005654:	b480      	push	{r7}
 8005656:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005658:	4b03      	ldr	r3, [pc, #12]	@ (8005668 <HAL_RCC_GetHCLKFreq+0x14>)
 800565a:	681b      	ldr	r3, [r3, #0]
}
 800565c:	4618      	mov	r0, r3
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	20000000 	.word	0x20000000

0800566c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005670:	f7ff fff0 	bl	8005654 <HAL_RCC_GetHCLKFreq>
 8005674:	4602      	mov	r2, r0
 8005676:	4b05      	ldr	r3, [pc, #20]	@ (800568c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	0a9b      	lsrs	r3, r3, #10
 800567c:	f003 0307 	and.w	r3, r3, #7
 8005680:	4903      	ldr	r1, [pc, #12]	@ (8005690 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005682:	5ccb      	ldrb	r3, [r1, r3]
 8005684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005688:	4618      	mov	r0, r3
 800568a:	bd80      	pop	{r7, pc}
 800568c:	40023800 	.word	0x40023800
 8005690:	0800b4dc 	.word	0x0800b4dc

08005694 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005698:	f7ff ffdc 	bl	8005654 <HAL_RCC_GetHCLKFreq>
 800569c:	4602      	mov	r2, r0
 800569e:	4b05      	ldr	r3, [pc, #20]	@ (80056b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	0b5b      	lsrs	r3, r3, #13
 80056a4:	f003 0307 	and.w	r3, r3, #7
 80056a8:	4903      	ldr	r1, [pc, #12]	@ (80056b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056aa:	5ccb      	ldrb	r3, [r1, r3]
 80056ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	40023800 	.word	0x40023800
 80056b8:	0800b4dc 	.word	0x0800b4dc

080056bc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056c4:	2300      	movs	r3, #0
 80056c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80056c8:	2300      	movs	r3, #0
 80056ca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0301 	and.w	r3, r3, #1
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d105      	bne.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d035      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80056e4:	4b67      	ldr	r3, [pc, #412]	@ (8005884 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80056e6:	2200      	movs	r2, #0
 80056e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80056ea:	f7fd fac3 	bl	8002c74 <HAL_GetTick>
 80056ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056f0:	e008      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80056f2:	f7fd fabf 	bl	8002c74 <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d901      	bls.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e0ba      	b.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005704:	4b60      	ldr	r3, [pc, #384]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1f0      	bne.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	019a      	lsls	r2, r3, #6
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	071b      	lsls	r3, r3, #28
 800571c:	495a      	ldr	r1, [pc, #360]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800571e:	4313      	orrs	r3, r2
 8005720:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005724:	4b57      	ldr	r3, [pc, #348]	@ (8005884 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005726:	2201      	movs	r2, #1
 8005728:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800572a:	f7fd faa3 	bl	8002c74 <HAL_GetTick>
 800572e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005730:	e008      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005732:	f7fd fa9f 	bl	8002c74 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	2b02      	cmp	r3, #2
 800573e:	d901      	bls.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e09a      	b.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005744:	4b50      	ldr	r3, [pc, #320]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d0f0      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0302 	and.w	r3, r3, #2
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 8083 	beq.w	8005864 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800575e:	2300      	movs	r3, #0
 8005760:	60fb      	str	r3, [r7, #12]
 8005762:	4b49      	ldr	r3, [pc, #292]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005766:	4a48      	ldr	r2, [pc, #288]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005768:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800576c:	6413      	str	r3, [r2, #64]	@ 0x40
 800576e:	4b46      	ldr	r3, [pc, #280]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005772:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005776:	60fb      	str	r3, [r7, #12]
 8005778:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800577a:	4b44      	ldr	r3, [pc, #272]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a43      	ldr	r2, [pc, #268]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005780:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005784:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005786:	f7fd fa75 	bl	8002c74 <HAL_GetTick>
 800578a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800578c:	e008      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800578e:	f7fd fa71 	bl	8002c74 <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	2b02      	cmp	r3, #2
 800579a:	d901      	bls.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e06c      	b.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80057a0:	4b3a      	ldr	r3, [pc, #232]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d0f0      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80057ac:	4b36      	ldr	r3, [pc, #216]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80057ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057b4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d02f      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d028      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057ca:	4b2f      	ldr	r3, [pc, #188]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80057cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057d2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80057d4:	4b2e      	ldr	r3, [pc, #184]	@ (8005890 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80057d6:	2201      	movs	r2, #1
 80057d8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80057da:	4b2d      	ldr	r3, [pc, #180]	@ (8005890 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80057dc:	2200      	movs	r2, #0
 80057de:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80057e0:	4a29      	ldr	r2, [pc, #164]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80057e6:	4b28      	ldr	r3, [pc, #160]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80057e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ea:	f003 0301 	and.w	r3, r3, #1
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d114      	bne.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80057f2:	f7fd fa3f 	bl	8002c74 <HAL_GetTick>
 80057f6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057f8:	e00a      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057fa:	f7fd fa3b 	bl	8002c74 <HAL_GetTick>
 80057fe:	4602      	mov	r2, r0
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005808:	4293      	cmp	r3, r2
 800580a:	d901      	bls.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e034      	b.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005810:	4b1d      	ldr	r3, [pc, #116]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005814:	f003 0302 	and.w	r3, r3, #2
 8005818:	2b00      	cmp	r3, #0
 800581a:	d0ee      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005824:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005828:	d10d      	bne.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800582a:	4b17      	ldr	r3, [pc, #92]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800583a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800583e:	4912      	ldr	r1, [pc, #72]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005840:	4313      	orrs	r3, r2
 8005842:	608b      	str	r3, [r1, #8]
 8005844:	e005      	b.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005846:	4b10      	ldr	r3, [pc, #64]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	4a0f      	ldr	r2, [pc, #60]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800584c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005850:	6093      	str	r3, [r2, #8]
 8005852:	4b0d      	ldr	r3, [pc, #52]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005854:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800585e:	490a      	ldr	r1, [pc, #40]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005860:	4313      	orrs	r3, r2
 8005862:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0308 	and.w	r3, r3, #8
 800586c:	2b00      	cmp	r3, #0
 800586e:	d003      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	7c1a      	ldrb	r2, [r3, #16]
 8005874:	4b07      	ldr	r3, [pc, #28]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005876:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3718      	adds	r7, #24
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	42470068 	.word	0x42470068
 8005888:	40023800 	.word	0x40023800
 800588c:	40007000 	.word	0x40007000
 8005890:	42470e40 	.word	0x42470e40
 8005894:	424711e0 	.word	0x424711e0

08005898 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e073      	b.n	8005996 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	7f5b      	ldrb	r3, [r3, #29]
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d105      	bne.n	80058c4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f7fc fe1a 	bl	80024f8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2202      	movs	r2, #2
 80058c8:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	f003 0310 	and.w	r3, r3, #16
 80058d4:	2b10      	cmp	r3, #16
 80058d6:	d055      	beq.n	8005984 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	22ca      	movs	r2, #202	@ 0xca
 80058de:	625a      	str	r2, [r3, #36]	@ 0x24
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2253      	movs	r2, #83	@ 0x53
 80058e6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f99d 	bl	8005c28 <RTC_EnterInitMode>
 80058ee:	4603      	mov	r3, r0
 80058f0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80058f2:	7bfb      	ldrb	r3, [r7, #15]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d12c      	bne.n	8005952 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	6812      	ldr	r2, [r2, #0]
 8005902:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005906:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800590a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6899      	ldr	r1, [r3, #8]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685a      	ldr	r2, [r3, #4]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	431a      	orrs	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	431a      	orrs	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	430a      	orrs	r2, r1
 8005928:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	68d2      	ldr	r2, [r2, #12]
 8005932:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6919      	ldr	r1, [r3, #16]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	041a      	lsls	r2, r3, #16
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	430a      	orrs	r2, r1
 8005946:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 f9a4 	bl	8005c96 <RTC_ExitInitMode>
 800594e:	4603      	mov	r3, r0
 8005950:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005952:	7bfb      	ldrb	r3, [r7, #15]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d110      	bne.n	800597a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005966:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	699a      	ldr	r2, [r3, #24]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	430a      	orrs	r2, r1
 8005978:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	22ff      	movs	r2, #255	@ 0xff
 8005980:	625a      	str	r2, [r3, #36]	@ 0x24
 8005982:	e001      	b.n	8005988 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005984:	2300      	movs	r3, #0
 8005986:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005988:	7bfb      	ldrb	r3, [r7, #15]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d102      	bne.n	8005994 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8005994:	7bfb      	ldrb	r3, [r7, #15]
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800599e:	b590      	push	{r4, r7, lr}
 80059a0:	b087      	sub	sp, #28
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	60f8      	str	r0, [r7, #12]
 80059a6:	60b9      	str	r1, [r7, #8]
 80059a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80059aa:	2300      	movs	r3, #0
 80059ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	7f1b      	ldrb	r3, [r3, #28]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d101      	bne.n	80059ba <HAL_RTC_SetTime+0x1c>
 80059b6:	2302      	movs	r3, #2
 80059b8:	e087      	b.n	8005aca <HAL_RTC_SetTime+0x12c>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2201      	movs	r2, #1
 80059be:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2202      	movs	r2, #2
 80059c4:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d126      	bne.n	8005a1a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d102      	bne.n	80059e0 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	2200      	movs	r2, #0
 80059de:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	4618      	mov	r0, r3
 80059e6:	f000 f97b 	bl	8005ce0 <RTC_ByteToBcd2>
 80059ea:	4603      	mov	r3, r0
 80059ec:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	785b      	ldrb	r3, [r3, #1]
 80059f2:	4618      	mov	r0, r3
 80059f4:	f000 f974 	bl	8005ce0 <RTC_ByteToBcd2>
 80059f8:	4603      	mov	r3, r0
 80059fa:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80059fc:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	789b      	ldrb	r3, [r3, #2]
 8005a02:	4618      	mov	r0, r3
 8005a04:	f000 f96c 	bl	8005ce0 <RTC_ByteToBcd2>
 8005a08:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005a0a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	78db      	ldrb	r3, [r3, #3]
 8005a12:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005a14:	4313      	orrs	r3, r2
 8005a16:	617b      	str	r3, [r7, #20]
 8005a18:	e018      	b.n	8005a4c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d102      	bne.n	8005a2e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	785b      	ldrb	r3, [r3, #1]
 8005a38:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005a3a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005a40:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	78db      	ldrb	r3, [r3, #3]
 8005a46:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	22ca      	movs	r2, #202	@ 0xca
 8005a52:	625a      	str	r2, [r3, #36]	@ 0x24
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2253      	movs	r2, #83	@ 0x53
 8005a5a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f000 f8e3 	bl	8005c28 <RTC_EnterInitMode>
 8005a62:	4603      	mov	r3, r0
 8005a64:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005a66:	7cfb      	ldrb	r3, [r7, #19]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d120      	bne.n	8005aae <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005a76:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005a7a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689a      	ldr	r2, [r3, #8]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005a8a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	6899      	ldr	r1, [r3, #8]
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	68da      	ldr	r2, [r3, #12]
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	431a      	orrs	r2, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	f000 f8f6 	bl	8005c96 <RTC_ExitInitMode>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005aae:	7cfb      	ldrb	r3, [r7, #19]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d102      	bne.n	8005aba <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	22ff      	movs	r2, #255	@ 0xff
 8005ac0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	771a      	strb	r2, [r3, #28]

  return status;
 8005ac8:	7cfb      	ldrb	r3, [r7, #19]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	371c      	adds	r7, #28
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd90      	pop	{r4, r7, pc}

08005ad2 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005ad2:	b590      	push	{r4, r7, lr}
 8005ad4:	b087      	sub	sp, #28
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	60f8      	str	r0, [r7, #12]
 8005ada:	60b9      	str	r1, [r7, #8]
 8005adc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	7f1b      	ldrb	r3, [r3, #28]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d101      	bne.n	8005aee <HAL_RTC_SetDate+0x1c>
 8005aea:	2302      	movs	r3, #2
 8005aec:	e071      	b.n	8005bd2 <HAL_RTC_SetDate+0x100>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2201      	movs	r2, #1
 8005af2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2202      	movs	r2, #2
 8005af8:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d10e      	bne.n	8005b1e <HAL_RTC_SetDate+0x4c>
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	785b      	ldrb	r3, [r3, #1]
 8005b04:	f003 0310 	and.w	r3, r3, #16
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d008      	beq.n	8005b1e <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	785b      	ldrb	r3, [r3, #1]
 8005b10:	f023 0310 	bic.w	r3, r3, #16
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	330a      	adds	r3, #10
 8005b18:	b2da      	uxtb	r2, r3
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d11c      	bne.n	8005b5e <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	78db      	ldrb	r3, [r3, #3]
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f000 f8d9 	bl	8005ce0 <RTC_ByteToBcd2>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	785b      	ldrb	r3, [r3, #1]
 8005b36:	4618      	mov	r0, r3
 8005b38:	f000 f8d2 	bl	8005ce0 <RTC_ByteToBcd2>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005b40:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	789b      	ldrb	r3, [r3, #2]
 8005b46:	4618      	mov	r0, r3
 8005b48:	f000 f8ca 	bl	8005ce0 <RTC_ByteToBcd2>
 8005b4c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005b4e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	617b      	str	r3, [r7, #20]
 8005b5c:	e00e      	b.n	8005b7c <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	78db      	ldrb	r3, [r3, #3]
 8005b62:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	785b      	ldrb	r3, [r3, #1]
 8005b68:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005b6a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005b70:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	22ca      	movs	r2, #202	@ 0xca
 8005b82:	625a      	str	r2, [r3, #36]	@ 0x24
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2253      	movs	r2, #83	@ 0x53
 8005b8a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 f84b 	bl	8005c28 <RTC_EnterInitMode>
 8005b92:	4603      	mov	r3, r0
 8005b94:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005b96:	7cfb      	ldrb	r3, [r7, #19]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d10c      	bne.n	8005bb6 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005ba6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005baa:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f000 f872 	bl	8005c96 <RTC_ExitInitMode>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005bb6:	7cfb      	ldrb	r3, [r7, #19]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d102      	bne.n	8005bc2 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	22ff      	movs	r2, #255	@ 0xff
 8005bc8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	771a      	strb	r2, [r3, #28]

  return status;
 8005bd0:	7cfb      	ldrb	r3, [r7, #19]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	371c      	adds	r7, #28
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd90      	pop	{r4, r7, pc}
	...

08005bdc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005be4:	2300      	movs	r3, #0
 8005be6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a0d      	ldr	r2, [pc, #52]	@ (8005c24 <HAL_RTC_WaitForSynchro+0x48>)
 8005bee:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005bf0:	f7fd f840 	bl	8002c74 <HAL_GetTick>
 8005bf4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005bf6:	e009      	b.n	8005c0c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005bf8:	f7fd f83c 	bl	8002c74 <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005c06:	d901      	bls.n	8005c0c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e007      	b.n	8005c1c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	f003 0320 	and.w	r3, r3, #32
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d0ee      	beq.n	8005bf8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3710      	adds	r7, #16
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	00013f5f 	.word	0x00013f5f

08005c28 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c30:	2300      	movs	r3, #0
 8005c32:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005c34:	2300      	movs	r3, #0
 8005c36:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d122      	bne.n	8005c8c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68da      	ldr	r2, [r3, #12]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005c54:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c56:	f7fd f80d 	bl	8002c74 <HAL_GetTick>
 8005c5a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005c5c:	e00c      	b.n	8005c78 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c5e:	f7fd f809 	bl	8002c74 <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005c6c:	d904      	bls.n	8005c78 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2204      	movs	r2, #4
 8005c72:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d102      	bne.n	8005c8c <RTC_EnterInitMode+0x64>
 8005c86:	7bfb      	ldrb	r3, [r7, #15]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d1e8      	bne.n	8005c5e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b084      	sub	sp, #16
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68da      	ldr	r2, [r3, #12]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005cb0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	f003 0320 	and.w	r3, r3, #32
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10a      	bne.n	8005cd6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f7ff ff8b 	bl	8005bdc <HAL_RTC_WaitForSynchro>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d004      	beq.n	8005cd6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2204      	movs	r2, #4
 8005cd0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3710      	adds	r7, #16
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005cea:	2300      	movs	r3, #0
 8005cec:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005cee:	e005      	b.n	8005cfc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8005cf6:	79fb      	ldrb	r3, [r7, #7]
 8005cf8:	3b0a      	subs	r3, #10
 8005cfa:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005cfc:	79fb      	ldrb	r3, [r7, #7]
 8005cfe:	2b09      	cmp	r3, #9
 8005d00:	d8f6      	bhi.n	8005cf0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	011b      	lsls	r3, r3, #4
 8005d08:	b2da      	uxtb	r2, r3
 8005d0a:	79fb      	ldrb	r3, [r7, #7]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	b2db      	uxtb	r3, r3
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3714      	adds	r7, #20
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d101      	bne.n	8005d2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e041      	b.n	8005db2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d106      	bne.n	8005d48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f7fc fc04 	bl	8002550 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	3304      	adds	r3, #4
 8005d58:	4619      	mov	r1, r3
 8005d5a:	4610      	mov	r0, r2
 8005d5c:	f000 fd3c 	bl	80067d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3708      	adds	r7, #8
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b082      	sub	sp, #8
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d101      	bne.n	8005dcc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e041      	b.n	8005e50 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d106      	bne.n	8005de6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 f839 	bl	8005e58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2202      	movs	r2, #2
 8005dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	3304      	adds	r3, #4
 8005df6:	4619      	mov	r1, r3
 8005df8:	4610      	mov	r0, r2
 8005dfa:	f000 fced 	bl	80067d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3708      	adds	r7, #8
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d109      	bne.n	8005e90 <HAL_TIM_PWM_Start+0x24>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	bf14      	ite	ne
 8005e88:	2301      	movne	r3, #1
 8005e8a:	2300      	moveq	r3, #0
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	e022      	b.n	8005ed6 <HAL_TIM_PWM_Start+0x6a>
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	2b04      	cmp	r3, #4
 8005e94:	d109      	bne.n	8005eaa <HAL_TIM_PWM_Start+0x3e>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	bf14      	ite	ne
 8005ea2:	2301      	movne	r3, #1
 8005ea4:	2300      	moveq	r3, #0
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	e015      	b.n	8005ed6 <HAL_TIM_PWM_Start+0x6a>
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	2b08      	cmp	r3, #8
 8005eae:	d109      	bne.n	8005ec4 <HAL_TIM_PWM_Start+0x58>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	bf14      	ite	ne
 8005ebc:	2301      	movne	r3, #1
 8005ebe:	2300      	moveq	r3, #0
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	e008      	b.n	8005ed6 <HAL_TIM_PWM_Start+0x6a>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	bf14      	ite	ne
 8005ed0:	2301      	movne	r3, #1
 8005ed2:	2300      	moveq	r3, #0
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e068      	b.n	8005fb0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d104      	bne.n	8005eee <HAL_TIM_PWM_Start+0x82>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005eec:	e013      	b.n	8005f16 <HAL_TIM_PWM_Start+0xaa>
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	2b04      	cmp	r3, #4
 8005ef2:	d104      	bne.n	8005efe <HAL_TIM_PWM_Start+0x92>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2202      	movs	r2, #2
 8005ef8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005efc:	e00b      	b.n	8005f16 <HAL_TIM_PWM_Start+0xaa>
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	2b08      	cmp	r3, #8
 8005f02:	d104      	bne.n	8005f0e <HAL_TIM_PWM_Start+0xa2>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2202      	movs	r2, #2
 8005f08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f0c:	e003      	b.n	8005f16 <HAL_TIM_PWM_Start+0xaa>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2202      	movs	r2, #2
 8005f12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	6839      	ldr	r1, [r7, #0]
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f001 f82a 	bl	8006f78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a23      	ldr	r2, [pc, #140]	@ (8005fb8 <HAL_TIM_PWM_Start+0x14c>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d107      	bne.n	8005f3e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005f3c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a1d      	ldr	r2, [pc, #116]	@ (8005fb8 <HAL_TIM_PWM_Start+0x14c>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d018      	beq.n	8005f7a <HAL_TIM_PWM_Start+0x10e>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f50:	d013      	beq.n	8005f7a <HAL_TIM_PWM_Start+0x10e>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a19      	ldr	r2, [pc, #100]	@ (8005fbc <HAL_TIM_PWM_Start+0x150>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d00e      	beq.n	8005f7a <HAL_TIM_PWM_Start+0x10e>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a17      	ldr	r2, [pc, #92]	@ (8005fc0 <HAL_TIM_PWM_Start+0x154>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d009      	beq.n	8005f7a <HAL_TIM_PWM_Start+0x10e>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a16      	ldr	r2, [pc, #88]	@ (8005fc4 <HAL_TIM_PWM_Start+0x158>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d004      	beq.n	8005f7a <HAL_TIM_PWM_Start+0x10e>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a14      	ldr	r2, [pc, #80]	@ (8005fc8 <HAL_TIM_PWM_Start+0x15c>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d111      	bne.n	8005f9e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	f003 0307 	and.w	r3, r3, #7
 8005f84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2b06      	cmp	r3, #6
 8005f8a:	d010      	beq.n	8005fae <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f042 0201 	orr.w	r2, r2, #1
 8005f9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f9c:	e007      	b.n	8005fae <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f042 0201 	orr.w	r2, r2, #1
 8005fac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3710      	adds	r7, #16
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	40010000 	.word	0x40010000
 8005fbc:	40000400 	.word	0x40000400
 8005fc0:	40000800 	.word	0x40000800
 8005fc4:	40000c00 	.word	0x40000c00
 8005fc8:	40014000 	.word	0x40014000

08005fcc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	6839      	ldr	r1, [r7, #0]
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f000 ffca 	bl	8006f78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a29      	ldr	r2, [pc, #164]	@ (8006090 <HAL_TIM_PWM_Stop+0xc4>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d117      	bne.n	800601e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	6a1a      	ldr	r2, [r3, #32]
 8005ff4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d10f      	bne.n	800601e <HAL_TIM_PWM_Stop+0x52>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	6a1a      	ldr	r2, [r3, #32]
 8006004:	f240 4344 	movw	r3, #1092	@ 0x444
 8006008:	4013      	ands	r3, r2
 800600a:	2b00      	cmp	r3, #0
 800600c:	d107      	bne.n	800601e <HAL_TIM_PWM_Stop+0x52>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800601c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	6a1a      	ldr	r2, [r3, #32]
 8006024:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006028:	4013      	ands	r3, r2
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10f      	bne.n	800604e <HAL_TIM_PWM_Stop+0x82>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	6a1a      	ldr	r2, [r3, #32]
 8006034:	f240 4344 	movw	r3, #1092	@ 0x444
 8006038:	4013      	ands	r3, r2
 800603a:	2b00      	cmp	r3, #0
 800603c:	d107      	bne.n	800604e <HAL_TIM_PWM_Stop+0x82>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f022 0201 	bic.w	r2, r2, #1
 800604c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d104      	bne.n	800605e <HAL_TIM_PWM_Stop+0x92>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800605c:	e013      	b.n	8006086 <HAL_TIM_PWM_Stop+0xba>
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	2b04      	cmp	r3, #4
 8006062:	d104      	bne.n	800606e <HAL_TIM_PWM_Stop+0xa2>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800606c:	e00b      	b.n	8006086 <HAL_TIM_PWM_Stop+0xba>
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	2b08      	cmp	r3, #8
 8006072:	d104      	bne.n	800607e <HAL_TIM_PWM_Stop+0xb2>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800607c:	e003      	b.n	8006086 <HAL_TIM_PWM_Stop+0xba>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2201      	movs	r2, #1
 8006082:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3708      	adds	r7, #8
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	40010000 	.word	0x40010000

08006094 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e041      	b.n	800612a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d106      	bne.n	80060c0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f839 	bl	8006132 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2202      	movs	r2, #2
 80060c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	3304      	adds	r3, #4
 80060d0:	4619      	mov	r1, r3
 80060d2:	4610      	mov	r0, r2
 80060d4:	f000 fb80 	bl	80067d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3708      	adds	r7, #8
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006132:	b480      	push	{r7}
 8006134:	b083      	sub	sp, #12
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800613a:	bf00      	nop
 800613c:	370c      	adds	r7, #12
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr

08006146 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006146:	b580      	push	{r7, lr}
 8006148:	b084      	sub	sp, #16
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	f003 0302 	and.w	r3, r3, #2
 8006164:	2b00      	cmp	r3, #0
 8006166:	d020      	beq.n	80061aa <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f003 0302 	and.w	r3, r3, #2
 800616e:	2b00      	cmp	r3, #0
 8006170:	d01b      	beq.n	80061aa <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f06f 0202 	mvn.w	r2, #2
 800617a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	f003 0303 	and.w	r3, r3, #3
 800618c:	2b00      	cmp	r3, #0
 800618e:	d003      	beq.n	8006198 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 fb02 	bl	800679a <HAL_TIM_IC_CaptureCallback>
 8006196:	e005      	b.n	80061a4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 faf4 	bl	8006786 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 fb05 	bl	80067ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	f003 0304 	and.w	r3, r3, #4
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d020      	beq.n	80061f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f003 0304 	and.w	r3, r3, #4
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d01b      	beq.n	80061f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f06f 0204 	mvn.w	r2, #4
 80061c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2202      	movs	r2, #2
 80061cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d003      	beq.n	80061e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 fadc 	bl	800679a <HAL_TIM_IC_CaptureCallback>
 80061e2:	e005      	b.n	80061f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 face 	bl	8006786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fadf 	bl	80067ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	f003 0308 	and.w	r3, r3, #8
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d020      	beq.n	8006242 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f003 0308 	and.w	r3, r3, #8
 8006206:	2b00      	cmp	r3, #0
 8006208:	d01b      	beq.n	8006242 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f06f 0208 	mvn.w	r2, #8
 8006212:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2204      	movs	r2, #4
 8006218:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	69db      	ldr	r3, [r3, #28]
 8006220:	f003 0303 	and.w	r3, r3, #3
 8006224:	2b00      	cmp	r3, #0
 8006226:	d003      	beq.n	8006230 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 fab6 	bl	800679a <HAL_TIM_IC_CaptureCallback>
 800622e:	e005      	b.n	800623c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 faa8 	bl	8006786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 fab9 	bl	80067ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	f003 0310 	and.w	r3, r3, #16
 8006248:	2b00      	cmp	r3, #0
 800624a:	d020      	beq.n	800628e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f003 0310 	and.w	r3, r3, #16
 8006252:	2b00      	cmp	r3, #0
 8006254:	d01b      	beq.n	800628e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f06f 0210 	mvn.w	r2, #16
 800625e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2208      	movs	r2, #8
 8006264:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	69db      	ldr	r3, [r3, #28]
 800626c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006270:	2b00      	cmp	r3, #0
 8006272:	d003      	beq.n	800627c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 fa90 	bl	800679a <HAL_TIM_IC_CaptureCallback>
 800627a:	e005      	b.n	8006288 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 fa82 	bl	8006786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fa93 	bl	80067ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	f003 0301 	and.w	r3, r3, #1
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00c      	beq.n	80062b2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f003 0301 	and.w	r3, r3, #1
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d007      	beq.n	80062b2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f06f 0201 	mvn.w	r2, #1
 80062aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 fa60 	bl	8006772 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00c      	beq.n	80062d6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d007      	beq.n	80062d6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80062ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 ff9d 	bl	8007210 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00c      	beq.n	80062fa <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d007      	beq.n	80062fa <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80062f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 fa64 	bl	80067c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	f003 0320 	and.w	r3, r3, #32
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00c      	beq.n	800631e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f003 0320 	and.w	r3, r3, #32
 800630a:	2b00      	cmp	r3, #0
 800630c:	d007      	beq.n	800631e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f06f 0220 	mvn.w	r2, #32
 8006316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 ff6f 	bl	80071fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800631e:	bf00      	nop
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b086      	sub	sp, #24
 800632a:	af00      	add	r7, sp, #0
 800632c:	60f8      	str	r0, [r7, #12]
 800632e:	60b9      	str	r1, [r7, #8]
 8006330:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006332:	2300      	movs	r3, #0
 8006334:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800633c:	2b01      	cmp	r3, #1
 800633e:	d101      	bne.n	8006344 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006340:	2302      	movs	r3, #2
 8006342:	e088      	b.n	8006456 <HAL_TIM_IC_ConfigChannel+0x130>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d11b      	bne.n	800638a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006362:	f000 fc51 	bl	8006c08 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	699a      	ldr	r2, [r3, #24]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f022 020c 	bic.w	r2, r2, #12
 8006374:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	6999      	ldr	r1, [r3, #24]
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	689a      	ldr	r2, [r3, #8]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	430a      	orrs	r2, r1
 8006386:	619a      	str	r2, [r3, #24]
 8006388:	e060      	b.n	800644c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2b04      	cmp	r3, #4
 800638e:	d11c      	bne.n	80063ca <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80063a0:	f000 fcc9 	bl	8006d36 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	699a      	ldr	r2, [r3, #24]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80063b2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6999      	ldr	r1, [r3, #24]
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	021a      	lsls	r2, r3, #8
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	430a      	orrs	r2, r1
 80063c6:	619a      	str	r2, [r3, #24]
 80063c8:	e040      	b.n	800644c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2b08      	cmp	r3, #8
 80063ce:	d11b      	bne.n	8006408 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80063e0:	f000 fd16 	bl	8006e10 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	69da      	ldr	r2, [r3, #28]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f022 020c 	bic.w	r2, r2, #12
 80063f2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	69d9      	ldr	r1, [r3, #28]
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	689a      	ldr	r2, [r3, #8]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	430a      	orrs	r2, r1
 8006404:	61da      	str	r2, [r3, #28]
 8006406:	e021      	b.n	800644c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b0c      	cmp	r3, #12
 800640c:	d11c      	bne.n	8006448 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800641e:	f000 fd33 	bl	8006e88 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	69da      	ldr	r2, [r3, #28]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006430:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	69d9      	ldr	r1, [r3, #28]
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	021a      	lsls	r2, r3, #8
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	430a      	orrs	r2, r1
 8006444:	61da      	str	r2, [r3, #28]
 8006446:	e001      	b.n	800644c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006454:	7dfb      	ldrb	r3, [r7, #23]
}
 8006456:	4618      	mov	r0, r3
 8006458:	3718      	adds	r7, #24
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
	...

08006460 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800646c:	2300      	movs	r3, #0
 800646e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006476:	2b01      	cmp	r3, #1
 8006478:	d101      	bne.n	800647e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800647a:	2302      	movs	r3, #2
 800647c:	e0ae      	b.n	80065dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2b0c      	cmp	r3, #12
 800648a:	f200 809f 	bhi.w	80065cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800648e:	a201      	add	r2, pc, #4	@ (adr r2, 8006494 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006494:	080064c9 	.word	0x080064c9
 8006498:	080065cd 	.word	0x080065cd
 800649c:	080065cd 	.word	0x080065cd
 80064a0:	080065cd 	.word	0x080065cd
 80064a4:	08006509 	.word	0x08006509
 80064a8:	080065cd 	.word	0x080065cd
 80064ac:	080065cd 	.word	0x080065cd
 80064b0:	080065cd 	.word	0x080065cd
 80064b4:	0800654b 	.word	0x0800654b
 80064b8:	080065cd 	.word	0x080065cd
 80064bc:	080065cd 	.word	0x080065cd
 80064c0:	080065cd 	.word	0x080065cd
 80064c4:	0800658b 	.word	0x0800658b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68b9      	ldr	r1, [r7, #8]
 80064ce:	4618      	mov	r0, r3
 80064d0:	f000 fa0e 	bl	80068f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	699a      	ldr	r2, [r3, #24]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f042 0208 	orr.w	r2, r2, #8
 80064e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	699a      	ldr	r2, [r3, #24]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f022 0204 	bic.w	r2, r2, #4
 80064f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	6999      	ldr	r1, [r3, #24]
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	691a      	ldr	r2, [r3, #16]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	430a      	orrs	r2, r1
 8006504:	619a      	str	r2, [r3, #24]
      break;
 8006506:	e064      	b.n	80065d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68b9      	ldr	r1, [r7, #8]
 800650e:	4618      	mov	r0, r3
 8006510:	f000 fa54 	bl	80069bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	699a      	ldr	r2, [r3, #24]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006522:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	699a      	ldr	r2, [r3, #24]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006532:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6999      	ldr	r1, [r3, #24]
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	021a      	lsls	r2, r3, #8
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	430a      	orrs	r2, r1
 8006546:	619a      	str	r2, [r3, #24]
      break;
 8006548:	e043      	b.n	80065d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68b9      	ldr	r1, [r7, #8]
 8006550:	4618      	mov	r0, r3
 8006552:	f000 fa9f 	bl	8006a94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	69da      	ldr	r2, [r3, #28]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f042 0208 	orr.w	r2, r2, #8
 8006564:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	69da      	ldr	r2, [r3, #28]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f022 0204 	bic.w	r2, r2, #4
 8006574:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	69d9      	ldr	r1, [r3, #28]
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	691a      	ldr	r2, [r3, #16]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	430a      	orrs	r2, r1
 8006586:	61da      	str	r2, [r3, #28]
      break;
 8006588:	e023      	b.n	80065d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68b9      	ldr	r1, [r7, #8]
 8006590:	4618      	mov	r0, r3
 8006592:	f000 fae9 	bl	8006b68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	69da      	ldr	r2, [r3, #28]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	69da      	ldr	r2, [r3, #28]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	69d9      	ldr	r1, [r3, #28]
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	021a      	lsls	r2, r3, #8
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	61da      	str	r2, [r3, #28]
      break;
 80065ca:	e002      	b.n	80065d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	75fb      	strb	r3, [r7, #23]
      break;
 80065d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80065da:	7dfb      	ldrb	r3, [r7, #23]
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3718      	adds	r7, #24
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065ee:	2300      	movs	r3, #0
 80065f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d101      	bne.n	8006600 <HAL_TIM_ConfigClockSource+0x1c>
 80065fc:	2302      	movs	r3, #2
 80065fe:	e0b4      	b.n	800676a <HAL_TIM_ConfigClockSource+0x186>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2202      	movs	r2, #2
 800660c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800661e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006626:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68ba      	ldr	r2, [r7, #8]
 800662e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006638:	d03e      	beq.n	80066b8 <HAL_TIM_ConfigClockSource+0xd4>
 800663a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800663e:	f200 8087 	bhi.w	8006750 <HAL_TIM_ConfigClockSource+0x16c>
 8006642:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006646:	f000 8086 	beq.w	8006756 <HAL_TIM_ConfigClockSource+0x172>
 800664a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800664e:	d87f      	bhi.n	8006750 <HAL_TIM_ConfigClockSource+0x16c>
 8006650:	2b70      	cmp	r3, #112	@ 0x70
 8006652:	d01a      	beq.n	800668a <HAL_TIM_ConfigClockSource+0xa6>
 8006654:	2b70      	cmp	r3, #112	@ 0x70
 8006656:	d87b      	bhi.n	8006750 <HAL_TIM_ConfigClockSource+0x16c>
 8006658:	2b60      	cmp	r3, #96	@ 0x60
 800665a:	d050      	beq.n	80066fe <HAL_TIM_ConfigClockSource+0x11a>
 800665c:	2b60      	cmp	r3, #96	@ 0x60
 800665e:	d877      	bhi.n	8006750 <HAL_TIM_ConfigClockSource+0x16c>
 8006660:	2b50      	cmp	r3, #80	@ 0x50
 8006662:	d03c      	beq.n	80066de <HAL_TIM_ConfigClockSource+0xfa>
 8006664:	2b50      	cmp	r3, #80	@ 0x50
 8006666:	d873      	bhi.n	8006750 <HAL_TIM_ConfigClockSource+0x16c>
 8006668:	2b40      	cmp	r3, #64	@ 0x40
 800666a:	d058      	beq.n	800671e <HAL_TIM_ConfigClockSource+0x13a>
 800666c:	2b40      	cmp	r3, #64	@ 0x40
 800666e:	d86f      	bhi.n	8006750 <HAL_TIM_ConfigClockSource+0x16c>
 8006670:	2b30      	cmp	r3, #48	@ 0x30
 8006672:	d064      	beq.n	800673e <HAL_TIM_ConfigClockSource+0x15a>
 8006674:	2b30      	cmp	r3, #48	@ 0x30
 8006676:	d86b      	bhi.n	8006750 <HAL_TIM_ConfigClockSource+0x16c>
 8006678:	2b20      	cmp	r3, #32
 800667a:	d060      	beq.n	800673e <HAL_TIM_ConfigClockSource+0x15a>
 800667c:	2b20      	cmp	r3, #32
 800667e:	d867      	bhi.n	8006750 <HAL_TIM_ConfigClockSource+0x16c>
 8006680:	2b00      	cmp	r3, #0
 8006682:	d05c      	beq.n	800673e <HAL_TIM_ConfigClockSource+0x15a>
 8006684:	2b10      	cmp	r3, #16
 8006686:	d05a      	beq.n	800673e <HAL_TIM_ConfigClockSource+0x15a>
 8006688:	e062      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800669a:	f000 fc4d 	bl	8006f38 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80066ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	609a      	str	r2, [r3, #8]
      break;
 80066b6:	e04f      	b.n	8006758 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066c8:	f000 fc36 	bl	8006f38 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	689a      	ldr	r2, [r3, #8]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066da:	609a      	str	r2, [r3, #8]
      break;
 80066dc:	e03c      	b.n	8006758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066ea:	461a      	mov	r2, r3
 80066ec:	f000 faf4 	bl	8006cd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2150      	movs	r1, #80	@ 0x50
 80066f6:	4618      	mov	r0, r3
 80066f8:	f000 fc03 	bl	8006f02 <TIM_ITRx_SetConfig>
      break;
 80066fc:	e02c      	b.n	8006758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800670a:	461a      	mov	r2, r3
 800670c:	f000 fb50 	bl	8006db0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2160      	movs	r1, #96	@ 0x60
 8006716:	4618      	mov	r0, r3
 8006718:	f000 fbf3 	bl	8006f02 <TIM_ITRx_SetConfig>
      break;
 800671c:	e01c      	b.n	8006758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800672a:	461a      	mov	r2, r3
 800672c:	f000 fad4 	bl	8006cd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2140      	movs	r1, #64	@ 0x40
 8006736:	4618      	mov	r0, r3
 8006738:	f000 fbe3 	bl	8006f02 <TIM_ITRx_SetConfig>
      break;
 800673c:	e00c      	b.n	8006758 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4619      	mov	r1, r3
 8006748:	4610      	mov	r0, r2
 800674a:	f000 fbda 	bl	8006f02 <TIM_ITRx_SetConfig>
      break;
 800674e:	e003      	b.n	8006758 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	73fb      	strb	r3, [r7, #15]
      break;
 8006754:	e000      	b.n	8006758 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006756:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006768:	7bfb      	ldrb	r3, [r7, #15]
}
 800676a:	4618      	mov	r0, r3
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006772:	b480      	push	{r7}
 8006774:	b083      	sub	sp, #12
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800677a:	bf00      	nop
 800677c:	370c      	adds	r7, #12
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr

08006786 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006786:	b480      	push	{r7}
 8006788:	b083      	sub	sp, #12
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800678e:	bf00      	nop
 8006790:	370c      	adds	r7, #12
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800679a:	b480      	push	{r7}
 800679c:	b083      	sub	sp, #12
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067a2:	bf00      	nop
 80067a4:	370c      	adds	r7, #12
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr

080067ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067ae:	b480      	push	{r7}
 80067b0:	b083      	sub	sp, #12
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067b6:	bf00      	nop
 80067b8:	370c      	adds	r7, #12
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr

080067c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067c2:	b480      	push	{r7}
 80067c4:	b083      	sub	sp, #12
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067ca:	bf00      	nop
 80067cc:	370c      	adds	r7, #12
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
	...

080067d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a3a      	ldr	r2, [pc, #232]	@ (80068d4 <TIM_Base_SetConfig+0xfc>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d00f      	beq.n	8006810 <TIM_Base_SetConfig+0x38>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067f6:	d00b      	beq.n	8006810 <TIM_Base_SetConfig+0x38>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a37      	ldr	r2, [pc, #220]	@ (80068d8 <TIM_Base_SetConfig+0x100>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d007      	beq.n	8006810 <TIM_Base_SetConfig+0x38>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a36      	ldr	r2, [pc, #216]	@ (80068dc <TIM_Base_SetConfig+0x104>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d003      	beq.n	8006810 <TIM_Base_SetConfig+0x38>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a35      	ldr	r2, [pc, #212]	@ (80068e0 <TIM_Base_SetConfig+0x108>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d108      	bne.n	8006822 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006816:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	4313      	orrs	r3, r2
 8006820:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a2b      	ldr	r2, [pc, #172]	@ (80068d4 <TIM_Base_SetConfig+0xfc>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d01b      	beq.n	8006862 <TIM_Base_SetConfig+0x8a>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006830:	d017      	beq.n	8006862 <TIM_Base_SetConfig+0x8a>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a28      	ldr	r2, [pc, #160]	@ (80068d8 <TIM_Base_SetConfig+0x100>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d013      	beq.n	8006862 <TIM_Base_SetConfig+0x8a>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a27      	ldr	r2, [pc, #156]	@ (80068dc <TIM_Base_SetConfig+0x104>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d00f      	beq.n	8006862 <TIM_Base_SetConfig+0x8a>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a26      	ldr	r2, [pc, #152]	@ (80068e0 <TIM_Base_SetConfig+0x108>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d00b      	beq.n	8006862 <TIM_Base_SetConfig+0x8a>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a25      	ldr	r2, [pc, #148]	@ (80068e4 <TIM_Base_SetConfig+0x10c>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d007      	beq.n	8006862 <TIM_Base_SetConfig+0x8a>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a24      	ldr	r2, [pc, #144]	@ (80068e8 <TIM_Base_SetConfig+0x110>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d003      	beq.n	8006862 <TIM_Base_SetConfig+0x8a>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a23      	ldr	r2, [pc, #140]	@ (80068ec <TIM_Base_SetConfig+0x114>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d108      	bne.n	8006874 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006868:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	4313      	orrs	r3, r2
 8006872:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	4313      	orrs	r3, r2
 8006880:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	689a      	ldr	r2, [r3, #8]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a0e      	ldr	r2, [pc, #56]	@ (80068d4 <TIM_Base_SetConfig+0xfc>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d103      	bne.n	80068a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	691a      	ldr	r2, [r3, #16]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	f003 0301 	and.w	r3, r3, #1
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d105      	bne.n	80068c6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	f023 0201 	bic.w	r2, r3, #1
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	611a      	str	r2, [r3, #16]
  }
}
 80068c6:	bf00      	nop
 80068c8:	3714      	adds	r7, #20
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	40010000 	.word	0x40010000
 80068d8:	40000400 	.word	0x40000400
 80068dc:	40000800 	.word	0x40000800
 80068e0:	40000c00 	.word	0x40000c00
 80068e4:	40014000 	.word	0x40014000
 80068e8:	40014400 	.word	0x40014400
 80068ec:	40014800 	.word	0x40014800

080068f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b087      	sub	sp, #28
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a1b      	ldr	r3, [r3, #32]
 8006904:	f023 0201 	bic.w	r2, r3, #1
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800691e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f023 0303 	bic.w	r3, r3, #3
 8006926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	4313      	orrs	r3, r2
 8006930:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	f023 0302 	bic.w	r3, r3, #2
 8006938:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	4313      	orrs	r3, r2
 8006942:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a1c      	ldr	r2, [pc, #112]	@ (80069b8 <TIM_OC1_SetConfig+0xc8>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d10c      	bne.n	8006966 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	f023 0308 	bic.w	r3, r3, #8
 8006952:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	697a      	ldr	r2, [r7, #20]
 800695a:	4313      	orrs	r3, r2
 800695c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	f023 0304 	bic.w	r3, r3, #4
 8006964:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a13      	ldr	r2, [pc, #76]	@ (80069b8 <TIM_OC1_SetConfig+0xc8>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d111      	bne.n	8006992 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006974:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800697c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	695b      	ldr	r3, [r3, #20]
 8006982:	693a      	ldr	r2, [r7, #16]
 8006984:	4313      	orrs	r3, r2
 8006986:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	699b      	ldr	r3, [r3, #24]
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	4313      	orrs	r3, r2
 8006990:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	685a      	ldr	r2, [r3, #4]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	621a      	str	r2, [r3, #32]
}
 80069ac:	bf00      	nop
 80069ae:	371c      	adds	r7, #28
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr
 80069b8:	40010000 	.word	0x40010000

080069bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069bc:	b480      	push	{r7}
 80069be:	b087      	sub	sp, #28
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a1b      	ldr	r3, [r3, #32]
 80069d0:	f023 0210 	bic.w	r2, r3, #16
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	021b      	lsls	r3, r3, #8
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	f023 0320 	bic.w	r3, r3, #32
 8006a06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	011b      	lsls	r3, r3, #4
 8006a0e:	697a      	ldr	r2, [r7, #20]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a1e      	ldr	r2, [pc, #120]	@ (8006a90 <TIM_OC2_SetConfig+0xd4>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d10d      	bne.n	8006a38 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	011b      	lsls	r3, r3, #4
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a15      	ldr	r2, [pc, #84]	@ (8006a90 <TIM_OC2_SetConfig+0xd4>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d113      	bne.n	8006a68 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006a46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006a4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	695b      	ldr	r3, [r3, #20]
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	693a      	ldr	r2, [r7, #16]
 8006a6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	685a      	ldr	r2, [r3, #4]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	621a      	str	r2, [r3, #32]
}
 8006a82:	bf00      	nop
 8006a84:	371c      	adds	r7, #28
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop
 8006a90:	40010000 	.word	0x40010000

08006a94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b087      	sub	sp, #28
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a1b      	ldr	r3, [r3, #32]
 8006aa8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	69db      	ldr	r3, [r3, #28]
 8006aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f023 0303 	bic.w	r3, r3, #3
 8006aca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006adc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	021b      	lsls	r3, r3, #8
 8006ae4:	697a      	ldr	r2, [r7, #20]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a1d      	ldr	r2, [pc, #116]	@ (8006b64 <TIM_OC3_SetConfig+0xd0>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d10d      	bne.n	8006b0e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006af8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	021b      	lsls	r3, r3, #8
 8006b00:	697a      	ldr	r2, [r7, #20]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006b0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a14      	ldr	r2, [pc, #80]	@ (8006b64 <TIM_OC3_SetConfig+0xd0>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d113      	bne.n	8006b3e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006b24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	011b      	lsls	r3, r3, #4
 8006b2c:	693a      	ldr	r2, [r7, #16]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	011b      	lsls	r3, r3, #4
 8006b38:	693a      	ldr	r2, [r7, #16]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	697a      	ldr	r2, [r7, #20]
 8006b56:	621a      	str	r2, [r3, #32]
}
 8006b58:	bf00      	nop
 8006b5a:	371c      	adds	r7, #28
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr
 8006b64:	40010000 	.word	0x40010000

08006b68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b087      	sub	sp, #28
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a1b      	ldr	r3, [r3, #32]
 8006b76:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a1b      	ldr	r3, [r3, #32]
 8006b7c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	69db      	ldr	r3, [r3, #28]
 8006b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	021b      	lsls	r3, r3, #8
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006bb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	031b      	lsls	r3, r3, #12
 8006bba:	693a      	ldr	r2, [r7, #16]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a10      	ldr	r2, [pc, #64]	@ (8006c04 <TIM_OC4_SetConfig+0x9c>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d109      	bne.n	8006bdc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006bce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	695b      	ldr	r3, [r3, #20]
 8006bd4:	019b      	lsls	r3, r3, #6
 8006bd6:	697a      	ldr	r2, [r7, #20]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	685a      	ldr	r2, [r3, #4]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	693a      	ldr	r2, [r7, #16]
 8006bf4:	621a      	str	r2, [r3, #32]
}
 8006bf6:	bf00      	nop
 8006bf8:	371c      	adds	r7, #28
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	40010000 	.word	0x40010000

08006c08 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b087      	sub	sp, #28
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
 8006c14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6a1b      	ldr	r3, [r3, #32]
 8006c1a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6a1b      	ldr	r3, [r3, #32]
 8006c20:	f023 0201 	bic.w	r2, r3, #1
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	699b      	ldr	r3, [r3, #24]
 8006c2c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	4a24      	ldr	r2, [pc, #144]	@ (8006cc4 <TIM_TI1_SetConfig+0xbc>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d013      	beq.n	8006c5e <TIM_TI1_SetConfig+0x56>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c3c:	d00f      	beq.n	8006c5e <TIM_TI1_SetConfig+0x56>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	4a21      	ldr	r2, [pc, #132]	@ (8006cc8 <TIM_TI1_SetConfig+0xc0>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d00b      	beq.n	8006c5e <TIM_TI1_SetConfig+0x56>
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	4a20      	ldr	r2, [pc, #128]	@ (8006ccc <TIM_TI1_SetConfig+0xc4>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d007      	beq.n	8006c5e <TIM_TI1_SetConfig+0x56>
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	4a1f      	ldr	r2, [pc, #124]	@ (8006cd0 <TIM_TI1_SetConfig+0xc8>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d003      	beq.n	8006c5e <TIM_TI1_SetConfig+0x56>
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	4a1e      	ldr	r2, [pc, #120]	@ (8006cd4 <TIM_TI1_SetConfig+0xcc>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d101      	bne.n	8006c62 <TIM_TI1_SetConfig+0x5a>
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e000      	b.n	8006c64 <TIM_TI1_SetConfig+0x5c>
 8006c62:	2300      	movs	r3, #0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d008      	beq.n	8006c7a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	f023 0303 	bic.w	r3, r3, #3
 8006c6e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006c70:	697a      	ldr	r2, [r7, #20]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	617b      	str	r3, [r7, #20]
 8006c78:	e003      	b.n	8006c82 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	f043 0301 	orr.w	r3, r3, #1
 8006c80:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	011b      	lsls	r3, r3, #4
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	697a      	ldr	r2, [r7, #20]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	f023 030a 	bic.w	r3, r3, #10
 8006c9c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	f003 030a 	and.w	r3, r3, #10
 8006ca4:	693a      	ldr	r2, [r7, #16]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	697a      	ldr	r2, [r7, #20]
 8006cae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	621a      	str	r2, [r3, #32]
}
 8006cb6:	bf00      	nop
 8006cb8:	371c      	adds	r7, #28
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	40010000 	.word	0x40010000
 8006cc8:	40000400 	.word	0x40000400
 8006ccc:	40000800 	.word	0x40000800
 8006cd0:	40000c00 	.word	0x40000c00
 8006cd4:	40014000 	.word	0x40014000

08006cd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b087      	sub	sp, #28
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6a1b      	ldr	r3, [r3, #32]
 8006ce8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	f023 0201 	bic.w	r2, r3, #1
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	699b      	ldr	r3, [r3, #24]
 8006cfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	011b      	lsls	r3, r3, #4
 8006d08:	693a      	ldr	r2, [r7, #16]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	f023 030a 	bic.w	r3, r3, #10
 8006d14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	693a      	ldr	r2, [r7, #16]
 8006d22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	697a      	ldr	r2, [r7, #20]
 8006d28:	621a      	str	r2, [r3, #32]
}
 8006d2a:	bf00      	nop
 8006d2c:	371c      	adds	r7, #28
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr

08006d36 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d36:	b480      	push	{r7}
 8006d38:	b087      	sub	sp, #28
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	60f8      	str	r0, [r7, #12]
 8006d3e:	60b9      	str	r1, [r7, #8]
 8006d40:	607a      	str	r2, [r7, #4]
 8006d42:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6a1b      	ldr	r3, [r3, #32]
 8006d48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6a1b      	ldr	r3, [r3, #32]
 8006d4e:	f023 0210 	bic.w	r2, r3, #16
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	021b      	lsls	r3, r3, #8
 8006d68:	693a      	ldr	r2, [r7, #16]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	031b      	lsls	r3, r3, #12
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	693a      	ldr	r2, [r7, #16]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006d88:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	011b      	lsls	r3, r3, #4
 8006d8e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006d92:	697a      	ldr	r2, [r7, #20]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	693a      	ldr	r2, [r7, #16]
 8006d9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	697a      	ldr	r2, [r7, #20]
 8006da2:	621a      	str	r2, [r3, #32]
}
 8006da4:	bf00      	nop
 8006da6:	371c      	adds	r7, #28
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b087      	sub	sp, #28
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6a1b      	ldr	r3, [r3, #32]
 8006dc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6a1b      	ldr	r3, [r3, #32]
 8006dc6:	f023 0210 	bic.w	r2, r3, #16
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	699b      	ldr	r3, [r3, #24]
 8006dd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006dda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	031b      	lsls	r3, r3, #12
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006dec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	011b      	lsls	r3, r3, #4
 8006df2:	697a      	ldr	r2, [r7, #20]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	693a      	ldr	r2, [r7, #16]
 8006dfc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	621a      	str	r2, [r3, #32]
}
 8006e04:	bf00      	nop
 8006e06:	371c      	adds	r7, #28
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b087      	sub	sp, #28
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	607a      	str	r2, [r7, #4]
 8006e1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6a1b      	ldr	r3, [r3, #32]
 8006e22:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6a1b      	ldr	r3, [r3, #32]
 8006e28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	69db      	ldr	r3, [r3, #28]
 8006e34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	f023 0303 	bic.w	r3, r3, #3
 8006e3c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006e3e:	693a      	ldr	r2, [r7, #16]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e4c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	011b      	lsls	r3, r3, #4
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	693a      	ldr	r2, [r7, #16]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006e60:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	021b      	lsls	r3, r3, #8
 8006e66:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006e6a:	697a      	ldr	r2, [r7, #20]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	693a      	ldr	r2, [r7, #16]
 8006e74:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	697a      	ldr	r2, [r7, #20]
 8006e7a:	621a      	str	r2, [r3, #32]
}
 8006e7c:	bf00      	nop
 8006e7e:	371c      	adds	r7, #28
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b087      	sub	sp, #28
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
 8006e94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6a1b      	ldr	r3, [r3, #32]
 8006ea0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	69db      	ldr	r3, [r3, #28]
 8006eac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006eb4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	021b      	lsls	r3, r3, #8
 8006eba:	693a      	ldr	r2, [r7, #16]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ec6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	031b      	lsls	r3, r3, #12
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	693a      	ldr	r2, [r7, #16]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006eda:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	031b      	lsls	r3, r3, #12
 8006ee0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006ee4:	697a      	ldr	r2, [r7, #20]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	693a      	ldr	r2, [r7, #16]
 8006eee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	697a      	ldr	r2, [r7, #20]
 8006ef4:	621a      	str	r2, [r3, #32]
}
 8006ef6:	bf00      	nop
 8006ef8:	371c      	adds	r7, #28
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr

08006f02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f02:	b480      	push	{r7}
 8006f04:	b085      	sub	sp, #20
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
 8006f0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f1a:	683a      	ldr	r2, [r7, #0]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	f043 0307 	orr.w	r3, r3, #7
 8006f24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	609a      	str	r2, [r3, #8]
}
 8006f2c:	bf00      	nop
 8006f2e:	3714      	adds	r7, #20
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b087      	sub	sp, #28
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	607a      	str	r2, [r7, #4]
 8006f44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006f52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	021a      	lsls	r2, r3, #8
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	431a      	orrs	r2, r3
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	697a      	ldr	r2, [r7, #20]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	697a      	ldr	r2, [r7, #20]
 8006f6a:	609a      	str	r2, [r3, #8]
}
 8006f6c:	bf00      	nop
 8006f6e:	371c      	adds	r7, #28
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b087      	sub	sp, #28
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	f003 031f 	and.w	r3, r3, #31
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6a1a      	ldr	r2, [r3, #32]
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	43db      	mvns	r3, r3
 8006f9a:	401a      	ands	r2, r3
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6a1a      	ldr	r2, [r3, #32]
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	f003 031f 	and.w	r3, r3, #31
 8006faa:	6879      	ldr	r1, [r7, #4]
 8006fac:	fa01 f303 	lsl.w	r3, r1, r3
 8006fb0:	431a      	orrs	r2, r3
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	621a      	str	r2, [r3, #32]
}
 8006fb6:	bf00      	nop
 8006fb8:	371c      	adds	r7, #28
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr

08006fc2 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b082      	sub	sp, #8
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
 8006fca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	6839      	ldr	r1, [r7, #0]
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f000 f925 	bl	8007224 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	6a1a      	ldr	r2, [r3, #32]
 8006fe0:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d10f      	bne.n	800700a <HAL_TIMEx_PWMN_Stop+0x48>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	6a1a      	ldr	r2, [r3, #32]
 8006ff0:	f240 4344 	movw	r3, #1092	@ 0x444
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d107      	bne.n	800700a <HAL_TIMEx_PWMN_Stop+0x48>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007008:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	6a1a      	ldr	r2, [r3, #32]
 8007010:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007014:	4013      	ands	r3, r2
 8007016:	2b00      	cmp	r3, #0
 8007018:	d10f      	bne.n	800703a <HAL_TIMEx_PWMN_Stop+0x78>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	6a1a      	ldr	r2, [r3, #32]
 8007020:	f240 4344 	movw	r3, #1092	@ 0x444
 8007024:	4013      	ands	r3, r2
 8007026:	2b00      	cmp	r3, #0
 8007028:	d107      	bne.n	800703a <HAL_TIMEx_PWMN_Stop+0x78>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f022 0201 	bic.w	r2, r2, #1
 8007038:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d104      	bne.n	800704a <HAL_TIMEx_PWMN_Stop+0x88>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007048:	e013      	b.n	8007072 <HAL_TIMEx_PWMN_Stop+0xb0>
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	2b04      	cmp	r3, #4
 800704e:	d104      	bne.n	800705a <HAL_TIMEx_PWMN_Stop+0x98>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007058:	e00b      	b.n	8007072 <HAL_TIMEx_PWMN_Stop+0xb0>
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	2b08      	cmp	r3, #8
 800705e:	d104      	bne.n	800706a <HAL_TIMEx_PWMN_Stop+0xa8>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007068:	e003      	b.n	8007072 <HAL_TIMEx_PWMN_Stop+0xb0>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2201      	movs	r2, #1
 800706e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3708      	adds	r7, #8
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800708c:	2b01      	cmp	r3, #1
 800708e:	d101      	bne.n	8007094 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007090:	2302      	movs	r3, #2
 8007092:	e050      	b.n	8007136 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2202      	movs	r2, #2
 80070a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	68fa      	ldr	r2, [r7, #12]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a1c      	ldr	r2, [pc, #112]	@ (8007144 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d018      	beq.n	800710a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070e0:	d013      	beq.n	800710a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a18      	ldr	r2, [pc, #96]	@ (8007148 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d00e      	beq.n	800710a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a16      	ldr	r2, [pc, #88]	@ (800714c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d009      	beq.n	800710a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a15      	ldr	r2, [pc, #84]	@ (8007150 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d004      	beq.n	800710a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a13      	ldr	r2, [pc, #76]	@ (8007154 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d10c      	bne.n	8007124 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007110:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	4313      	orrs	r3, r2
 800711a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68ba      	ldr	r2, [r7, #8]
 8007122:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3714      	adds	r7, #20
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	40010000 	.word	0x40010000
 8007148:	40000400 	.word	0x40000400
 800714c:	40000800 	.word	0x40000800
 8007150:	40000c00 	.word	0x40000c00
 8007154:	40014000 	.word	0x40014000

08007158 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007162:	2300      	movs	r3, #0
 8007164:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800716c:	2b01      	cmp	r3, #1
 800716e:	d101      	bne.n	8007174 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007170:	2302      	movs	r3, #2
 8007172:	e03d      	b.n	80071f0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	4313      	orrs	r3, r2
 8007188:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	4313      	orrs	r3, r2
 8007196:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	4313      	orrs	r3, r2
 80071c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	695b      	ldr	r3, [r3, #20]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	69db      	ldr	r3, [r3, #28]
 80071da:	4313      	orrs	r3, r2
 80071dc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3714      	adds	r7, #20
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007218:	bf00      	nop
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007224:	b480      	push	{r7}
 8007226:	b087      	sub	sp, #28
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	f003 030f 	and.w	r3, r3, #15
 8007236:	2204      	movs	r2, #4
 8007238:	fa02 f303 	lsl.w	r3, r2, r3
 800723c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6a1a      	ldr	r2, [r3, #32]
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	43db      	mvns	r3, r3
 8007246:	401a      	ands	r2, r3
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6a1a      	ldr	r2, [r3, #32]
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	f003 030f 	and.w	r3, r3, #15
 8007256:	6879      	ldr	r1, [r7, #4]
 8007258:	fa01 f303 	lsl.w	r3, r1, r3
 800725c:	431a      	orrs	r2, r3
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	621a      	str	r2, [r3, #32]
}
 8007262:	bf00      	nop
 8007264:	371c      	adds	r7, #28
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr

0800726e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b082      	sub	sp, #8
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d101      	bne.n	8007280 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	e042      	b.n	8007306 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007286:	b2db      	uxtb	r3, r3
 8007288:	2b00      	cmp	r3, #0
 800728a:	d106      	bne.n	800729a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f7fb fa57 	bl	8002748 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2224      	movs	r2, #36	@ 0x24
 800729e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68da      	ldr	r2, [r3, #12]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80072b0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 ff6e 	bl	8008194 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	691a      	ldr	r2, [r3, #16]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80072c6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	695a      	ldr	r2, [r3, #20]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80072d6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68da      	ldr	r2, [r3, #12]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80072e6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2220      	movs	r2, #32
 80072f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2220      	movs	r2, #32
 80072fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3708      	adds	r7, #8
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
	...

08007310 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b08c      	sub	sp, #48	@ 0x30
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	4613      	mov	r3, r2
 800731c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007324:	b2db      	uxtb	r3, r3
 8007326:	2b20      	cmp	r3, #32
 8007328:	d156      	bne.n	80073d8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d002      	beq.n	8007336 <HAL_UART_Transmit_DMA+0x26>
 8007330:	88fb      	ldrh	r3, [r7, #6]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d101      	bne.n	800733a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e04f      	b.n	80073da <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800733a:	68ba      	ldr	r2, [r7, #8]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	88fa      	ldrh	r2, [r7, #6]
 8007344:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	88fa      	ldrh	r2, [r7, #6]
 800734a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2221      	movs	r2, #33	@ 0x21
 8007356:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800735e:	4a21      	ldr	r2, [pc, #132]	@ (80073e4 <HAL_UART_Transmit_DMA+0xd4>)
 8007360:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007366:	4a20      	ldr	r2, [pc, #128]	@ (80073e8 <HAL_UART_Transmit_DMA+0xd8>)
 8007368:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800736e:	4a1f      	ldr	r2, [pc, #124]	@ (80073ec <HAL_UART_Transmit_DMA+0xdc>)
 8007370:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007376:	2200      	movs	r2, #0
 8007378:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800737a:	f107 0308 	add.w	r3, r7, #8
 800737e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007386:	6819      	ldr	r1, [r3, #0]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	3304      	adds	r3, #4
 800738e:	461a      	mov	r2, r3
 8007390:	88fb      	ldrh	r3, [r7, #6]
 8007392:	f7fc fa41 	bl	8003818 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800739e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	3314      	adds	r3, #20
 80073a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	e853 3f00 	ldrex	r3, [r3]
 80073ae:	617b      	str	r3, [r7, #20]
   return(result);
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	3314      	adds	r3, #20
 80073be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80073c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80073c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c4:	6a39      	ldr	r1, [r7, #32]
 80073c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073c8:	e841 2300 	strex	r3, r2, [r1]
 80073cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d1e5      	bne.n	80073a0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80073d4:	2300      	movs	r3, #0
 80073d6:	e000      	b.n	80073da <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80073d8:	2302      	movs	r3, #2
  }
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3730      	adds	r7, #48	@ 0x30
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	08007a21 	.word	0x08007a21
 80073e8:	08007abb 	.word	0x08007abb
 80073ec:	08007c3f 	.word	0x08007c3f

080073f0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b08c      	sub	sp, #48	@ 0x30
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	4613      	mov	r3, r2
 80073fc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007404:	b2db      	uxtb	r3, r3
 8007406:	2b20      	cmp	r3, #32
 8007408:	d14a      	bne.n	80074a0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d002      	beq.n	8007416 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8007410:	88fb      	ldrh	r3, [r7, #6]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d101      	bne.n	800741a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	e043      	b.n	80074a2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2201      	movs	r2, #1
 800741e:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2200      	movs	r2, #0
 8007424:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007426:	88fb      	ldrh	r3, [r7, #6]
 8007428:	461a      	mov	r2, r3
 800742a:	68b9      	ldr	r1, [r7, #8]
 800742c:	68f8      	ldr	r0, [r7, #12]
 800742e:	f000 fc51 	bl	8007cd4 <UART_Start_Receive_DMA>
 8007432:	4603      	mov	r3, r0
 8007434:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007438:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800743c:	2b00      	cmp	r3, #0
 800743e:	d12c      	bne.n	800749a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007444:	2b01      	cmp	r3, #1
 8007446:	d125      	bne.n	8007494 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007448:	2300      	movs	r3, #0
 800744a:	613b      	str	r3, [r7, #16]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	613b      	str	r3, [r7, #16]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	613b      	str	r3, [r7, #16]
 800745c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	330c      	adds	r3, #12
 8007464:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	e853 3f00 	ldrex	r3, [r3]
 800746c:	617b      	str	r3, [r7, #20]
   return(result);
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	f043 0310 	orr.w	r3, r3, #16
 8007474:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	330c      	adds	r3, #12
 800747c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800747e:	627a      	str	r2, [r7, #36]	@ 0x24
 8007480:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007482:	6a39      	ldr	r1, [r7, #32]
 8007484:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007486:	e841 2300 	strex	r3, r2, [r1]
 800748a:	61fb      	str	r3, [r7, #28]
   return(result);
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d1e5      	bne.n	800745e <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8007492:	e002      	b.n	800749a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800749a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800749e:	e000      	b.n	80074a2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80074a0:	2302      	movs	r3, #2
  }
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3730      	adds	r7, #48	@ 0x30
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
	...

080074ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b0ba      	sub	sp, #232	@ 0xe8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	695b      	ldr	r3, [r3, #20]
 80074ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80074d2:	2300      	movs	r3, #0
 80074d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80074d8:	2300      	movs	r3, #0
 80074da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80074de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074e2:	f003 030f 	and.w	r3, r3, #15
 80074e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80074ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d10f      	bne.n	8007512 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074f6:	f003 0320 	and.w	r3, r3, #32
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d009      	beq.n	8007512 <HAL_UART_IRQHandler+0x66>
 80074fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007502:	f003 0320 	and.w	r3, r3, #32
 8007506:	2b00      	cmp	r3, #0
 8007508:	d003      	beq.n	8007512 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 fd83 	bl	8008016 <UART_Receive_IT>
      return;
 8007510:	e25b      	b.n	80079ca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007512:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007516:	2b00      	cmp	r3, #0
 8007518:	f000 80de 	beq.w	80076d8 <HAL_UART_IRQHandler+0x22c>
 800751c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007520:	f003 0301 	and.w	r3, r3, #1
 8007524:	2b00      	cmp	r3, #0
 8007526:	d106      	bne.n	8007536 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800752c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007530:	2b00      	cmp	r3, #0
 8007532:	f000 80d1 	beq.w	80076d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800753a:	f003 0301 	and.w	r3, r3, #1
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00b      	beq.n	800755a <HAL_UART_IRQHandler+0xae>
 8007542:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800754a:	2b00      	cmp	r3, #0
 800754c:	d005      	beq.n	800755a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007552:	f043 0201 	orr.w	r2, r3, #1
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800755a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800755e:	f003 0304 	and.w	r3, r3, #4
 8007562:	2b00      	cmp	r3, #0
 8007564:	d00b      	beq.n	800757e <HAL_UART_IRQHandler+0xd2>
 8007566:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800756a:	f003 0301 	and.w	r3, r3, #1
 800756e:	2b00      	cmp	r3, #0
 8007570:	d005      	beq.n	800757e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007576:	f043 0202 	orr.w	r2, r3, #2
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800757e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007582:	f003 0302 	and.w	r3, r3, #2
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00b      	beq.n	80075a2 <HAL_UART_IRQHandler+0xf6>
 800758a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800758e:	f003 0301 	and.w	r3, r3, #1
 8007592:	2b00      	cmp	r3, #0
 8007594:	d005      	beq.n	80075a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800759a:	f043 0204 	orr.w	r2, r3, #4
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80075a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075a6:	f003 0308 	and.w	r3, r3, #8
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d011      	beq.n	80075d2 <HAL_UART_IRQHandler+0x126>
 80075ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075b2:	f003 0320 	and.w	r3, r3, #32
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d105      	bne.n	80075c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80075ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075be:	f003 0301 	and.w	r3, r3, #1
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d005      	beq.n	80075d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075ca:	f043 0208 	orr.w	r2, r3, #8
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	f000 81f2 	beq.w	80079c0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80075dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075e0:	f003 0320 	and.w	r3, r3, #32
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d008      	beq.n	80075fa <HAL_UART_IRQHandler+0x14e>
 80075e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075ec:	f003 0320 	and.w	r3, r3, #32
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d002      	beq.n	80075fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 fd0e 	bl	8008016 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	695b      	ldr	r3, [r3, #20]
 8007600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007604:	2b40      	cmp	r3, #64	@ 0x40
 8007606:	bf0c      	ite	eq
 8007608:	2301      	moveq	r3, #1
 800760a:	2300      	movne	r3, #0
 800760c:	b2db      	uxtb	r3, r3
 800760e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007616:	f003 0308 	and.w	r3, r3, #8
 800761a:	2b00      	cmp	r3, #0
 800761c:	d103      	bne.n	8007626 <HAL_UART_IRQHandler+0x17a>
 800761e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007622:	2b00      	cmp	r3, #0
 8007624:	d04f      	beq.n	80076c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 fc16 	bl	8007e58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	695b      	ldr	r3, [r3, #20]
 8007632:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007636:	2b40      	cmp	r3, #64	@ 0x40
 8007638:	d141      	bne.n	80076be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	3314      	adds	r3, #20
 8007640:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007644:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007648:	e853 3f00 	ldrex	r3, [r3]
 800764c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007650:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007654:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007658:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	3314      	adds	r3, #20
 8007662:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007666:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800766a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007672:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007676:	e841 2300 	strex	r3, r2, [r1]
 800767a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800767e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d1d9      	bne.n	800763a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800768a:	2b00      	cmp	r3, #0
 800768c:	d013      	beq.n	80076b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007692:	4a7e      	ldr	r2, [pc, #504]	@ (800788c <HAL_UART_IRQHandler+0x3e0>)
 8007694:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800769a:	4618      	mov	r0, r3
 800769c:	f7fc f984 	bl	80039a8 <HAL_DMA_Abort_IT>
 80076a0:	4603      	mov	r3, r0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d016      	beq.n	80076d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80076b0:	4610      	mov	r0, r2
 80076b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076b4:	e00e      	b.n	80076d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 f9a8 	bl	8007a0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076bc:	e00a      	b.n	80076d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 f9a4 	bl	8007a0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076c4:	e006      	b.n	80076d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 f9a0 	bl	8007a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80076d2:	e175      	b.n	80079c0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076d4:	bf00      	nop
    return;
 80076d6:	e173      	b.n	80079c0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076dc:	2b01      	cmp	r3, #1
 80076de:	f040 814f 	bne.w	8007980 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80076e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076e6:	f003 0310 	and.w	r3, r3, #16
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	f000 8148 	beq.w	8007980 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80076f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076f4:	f003 0310 	and.w	r3, r3, #16
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f000 8141 	beq.w	8007980 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80076fe:	2300      	movs	r3, #0
 8007700:	60bb      	str	r3, [r7, #8]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	60bb      	str	r3, [r7, #8]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	60bb      	str	r3, [r7, #8]
 8007712:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	695b      	ldr	r3, [r3, #20]
 800771a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800771e:	2b40      	cmp	r3, #64	@ 0x40
 8007720:	f040 80b6 	bne.w	8007890 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007730:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007734:	2b00      	cmp	r3, #0
 8007736:	f000 8145 	beq.w	80079c4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800773e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007742:	429a      	cmp	r2, r3
 8007744:	f080 813e 	bcs.w	80079c4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800774e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007754:	69db      	ldr	r3, [r3, #28]
 8007756:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800775a:	f000 8088 	beq.w	800786e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	330c      	adds	r3, #12
 8007764:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007768:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800776c:	e853 3f00 	ldrex	r3, [r3]
 8007770:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007774:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007778:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800777c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	330c      	adds	r3, #12
 8007786:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800778a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800778e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007792:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007796:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800779a:	e841 2300 	strex	r3, r2, [r1]
 800779e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80077a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d1d9      	bne.n	800775e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	3314      	adds	r3, #20
 80077b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80077b4:	e853 3f00 	ldrex	r3, [r3]
 80077b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80077ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80077bc:	f023 0301 	bic.w	r3, r3, #1
 80077c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	3314      	adds	r3, #20
 80077ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80077ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80077d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80077d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80077da:	e841 2300 	strex	r3, r2, [r1]
 80077de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80077e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d1e1      	bne.n	80077aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	3314      	adds	r3, #20
 80077ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80077f0:	e853 3f00 	ldrex	r3, [r3]
 80077f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80077f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80077f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	3314      	adds	r3, #20
 8007806:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800780a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800780c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007810:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007812:	e841 2300 	strex	r3, r2, [r1]
 8007816:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007818:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1e3      	bne.n	80077e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2220      	movs	r2, #32
 8007822:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	330c      	adds	r3, #12
 8007832:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007834:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007836:	e853 3f00 	ldrex	r3, [r3]
 800783a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800783c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800783e:	f023 0310 	bic.w	r3, r3, #16
 8007842:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	330c      	adds	r3, #12
 800784c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007850:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007852:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007854:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007856:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007858:	e841 2300 	strex	r3, r2, [r1]
 800785c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800785e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1e3      	bne.n	800782c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007868:	4618      	mov	r0, r3
 800786a:	f7fc f82d 	bl	80038c8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2202      	movs	r2, #2
 8007872:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800787c:	b29b      	uxth	r3, r3
 800787e:	1ad3      	subs	r3, r2, r3
 8007880:	b29b      	uxth	r3, r3
 8007882:	4619      	mov	r1, r3
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f7fa fd45 	bl	8002314 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800788a:	e09b      	b.n	80079c4 <HAL_UART_IRQHandler+0x518>
 800788c:	08007f1f 	.word	0x08007f1f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007898:	b29b      	uxth	r3, r3
 800789a:	1ad3      	subs	r3, r2, r3
 800789c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	f000 808e 	beq.w	80079c8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80078ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	f000 8089 	beq.w	80079c8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	330c      	adds	r3, #12
 80078bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078c0:	e853 3f00 	ldrex	r3, [r3]
 80078c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80078c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80078cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	330c      	adds	r3, #12
 80078d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80078da:	647a      	str	r2, [r7, #68]	@ 0x44
 80078dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80078e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078e2:	e841 2300 	strex	r3, r2, [r1]
 80078e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80078e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d1e3      	bne.n	80078b6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	3314      	adds	r3, #20
 80078f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f8:	e853 3f00 	ldrex	r3, [r3]
 80078fc:	623b      	str	r3, [r7, #32]
   return(result);
 80078fe:	6a3b      	ldr	r3, [r7, #32]
 8007900:	f023 0301 	bic.w	r3, r3, #1
 8007904:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	3314      	adds	r3, #20
 800790e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007912:	633a      	str	r2, [r7, #48]	@ 0x30
 8007914:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007916:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007918:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800791a:	e841 2300 	strex	r3, r2, [r1]
 800791e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1e3      	bne.n	80078ee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2220      	movs	r2, #32
 800792a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	330c      	adds	r3, #12
 800793a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	e853 3f00 	ldrex	r3, [r3]
 8007942:	60fb      	str	r3, [r7, #12]
   return(result);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f023 0310 	bic.w	r3, r3, #16
 800794a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	330c      	adds	r3, #12
 8007954:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007958:	61fa      	str	r2, [r7, #28]
 800795a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795c:	69b9      	ldr	r1, [r7, #24]
 800795e:	69fa      	ldr	r2, [r7, #28]
 8007960:	e841 2300 	strex	r3, r2, [r1]
 8007964:	617b      	str	r3, [r7, #20]
   return(result);
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d1e3      	bne.n	8007934 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2202      	movs	r2, #2
 8007970:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007972:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007976:	4619      	mov	r1, r3
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f7fa fccb 	bl	8002314 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800797e:	e023      	b.n	80079c8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007984:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007988:	2b00      	cmp	r3, #0
 800798a:	d009      	beq.n	80079a0 <HAL_UART_IRQHandler+0x4f4>
 800798c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007990:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007994:	2b00      	cmp	r3, #0
 8007996:	d003      	beq.n	80079a0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 fad4 	bl	8007f46 <UART_Transmit_IT>
    return;
 800799e:	e014      	b.n	80079ca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80079a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d00e      	beq.n	80079ca <HAL_UART_IRQHandler+0x51e>
 80079ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d008      	beq.n	80079ca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 fb14 	bl	8007fe6 <UART_EndTransmit_IT>
    return;
 80079be:	e004      	b.n	80079ca <HAL_UART_IRQHandler+0x51e>
    return;
 80079c0:	bf00      	nop
 80079c2:	e002      	b.n	80079ca <HAL_UART_IRQHandler+0x51e>
      return;
 80079c4:	bf00      	nop
 80079c6:	e000      	b.n	80079ca <HAL_UART_IRQHandler+0x51e>
      return;
 80079c8:	bf00      	nop
  }
}
 80079ca:	37e8      	adds	r7, #232	@ 0xe8
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80079d8:	bf00      	nop
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80079ec:	bf00      	nop
 80079ee:	370c      	adds	r7, #12
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr

080079f8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b083      	sub	sp, #12
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007a00:	bf00      	nop
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007a14:	bf00      	nop
 8007a16:	370c      	adds	r7, #12
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b090      	sub	sp, #64	@ 0x40
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d137      	bne.n	8007aac <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007a3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a3e:	2200      	movs	r2, #0
 8007a40:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007a42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	3314      	adds	r3, #20
 8007a48:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a4c:	e853 3f00 	ldrex	r3, [r3]
 8007a50:	623b      	str	r3, [r7, #32]
   return(result);
 8007a52:	6a3b      	ldr	r3, [r7, #32]
 8007a54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a58:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007a5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	3314      	adds	r3, #20
 8007a60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007a62:	633a      	str	r2, [r7, #48]	@ 0x30
 8007a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a6a:	e841 2300 	strex	r3, r2, [r1]
 8007a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d1e5      	bne.n	8007a42 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	330c      	adds	r3, #12
 8007a7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	e853 3f00 	ldrex	r3, [r3]
 8007a84:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	330c      	adds	r3, #12
 8007a94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007a96:	61fa      	str	r2, [r7, #28]
 8007a98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9a:	69b9      	ldr	r1, [r7, #24]
 8007a9c:	69fa      	ldr	r2, [r7, #28]
 8007a9e:	e841 2300 	strex	r3, r2, [r1]
 8007aa2:	617b      	str	r3, [r7, #20]
   return(result);
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1e5      	bne.n	8007a76 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007aaa:	e002      	b.n	8007ab2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007aac:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007aae:	f7f9 fd21 	bl	80014f4 <HAL_UART_TxCpltCallback>
}
 8007ab2:	bf00      	nop
 8007ab4:	3740      	adds	r7, #64	@ 0x40
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b084      	sub	sp, #16
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ac6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	f7ff ff81 	bl	80079d0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ace:	bf00      	nop
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b09c      	sub	sp, #112	@ 0x70
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ae2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d172      	bne.n	8007bd8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007af2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007af4:	2200      	movs	r2, #0
 8007af6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007af8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	330c      	adds	r3, #12
 8007afe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b02:	e853 3f00 	ldrex	r3, [r3]
 8007b06:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007b08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b0a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b0e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	330c      	adds	r3, #12
 8007b16:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007b18:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007b1a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007b1e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007b20:	e841 2300 	strex	r3, r2, [r1]
 8007b24:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007b26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d1e5      	bne.n	8007af8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	3314      	adds	r3, #20
 8007b32:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b36:	e853 3f00 	ldrex	r3, [r3]
 8007b3a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b3e:	f023 0301 	bic.w	r3, r3, #1
 8007b42:	667b      	str	r3, [r7, #100]	@ 0x64
 8007b44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	3314      	adds	r3, #20
 8007b4a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007b4c:	647a      	str	r2, [r7, #68]	@ 0x44
 8007b4e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b54:	e841 2300 	strex	r3, r2, [r1]
 8007b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d1e5      	bne.n	8007b2c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	3314      	adds	r3, #20
 8007b66:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b6a:	e853 3f00 	ldrex	r3, [r3]
 8007b6e:	623b      	str	r3, [r7, #32]
   return(result);
 8007b70:	6a3b      	ldr	r3, [r7, #32]
 8007b72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b76:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	3314      	adds	r3, #20
 8007b7e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007b80:	633a      	str	r2, [r7, #48]	@ 0x30
 8007b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b84:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b88:	e841 2300 	strex	r3, r2, [r1]
 8007b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d1e5      	bne.n	8007b60 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007b94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b96:	2220      	movs	r2, #32
 8007b98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d119      	bne.n	8007bd8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ba4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	330c      	adds	r3, #12
 8007baa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	e853 3f00 	ldrex	r3, [r3]
 8007bb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f023 0310 	bic.w	r3, r3, #16
 8007bba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007bbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	330c      	adds	r3, #12
 8007bc2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007bc4:	61fa      	str	r2, [r7, #28]
 8007bc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc8:	69b9      	ldr	r1, [r7, #24]
 8007bca:	69fa      	ldr	r2, [r7, #28]
 8007bcc:	e841 2300 	strex	r3, r2, [r1]
 8007bd0:	617b      	str	r3, [r7, #20]
   return(result);
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d1e5      	bne.n	8007ba4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007bda:	2200      	movs	r2, #0
 8007bdc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d106      	bne.n	8007bf4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007be6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007be8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007bea:	4619      	mov	r1, r3
 8007bec:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007bee:	f7fa fb91 	bl	8002314 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007bf2:	e002      	b.n	8007bfa <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007bf4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007bf6:	f7ff fef5 	bl	80079e4 <HAL_UART_RxCpltCallback>
}
 8007bfa:	bf00      	nop
 8007bfc:	3770      	adds	r7, #112	@ 0x70
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b084      	sub	sp, #16
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c0e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2201      	movs	r2, #1
 8007c14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d108      	bne.n	8007c30 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007c22:	085b      	lsrs	r3, r3, #1
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	4619      	mov	r1, r3
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f7fa fb73 	bl	8002314 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c2e:	e002      	b.n	8007c36 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f7ff fee1 	bl	80079f8 <HAL_UART_RxHalfCpltCallback>
}
 8007c36:	bf00      	nop
 8007c38:	3710      	adds	r7, #16
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b084      	sub	sp, #16
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007c46:	2300      	movs	r3, #0
 8007c48:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c4e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	695b      	ldr	r3, [r3, #20]
 8007c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c5a:	2b80      	cmp	r3, #128	@ 0x80
 8007c5c:	bf0c      	ite	eq
 8007c5e:	2301      	moveq	r3, #1
 8007c60:	2300      	movne	r3, #0
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	2b21      	cmp	r3, #33	@ 0x21
 8007c70:	d108      	bne.n	8007c84 <UART_DMAError+0x46>
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d005      	beq.n	8007c84 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8007c7e:	68b8      	ldr	r0, [r7, #8]
 8007c80:	f000 f8c2 	bl	8007e08 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c8e:	2b40      	cmp	r3, #64	@ 0x40
 8007c90:	bf0c      	ite	eq
 8007c92:	2301      	moveq	r3, #1
 8007c94:	2300      	movne	r3, #0
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	2b22      	cmp	r3, #34	@ 0x22
 8007ca4:	d108      	bne.n	8007cb8 <UART_DMAError+0x7a>
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d005      	beq.n	8007cb8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007cb2:	68b8      	ldr	r0, [r7, #8]
 8007cb4:	f000 f8d0 	bl	8007e58 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cbc:	f043 0210 	orr.w	r2, r3, #16
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007cc4:	68b8      	ldr	r0, [r7, #8]
 8007cc6:	f7ff fea1 	bl	8007a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cca:	bf00      	nop
 8007ccc:	3710      	adds	r7, #16
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
	...

08007cd4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b098      	sub	sp, #96	@ 0x60
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	4613      	mov	r3, r2
 8007ce0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007ce2:	68ba      	ldr	r2, [r7, #8]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	88fa      	ldrh	r2, [r7, #6]
 8007cec:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2222      	movs	r2, #34	@ 0x22
 8007cf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d00:	4a3e      	ldr	r2, [pc, #248]	@ (8007dfc <UART_Start_Receive_DMA+0x128>)
 8007d02:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d08:	4a3d      	ldr	r2, [pc, #244]	@ (8007e00 <UART_Start_Receive_DMA+0x12c>)
 8007d0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d10:	4a3c      	ldr	r2, [pc, #240]	@ (8007e04 <UART_Start_Receive_DMA+0x130>)
 8007d12:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d18:	2200      	movs	r2, #0
 8007d1a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007d1c:	f107 0308 	add.w	r3, r7, #8
 8007d20:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	3304      	adds	r3, #4
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	88fb      	ldrh	r3, [r7, #6]
 8007d34:	f7fb fd70 	bl	8003818 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007d38:	2300      	movs	r3, #0
 8007d3a:	613b      	str	r3, [r7, #16]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	613b      	str	r3, [r7, #16]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	613b      	str	r3, [r7, #16]
 8007d4c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d019      	beq.n	8007d8a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	330c      	adds	r3, #12
 8007d5c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d60:	e853 3f00 	ldrex	r3, [r3]
 8007d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d6c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	330c      	adds	r3, #12
 8007d74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007d76:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007d78:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007d7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007d7e:	e841 2300 	strex	r3, r2, [r1]
 8007d82:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007d84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d1e5      	bne.n	8007d56 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	3314      	adds	r3, #20
 8007d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d94:	e853 3f00 	ldrex	r3, [r3]
 8007d98:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d9c:	f043 0301 	orr.w	r3, r3, #1
 8007da0:	657b      	str	r3, [r7, #84]	@ 0x54
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	3314      	adds	r3, #20
 8007da8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007daa:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007dac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dae:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007db0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007db2:	e841 2300 	strex	r3, r2, [r1]
 8007db6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d1e5      	bne.n	8007d8a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	3314      	adds	r3, #20
 8007dc4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	e853 3f00 	ldrex	r3, [r3]
 8007dcc:	617b      	str	r3, [r7, #20]
   return(result);
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007dd4:	653b      	str	r3, [r7, #80]	@ 0x50
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	3314      	adds	r3, #20
 8007ddc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007dde:	627a      	str	r2, [r7, #36]	@ 0x24
 8007de0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de2:	6a39      	ldr	r1, [r7, #32]
 8007de4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007de6:	e841 2300 	strex	r3, r2, [r1]
 8007dea:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d1e5      	bne.n	8007dbe <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3760      	adds	r7, #96	@ 0x60
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	08007ad7 	.word	0x08007ad7
 8007e00:	08007c03 	.word	0x08007c03
 8007e04:	08007c3f 	.word	0x08007c3f

08007e08 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b089      	sub	sp, #36	@ 0x24
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	330c      	adds	r3, #12
 8007e16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	e853 3f00 	ldrex	r3, [r3]
 8007e1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007e26:	61fb      	str	r3, [r7, #28]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	330c      	adds	r3, #12
 8007e2e:	69fa      	ldr	r2, [r7, #28]
 8007e30:	61ba      	str	r2, [r7, #24]
 8007e32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e34:	6979      	ldr	r1, [r7, #20]
 8007e36:	69ba      	ldr	r2, [r7, #24]
 8007e38:	e841 2300 	strex	r3, r2, [r1]
 8007e3c:	613b      	str	r3, [r7, #16]
   return(result);
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d1e5      	bne.n	8007e10 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2220      	movs	r2, #32
 8007e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007e4c:	bf00      	nop
 8007e4e:	3724      	adds	r7, #36	@ 0x24
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b095      	sub	sp, #84	@ 0x54
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	330c      	adds	r3, #12
 8007e66:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e6a:	e853 3f00 	ldrex	r3, [r3]
 8007e6e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e72:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	330c      	adds	r3, #12
 8007e7e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007e80:	643a      	str	r2, [r7, #64]	@ 0x40
 8007e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e84:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e86:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e88:	e841 2300 	strex	r3, r2, [r1]
 8007e8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d1e5      	bne.n	8007e60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	3314      	adds	r3, #20
 8007e9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9c:	6a3b      	ldr	r3, [r7, #32]
 8007e9e:	e853 3f00 	ldrex	r3, [r3]
 8007ea2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	f023 0301 	bic.w	r3, r3, #1
 8007eaa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	3314      	adds	r3, #20
 8007eb2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007eb4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007eba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ebc:	e841 2300 	strex	r3, r2, [r1]
 8007ec0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d1e5      	bne.n	8007e94 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d119      	bne.n	8007f04 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	330c      	adds	r3, #12
 8007ed6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	e853 3f00 	ldrex	r3, [r3]
 8007ede:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	f023 0310 	bic.w	r3, r3, #16
 8007ee6:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	330c      	adds	r3, #12
 8007eee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ef0:	61ba      	str	r2, [r7, #24]
 8007ef2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef4:	6979      	ldr	r1, [r7, #20]
 8007ef6:	69ba      	ldr	r2, [r7, #24]
 8007ef8:	e841 2300 	strex	r3, r2, [r1]
 8007efc:	613b      	str	r3, [r7, #16]
   return(result);
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d1e5      	bne.n	8007ed0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2220      	movs	r2, #32
 8007f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007f12:	bf00      	nop
 8007f14:	3754      	adds	r7, #84	@ 0x54
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr

08007f1e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b084      	sub	sp, #16
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2200      	movs	r2, #0
 8007f36:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f38:	68f8      	ldr	r0, [r7, #12]
 8007f3a:	f7ff fd67 	bl	8007a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f3e:	bf00      	nop
 8007f40:	3710      	adds	r7, #16
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007f46:	b480      	push	{r7}
 8007f48:	b085      	sub	sp, #20
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	2b21      	cmp	r3, #33	@ 0x21
 8007f58:	d13e      	bne.n	8007fd8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f62:	d114      	bne.n	8007f8e <UART_Transmit_IT+0x48>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	691b      	ldr	r3, [r3, #16]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d110      	bne.n	8007f8e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6a1b      	ldr	r3, [r3, #32]
 8007f70:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	881b      	ldrh	r3, [r3, #0]
 8007f76:	461a      	mov	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f80:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a1b      	ldr	r3, [r3, #32]
 8007f86:	1c9a      	adds	r2, r3, #2
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	621a      	str	r2, [r3, #32]
 8007f8c:	e008      	b.n	8007fa0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6a1b      	ldr	r3, [r3, #32]
 8007f92:	1c59      	adds	r1, r3, #1
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	6211      	str	r1, [r2, #32]
 8007f98:	781a      	ldrb	r2, [r3, #0]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	4619      	mov	r1, r3
 8007fae:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d10f      	bne.n	8007fd4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	68da      	ldr	r2, [r3, #12]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007fc2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	68da      	ldr	r2, [r3, #12]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007fd2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	e000      	b.n	8007fda <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007fd8:	2302      	movs	r3, #2
  }
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3714      	adds	r7, #20
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr

08007fe6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b082      	sub	sp, #8
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	68da      	ldr	r2, [r3, #12]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007ffc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2220      	movs	r2, #32
 8008002:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f7f9 fa74 	bl	80014f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	3708      	adds	r7, #8
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b08c      	sub	sp, #48	@ 0x30
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008024:	b2db      	uxtb	r3, r3
 8008026:	2b22      	cmp	r3, #34	@ 0x22
 8008028:	f040 80ae 	bne.w	8008188 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008034:	d117      	bne.n	8008066 <UART_Receive_IT+0x50>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	691b      	ldr	r3, [r3, #16]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d113      	bne.n	8008066 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800803e:	2300      	movs	r3, #0
 8008040:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008046:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	b29b      	uxth	r3, r3
 8008050:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008054:	b29a      	uxth	r2, r3
 8008056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008058:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800805e:	1c9a      	adds	r2, r3, #2
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	629a      	str	r2, [r3, #40]	@ 0x28
 8008064:	e026      	b.n	80080b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800806a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800806c:	2300      	movs	r3, #0
 800806e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008078:	d007      	beq.n	800808a <UART_Receive_IT+0x74>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d10a      	bne.n	8008098 <UART_Receive_IT+0x82>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	691b      	ldr	r3, [r3, #16]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d106      	bne.n	8008098 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	b2da      	uxtb	r2, r3
 8008092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008094:	701a      	strb	r2, [r3, #0]
 8008096:	e008      	b.n	80080aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080a4:	b2da      	uxtb	r2, r3
 80080a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080ae:	1c5a      	adds	r2, r3, #1
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	3b01      	subs	r3, #1
 80080bc:	b29b      	uxth	r3, r3
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	4619      	mov	r1, r3
 80080c2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d15d      	bne.n	8008184 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	68da      	ldr	r2, [r3, #12]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f022 0220 	bic.w	r2, r2, #32
 80080d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	68da      	ldr	r2, [r3, #12]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80080e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	695a      	ldr	r2, [r3, #20]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f022 0201 	bic.w	r2, r2, #1
 80080f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2220      	movs	r2, #32
 80080fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800810a:	2b01      	cmp	r3, #1
 800810c:	d135      	bne.n	800817a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	330c      	adds	r3, #12
 800811a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	e853 3f00 	ldrex	r3, [r3]
 8008122:	613b      	str	r3, [r7, #16]
   return(result);
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	f023 0310 	bic.w	r3, r3, #16
 800812a:	627b      	str	r3, [r7, #36]	@ 0x24
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	330c      	adds	r3, #12
 8008132:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008134:	623a      	str	r2, [r7, #32]
 8008136:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008138:	69f9      	ldr	r1, [r7, #28]
 800813a:	6a3a      	ldr	r2, [r7, #32]
 800813c:	e841 2300 	strex	r3, r2, [r1]
 8008140:	61bb      	str	r3, [r7, #24]
   return(result);
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d1e5      	bne.n	8008114 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f003 0310 	and.w	r3, r3, #16
 8008152:	2b10      	cmp	r3, #16
 8008154:	d10a      	bne.n	800816c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008156:	2300      	movs	r3, #0
 8008158:	60fb      	str	r3, [r7, #12]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	60fb      	str	r3, [r7, #12]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	60fb      	str	r3, [r7, #12]
 800816a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008170:	4619      	mov	r1, r3
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f7fa f8ce 	bl	8002314 <HAL_UARTEx_RxEventCallback>
 8008178:	e002      	b.n	8008180 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f7ff fc32 	bl	80079e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008180:	2300      	movs	r3, #0
 8008182:	e002      	b.n	800818a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008184:	2300      	movs	r3, #0
 8008186:	e000      	b.n	800818a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008188:	2302      	movs	r3, #2
  }
}
 800818a:	4618      	mov	r0, r3
 800818c:	3730      	adds	r7, #48	@ 0x30
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
	...

08008194 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008198:	b0c0      	sub	sp, #256	@ 0x100
 800819a:	af00      	add	r7, sp, #0
 800819c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80081ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081b0:	68d9      	ldr	r1, [r3, #12]
 80081b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	ea40 0301 	orr.w	r3, r0, r1
 80081bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80081be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081c2:	689a      	ldr	r2, [r3, #8]
 80081c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	431a      	orrs	r2, r3
 80081cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081d0:	695b      	ldr	r3, [r3, #20]
 80081d2:	431a      	orrs	r2, r3
 80081d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081d8:	69db      	ldr	r3, [r3, #28]
 80081da:	4313      	orrs	r3, r2
 80081dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80081e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80081ec:	f021 010c 	bic.w	r1, r1, #12
 80081f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80081fa:	430b      	orrs	r3, r1
 80081fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80081fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	695b      	ldr	r3, [r3, #20]
 8008206:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800820a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800820e:	6999      	ldr	r1, [r3, #24]
 8008210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	ea40 0301 	orr.w	r3, r0, r1
 800821a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800821c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	4b8f      	ldr	r3, [pc, #572]	@ (8008460 <UART_SetConfig+0x2cc>)
 8008224:	429a      	cmp	r2, r3
 8008226:	d005      	beq.n	8008234 <UART_SetConfig+0xa0>
 8008228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	4b8d      	ldr	r3, [pc, #564]	@ (8008464 <UART_SetConfig+0x2d0>)
 8008230:	429a      	cmp	r2, r3
 8008232:	d104      	bne.n	800823e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008234:	f7fd fa2e 	bl	8005694 <HAL_RCC_GetPCLK2Freq>
 8008238:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800823c:	e003      	b.n	8008246 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800823e:	f7fd fa15 	bl	800566c <HAL_RCC_GetPCLK1Freq>
 8008242:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800824a:	69db      	ldr	r3, [r3, #28]
 800824c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008250:	f040 810c 	bne.w	800846c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008254:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008258:	2200      	movs	r2, #0
 800825a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800825e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008262:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008266:	4622      	mov	r2, r4
 8008268:	462b      	mov	r3, r5
 800826a:	1891      	adds	r1, r2, r2
 800826c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800826e:	415b      	adcs	r3, r3
 8008270:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008272:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008276:	4621      	mov	r1, r4
 8008278:	eb12 0801 	adds.w	r8, r2, r1
 800827c:	4629      	mov	r1, r5
 800827e:	eb43 0901 	adc.w	r9, r3, r1
 8008282:	f04f 0200 	mov.w	r2, #0
 8008286:	f04f 0300 	mov.w	r3, #0
 800828a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800828e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008292:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008296:	4690      	mov	r8, r2
 8008298:	4699      	mov	r9, r3
 800829a:	4623      	mov	r3, r4
 800829c:	eb18 0303 	adds.w	r3, r8, r3
 80082a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80082a4:	462b      	mov	r3, r5
 80082a6:	eb49 0303 	adc.w	r3, r9, r3
 80082aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80082ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80082ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80082be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80082c2:	460b      	mov	r3, r1
 80082c4:	18db      	adds	r3, r3, r3
 80082c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80082c8:	4613      	mov	r3, r2
 80082ca:	eb42 0303 	adc.w	r3, r2, r3
 80082ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80082d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80082d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80082d8:	f7f8 fcbe 	bl	8000c58 <__aeabi_uldivmod>
 80082dc:	4602      	mov	r2, r0
 80082de:	460b      	mov	r3, r1
 80082e0:	4b61      	ldr	r3, [pc, #388]	@ (8008468 <UART_SetConfig+0x2d4>)
 80082e2:	fba3 2302 	umull	r2, r3, r3, r2
 80082e6:	095b      	lsrs	r3, r3, #5
 80082e8:	011c      	lsls	r4, r3, #4
 80082ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80082ee:	2200      	movs	r2, #0
 80082f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80082f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80082f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80082fc:	4642      	mov	r2, r8
 80082fe:	464b      	mov	r3, r9
 8008300:	1891      	adds	r1, r2, r2
 8008302:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008304:	415b      	adcs	r3, r3
 8008306:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008308:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800830c:	4641      	mov	r1, r8
 800830e:	eb12 0a01 	adds.w	sl, r2, r1
 8008312:	4649      	mov	r1, r9
 8008314:	eb43 0b01 	adc.w	fp, r3, r1
 8008318:	f04f 0200 	mov.w	r2, #0
 800831c:	f04f 0300 	mov.w	r3, #0
 8008320:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008324:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008328:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800832c:	4692      	mov	sl, r2
 800832e:	469b      	mov	fp, r3
 8008330:	4643      	mov	r3, r8
 8008332:	eb1a 0303 	adds.w	r3, sl, r3
 8008336:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800833a:	464b      	mov	r3, r9
 800833c:	eb4b 0303 	adc.w	r3, fp, r3
 8008340:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008350:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008354:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008358:	460b      	mov	r3, r1
 800835a:	18db      	adds	r3, r3, r3
 800835c:	643b      	str	r3, [r7, #64]	@ 0x40
 800835e:	4613      	mov	r3, r2
 8008360:	eb42 0303 	adc.w	r3, r2, r3
 8008364:	647b      	str	r3, [r7, #68]	@ 0x44
 8008366:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800836a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800836e:	f7f8 fc73 	bl	8000c58 <__aeabi_uldivmod>
 8008372:	4602      	mov	r2, r0
 8008374:	460b      	mov	r3, r1
 8008376:	4611      	mov	r1, r2
 8008378:	4b3b      	ldr	r3, [pc, #236]	@ (8008468 <UART_SetConfig+0x2d4>)
 800837a:	fba3 2301 	umull	r2, r3, r3, r1
 800837e:	095b      	lsrs	r3, r3, #5
 8008380:	2264      	movs	r2, #100	@ 0x64
 8008382:	fb02 f303 	mul.w	r3, r2, r3
 8008386:	1acb      	subs	r3, r1, r3
 8008388:	00db      	lsls	r3, r3, #3
 800838a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800838e:	4b36      	ldr	r3, [pc, #216]	@ (8008468 <UART_SetConfig+0x2d4>)
 8008390:	fba3 2302 	umull	r2, r3, r3, r2
 8008394:	095b      	lsrs	r3, r3, #5
 8008396:	005b      	lsls	r3, r3, #1
 8008398:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800839c:	441c      	add	r4, r3
 800839e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80083a2:	2200      	movs	r2, #0
 80083a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80083a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80083ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80083b0:	4642      	mov	r2, r8
 80083b2:	464b      	mov	r3, r9
 80083b4:	1891      	adds	r1, r2, r2
 80083b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80083b8:	415b      	adcs	r3, r3
 80083ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80083c0:	4641      	mov	r1, r8
 80083c2:	1851      	adds	r1, r2, r1
 80083c4:	6339      	str	r1, [r7, #48]	@ 0x30
 80083c6:	4649      	mov	r1, r9
 80083c8:	414b      	adcs	r3, r1
 80083ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80083cc:	f04f 0200 	mov.w	r2, #0
 80083d0:	f04f 0300 	mov.w	r3, #0
 80083d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80083d8:	4659      	mov	r1, fp
 80083da:	00cb      	lsls	r3, r1, #3
 80083dc:	4651      	mov	r1, sl
 80083de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80083e2:	4651      	mov	r1, sl
 80083e4:	00ca      	lsls	r2, r1, #3
 80083e6:	4610      	mov	r0, r2
 80083e8:	4619      	mov	r1, r3
 80083ea:	4603      	mov	r3, r0
 80083ec:	4642      	mov	r2, r8
 80083ee:	189b      	adds	r3, r3, r2
 80083f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80083f4:	464b      	mov	r3, r9
 80083f6:	460a      	mov	r2, r1
 80083f8:	eb42 0303 	adc.w	r3, r2, r3
 80083fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	2200      	movs	r2, #0
 8008408:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800840c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008410:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008414:	460b      	mov	r3, r1
 8008416:	18db      	adds	r3, r3, r3
 8008418:	62bb      	str	r3, [r7, #40]	@ 0x28
 800841a:	4613      	mov	r3, r2
 800841c:	eb42 0303 	adc.w	r3, r2, r3
 8008420:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008422:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008426:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800842a:	f7f8 fc15 	bl	8000c58 <__aeabi_uldivmod>
 800842e:	4602      	mov	r2, r0
 8008430:	460b      	mov	r3, r1
 8008432:	4b0d      	ldr	r3, [pc, #52]	@ (8008468 <UART_SetConfig+0x2d4>)
 8008434:	fba3 1302 	umull	r1, r3, r3, r2
 8008438:	095b      	lsrs	r3, r3, #5
 800843a:	2164      	movs	r1, #100	@ 0x64
 800843c:	fb01 f303 	mul.w	r3, r1, r3
 8008440:	1ad3      	subs	r3, r2, r3
 8008442:	00db      	lsls	r3, r3, #3
 8008444:	3332      	adds	r3, #50	@ 0x32
 8008446:	4a08      	ldr	r2, [pc, #32]	@ (8008468 <UART_SetConfig+0x2d4>)
 8008448:	fba2 2303 	umull	r2, r3, r2, r3
 800844c:	095b      	lsrs	r3, r3, #5
 800844e:	f003 0207 	and.w	r2, r3, #7
 8008452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4422      	add	r2, r4
 800845a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800845c:	e106      	b.n	800866c <UART_SetConfig+0x4d8>
 800845e:	bf00      	nop
 8008460:	40011000 	.word	0x40011000
 8008464:	40011400 	.word	0x40011400
 8008468:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800846c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008470:	2200      	movs	r2, #0
 8008472:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008476:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800847a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800847e:	4642      	mov	r2, r8
 8008480:	464b      	mov	r3, r9
 8008482:	1891      	adds	r1, r2, r2
 8008484:	6239      	str	r1, [r7, #32]
 8008486:	415b      	adcs	r3, r3
 8008488:	627b      	str	r3, [r7, #36]	@ 0x24
 800848a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800848e:	4641      	mov	r1, r8
 8008490:	1854      	adds	r4, r2, r1
 8008492:	4649      	mov	r1, r9
 8008494:	eb43 0501 	adc.w	r5, r3, r1
 8008498:	f04f 0200 	mov.w	r2, #0
 800849c:	f04f 0300 	mov.w	r3, #0
 80084a0:	00eb      	lsls	r3, r5, #3
 80084a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80084a6:	00e2      	lsls	r2, r4, #3
 80084a8:	4614      	mov	r4, r2
 80084aa:	461d      	mov	r5, r3
 80084ac:	4643      	mov	r3, r8
 80084ae:	18e3      	adds	r3, r4, r3
 80084b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80084b4:	464b      	mov	r3, r9
 80084b6:	eb45 0303 	adc.w	r3, r5, r3
 80084ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80084be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80084ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80084ce:	f04f 0200 	mov.w	r2, #0
 80084d2:	f04f 0300 	mov.w	r3, #0
 80084d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80084da:	4629      	mov	r1, r5
 80084dc:	008b      	lsls	r3, r1, #2
 80084de:	4621      	mov	r1, r4
 80084e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084e4:	4621      	mov	r1, r4
 80084e6:	008a      	lsls	r2, r1, #2
 80084e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80084ec:	f7f8 fbb4 	bl	8000c58 <__aeabi_uldivmod>
 80084f0:	4602      	mov	r2, r0
 80084f2:	460b      	mov	r3, r1
 80084f4:	4b60      	ldr	r3, [pc, #384]	@ (8008678 <UART_SetConfig+0x4e4>)
 80084f6:	fba3 2302 	umull	r2, r3, r3, r2
 80084fa:	095b      	lsrs	r3, r3, #5
 80084fc:	011c      	lsls	r4, r3, #4
 80084fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008502:	2200      	movs	r2, #0
 8008504:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008508:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800850c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008510:	4642      	mov	r2, r8
 8008512:	464b      	mov	r3, r9
 8008514:	1891      	adds	r1, r2, r2
 8008516:	61b9      	str	r1, [r7, #24]
 8008518:	415b      	adcs	r3, r3
 800851a:	61fb      	str	r3, [r7, #28]
 800851c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008520:	4641      	mov	r1, r8
 8008522:	1851      	adds	r1, r2, r1
 8008524:	6139      	str	r1, [r7, #16]
 8008526:	4649      	mov	r1, r9
 8008528:	414b      	adcs	r3, r1
 800852a:	617b      	str	r3, [r7, #20]
 800852c:	f04f 0200 	mov.w	r2, #0
 8008530:	f04f 0300 	mov.w	r3, #0
 8008534:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008538:	4659      	mov	r1, fp
 800853a:	00cb      	lsls	r3, r1, #3
 800853c:	4651      	mov	r1, sl
 800853e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008542:	4651      	mov	r1, sl
 8008544:	00ca      	lsls	r2, r1, #3
 8008546:	4610      	mov	r0, r2
 8008548:	4619      	mov	r1, r3
 800854a:	4603      	mov	r3, r0
 800854c:	4642      	mov	r2, r8
 800854e:	189b      	adds	r3, r3, r2
 8008550:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008554:	464b      	mov	r3, r9
 8008556:	460a      	mov	r2, r1
 8008558:	eb42 0303 	adc.w	r3, r2, r3
 800855c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	67bb      	str	r3, [r7, #120]	@ 0x78
 800856a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800856c:	f04f 0200 	mov.w	r2, #0
 8008570:	f04f 0300 	mov.w	r3, #0
 8008574:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008578:	4649      	mov	r1, r9
 800857a:	008b      	lsls	r3, r1, #2
 800857c:	4641      	mov	r1, r8
 800857e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008582:	4641      	mov	r1, r8
 8008584:	008a      	lsls	r2, r1, #2
 8008586:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800858a:	f7f8 fb65 	bl	8000c58 <__aeabi_uldivmod>
 800858e:	4602      	mov	r2, r0
 8008590:	460b      	mov	r3, r1
 8008592:	4611      	mov	r1, r2
 8008594:	4b38      	ldr	r3, [pc, #224]	@ (8008678 <UART_SetConfig+0x4e4>)
 8008596:	fba3 2301 	umull	r2, r3, r3, r1
 800859a:	095b      	lsrs	r3, r3, #5
 800859c:	2264      	movs	r2, #100	@ 0x64
 800859e:	fb02 f303 	mul.w	r3, r2, r3
 80085a2:	1acb      	subs	r3, r1, r3
 80085a4:	011b      	lsls	r3, r3, #4
 80085a6:	3332      	adds	r3, #50	@ 0x32
 80085a8:	4a33      	ldr	r2, [pc, #204]	@ (8008678 <UART_SetConfig+0x4e4>)
 80085aa:	fba2 2303 	umull	r2, r3, r2, r3
 80085ae:	095b      	lsrs	r3, r3, #5
 80085b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80085b4:	441c      	add	r4, r3
 80085b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80085ba:	2200      	movs	r2, #0
 80085bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80085be:	677a      	str	r2, [r7, #116]	@ 0x74
 80085c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80085c4:	4642      	mov	r2, r8
 80085c6:	464b      	mov	r3, r9
 80085c8:	1891      	adds	r1, r2, r2
 80085ca:	60b9      	str	r1, [r7, #8]
 80085cc:	415b      	adcs	r3, r3
 80085ce:	60fb      	str	r3, [r7, #12]
 80085d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80085d4:	4641      	mov	r1, r8
 80085d6:	1851      	adds	r1, r2, r1
 80085d8:	6039      	str	r1, [r7, #0]
 80085da:	4649      	mov	r1, r9
 80085dc:	414b      	adcs	r3, r1
 80085de:	607b      	str	r3, [r7, #4]
 80085e0:	f04f 0200 	mov.w	r2, #0
 80085e4:	f04f 0300 	mov.w	r3, #0
 80085e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80085ec:	4659      	mov	r1, fp
 80085ee:	00cb      	lsls	r3, r1, #3
 80085f0:	4651      	mov	r1, sl
 80085f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80085f6:	4651      	mov	r1, sl
 80085f8:	00ca      	lsls	r2, r1, #3
 80085fa:	4610      	mov	r0, r2
 80085fc:	4619      	mov	r1, r3
 80085fe:	4603      	mov	r3, r0
 8008600:	4642      	mov	r2, r8
 8008602:	189b      	adds	r3, r3, r2
 8008604:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008606:	464b      	mov	r3, r9
 8008608:	460a      	mov	r2, r1
 800860a:	eb42 0303 	adc.w	r3, r2, r3
 800860e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	2200      	movs	r2, #0
 8008618:	663b      	str	r3, [r7, #96]	@ 0x60
 800861a:	667a      	str	r2, [r7, #100]	@ 0x64
 800861c:	f04f 0200 	mov.w	r2, #0
 8008620:	f04f 0300 	mov.w	r3, #0
 8008624:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008628:	4649      	mov	r1, r9
 800862a:	008b      	lsls	r3, r1, #2
 800862c:	4641      	mov	r1, r8
 800862e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008632:	4641      	mov	r1, r8
 8008634:	008a      	lsls	r2, r1, #2
 8008636:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800863a:	f7f8 fb0d 	bl	8000c58 <__aeabi_uldivmod>
 800863e:	4602      	mov	r2, r0
 8008640:	460b      	mov	r3, r1
 8008642:	4b0d      	ldr	r3, [pc, #52]	@ (8008678 <UART_SetConfig+0x4e4>)
 8008644:	fba3 1302 	umull	r1, r3, r3, r2
 8008648:	095b      	lsrs	r3, r3, #5
 800864a:	2164      	movs	r1, #100	@ 0x64
 800864c:	fb01 f303 	mul.w	r3, r1, r3
 8008650:	1ad3      	subs	r3, r2, r3
 8008652:	011b      	lsls	r3, r3, #4
 8008654:	3332      	adds	r3, #50	@ 0x32
 8008656:	4a08      	ldr	r2, [pc, #32]	@ (8008678 <UART_SetConfig+0x4e4>)
 8008658:	fba2 2303 	umull	r2, r3, r2, r3
 800865c:	095b      	lsrs	r3, r3, #5
 800865e:	f003 020f 	and.w	r2, r3, #15
 8008662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4422      	add	r2, r4
 800866a:	609a      	str	r2, [r3, #8]
}
 800866c:	bf00      	nop
 800866e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008672:	46bd      	mov	sp, r7
 8008674:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008678:	51eb851f 	.word	0x51eb851f

0800867c <__cvt>:
 800867c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008680:	ec57 6b10 	vmov	r6, r7, d0
 8008684:	2f00      	cmp	r7, #0
 8008686:	460c      	mov	r4, r1
 8008688:	4619      	mov	r1, r3
 800868a:	463b      	mov	r3, r7
 800868c:	bfbb      	ittet	lt
 800868e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008692:	461f      	movlt	r7, r3
 8008694:	2300      	movge	r3, #0
 8008696:	232d      	movlt	r3, #45	@ 0x2d
 8008698:	700b      	strb	r3, [r1, #0]
 800869a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800869c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80086a0:	4691      	mov	r9, r2
 80086a2:	f023 0820 	bic.w	r8, r3, #32
 80086a6:	bfbc      	itt	lt
 80086a8:	4632      	movlt	r2, r6
 80086aa:	4616      	movlt	r6, r2
 80086ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80086b0:	d005      	beq.n	80086be <__cvt+0x42>
 80086b2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80086b6:	d100      	bne.n	80086ba <__cvt+0x3e>
 80086b8:	3401      	adds	r4, #1
 80086ba:	2102      	movs	r1, #2
 80086bc:	e000      	b.n	80086c0 <__cvt+0x44>
 80086be:	2103      	movs	r1, #3
 80086c0:	ab03      	add	r3, sp, #12
 80086c2:	9301      	str	r3, [sp, #4]
 80086c4:	ab02      	add	r3, sp, #8
 80086c6:	9300      	str	r3, [sp, #0]
 80086c8:	ec47 6b10 	vmov	d0, r6, r7
 80086cc:	4653      	mov	r3, sl
 80086ce:	4622      	mov	r2, r4
 80086d0:	f000 fe6e 	bl	80093b0 <_dtoa_r>
 80086d4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80086d8:	4605      	mov	r5, r0
 80086da:	d119      	bne.n	8008710 <__cvt+0x94>
 80086dc:	f019 0f01 	tst.w	r9, #1
 80086e0:	d00e      	beq.n	8008700 <__cvt+0x84>
 80086e2:	eb00 0904 	add.w	r9, r0, r4
 80086e6:	2200      	movs	r2, #0
 80086e8:	2300      	movs	r3, #0
 80086ea:	4630      	mov	r0, r6
 80086ec:	4639      	mov	r1, r7
 80086ee:	f7f8 f9f3 	bl	8000ad8 <__aeabi_dcmpeq>
 80086f2:	b108      	cbz	r0, 80086f8 <__cvt+0x7c>
 80086f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80086f8:	2230      	movs	r2, #48	@ 0x30
 80086fa:	9b03      	ldr	r3, [sp, #12]
 80086fc:	454b      	cmp	r3, r9
 80086fe:	d31e      	bcc.n	800873e <__cvt+0xc2>
 8008700:	9b03      	ldr	r3, [sp, #12]
 8008702:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008704:	1b5b      	subs	r3, r3, r5
 8008706:	4628      	mov	r0, r5
 8008708:	6013      	str	r3, [r2, #0]
 800870a:	b004      	add	sp, #16
 800870c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008710:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008714:	eb00 0904 	add.w	r9, r0, r4
 8008718:	d1e5      	bne.n	80086e6 <__cvt+0x6a>
 800871a:	7803      	ldrb	r3, [r0, #0]
 800871c:	2b30      	cmp	r3, #48	@ 0x30
 800871e:	d10a      	bne.n	8008736 <__cvt+0xba>
 8008720:	2200      	movs	r2, #0
 8008722:	2300      	movs	r3, #0
 8008724:	4630      	mov	r0, r6
 8008726:	4639      	mov	r1, r7
 8008728:	f7f8 f9d6 	bl	8000ad8 <__aeabi_dcmpeq>
 800872c:	b918      	cbnz	r0, 8008736 <__cvt+0xba>
 800872e:	f1c4 0401 	rsb	r4, r4, #1
 8008732:	f8ca 4000 	str.w	r4, [sl]
 8008736:	f8da 3000 	ldr.w	r3, [sl]
 800873a:	4499      	add	r9, r3
 800873c:	e7d3      	b.n	80086e6 <__cvt+0x6a>
 800873e:	1c59      	adds	r1, r3, #1
 8008740:	9103      	str	r1, [sp, #12]
 8008742:	701a      	strb	r2, [r3, #0]
 8008744:	e7d9      	b.n	80086fa <__cvt+0x7e>

08008746 <__exponent>:
 8008746:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008748:	2900      	cmp	r1, #0
 800874a:	bfba      	itte	lt
 800874c:	4249      	neglt	r1, r1
 800874e:	232d      	movlt	r3, #45	@ 0x2d
 8008750:	232b      	movge	r3, #43	@ 0x2b
 8008752:	2909      	cmp	r1, #9
 8008754:	7002      	strb	r2, [r0, #0]
 8008756:	7043      	strb	r3, [r0, #1]
 8008758:	dd29      	ble.n	80087ae <__exponent+0x68>
 800875a:	f10d 0307 	add.w	r3, sp, #7
 800875e:	461d      	mov	r5, r3
 8008760:	270a      	movs	r7, #10
 8008762:	461a      	mov	r2, r3
 8008764:	fbb1 f6f7 	udiv	r6, r1, r7
 8008768:	fb07 1416 	mls	r4, r7, r6, r1
 800876c:	3430      	adds	r4, #48	@ 0x30
 800876e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008772:	460c      	mov	r4, r1
 8008774:	2c63      	cmp	r4, #99	@ 0x63
 8008776:	f103 33ff 	add.w	r3, r3, #4294967295
 800877a:	4631      	mov	r1, r6
 800877c:	dcf1      	bgt.n	8008762 <__exponent+0x1c>
 800877e:	3130      	adds	r1, #48	@ 0x30
 8008780:	1e94      	subs	r4, r2, #2
 8008782:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008786:	1c41      	adds	r1, r0, #1
 8008788:	4623      	mov	r3, r4
 800878a:	42ab      	cmp	r3, r5
 800878c:	d30a      	bcc.n	80087a4 <__exponent+0x5e>
 800878e:	f10d 0309 	add.w	r3, sp, #9
 8008792:	1a9b      	subs	r3, r3, r2
 8008794:	42ac      	cmp	r4, r5
 8008796:	bf88      	it	hi
 8008798:	2300      	movhi	r3, #0
 800879a:	3302      	adds	r3, #2
 800879c:	4403      	add	r3, r0
 800879e:	1a18      	subs	r0, r3, r0
 80087a0:	b003      	add	sp, #12
 80087a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087a4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80087a8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80087ac:	e7ed      	b.n	800878a <__exponent+0x44>
 80087ae:	2330      	movs	r3, #48	@ 0x30
 80087b0:	3130      	adds	r1, #48	@ 0x30
 80087b2:	7083      	strb	r3, [r0, #2]
 80087b4:	70c1      	strb	r1, [r0, #3]
 80087b6:	1d03      	adds	r3, r0, #4
 80087b8:	e7f1      	b.n	800879e <__exponent+0x58>
	...

080087bc <_printf_float>:
 80087bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087c0:	b08d      	sub	sp, #52	@ 0x34
 80087c2:	460c      	mov	r4, r1
 80087c4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80087c8:	4616      	mov	r6, r2
 80087ca:	461f      	mov	r7, r3
 80087cc:	4605      	mov	r5, r0
 80087ce:	f000 fced 	bl	80091ac <_localeconv_r>
 80087d2:	6803      	ldr	r3, [r0, #0]
 80087d4:	9304      	str	r3, [sp, #16]
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7f7 fd52 	bl	8000280 <strlen>
 80087dc:	2300      	movs	r3, #0
 80087de:	930a      	str	r3, [sp, #40]	@ 0x28
 80087e0:	f8d8 3000 	ldr.w	r3, [r8]
 80087e4:	9005      	str	r0, [sp, #20]
 80087e6:	3307      	adds	r3, #7
 80087e8:	f023 0307 	bic.w	r3, r3, #7
 80087ec:	f103 0208 	add.w	r2, r3, #8
 80087f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80087f4:	f8d4 b000 	ldr.w	fp, [r4]
 80087f8:	f8c8 2000 	str.w	r2, [r8]
 80087fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008800:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008804:	9307      	str	r3, [sp, #28]
 8008806:	f8cd 8018 	str.w	r8, [sp, #24]
 800880a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800880e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008812:	4b9c      	ldr	r3, [pc, #624]	@ (8008a84 <_printf_float+0x2c8>)
 8008814:	f04f 32ff 	mov.w	r2, #4294967295
 8008818:	f7f8 f990 	bl	8000b3c <__aeabi_dcmpun>
 800881c:	bb70      	cbnz	r0, 800887c <_printf_float+0xc0>
 800881e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008822:	4b98      	ldr	r3, [pc, #608]	@ (8008a84 <_printf_float+0x2c8>)
 8008824:	f04f 32ff 	mov.w	r2, #4294967295
 8008828:	f7f8 f96a 	bl	8000b00 <__aeabi_dcmple>
 800882c:	bb30      	cbnz	r0, 800887c <_printf_float+0xc0>
 800882e:	2200      	movs	r2, #0
 8008830:	2300      	movs	r3, #0
 8008832:	4640      	mov	r0, r8
 8008834:	4649      	mov	r1, r9
 8008836:	f7f8 f959 	bl	8000aec <__aeabi_dcmplt>
 800883a:	b110      	cbz	r0, 8008842 <_printf_float+0x86>
 800883c:	232d      	movs	r3, #45	@ 0x2d
 800883e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008842:	4a91      	ldr	r2, [pc, #580]	@ (8008a88 <_printf_float+0x2cc>)
 8008844:	4b91      	ldr	r3, [pc, #580]	@ (8008a8c <_printf_float+0x2d0>)
 8008846:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800884a:	bf94      	ite	ls
 800884c:	4690      	movls	r8, r2
 800884e:	4698      	movhi	r8, r3
 8008850:	2303      	movs	r3, #3
 8008852:	6123      	str	r3, [r4, #16]
 8008854:	f02b 0304 	bic.w	r3, fp, #4
 8008858:	6023      	str	r3, [r4, #0]
 800885a:	f04f 0900 	mov.w	r9, #0
 800885e:	9700      	str	r7, [sp, #0]
 8008860:	4633      	mov	r3, r6
 8008862:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008864:	4621      	mov	r1, r4
 8008866:	4628      	mov	r0, r5
 8008868:	f000 f9d2 	bl	8008c10 <_printf_common>
 800886c:	3001      	adds	r0, #1
 800886e:	f040 808d 	bne.w	800898c <_printf_float+0x1d0>
 8008872:	f04f 30ff 	mov.w	r0, #4294967295
 8008876:	b00d      	add	sp, #52	@ 0x34
 8008878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800887c:	4642      	mov	r2, r8
 800887e:	464b      	mov	r3, r9
 8008880:	4640      	mov	r0, r8
 8008882:	4649      	mov	r1, r9
 8008884:	f7f8 f95a 	bl	8000b3c <__aeabi_dcmpun>
 8008888:	b140      	cbz	r0, 800889c <_printf_float+0xe0>
 800888a:	464b      	mov	r3, r9
 800888c:	2b00      	cmp	r3, #0
 800888e:	bfbc      	itt	lt
 8008890:	232d      	movlt	r3, #45	@ 0x2d
 8008892:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008896:	4a7e      	ldr	r2, [pc, #504]	@ (8008a90 <_printf_float+0x2d4>)
 8008898:	4b7e      	ldr	r3, [pc, #504]	@ (8008a94 <_printf_float+0x2d8>)
 800889a:	e7d4      	b.n	8008846 <_printf_float+0x8a>
 800889c:	6863      	ldr	r3, [r4, #4]
 800889e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80088a2:	9206      	str	r2, [sp, #24]
 80088a4:	1c5a      	adds	r2, r3, #1
 80088a6:	d13b      	bne.n	8008920 <_printf_float+0x164>
 80088a8:	2306      	movs	r3, #6
 80088aa:	6063      	str	r3, [r4, #4]
 80088ac:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80088b0:	2300      	movs	r3, #0
 80088b2:	6022      	str	r2, [r4, #0]
 80088b4:	9303      	str	r3, [sp, #12]
 80088b6:	ab0a      	add	r3, sp, #40	@ 0x28
 80088b8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80088bc:	ab09      	add	r3, sp, #36	@ 0x24
 80088be:	9300      	str	r3, [sp, #0]
 80088c0:	6861      	ldr	r1, [r4, #4]
 80088c2:	ec49 8b10 	vmov	d0, r8, r9
 80088c6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80088ca:	4628      	mov	r0, r5
 80088cc:	f7ff fed6 	bl	800867c <__cvt>
 80088d0:	9b06      	ldr	r3, [sp, #24]
 80088d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80088d4:	2b47      	cmp	r3, #71	@ 0x47
 80088d6:	4680      	mov	r8, r0
 80088d8:	d129      	bne.n	800892e <_printf_float+0x172>
 80088da:	1cc8      	adds	r0, r1, #3
 80088dc:	db02      	blt.n	80088e4 <_printf_float+0x128>
 80088de:	6863      	ldr	r3, [r4, #4]
 80088e0:	4299      	cmp	r1, r3
 80088e2:	dd41      	ble.n	8008968 <_printf_float+0x1ac>
 80088e4:	f1aa 0a02 	sub.w	sl, sl, #2
 80088e8:	fa5f fa8a 	uxtb.w	sl, sl
 80088ec:	3901      	subs	r1, #1
 80088ee:	4652      	mov	r2, sl
 80088f0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80088f4:	9109      	str	r1, [sp, #36]	@ 0x24
 80088f6:	f7ff ff26 	bl	8008746 <__exponent>
 80088fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80088fc:	1813      	adds	r3, r2, r0
 80088fe:	2a01      	cmp	r2, #1
 8008900:	4681      	mov	r9, r0
 8008902:	6123      	str	r3, [r4, #16]
 8008904:	dc02      	bgt.n	800890c <_printf_float+0x150>
 8008906:	6822      	ldr	r2, [r4, #0]
 8008908:	07d2      	lsls	r2, r2, #31
 800890a:	d501      	bpl.n	8008910 <_printf_float+0x154>
 800890c:	3301      	adds	r3, #1
 800890e:	6123      	str	r3, [r4, #16]
 8008910:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008914:	2b00      	cmp	r3, #0
 8008916:	d0a2      	beq.n	800885e <_printf_float+0xa2>
 8008918:	232d      	movs	r3, #45	@ 0x2d
 800891a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800891e:	e79e      	b.n	800885e <_printf_float+0xa2>
 8008920:	9a06      	ldr	r2, [sp, #24]
 8008922:	2a47      	cmp	r2, #71	@ 0x47
 8008924:	d1c2      	bne.n	80088ac <_printf_float+0xf0>
 8008926:	2b00      	cmp	r3, #0
 8008928:	d1c0      	bne.n	80088ac <_printf_float+0xf0>
 800892a:	2301      	movs	r3, #1
 800892c:	e7bd      	b.n	80088aa <_printf_float+0xee>
 800892e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008932:	d9db      	bls.n	80088ec <_printf_float+0x130>
 8008934:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008938:	d118      	bne.n	800896c <_printf_float+0x1b0>
 800893a:	2900      	cmp	r1, #0
 800893c:	6863      	ldr	r3, [r4, #4]
 800893e:	dd0b      	ble.n	8008958 <_printf_float+0x19c>
 8008940:	6121      	str	r1, [r4, #16]
 8008942:	b913      	cbnz	r3, 800894a <_printf_float+0x18e>
 8008944:	6822      	ldr	r2, [r4, #0]
 8008946:	07d0      	lsls	r0, r2, #31
 8008948:	d502      	bpl.n	8008950 <_printf_float+0x194>
 800894a:	3301      	adds	r3, #1
 800894c:	440b      	add	r3, r1
 800894e:	6123      	str	r3, [r4, #16]
 8008950:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008952:	f04f 0900 	mov.w	r9, #0
 8008956:	e7db      	b.n	8008910 <_printf_float+0x154>
 8008958:	b913      	cbnz	r3, 8008960 <_printf_float+0x1a4>
 800895a:	6822      	ldr	r2, [r4, #0]
 800895c:	07d2      	lsls	r2, r2, #31
 800895e:	d501      	bpl.n	8008964 <_printf_float+0x1a8>
 8008960:	3302      	adds	r3, #2
 8008962:	e7f4      	b.n	800894e <_printf_float+0x192>
 8008964:	2301      	movs	r3, #1
 8008966:	e7f2      	b.n	800894e <_printf_float+0x192>
 8008968:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800896c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800896e:	4299      	cmp	r1, r3
 8008970:	db05      	blt.n	800897e <_printf_float+0x1c2>
 8008972:	6823      	ldr	r3, [r4, #0]
 8008974:	6121      	str	r1, [r4, #16]
 8008976:	07d8      	lsls	r0, r3, #31
 8008978:	d5ea      	bpl.n	8008950 <_printf_float+0x194>
 800897a:	1c4b      	adds	r3, r1, #1
 800897c:	e7e7      	b.n	800894e <_printf_float+0x192>
 800897e:	2900      	cmp	r1, #0
 8008980:	bfd4      	ite	le
 8008982:	f1c1 0202 	rsble	r2, r1, #2
 8008986:	2201      	movgt	r2, #1
 8008988:	4413      	add	r3, r2
 800898a:	e7e0      	b.n	800894e <_printf_float+0x192>
 800898c:	6823      	ldr	r3, [r4, #0]
 800898e:	055a      	lsls	r2, r3, #21
 8008990:	d407      	bmi.n	80089a2 <_printf_float+0x1e6>
 8008992:	6923      	ldr	r3, [r4, #16]
 8008994:	4642      	mov	r2, r8
 8008996:	4631      	mov	r1, r6
 8008998:	4628      	mov	r0, r5
 800899a:	47b8      	blx	r7
 800899c:	3001      	adds	r0, #1
 800899e:	d12b      	bne.n	80089f8 <_printf_float+0x23c>
 80089a0:	e767      	b.n	8008872 <_printf_float+0xb6>
 80089a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80089a6:	f240 80dd 	bls.w	8008b64 <_printf_float+0x3a8>
 80089aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80089ae:	2200      	movs	r2, #0
 80089b0:	2300      	movs	r3, #0
 80089b2:	f7f8 f891 	bl	8000ad8 <__aeabi_dcmpeq>
 80089b6:	2800      	cmp	r0, #0
 80089b8:	d033      	beq.n	8008a22 <_printf_float+0x266>
 80089ba:	4a37      	ldr	r2, [pc, #220]	@ (8008a98 <_printf_float+0x2dc>)
 80089bc:	2301      	movs	r3, #1
 80089be:	4631      	mov	r1, r6
 80089c0:	4628      	mov	r0, r5
 80089c2:	47b8      	blx	r7
 80089c4:	3001      	adds	r0, #1
 80089c6:	f43f af54 	beq.w	8008872 <_printf_float+0xb6>
 80089ca:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80089ce:	4543      	cmp	r3, r8
 80089d0:	db02      	blt.n	80089d8 <_printf_float+0x21c>
 80089d2:	6823      	ldr	r3, [r4, #0]
 80089d4:	07d8      	lsls	r0, r3, #31
 80089d6:	d50f      	bpl.n	80089f8 <_printf_float+0x23c>
 80089d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089dc:	4631      	mov	r1, r6
 80089de:	4628      	mov	r0, r5
 80089e0:	47b8      	blx	r7
 80089e2:	3001      	adds	r0, #1
 80089e4:	f43f af45 	beq.w	8008872 <_printf_float+0xb6>
 80089e8:	f04f 0900 	mov.w	r9, #0
 80089ec:	f108 38ff 	add.w	r8, r8, #4294967295
 80089f0:	f104 0a1a 	add.w	sl, r4, #26
 80089f4:	45c8      	cmp	r8, r9
 80089f6:	dc09      	bgt.n	8008a0c <_printf_float+0x250>
 80089f8:	6823      	ldr	r3, [r4, #0]
 80089fa:	079b      	lsls	r3, r3, #30
 80089fc:	f100 8103 	bmi.w	8008c06 <_printf_float+0x44a>
 8008a00:	68e0      	ldr	r0, [r4, #12]
 8008a02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a04:	4298      	cmp	r0, r3
 8008a06:	bfb8      	it	lt
 8008a08:	4618      	movlt	r0, r3
 8008a0a:	e734      	b.n	8008876 <_printf_float+0xba>
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	4652      	mov	r2, sl
 8008a10:	4631      	mov	r1, r6
 8008a12:	4628      	mov	r0, r5
 8008a14:	47b8      	blx	r7
 8008a16:	3001      	adds	r0, #1
 8008a18:	f43f af2b 	beq.w	8008872 <_printf_float+0xb6>
 8008a1c:	f109 0901 	add.w	r9, r9, #1
 8008a20:	e7e8      	b.n	80089f4 <_printf_float+0x238>
 8008a22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	dc39      	bgt.n	8008a9c <_printf_float+0x2e0>
 8008a28:	4a1b      	ldr	r2, [pc, #108]	@ (8008a98 <_printf_float+0x2dc>)
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	4631      	mov	r1, r6
 8008a2e:	4628      	mov	r0, r5
 8008a30:	47b8      	blx	r7
 8008a32:	3001      	adds	r0, #1
 8008a34:	f43f af1d 	beq.w	8008872 <_printf_float+0xb6>
 8008a38:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008a3c:	ea59 0303 	orrs.w	r3, r9, r3
 8008a40:	d102      	bne.n	8008a48 <_printf_float+0x28c>
 8008a42:	6823      	ldr	r3, [r4, #0]
 8008a44:	07d9      	lsls	r1, r3, #31
 8008a46:	d5d7      	bpl.n	80089f8 <_printf_float+0x23c>
 8008a48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a4c:	4631      	mov	r1, r6
 8008a4e:	4628      	mov	r0, r5
 8008a50:	47b8      	blx	r7
 8008a52:	3001      	adds	r0, #1
 8008a54:	f43f af0d 	beq.w	8008872 <_printf_float+0xb6>
 8008a58:	f04f 0a00 	mov.w	sl, #0
 8008a5c:	f104 0b1a 	add.w	fp, r4, #26
 8008a60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a62:	425b      	negs	r3, r3
 8008a64:	4553      	cmp	r3, sl
 8008a66:	dc01      	bgt.n	8008a6c <_printf_float+0x2b0>
 8008a68:	464b      	mov	r3, r9
 8008a6a:	e793      	b.n	8008994 <_printf_float+0x1d8>
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	465a      	mov	r2, fp
 8008a70:	4631      	mov	r1, r6
 8008a72:	4628      	mov	r0, r5
 8008a74:	47b8      	blx	r7
 8008a76:	3001      	adds	r0, #1
 8008a78:	f43f aefb 	beq.w	8008872 <_printf_float+0xb6>
 8008a7c:	f10a 0a01 	add.w	sl, sl, #1
 8008a80:	e7ee      	b.n	8008a60 <_printf_float+0x2a4>
 8008a82:	bf00      	nop
 8008a84:	7fefffff 	.word	0x7fefffff
 8008a88:	0800b4ec 	.word	0x0800b4ec
 8008a8c:	0800b4f0 	.word	0x0800b4f0
 8008a90:	0800b4f4 	.word	0x0800b4f4
 8008a94:	0800b4f8 	.word	0x0800b4f8
 8008a98:	0800b4fc 	.word	0x0800b4fc
 8008a9c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008a9e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008aa2:	4553      	cmp	r3, sl
 8008aa4:	bfa8      	it	ge
 8008aa6:	4653      	movge	r3, sl
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	4699      	mov	r9, r3
 8008aac:	dc36      	bgt.n	8008b1c <_printf_float+0x360>
 8008aae:	f04f 0b00 	mov.w	fp, #0
 8008ab2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ab6:	f104 021a 	add.w	r2, r4, #26
 8008aba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008abc:	9306      	str	r3, [sp, #24]
 8008abe:	eba3 0309 	sub.w	r3, r3, r9
 8008ac2:	455b      	cmp	r3, fp
 8008ac4:	dc31      	bgt.n	8008b2a <_printf_float+0x36e>
 8008ac6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ac8:	459a      	cmp	sl, r3
 8008aca:	dc3a      	bgt.n	8008b42 <_printf_float+0x386>
 8008acc:	6823      	ldr	r3, [r4, #0]
 8008ace:	07da      	lsls	r2, r3, #31
 8008ad0:	d437      	bmi.n	8008b42 <_printf_float+0x386>
 8008ad2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ad4:	ebaa 0903 	sub.w	r9, sl, r3
 8008ad8:	9b06      	ldr	r3, [sp, #24]
 8008ada:	ebaa 0303 	sub.w	r3, sl, r3
 8008ade:	4599      	cmp	r9, r3
 8008ae0:	bfa8      	it	ge
 8008ae2:	4699      	movge	r9, r3
 8008ae4:	f1b9 0f00 	cmp.w	r9, #0
 8008ae8:	dc33      	bgt.n	8008b52 <_printf_float+0x396>
 8008aea:	f04f 0800 	mov.w	r8, #0
 8008aee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008af2:	f104 0b1a 	add.w	fp, r4, #26
 8008af6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008af8:	ebaa 0303 	sub.w	r3, sl, r3
 8008afc:	eba3 0309 	sub.w	r3, r3, r9
 8008b00:	4543      	cmp	r3, r8
 8008b02:	f77f af79 	ble.w	80089f8 <_printf_float+0x23c>
 8008b06:	2301      	movs	r3, #1
 8008b08:	465a      	mov	r2, fp
 8008b0a:	4631      	mov	r1, r6
 8008b0c:	4628      	mov	r0, r5
 8008b0e:	47b8      	blx	r7
 8008b10:	3001      	adds	r0, #1
 8008b12:	f43f aeae 	beq.w	8008872 <_printf_float+0xb6>
 8008b16:	f108 0801 	add.w	r8, r8, #1
 8008b1a:	e7ec      	b.n	8008af6 <_printf_float+0x33a>
 8008b1c:	4642      	mov	r2, r8
 8008b1e:	4631      	mov	r1, r6
 8008b20:	4628      	mov	r0, r5
 8008b22:	47b8      	blx	r7
 8008b24:	3001      	adds	r0, #1
 8008b26:	d1c2      	bne.n	8008aae <_printf_float+0x2f2>
 8008b28:	e6a3      	b.n	8008872 <_printf_float+0xb6>
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	4631      	mov	r1, r6
 8008b2e:	4628      	mov	r0, r5
 8008b30:	9206      	str	r2, [sp, #24]
 8008b32:	47b8      	blx	r7
 8008b34:	3001      	adds	r0, #1
 8008b36:	f43f ae9c 	beq.w	8008872 <_printf_float+0xb6>
 8008b3a:	9a06      	ldr	r2, [sp, #24]
 8008b3c:	f10b 0b01 	add.w	fp, fp, #1
 8008b40:	e7bb      	b.n	8008aba <_printf_float+0x2fe>
 8008b42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b46:	4631      	mov	r1, r6
 8008b48:	4628      	mov	r0, r5
 8008b4a:	47b8      	blx	r7
 8008b4c:	3001      	adds	r0, #1
 8008b4e:	d1c0      	bne.n	8008ad2 <_printf_float+0x316>
 8008b50:	e68f      	b.n	8008872 <_printf_float+0xb6>
 8008b52:	9a06      	ldr	r2, [sp, #24]
 8008b54:	464b      	mov	r3, r9
 8008b56:	4442      	add	r2, r8
 8008b58:	4631      	mov	r1, r6
 8008b5a:	4628      	mov	r0, r5
 8008b5c:	47b8      	blx	r7
 8008b5e:	3001      	adds	r0, #1
 8008b60:	d1c3      	bne.n	8008aea <_printf_float+0x32e>
 8008b62:	e686      	b.n	8008872 <_printf_float+0xb6>
 8008b64:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008b68:	f1ba 0f01 	cmp.w	sl, #1
 8008b6c:	dc01      	bgt.n	8008b72 <_printf_float+0x3b6>
 8008b6e:	07db      	lsls	r3, r3, #31
 8008b70:	d536      	bpl.n	8008be0 <_printf_float+0x424>
 8008b72:	2301      	movs	r3, #1
 8008b74:	4642      	mov	r2, r8
 8008b76:	4631      	mov	r1, r6
 8008b78:	4628      	mov	r0, r5
 8008b7a:	47b8      	blx	r7
 8008b7c:	3001      	adds	r0, #1
 8008b7e:	f43f ae78 	beq.w	8008872 <_printf_float+0xb6>
 8008b82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b86:	4631      	mov	r1, r6
 8008b88:	4628      	mov	r0, r5
 8008b8a:	47b8      	blx	r7
 8008b8c:	3001      	adds	r0, #1
 8008b8e:	f43f ae70 	beq.w	8008872 <_printf_float+0xb6>
 8008b92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008b96:	2200      	movs	r2, #0
 8008b98:	2300      	movs	r3, #0
 8008b9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b9e:	f7f7 ff9b 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ba2:	b9c0      	cbnz	r0, 8008bd6 <_printf_float+0x41a>
 8008ba4:	4653      	mov	r3, sl
 8008ba6:	f108 0201 	add.w	r2, r8, #1
 8008baa:	4631      	mov	r1, r6
 8008bac:	4628      	mov	r0, r5
 8008bae:	47b8      	blx	r7
 8008bb0:	3001      	adds	r0, #1
 8008bb2:	d10c      	bne.n	8008bce <_printf_float+0x412>
 8008bb4:	e65d      	b.n	8008872 <_printf_float+0xb6>
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	465a      	mov	r2, fp
 8008bba:	4631      	mov	r1, r6
 8008bbc:	4628      	mov	r0, r5
 8008bbe:	47b8      	blx	r7
 8008bc0:	3001      	adds	r0, #1
 8008bc2:	f43f ae56 	beq.w	8008872 <_printf_float+0xb6>
 8008bc6:	f108 0801 	add.w	r8, r8, #1
 8008bca:	45d0      	cmp	r8, sl
 8008bcc:	dbf3      	blt.n	8008bb6 <_printf_float+0x3fa>
 8008bce:	464b      	mov	r3, r9
 8008bd0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008bd4:	e6df      	b.n	8008996 <_printf_float+0x1da>
 8008bd6:	f04f 0800 	mov.w	r8, #0
 8008bda:	f104 0b1a 	add.w	fp, r4, #26
 8008bde:	e7f4      	b.n	8008bca <_printf_float+0x40e>
 8008be0:	2301      	movs	r3, #1
 8008be2:	4642      	mov	r2, r8
 8008be4:	e7e1      	b.n	8008baa <_printf_float+0x3ee>
 8008be6:	2301      	movs	r3, #1
 8008be8:	464a      	mov	r2, r9
 8008bea:	4631      	mov	r1, r6
 8008bec:	4628      	mov	r0, r5
 8008bee:	47b8      	blx	r7
 8008bf0:	3001      	adds	r0, #1
 8008bf2:	f43f ae3e 	beq.w	8008872 <_printf_float+0xb6>
 8008bf6:	f108 0801 	add.w	r8, r8, #1
 8008bfa:	68e3      	ldr	r3, [r4, #12]
 8008bfc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008bfe:	1a5b      	subs	r3, r3, r1
 8008c00:	4543      	cmp	r3, r8
 8008c02:	dcf0      	bgt.n	8008be6 <_printf_float+0x42a>
 8008c04:	e6fc      	b.n	8008a00 <_printf_float+0x244>
 8008c06:	f04f 0800 	mov.w	r8, #0
 8008c0a:	f104 0919 	add.w	r9, r4, #25
 8008c0e:	e7f4      	b.n	8008bfa <_printf_float+0x43e>

08008c10 <_printf_common>:
 8008c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c14:	4616      	mov	r6, r2
 8008c16:	4698      	mov	r8, r3
 8008c18:	688a      	ldr	r2, [r1, #8]
 8008c1a:	690b      	ldr	r3, [r1, #16]
 8008c1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008c20:	4293      	cmp	r3, r2
 8008c22:	bfb8      	it	lt
 8008c24:	4613      	movlt	r3, r2
 8008c26:	6033      	str	r3, [r6, #0]
 8008c28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008c2c:	4607      	mov	r7, r0
 8008c2e:	460c      	mov	r4, r1
 8008c30:	b10a      	cbz	r2, 8008c36 <_printf_common+0x26>
 8008c32:	3301      	adds	r3, #1
 8008c34:	6033      	str	r3, [r6, #0]
 8008c36:	6823      	ldr	r3, [r4, #0]
 8008c38:	0699      	lsls	r1, r3, #26
 8008c3a:	bf42      	ittt	mi
 8008c3c:	6833      	ldrmi	r3, [r6, #0]
 8008c3e:	3302      	addmi	r3, #2
 8008c40:	6033      	strmi	r3, [r6, #0]
 8008c42:	6825      	ldr	r5, [r4, #0]
 8008c44:	f015 0506 	ands.w	r5, r5, #6
 8008c48:	d106      	bne.n	8008c58 <_printf_common+0x48>
 8008c4a:	f104 0a19 	add.w	sl, r4, #25
 8008c4e:	68e3      	ldr	r3, [r4, #12]
 8008c50:	6832      	ldr	r2, [r6, #0]
 8008c52:	1a9b      	subs	r3, r3, r2
 8008c54:	42ab      	cmp	r3, r5
 8008c56:	dc26      	bgt.n	8008ca6 <_printf_common+0x96>
 8008c58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008c5c:	6822      	ldr	r2, [r4, #0]
 8008c5e:	3b00      	subs	r3, #0
 8008c60:	bf18      	it	ne
 8008c62:	2301      	movne	r3, #1
 8008c64:	0692      	lsls	r2, r2, #26
 8008c66:	d42b      	bmi.n	8008cc0 <_printf_common+0xb0>
 8008c68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008c6c:	4641      	mov	r1, r8
 8008c6e:	4638      	mov	r0, r7
 8008c70:	47c8      	blx	r9
 8008c72:	3001      	adds	r0, #1
 8008c74:	d01e      	beq.n	8008cb4 <_printf_common+0xa4>
 8008c76:	6823      	ldr	r3, [r4, #0]
 8008c78:	6922      	ldr	r2, [r4, #16]
 8008c7a:	f003 0306 	and.w	r3, r3, #6
 8008c7e:	2b04      	cmp	r3, #4
 8008c80:	bf02      	ittt	eq
 8008c82:	68e5      	ldreq	r5, [r4, #12]
 8008c84:	6833      	ldreq	r3, [r6, #0]
 8008c86:	1aed      	subeq	r5, r5, r3
 8008c88:	68a3      	ldr	r3, [r4, #8]
 8008c8a:	bf0c      	ite	eq
 8008c8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c90:	2500      	movne	r5, #0
 8008c92:	4293      	cmp	r3, r2
 8008c94:	bfc4      	itt	gt
 8008c96:	1a9b      	subgt	r3, r3, r2
 8008c98:	18ed      	addgt	r5, r5, r3
 8008c9a:	2600      	movs	r6, #0
 8008c9c:	341a      	adds	r4, #26
 8008c9e:	42b5      	cmp	r5, r6
 8008ca0:	d11a      	bne.n	8008cd8 <_printf_common+0xc8>
 8008ca2:	2000      	movs	r0, #0
 8008ca4:	e008      	b.n	8008cb8 <_printf_common+0xa8>
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	4652      	mov	r2, sl
 8008caa:	4641      	mov	r1, r8
 8008cac:	4638      	mov	r0, r7
 8008cae:	47c8      	blx	r9
 8008cb0:	3001      	adds	r0, #1
 8008cb2:	d103      	bne.n	8008cbc <_printf_common+0xac>
 8008cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cbc:	3501      	adds	r5, #1
 8008cbe:	e7c6      	b.n	8008c4e <_printf_common+0x3e>
 8008cc0:	18e1      	adds	r1, r4, r3
 8008cc2:	1c5a      	adds	r2, r3, #1
 8008cc4:	2030      	movs	r0, #48	@ 0x30
 8008cc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008cca:	4422      	add	r2, r4
 8008ccc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008cd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008cd4:	3302      	adds	r3, #2
 8008cd6:	e7c7      	b.n	8008c68 <_printf_common+0x58>
 8008cd8:	2301      	movs	r3, #1
 8008cda:	4622      	mov	r2, r4
 8008cdc:	4641      	mov	r1, r8
 8008cde:	4638      	mov	r0, r7
 8008ce0:	47c8      	blx	r9
 8008ce2:	3001      	adds	r0, #1
 8008ce4:	d0e6      	beq.n	8008cb4 <_printf_common+0xa4>
 8008ce6:	3601      	adds	r6, #1
 8008ce8:	e7d9      	b.n	8008c9e <_printf_common+0x8e>
	...

08008cec <_printf_i>:
 8008cec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cf0:	7e0f      	ldrb	r7, [r1, #24]
 8008cf2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008cf4:	2f78      	cmp	r7, #120	@ 0x78
 8008cf6:	4691      	mov	r9, r2
 8008cf8:	4680      	mov	r8, r0
 8008cfa:	460c      	mov	r4, r1
 8008cfc:	469a      	mov	sl, r3
 8008cfe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008d02:	d807      	bhi.n	8008d14 <_printf_i+0x28>
 8008d04:	2f62      	cmp	r7, #98	@ 0x62
 8008d06:	d80a      	bhi.n	8008d1e <_printf_i+0x32>
 8008d08:	2f00      	cmp	r7, #0
 8008d0a:	f000 80d2 	beq.w	8008eb2 <_printf_i+0x1c6>
 8008d0e:	2f58      	cmp	r7, #88	@ 0x58
 8008d10:	f000 80b9 	beq.w	8008e86 <_printf_i+0x19a>
 8008d14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008d1c:	e03a      	b.n	8008d94 <_printf_i+0xa8>
 8008d1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008d22:	2b15      	cmp	r3, #21
 8008d24:	d8f6      	bhi.n	8008d14 <_printf_i+0x28>
 8008d26:	a101      	add	r1, pc, #4	@ (adr r1, 8008d2c <_printf_i+0x40>)
 8008d28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d2c:	08008d85 	.word	0x08008d85
 8008d30:	08008d99 	.word	0x08008d99
 8008d34:	08008d15 	.word	0x08008d15
 8008d38:	08008d15 	.word	0x08008d15
 8008d3c:	08008d15 	.word	0x08008d15
 8008d40:	08008d15 	.word	0x08008d15
 8008d44:	08008d99 	.word	0x08008d99
 8008d48:	08008d15 	.word	0x08008d15
 8008d4c:	08008d15 	.word	0x08008d15
 8008d50:	08008d15 	.word	0x08008d15
 8008d54:	08008d15 	.word	0x08008d15
 8008d58:	08008e99 	.word	0x08008e99
 8008d5c:	08008dc3 	.word	0x08008dc3
 8008d60:	08008e53 	.word	0x08008e53
 8008d64:	08008d15 	.word	0x08008d15
 8008d68:	08008d15 	.word	0x08008d15
 8008d6c:	08008ebb 	.word	0x08008ebb
 8008d70:	08008d15 	.word	0x08008d15
 8008d74:	08008dc3 	.word	0x08008dc3
 8008d78:	08008d15 	.word	0x08008d15
 8008d7c:	08008d15 	.word	0x08008d15
 8008d80:	08008e5b 	.word	0x08008e5b
 8008d84:	6833      	ldr	r3, [r6, #0]
 8008d86:	1d1a      	adds	r2, r3, #4
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	6032      	str	r2, [r6, #0]
 8008d8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008d94:	2301      	movs	r3, #1
 8008d96:	e09d      	b.n	8008ed4 <_printf_i+0x1e8>
 8008d98:	6833      	ldr	r3, [r6, #0]
 8008d9a:	6820      	ldr	r0, [r4, #0]
 8008d9c:	1d19      	adds	r1, r3, #4
 8008d9e:	6031      	str	r1, [r6, #0]
 8008da0:	0606      	lsls	r6, r0, #24
 8008da2:	d501      	bpl.n	8008da8 <_printf_i+0xbc>
 8008da4:	681d      	ldr	r5, [r3, #0]
 8008da6:	e003      	b.n	8008db0 <_printf_i+0xc4>
 8008da8:	0645      	lsls	r5, r0, #25
 8008daa:	d5fb      	bpl.n	8008da4 <_printf_i+0xb8>
 8008dac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008db0:	2d00      	cmp	r5, #0
 8008db2:	da03      	bge.n	8008dbc <_printf_i+0xd0>
 8008db4:	232d      	movs	r3, #45	@ 0x2d
 8008db6:	426d      	negs	r5, r5
 8008db8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008dbc:	4859      	ldr	r0, [pc, #356]	@ (8008f24 <_printf_i+0x238>)
 8008dbe:	230a      	movs	r3, #10
 8008dc0:	e011      	b.n	8008de6 <_printf_i+0xfa>
 8008dc2:	6821      	ldr	r1, [r4, #0]
 8008dc4:	6833      	ldr	r3, [r6, #0]
 8008dc6:	0608      	lsls	r0, r1, #24
 8008dc8:	f853 5b04 	ldr.w	r5, [r3], #4
 8008dcc:	d402      	bmi.n	8008dd4 <_printf_i+0xe8>
 8008dce:	0649      	lsls	r1, r1, #25
 8008dd0:	bf48      	it	mi
 8008dd2:	b2ad      	uxthmi	r5, r5
 8008dd4:	2f6f      	cmp	r7, #111	@ 0x6f
 8008dd6:	4853      	ldr	r0, [pc, #332]	@ (8008f24 <_printf_i+0x238>)
 8008dd8:	6033      	str	r3, [r6, #0]
 8008dda:	bf14      	ite	ne
 8008ddc:	230a      	movne	r3, #10
 8008dde:	2308      	moveq	r3, #8
 8008de0:	2100      	movs	r1, #0
 8008de2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008de6:	6866      	ldr	r6, [r4, #4]
 8008de8:	60a6      	str	r6, [r4, #8]
 8008dea:	2e00      	cmp	r6, #0
 8008dec:	bfa2      	ittt	ge
 8008dee:	6821      	ldrge	r1, [r4, #0]
 8008df0:	f021 0104 	bicge.w	r1, r1, #4
 8008df4:	6021      	strge	r1, [r4, #0]
 8008df6:	b90d      	cbnz	r5, 8008dfc <_printf_i+0x110>
 8008df8:	2e00      	cmp	r6, #0
 8008dfa:	d04b      	beq.n	8008e94 <_printf_i+0x1a8>
 8008dfc:	4616      	mov	r6, r2
 8008dfe:	fbb5 f1f3 	udiv	r1, r5, r3
 8008e02:	fb03 5711 	mls	r7, r3, r1, r5
 8008e06:	5dc7      	ldrb	r7, [r0, r7]
 8008e08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e0c:	462f      	mov	r7, r5
 8008e0e:	42bb      	cmp	r3, r7
 8008e10:	460d      	mov	r5, r1
 8008e12:	d9f4      	bls.n	8008dfe <_printf_i+0x112>
 8008e14:	2b08      	cmp	r3, #8
 8008e16:	d10b      	bne.n	8008e30 <_printf_i+0x144>
 8008e18:	6823      	ldr	r3, [r4, #0]
 8008e1a:	07df      	lsls	r7, r3, #31
 8008e1c:	d508      	bpl.n	8008e30 <_printf_i+0x144>
 8008e1e:	6923      	ldr	r3, [r4, #16]
 8008e20:	6861      	ldr	r1, [r4, #4]
 8008e22:	4299      	cmp	r1, r3
 8008e24:	bfde      	ittt	le
 8008e26:	2330      	movle	r3, #48	@ 0x30
 8008e28:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008e30:	1b92      	subs	r2, r2, r6
 8008e32:	6122      	str	r2, [r4, #16]
 8008e34:	f8cd a000 	str.w	sl, [sp]
 8008e38:	464b      	mov	r3, r9
 8008e3a:	aa03      	add	r2, sp, #12
 8008e3c:	4621      	mov	r1, r4
 8008e3e:	4640      	mov	r0, r8
 8008e40:	f7ff fee6 	bl	8008c10 <_printf_common>
 8008e44:	3001      	adds	r0, #1
 8008e46:	d14a      	bne.n	8008ede <_printf_i+0x1f2>
 8008e48:	f04f 30ff 	mov.w	r0, #4294967295
 8008e4c:	b004      	add	sp, #16
 8008e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e52:	6823      	ldr	r3, [r4, #0]
 8008e54:	f043 0320 	orr.w	r3, r3, #32
 8008e58:	6023      	str	r3, [r4, #0]
 8008e5a:	4833      	ldr	r0, [pc, #204]	@ (8008f28 <_printf_i+0x23c>)
 8008e5c:	2778      	movs	r7, #120	@ 0x78
 8008e5e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008e62:	6823      	ldr	r3, [r4, #0]
 8008e64:	6831      	ldr	r1, [r6, #0]
 8008e66:	061f      	lsls	r7, r3, #24
 8008e68:	f851 5b04 	ldr.w	r5, [r1], #4
 8008e6c:	d402      	bmi.n	8008e74 <_printf_i+0x188>
 8008e6e:	065f      	lsls	r7, r3, #25
 8008e70:	bf48      	it	mi
 8008e72:	b2ad      	uxthmi	r5, r5
 8008e74:	6031      	str	r1, [r6, #0]
 8008e76:	07d9      	lsls	r1, r3, #31
 8008e78:	bf44      	itt	mi
 8008e7a:	f043 0320 	orrmi.w	r3, r3, #32
 8008e7e:	6023      	strmi	r3, [r4, #0]
 8008e80:	b11d      	cbz	r5, 8008e8a <_printf_i+0x19e>
 8008e82:	2310      	movs	r3, #16
 8008e84:	e7ac      	b.n	8008de0 <_printf_i+0xf4>
 8008e86:	4827      	ldr	r0, [pc, #156]	@ (8008f24 <_printf_i+0x238>)
 8008e88:	e7e9      	b.n	8008e5e <_printf_i+0x172>
 8008e8a:	6823      	ldr	r3, [r4, #0]
 8008e8c:	f023 0320 	bic.w	r3, r3, #32
 8008e90:	6023      	str	r3, [r4, #0]
 8008e92:	e7f6      	b.n	8008e82 <_printf_i+0x196>
 8008e94:	4616      	mov	r6, r2
 8008e96:	e7bd      	b.n	8008e14 <_printf_i+0x128>
 8008e98:	6833      	ldr	r3, [r6, #0]
 8008e9a:	6825      	ldr	r5, [r4, #0]
 8008e9c:	6961      	ldr	r1, [r4, #20]
 8008e9e:	1d18      	adds	r0, r3, #4
 8008ea0:	6030      	str	r0, [r6, #0]
 8008ea2:	062e      	lsls	r6, r5, #24
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	d501      	bpl.n	8008eac <_printf_i+0x1c0>
 8008ea8:	6019      	str	r1, [r3, #0]
 8008eaa:	e002      	b.n	8008eb2 <_printf_i+0x1c6>
 8008eac:	0668      	lsls	r0, r5, #25
 8008eae:	d5fb      	bpl.n	8008ea8 <_printf_i+0x1bc>
 8008eb0:	8019      	strh	r1, [r3, #0]
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	6123      	str	r3, [r4, #16]
 8008eb6:	4616      	mov	r6, r2
 8008eb8:	e7bc      	b.n	8008e34 <_printf_i+0x148>
 8008eba:	6833      	ldr	r3, [r6, #0]
 8008ebc:	1d1a      	adds	r2, r3, #4
 8008ebe:	6032      	str	r2, [r6, #0]
 8008ec0:	681e      	ldr	r6, [r3, #0]
 8008ec2:	6862      	ldr	r2, [r4, #4]
 8008ec4:	2100      	movs	r1, #0
 8008ec6:	4630      	mov	r0, r6
 8008ec8:	f7f7 f98a 	bl	80001e0 <memchr>
 8008ecc:	b108      	cbz	r0, 8008ed2 <_printf_i+0x1e6>
 8008ece:	1b80      	subs	r0, r0, r6
 8008ed0:	6060      	str	r0, [r4, #4]
 8008ed2:	6863      	ldr	r3, [r4, #4]
 8008ed4:	6123      	str	r3, [r4, #16]
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008edc:	e7aa      	b.n	8008e34 <_printf_i+0x148>
 8008ede:	6923      	ldr	r3, [r4, #16]
 8008ee0:	4632      	mov	r2, r6
 8008ee2:	4649      	mov	r1, r9
 8008ee4:	4640      	mov	r0, r8
 8008ee6:	47d0      	blx	sl
 8008ee8:	3001      	adds	r0, #1
 8008eea:	d0ad      	beq.n	8008e48 <_printf_i+0x15c>
 8008eec:	6823      	ldr	r3, [r4, #0]
 8008eee:	079b      	lsls	r3, r3, #30
 8008ef0:	d413      	bmi.n	8008f1a <_printf_i+0x22e>
 8008ef2:	68e0      	ldr	r0, [r4, #12]
 8008ef4:	9b03      	ldr	r3, [sp, #12]
 8008ef6:	4298      	cmp	r0, r3
 8008ef8:	bfb8      	it	lt
 8008efa:	4618      	movlt	r0, r3
 8008efc:	e7a6      	b.n	8008e4c <_printf_i+0x160>
 8008efe:	2301      	movs	r3, #1
 8008f00:	4632      	mov	r2, r6
 8008f02:	4649      	mov	r1, r9
 8008f04:	4640      	mov	r0, r8
 8008f06:	47d0      	blx	sl
 8008f08:	3001      	adds	r0, #1
 8008f0a:	d09d      	beq.n	8008e48 <_printf_i+0x15c>
 8008f0c:	3501      	adds	r5, #1
 8008f0e:	68e3      	ldr	r3, [r4, #12]
 8008f10:	9903      	ldr	r1, [sp, #12]
 8008f12:	1a5b      	subs	r3, r3, r1
 8008f14:	42ab      	cmp	r3, r5
 8008f16:	dcf2      	bgt.n	8008efe <_printf_i+0x212>
 8008f18:	e7eb      	b.n	8008ef2 <_printf_i+0x206>
 8008f1a:	2500      	movs	r5, #0
 8008f1c:	f104 0619 	add.w	r6, r4, #25
 8008f20:	e7f5      	b.n	8008f0e <_printf_i+0x222>
 8008f22:	bf00      	nop
 8008f24:	0800b4fe 	.word	0x0800b4fe
 8008f28:	0800b50f 	.word	0x0800b50f

08008f2c <std>:
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	b510      	push	{r4, lr}
 8008f30:	4604      	mov	r4, r0
 8008f32:	e9c0 3300 	strd	r3, r3, [r0]
 8008f36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f3a:	6083      	str	r3, [r0, #8]
 8008f3c:	8181      	strh	r1, [r0, #12]
 8008f3e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008f40:	81c2      	strh	r2, [r0, #14]
 8008f42:	6183      	str	r3, [r0, #24]
 8008f44:	4619      	mov	r1, r3
 8008f46:	2208      	movs	r2, #8
 8008f48:	305c      	adds	r0, #92	@ 0x5c
 8008f4a:	f000 f926 	bl	800919a <memset>
 8008f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8008f84 <std+0x58>)
 8008f50:	6263      	str	r3, [r4, #36]	@ 0x24
 8008f52:	4b0d      	ldr	r3, [pc, #52]	@ (8008f88 <std+0x5c>)
 8008f54:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008f56:	4b0d      	ldr	r3, [pc, #52]	@ (8008f8c <std+0x60>)
 8008f58:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8008f90 <std+0x64>)
 8008f5c:	6323      	str	r3, [r4, #48]	@ 0x30
 8008f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8008f94 <std+0x68>)
 8008f60:	6224      	str	r4, [r4, #32]
 8008f62:	429c      	cmp	r4, r3
 8008f64:	d006      	beq.n	8008f74 <std+0x48>
 8008f66:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008f6a:	4294      	cmp	r4, r2
 8008f6c:	d002      	beq.n	8008f74 <std+0x48>
 8008f6e:	33d0      	adds	r3, #208	@ 0xd0
 8008f70:	429c      	cmp	r4, r3
 8008f72:	d105      	bne.n	8008f80 <std+0x54>
 8008f74:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f7c:	f000 b98a 	b.w	8009294 <__retarget_lock_init_recursive>
 8008f80:	bd10      	pop	{r4, pc}
 8008f82:	bf00      	nop
 8008f84:	08009115 	.word	0x08009115
 8008f88:	08009137 	.word	0x08009137
 8008f8c:	0800916f 	.word	0x0800916f
 8008f90:	08009193 	.word	0x08009193
 8008f94:	200004f0 	.word	0x200004f0

08008f98 <stdio_exit_handler>:
 8008f98:	4a02      	ldr	r2, [pc, #8]	@ (8008fa4 <stdio_exit_handler+0xc>)
 8008f9a:	4903      	ldr	r1, [pc, #12]	@ (8008fa8 <stdio_exit_handler+0x10>)
 8008f9c:	4803      	ldr	r0, [pc, #12]	@ (8008fac <stdio_exit_handler+0x14>)
 8008f9e:	f000 b869 	b.w	8009074 <_fwalk_sglue>
 8008fa2:	bf00      	nop
 8008fa4:	2000000c 	.word	0x2000000c
 8008fa8:	0800ae79 	.word	0x0800ae79
 8008fac:	2000001c 	.word	0x2000001c

08008fb0 <cleanup_stdio>:
 8008fb0:	6841      	ldr	r1, [r0, #4]
 8008fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8008fe4 <cleanup_stdio+0x34>)
 8008fb4:	4299      	cmp	r1, r3
 8008fb6:	b510      	push	{r4, lr}
 8008fb8:	4604      	mov	r4, r0
 8008fba:	d001      	beq.n	8008fc0 <cleanup_stdio+0x10>
 8008fbc:	f001 ff5c 	bl	800ae78 <_fflush_r>
 8008fc0:	68a1      	ldr	r1, [r4, #8]
 8008fc2:	4b09      	ldr	r3, [pc, #36]	@ (8008fe8 <cleanup_stdio+0x38>)
 8008fc4:	4299      	cmp	r1, r3
 8008fc6:	d002      	beq.n	8008fce <cleanup_stdio+0x1e>
 8008fc8:	4620      	mov	r0, r4
 8008fca:	f001 ff55 	bl	800ae78 <_fflush_r>
 8008fce:	68e1      	ldr	r1, [r4, #12]
 8008fd0:	4b06      	ldr	r3, [pc, #24]	@ (8008fec <cleanup_stdio+0x3c>)
 8008fd2:	4299      	cmp	r1, r3
 8008fd4:	d004      	beq.n	8008fe0 <cleanup_stdio+0x30>
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fdc:	f001 bf4c 	b.w	800ae78 <_fflush_r>
 8008fe0:	bd10      	pop	{r4, pc}
 8008fe2:	bf00      	nop
 8008fe4:	200004f0 	.word	0x200004f0
 8008fe8:	20000558 	.word	0x20000558
 8008fec:	200005c0 	.word	0x200005c0

08008ff0 <global_stdio_init.part.0>:
 8008ff0:	b510      	push	{r4, lr}
 8008ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8009020 <global_stdio_init.part.0+0x30>)
 8008ff4:	4c0b      	ldr	r4, [pc, #44]	@ (8009024 <global_stdio_init.part.0+0x34>)
 8008ff6:	4a0c      	ldr	r2, [pc, #48]	@ (8009028 <global_stdio_init.part.0+0x38>)
 8008ff8:	601a      	str	r2, [r3, #0]
 8008ffa:	4620      	mov	r0, r4
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	2104      	movs	r1, #4
 8009000:	f7ff ff94 	bl	8008f2c <std>
 8009004:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009008:	2201      	movs	r2, #1
 800900a:	2109      	movs	r1, #9
 800900c:	f7ff ff8e 	bl	8008f2c <std>
 8009010:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009014:	2202      	movs	r2, #2
 8009016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800901a:	2112      	movs	r1, #18
 800901c:	f7ff bf86 	b.w	8008f2c <std>
 8009020:	20000628 	.word	0x20000628
 8009024:	200004f0 	.word	0x200004f0
 8009028:	08008f99 	.word	0x08008f99

0800902c <__sfp_lock_acquire>:
 800902c:	4801      	ldr	r0, [pc, #4]	@ (8009034 <__sfp_lock_acquire+0x8>)
 800902e:	f000 b932 	b.w	8009296 <__retarget_lock_acquire_recursive>
 8009032:	bf00      	nop
 8009034:	20000631 	.word	0x20000631

08009038 <__sfp_lock_release>:
 8009038:	4801      	ldr	r0, [pc, #4]	@ (8009040 <__sfp_lock_release+0x8>)
 800903a:	f000 b92d 	b.w	8009298 <__retarget_lock_release_recursive>
 800903e:	bf00      	nop
 8009040:	20000631 	.word	0x20000631

08009044 <__sinit>:
 8009044:	b510      	push	{r4, lr}
 8009046:	4604      	mov	r4, r0
 8009048:	f7ff fff0 	bl	800902c <__sfp_lock_acquire>
 800904c:	6a23      	ldr	r3, [r4, #32]
 800904e:	b11b      	cbz	r3, 8009058 <__sinit+0x14>
 8009050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009054:	f7ff bff0 	b.w	8009038 <__sfp_lock_release>
 8009058:	4b04      	ldr	r3, [pc, #16]	@ (800906c <__sinit+0x28>)
 800905a:	6223      	str	r3, [r4, #32]
 800905c:	4b04      	ldr	r3, [pc, #16]	@ (8009070 <__sinit+0x2c>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d1f5      	bne.n	8009050 <__sinit+0xc>
 8009064:	f7ff ffc4 	bl	8008ff0 <global_stdio_init.part.0>
 8009068:	e7f2      	b.n	8009050 <__sinit+0xc>
 800906a:	bf00      	nop
 800906c:	08008fb1 	.word	0x08008fb1
 8009070:	20000628 	.word	0x20000628

08009074 <_fwalk_sglue>:
 8009074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009078:	4607      	mov	r7, r0
 800907a:	4688      	mov	r8, r1
 800907c:	4614      	mov	r4, r2
 800907e:	2600      	movs	r6, #0
 8009080:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009084:	f1b9 0901 	subs.w	r9, r9, #1
 8009088:	d505      	bpl.n	8009096 <_fwalk_sglue+0x22>
 800908a:	6824      	ldr	r4, [r4, #0]
 800908c:	2c00      	cmp	r4, #0
 800908e:	d1f7      	bne.n	8009080 <_fwalk_sglue+0xc>
 8009090:	4630      	mov	r0, r6
 8009092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009096:	89ab      	ldrh	r3, [r5, #12]
 8009098:	2b01      	cmp	r3, #1
 800909a:	d907      	bls.n	80090ac <_fwalk_sglue+0x38>
 800909c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090a0:	3301      	adds	r3, #1
 80090a2:	d003      	beq.n	80090ac <_fwalk_sglue+0x38>
 80090a4:	4629      	mov	r1, r5
 80090a6:	4638      	mov	r0, r7
 80090a8:	47c0      	blx	r8
 80090aa:	4306      	orrs	r6, r0
 80090ac:	3568      	adds	r5, #104	@ 0x68
 80090ae:	e7e9      	b.n	8009084 <_fwalk_sglue+0x10>

080090b0 <iprintf>:
 80090b0:	b40f      	push	{r0, r1, r2, r3}
 80090b2:	b507      	push	{r0, r1, r2, lr}
 80090b4:	4906      	ldr	r1, [pc, #24]	@ (80090d0 <iprintf+0x20>)
 80090b6:	ab04      	add	r3, sp, #16
 80090b8:	6808      	ldr	r0, [r1, #0]
 80090ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80090be:	6881      	ldr	r1, [r0, #8]
 80090c0:	9301      	str	r3, [sp, #4]
 80090c2:	f001 fd3d 	bl	800ab40 <_vfiprintf_r>
 80090c6:	b003      	add	sp, #12
 80090c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80090cc:	b004      	add	sp, #16
 80090ce:	4770      	bx	lr
 80090d0:	20000018 	.word	0x20000018

080090d4 <siprintf>:
 80090d4:	b40e      	push	{r1, r2, r3}
 80090d6:	b500      	push	{lr}
 80090d8:	b09c      	sub	sp, #112	@ 0x70
 80090da:	ab1d      	add	r3, sp, #116	@ 0x74
 80090dc:	9002      	str	r0, [sp, #8]
 80090de:	9006      	str	r0, [sp, #24]
 80090e0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80090e4:	4809      	ldr	r0, [pc, #36]	@ (800910c <siprintf+0x38>)
 80090e6:	9107      	str	r1, [sp, #28]
 80090e8:	9104      	str	r1, [sp, #16]
 80090ea:	4909      	ldr	r1, [pc, #36]	@ (8009110 <siprintf+0x3c>)
 80090ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80090f0:	9105      	str	r1, [sp, #20]
 80090f2:	6800      	ldr	r0, [r0, #0]
 80090f4:	9301      	str	r3, [sp, #4]
 80090f6:	a902      	add	r1, sp, #8
 80090f8:	f001 fbfc 	bl	800a8f4 <_svfiprintf_r>
 80090fc:	9b02      	ldr	r3, [sp, #8]
 80090fe:	2200      	movs	r2, #0
 8009100:	701a      	strb	r2, [r3, #0]
 8009102:	b01c      	add	sp, #112	@ 0x70
 8009104:	f85d eb04 	ldr.w	lr, [sp], #4
 8009108:	b003      	add	sp, #12
 800910a:	4770      	bx	lr
 800910c:	20000018 	.word	0x20000018
 8009110:	ffff0208 	.word	0xffff0208

08009114 <__sread>:
 8009114:	b510      	push	{r4, lr}
 8009116:	460c      	mov	r4, r1
 8009118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800911c:	f000 f86c 	bl	80091f8 <_read_r>
 8009120:	2800      	cmp	r0, #0
 8009122:	bfab      	itete	ge
 8009124:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009126:	89a3      	ldrhlt	r3, [r4, #12]
 8009128:	181b      	addge	r3, r3, r0
 800912a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800912e:	bfac      	ite	ge
 8009130:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009132:	81a3      	strhlt	r3, [r4, #12]
 8009134:	bd10      	pop	{r4, pc}

08009136 <__swrite>:
 8009136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800913a:	461f      	mov	r7, r3
 800913c:	898b      	ldrh	r3, [r1, #12]
 800913e:	05db      	lsls	r3, r3, #23
 8009140:	4605      	mov	r5, r0
 8009142:	460c      	mov	r4, r1
 8009144:	4616      	mov	r6, r2
 8009146:	d505      	bpl.n	8009154 <__swrite+0x1e>
 8009148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800914c:	2302      	movs	r3, #2
 800914e:	2200      	movs	r2, #0
 8009150:	f000 f840 	bl	80091d4 <_lseek_r>
 8009154:	89a3      	ldrh	r3, [r4, #12]
 8009156:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800915a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800915e:	81a3      	strh	r3, [r4, #12]
 8009160:	4632      	mov	r2, r6
 8009162:	463b      	mov	r3, r7
 8009164:	4628      	mov	r0, r5
 8009166:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800916a:	f000 b857 	b.w	800921c <_write_r>

0800916e <__sseek>:
 800916e:	b510      	push	{r4, lr}
 8009170:	460c      	mov	r4, r1
 8009172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009176:	f000 f82d 	bl	80091d4 <_lseek_r>
 800917a:	1c43      	adds	r3, r0, #1
 800917c:	89a3      	ldrh	r3, [r4, #12]
 800917e:	bf15      	itete	ne
 8009180:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009182:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009186:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800918a:	81a3      	strheq	r3, [r4, #12]
 800918c:	bf18      	it	ne
 800918e:	81a3      	strhne	r3, [r4, #12]
 8009190:	bd10      	pop	{r4, pc}

08009192 <__sclose>:
 8009192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009196:	f000 b80d 	b.w	80091b4 <_close_r>

0800919a <memset>:
 800919a:	4402      	add	r2, r0
 800919c:	4603      	mov	r3, r0
 800919e:	4293      	cmp	r3, r2
 80091a0:	d100      	bne.n	80091a4 <memset+0xa>
 80091a2:	4770      	bx	lr
 80091a4:	f803 1b01 	strb.w	r1, [r3], #1
 80091a8:	e7f9      	b.n	800919e <memset+0x4>
	...

080091ac <_localeconv_r>:
 80091ac:	4800      	ldr	r0, [pc, #0]	@ (80091b0 <_localeconv_r+0x4>)
 80091ae:	4770      	bx	lr
 80091b0:	20000158 	.word	0x20000158

080091b4 <_close_r>:
 80091b4:	b538      	push	{r3, r4, r5, lr}
 80091b6:	4d06      	ldr	r5, [pc, #24]	@ (80091d0 <_close_r+0x1c>)
 80091b8:	2300      	movs	r3, #0
 80091ba:	4604      	mov	r4, r0
 80091bc:	4608      	mov	r0, r1
 80091be:	602b      	str	r3, [r5, #0]
 80091c0:	f7f9 fc4c 	bl	8002a5c <_close>
 80091c4:	1c43      	adds	r3, r0, #1
 80091c6:	d102      	bne.n	80091ce <_close_r+0x1a>
 80091c8:	682b      	ldr	r3, [r5, #0]
 80091ca:	b103      	cbz	r3, 80091ce <_close_r+0x1a>
 80091cc:	6023      	str	r3, [r4, #0]
 80091ce:	bd38      	pop	{r3, r4, r5, pc}
 80091d0:	2000062c 	.word	0x2000062c

080091d4 <_lseek_r>:
 80091d4:	b538      	push	{r3, r4, r5, lr}
 80091d6:	4d07      	ldr	r5, [pc, #28]	@ (80091f4 <_lseek_r+0x20>)
 80091d8:	4604      	mov	r4, r0
 80091da:	4608      	mov	r0, r1
 80091dc:	4611      	mov	r1, r2
 80091de:	2200      	movs	r2, #0
 80091e0:	602a      	str	r2, [r5, #0]
 80091e2:	461a      	mov	r2, r3
 80091e4:	f7f9 fc61 	bl	8002aaa <_lseek>
 80091e8:	1c43      	adds	r3, r0, #1
 80091ea:	d102      	bne.n	80091f2 <_lseek_r+0x1e>
 80091ec:	682b      	ldr	r3, [r5, #0]
 80091ee:	b103      	cbz	r3, 80091f2 <_lseek_r+0x1e>
 80091f0:	6023      	str	r3, [r4, #0]
 80091f2:	bd38      	pop	{r3, r4, r5, pc}
 80091f4:	2000062c 	.word	0x2000062c

080091f8 <_read_r>:
 80091f8:	b538      	push	{r3, r4, r5, lr}
 80091fa:	4d07      	ldr	r5, [pc, #28]	@ (8009218 <_read_r+0x20>)
 80091fc:	4604      	mov	r4, r0
 80091fe:	4608      	mov	r0, r1
 8009200:	4611      	mov	r1, r2
 8009202:	2200      	movs	r2, #0
 8009204:	602a      	str	r2, [r5, #0]
 8009206:	461a      	mov	r2, r3
 8009208:	f7f9 fbef 	bl	80029ea <_read>
 800920c:	1c43      	adds	r3, r0, #1
 800920e:	d102      	bne.n	8009216 <_read_r+0x1e>
 8009210:	682b      	ldr	r3, [r5, #0]
 8009212:	b103      	cbz	r3, 8009216 <_read_r+0x1e>
 8009214:	6023      	str	r3, [r4, #0]
 8009216:	bd38      	pop	{r3, r4, r5, pc}
 8009218:	2000062c 	.word	0x2000062c

0800921c <_write_r>:
 800921c:	b538      	push	{r3, r4, r5, lr}
 800921e:	4d07      	ldr	r5, [pc, #28]	@ (800923c <_write_r+0x20>)
 8009220:	4604      	mov	r4, r0
 8009222:	4608      	mov	r0, r1
 8009224:	4611      	mov	r1, r2
 8009226:	2200      	movs	r2, #0
 8009228:	602a      	str	r2, [r5, #0]
 800922a:	461a      	mov	r2, r3
 800922c:	f7f9 fbfa 	bl	8002a24 <_write>
 8009230:	1c43      	adds	r3, r0, #1
 8009232:	d102      	bne.n	800923a <_write_r+0x1e>
 8009234:	682b      	ldr	r3, [r5, #0]
 8009236:	b103      	cbz	r3, 800923a <_write_r+0x1e>
 8009238:	6023      	str	r3, [r4, #0]
 800923a:	bd38      	pop	{r3, r4, r5, pc}
 800923c:	2000062c 	.word	0x2000062c

08009240 <__errno>:
 8009240:	4b01      	ldr	r3, [pc, #4]	@ (8009248 <__errno+0x8>)
 8009242:	6818      	ldr	r0, [r3, #0]
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	20000018 	.word	0x20000018

0800924c <__libc_init_array>:
 800924c:	b570      	push	{r4, r5, r6, lr}
 800924e:	4d0d      	ldr	r5, [pc, #52]	@ (8009284 <__libc_init_array+0x38>)
 8009250:	4c0d      	ldr	r4, [pc, #52]	@ (8009288 <__libc_init_array+0x3c>)
 8009252:	1b64      	subs	r4, r4, r5
 8009254:	10a4      	asrs	r4, r4, #2
 8009256:	2600      	movs	r6, #0
 8009258:	42a6      	cmp	r6, r4
 800925a:	d109      	bne.n	8009270 <__libc_init_array+0x24>
 800925c:	4d0b      	ldr	r5, [pc, #44]	@ (800928c <__libc_init_array+0x40>)
 800925e:	4c0c      	ldr	r4, [pc, #48]	@ (8009290 <__libc_init_array+0x44>)
 8009260:	f002 f868 	bl	800b334 <_init>
 8009264:	1b64      	subs	r4, r4, r5
 8009266:	10a4      	asrs	r4, r4, #2
 8009268:	2600      	movs	r6, #0
 800926a:	42a6      	cmp	r6, r4
 800926c:	d105      	bne.n	800927a <__libc_init_array+0x2e>
 800926e:	bd70      	pop	{r4, r5, r6, pc}
 8009270:	f855 3b04 	ldr.w	r3, [r5], #4
 8009274:	4798      	blx	r3
 8009276:	3601      	adds	r6, #1
 8009278:	e7ee      	b.n	8009258 <__libc_init_array+0xc>
 800927a:	f855 3b04 	ldr.w	r3, [r5], #4
 800927e:	4798      	blx	r3
 8009280:	3601      	adds	r6, #1
 8009282:	e7f2      	b.n	800926a <__libc_init_array+0x1e>
 8009284:	0800b868 	.word	0x0800b868
 8009288:	0800b868 	.word	0x0800b868
 800928c:	0800b868 	.word	0x0800b868
 8009290:	0800b86c 	.word	0x0800b86c

08009294 <__retarget_lock_init_recursive>:
 8009294:	4770      	bx	lr

08009296 <__retarget_lock_acquire_recursive>:
 8009296:	4770      	bx	lr

08009298 <__retarget_lock_release_recursive>:
 8009298:	4770      	bx	lr

0800929a <quorem>:
 800929a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800929e:	6903      	ldr	r3, [r0, #16]
 80092a0:	690c      	ldr	r4, [r1, #16]
 80092a2:	42a3      	cmp	r3, r4
 80092a4:	4607      	mov	r7, r0
 80092a6:	db7e      	blt.n	80093a6 <quorem+0x10c>
 80092a8:	3c01      	subs	r4, #1
 80092aa:	f101 0814 	add.w	r8, r1, #20
 80092ae:	00a3      	lsls	r3, r4, #2
 80092b0:	f100 0514 	add.w	r5, r0, #20
 80092b4:	9300      	str	r3, [sp, #0]
 80092b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80092ba:	9301      	str	r3, [sp, #4]
 80092bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80092c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80092c4:	3301      	adds	r3, #1
 80092c6:	429a      	cmp	r2, r3
 80092c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80092cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80092d0:	d32e      	bcc.n	8009330 <quorem+0x96>
 80092d2:	f04f 0a00 	mov.w	sl, #0
 80092d6:	46c4      	mov	ip, r8
 80092d8:	46ae      	mov	lr, r5
 80092da:	46d3      	mov	fp, sl
 80092dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80092e0:	b298      	uxth	r0, r3
 80092e2:	fb06 a000 	mla	r0, r6, r0, sl
 80092e6:	0c02      	lsrs	r2, r0, #16
 80092e8:	0c1b      	lsrs	r3, r3, #16
 80092ea:	fb06 2303 	mla	r3, r6, r3, r2
 80092ee:	f8de 2000 	ldr.w	r2, [lr]
 80092f2:	b280      	uxth	r0, r0
 80092f4:	b292      	uxth	r2, r2
 80092f6:	1a12      	subs	r2, r2, r0
 80092f8:	445a      	add	r2, fp
 80092fa:	f8de 0000 	ldr.w	r0, [lr]
 80092fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009302:	b29b      	uxth	r3, r3
 8009304:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009308:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800930c:	b292      	uxth	r2, r2
 800930e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009312:	45e1      	cmp	r9, ip
 8009314:	f84e 2b04 	str.w	r2, [lr], #4
 8009318:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800931c:	d2de      	bcs.n	80092dc <quorem+0x42>
 800931e:	9b00      	ldr	r3, [sp, #0]
 8009320:	58eb      	ldr	r3, [r5, r3]
 8009322:	b92b      	cbnz	r3, 8009330 <quorem+0x96>
 8009324:	9b01      	ldr	r3, [sp, #4]
 8009326:	3b04      	subs	r3, #4
 8009328:	429d      	cmp	r5, r3
 800932a:	461a      	mov	r2, r3
 800932c:	d32f      	bcc.n	800938e <quorem+0xf4>
 800932e:	613c      	str	r4, [r7, #16]
 8009330:	4638      	mov	r0, r7
 8009332:	f001 f97b 	bl	800a62c <__mcmp>
 8009336:	2800      	cmp	r0, #0
 8009338:	db25      	blt.n	8009386 <quorem+0xec>
 800933a:	4629      	mov	r1, r5
 800933c:	2000      	movs	r0, #0
 800933e:	f858 2b04 	ldr.w	r2, [r8], #4
 8009342:	f8d1 c000 	ldr.w	ip, [r1]
 8009346:	fa1f fe82 	uxth.w	lr, r2
 800934a:	fa1f f38c 	uxth.w	r3, ip
 800934e:	eba3 030e 	sub.w	r3, r3, lr
 8009352:	4403      	add	r3, r0
 8009354:	0c12      	lsrs	r2, r2, #16
 8009356:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800935a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800935e:	b29b      	uxth	r3, r3
 8009360:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009364:	45c1      	cmp	r9, r8
 8009366:	f841 3b04 	str.w	r3, [r1], #4
 800936a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800936e:	d2e6      	bcs.n	800933e <quorem+0xa4>
 8009370:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009374:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009378:	b922      	cbnz	r2, 8009384 <quorem+0xea>
 800937a:	3b04      	subs	r3, #4
 800937c:	429d      	cmp	r5, r3
 800937e:	461a      	mov	r2, r3
 8009380:	d30b      	bcc.n	800939a <quorem+0x100>
 8009382:	613c      	str	r4, [r7, #16]
 8009384:	3601      	adds	r6, #1
 8009386:	4630      	mov	r0, r6
 8009388:	b003      	add	sp, #12
 800938a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800938e:	6812      	ldr	r2, [r2, #0]
 8009390:	3b04      	subs	r3, #4
 8009392:	2a00      	cmp	r2, #0
 8009394:	d1cb      	bne.n	800932e <quorem+0x94>
 8009396:	3c01      	subs	r4, #1
 8009398:	e7c6      	b.n	8009328 <quorem+0x8e>
 800939a:	6812      	ldr	r2, [r2, #0]
 800939c:	3b04      	subs	r3, #4
 800939e:	2a00      	cmp	r2, #0
 80093a0:	d1ef      	bne.n	8009382 <quorem+0xe8>
 80093a2:	3c01      	subs	r4, #1
 80093a4:	e7ea      	b.n	800937c <quorem+0xe2>
 80093a6:	2000      	movs	r0, #0
 80093a8:	e7ee      	b.n	8009388 <quorem+0xee>
 80093aa:	0000      	movs	r0, r0
 80093ac:	0000      	movs	r0, r0
	...

080093b0 <_dtoa_r>:
 80093b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b4:	69c7      	ldr	r7, [r0, #28]
 80093b6:	b099      	sub	sp, #100	@ 0x64
 80093b8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80093bc:	ec55 4b10 	vmov	r4, r5, d0
 80093c0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80093c2:	9109      	str	r1, [sp, #36]	@ 0x24
 80093c4:	4683      	mov	fp, r0
 80093c6:	920e      	str	r2, [sp, #56]	@ 0x38
 80093c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80093ca:	b97f      	cbnz	r7, 80093ec <_dtoa_r+0x3c>
 80093cc:	2010      	movs	r0, #16
 80093ce:	f000 fdfd 	bl	8009fcc <malloc>
 80093d2:	4602      	mov	r2, r0
 80093d4:	f8cb 001c 	str.w	r0, [fp, #28]
 80093d8:	b920      	cbnz	r0, 80093e4 <_dtoa_r+0x34>
 80093da:	4ba7      	ldr	r3, [pc, #668]	@ (8009678 <_dtoa_r+0x2c8>)
 80093dc:	21ef      	movs	r1, #239	@ 0xef
 80093de:	48a7      	ldr	r0, [pc, #668]	@ (800967c <_dtoa_r+0x2cc>)
 80093e0:	f001 fe3e 	bl	800b060 <__assert_func>
 80093e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80093e8:	6007      	str	r7, [r0, #0]
 80093ea:	60c7      	str	r7, [r0, #12]
 80093ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80093f0:	6819      	ldr	r1, [r3, #0]
 80093f2:	b159      	cbz	r1, 800940c <_dtoa_r+0x5c>
 80093f4:	685a      	ldr	r2, [r3, #4]
 80093f6:	604a      	str	r2, [r1, #4]
 80093f8:	2301      	movs	r3, #1
 80093fa:	4093      	lsls	r3, r2
 80093fc:	608b      	str	r3, [r1, #8]
 80093fe:	4658      	mov	r0, fp
 8009400:	f000 feda 	bl	800a1b8 <_Bfree>
 8009404:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009408:	2200      	movs	r2, #0
 800940a:	601a      	str	r2, [r3, #0]
 800940c:	1e2b      	subs	r3, r5, #0
 800940e:	bfb9      	ittee	lt
 8009410:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009414:	9303      	strlt	r3, [sp, #12]
 8009416:	2300      	movge	r3, #0
 8009418:	6033      	strge	r3, [r6, #0]
 800941a:	9f03      	ldr	r7, [sp, #12]
 800941c:	4b98      	ldr	r3, [pc, #608]	@ (8009680 <_dtoa_r+0x2d0>)
 800941e:	bfbc      	itt	lt
 8009420:	2201      	movlt	r2, #1
 8009422:	6032      	strlt	r2, [r6, #0]
 8009424:	43bb      	bics	r3, r7
 8009426:	d112      	bne.n	800944e <_dtoa_r+0x9e>
 8009428:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800942a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800942e:	6013      	str	r3, [r2, #0]
 8009430:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009434:	4323      	orrs	r3, r4
 8009436:	f000 854d 	beq.w	8009ed4 <_dtoa_r+0xb24>
 800943a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800943c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009694 <_dtoa_r+0x2e4>
 8009440:	2b00      	cmp	r3, #0
 8009442:	f000 854f 	beq.w	8009ee4 <_dtoa_r+0xb34>
 8009446:	f10a 0303 	add.w	r3, sl, #3
 800944a:	f000 bd49 	b.w	8009ee0 <_dtoa_r+0xb30>
 800944e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009452:	2200      	movs	r2, #0
 8009454:	ec51 0b17 	vmov	r0, r1, d7
 8009458:	2300      	movs	r3, #0
 800945a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800945e:	f7f7 fb3b 	bl	8000ad8 <__aeabi_dcmpeq>
 8009462:	4680      	mov	r8, r0
 8009464:	b158      	cbz	r0, 800947e <_dtoa_r+0xce>
 8009466:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009468:	2301      	movs	r3, #1
 800946a:	6013      	str	r3, [r2, #0]
 800946c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800946e:	b113      	cbz	r3, 8009476 <_dtoa_r+0xc6>
 8009470:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009472:	4b84      	ldr	r3, [pc, #528]	@ (8009684 <_dtoa_r+0x2d4>)
 8009474:	6013      	str	r3, [r2, #0]
 8009476:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009698 <_dtoa_r+0x2e8>
 800947a:	f000 bd33 	b.w	8009ee4 <_dtoa_r+0xb34>
 800947e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009482:	aa16      	add	r2, sp, #88	@ 0x58
 8009484:	a917      	add	r1, sp, #92	@ 0x5c
 8009486:	4658      	mov	r0, fp
 8009488:	f001 f980 	bl	800a78c <__d2b>
 800948c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009490:	4681      	mov	r9, r0
 8009492:	2e00      	cmp	r6, #0
 8009494:	d077      	beq.n	8009586 <_dtoa_r+0x1d6>
 8009496:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009498:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800949c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80094a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80094a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80094ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80094b0:	4619      	mov	r1, r3
 80094b2:	2200      	movs	r2, #0
 80094b4:	4b74      	ldr	r3, [pc, #464]	@ (8009688 <_dtoa_r+0x2d8>)
 80094b6:	f7f6 feef 	bl	8000298 <__aeabi_dsub>
 80094ba:	a369      	add	r3, pc, #420	@ (adr r3, 8009660 <_dtoa_r+0x2b0>)
 80094bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c0:	f7f7 f8a2 	bl	8000608 <__aeabi_dmul>
 80094c4:	a368      	add	r3, pc, #416	@ (adr r3, 8009668 <_dtoa_r+0x2b8>)
 80094c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ca:	f7f6 fee7 	bl	800029c <__adddf3>
 80094ce:	4604      	mov	r4, r0
 80094d0:	4630      	mov	r0, r6
 80094d2:	460d      	mov	r5, r1
 80094d4:	f7f7 f82e 	bl	8000534 <__aeabi_i2d>
 80094d8:	a365      	add	r3, pc, #404	@ (adr r3, 8009670 <_dtoa_r+0x2c0>)
 80094da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094de:	f7f7 f893 	bl	8000608 <__aeabi_dmul>
 80094e2:	4602      	mov	r2, r0
 80094e4:	460b      	mov	r3, r1
 80094e6:	4620      	mov	r0, r4
 80094e8:	4629      	mov	r1, r5
 80094ea:	f7f6 fed7 	bl	800029c <__adddf3>
 80094ee:	4604      	mov	r4, r0
 80094f0:	460d      	mov	r5, r1
 80094f2:	f7f7 fb39 	bl	8000b68 <__aeabi_d2iz>
 80094f6:	2200      	movs	r2, #0
 80094f8:	4607      	mov	r7, r0
 80094fa:	2300      	movs	r3, #0
 80094fc:	4620      	mov	r0, r4
 80094fe:	4629      	mov	r1, r5
 8009500:	f7f7 faf4 	bl	8000aec <__aeabi_dcmplt>
 8009504:	b140      	cbz	r0, 8009518 <_dtoa_r+0x168>
 8009506:	4638      	mov	r0, r7
 8009508:	f7f7 f814 	bl	8000534 <__aeabi_i2d>
 800950c:	4622      	mov	r2, r4
 800950e:	462b      	mov	r3, r5
 8009510:	f7f7 fae2 	bl	8000ad8 <__aeabi_dcmpeq>
 8009514:	b900      	cbnz	r0, 8009518 <_dtoa_r+0x168>
 8009516:	3f01      	subs	r7, #1
 8009518:	2f16      	cmp	r7, #22
 800951a:	d851      	bhi.n	80095c0 <_dtoa_r+0x210>
 800951c:	4b5b      	ldr	r3, [pc, #364]	@ (800968c <_dtoa_r+0x2dc>)
 800951e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009526:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800952a:	f7f7 fadf 	bl	8000aec <__aeabi_dcmplt>
 800952e:	2800      	cmp	r0, #0
 8009530:	d048      	beq.n	80095c4 <_dtoa_r+0x214>
 8009532:	3f01      	subs	r7, #1
 8009534:	2300      	movs	r3, #0
 8009536:	9312      	str	r3, [sp, #72]	@ 0x48
 8009538:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800953a:	1b9b      	subs	r3, r3, r6
 800953c:	1e5a      	subs	r2, r3, #1
 800953e:	bf44      	itt	mi
 8009540:	f1c3 0801 	rsbmi	r8, r3, #1
 8009544:	2300      	movmi	r3, #0
 8009546:	9208      	str	r2, [sp, #32]
 8009548:	bf54      	ite	pl
 800954a:	f04f 0800 	movpl.w	r8, #0
 800954e:	9308      	strmi	r3, [sp, #32]
 8009550:	2f00      	cmp	r7, #0
 8009552:	db39      	blt.n	80095c8 <_dtoa_r+0x218>
 8009554:	9b08      	ldr	r3, [sp, #32]
 8009556:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009558:	443b      	add	r3, r7
 800955a:	9308      	str	r3, [sp, #32]
 800955c:	2300      	movs	r3, #0
 800955e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009560:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009562:	2b09      	cmp	r3, #9
 8009564:	d864      	bhi.n	8009630 <_dtoa_r+0x280>
 8009566:	2b05      	cmp	r3, #5
 8009568:	bfc4      	itt	gt
 800956a:	3b04      	subgt	r3, #4
 800956c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800956e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009570:	f1a3 0302 	sub.w	r3, r3, #2
 8009574:	bfcc      	ite	gt
 8009576:	2400      	movgt	r4, #0
 8009578:	2401      	movle	r4, #1
 800957a:	2b03      	cmp	r3, #3
 800957c:	d863      	bhi.n	8009646 <_dtoa_r+0x296>
 800957e:	e8df f003 	tbb	[pc, r3]
 8009582:	372a      	.short	0x372a
 8009584:	5535      	.short	0x5535
 8009586:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800958a:	441e      	add	r6, r3
 800958c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009590:	2b20      	cmp	r3, #32
 8009592:	bfc1      	itttt	gt
 8009594:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009598:	409f      	lslgt	r7, r3
 800959a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800959e:	fa24 f303 	lsrgt.w	r3, r4, r3
 80095a2:	bfd6      	itet	le
 80095a4:	f1c3 0320 	rsble	r3, r3, #32
 80095a8:	ea47 0003 	orrgt.w	r0, r7, r3
 80095ac:	fa04 f003 	lslle.w	r0, r4, r3
 80095b0:	f7f6 ffb0 	bl	8000514 <__aeabi_ui2d>
 80095b4:	2201      	movs	r2, #1
 80095b6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80095ba:	3e01      	subs	r6, #1
 80095bc:	9214      	str	r2, [sp, #80]	@ 0x50
 80095be:	e777      	b.n	80094b0 <_dtoa_r+0x100>
 80095c0:	2301      	movs	r3, #1
 80095c2:	e7b8      	b.n	8009536 <_dtoa_r+0x186>
 80095c4:	9012      	str	r0, [sp, #72]	@ 0x48
 80095c6:	e7b7      	b.n	8009538 <_dtoa_r+0x188>
 80095c8:	427b      	negs	r3, r7
 80095ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80095cc:	2300      	movs	r3, #0
 80095ce:	eba8 0807 	sub.w	r8, r8, r7
 80095d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80095d4:	e7c4      	b.n	8009560 <_dtoa_r+0x1b0>
 80095d6:	2300      	movs	r3, #0
 80095d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80095da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095dc:	2b00      	cmp	r3, #0
 80095de:	dc35      	bgt.n	800964c <_dtoa_r+0x29c>
 80095e0:	2301      	movs	r3, #1
 80095e2:	9300      	str	r3, [sp, #0]
 80095e4:	9307      	str	r3, [sp, #28]
 80095e6:	461a      	mov	r2, r3
 80095e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80095ea:	e00b      	b.n	8009604 <_dtoa_r+0x254>
 80095ec:	2301      	movs	r3, #1
 80095ee:	e7f3      	b.n	80095d8 <_dtoa_r+0x228>
 80095f0:	2300      	movs	r3, #0
 80095f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80095f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095f6:	18fb      	adds	r3, r7, r3
 80095f8:	9300      	str	r3, [sp, #0]
 80095fa:	3301      	adds	r3, #1
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	9307      	str	r3, [sp, #28]
 8009600:	bfb8      	it	lt
 8009602:	2301      	movlt	r3, #1
 8009604:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009608:	2100      	movs	r1, #0
 800960a:	2204      	movs	r2, #4
 800960c:	f102 0514 	add.w	r5, r2, #20
 8009610:	429d      	cmp	r5, r3
 8009612:	d91f      	bls.n	8009654 <_dtoa_r+0x2a4>
 8009614:	6041      	str	r1, [r0, #4]
 8009616:	4658      	mov	r0, fp
 8009618:	f000 fd8e 	bl	800a138 <_Balloc>
 800961c:	4682      	mov	sl, r0
 800961e:	2800      	cmp	r0, #0
 8009620:	d13c      	bne.n	800969c <_dtoa_r+0x2ec>
 8009622:	4b1b      	ldr	r3, [pc, #108]	@ (8009690 <_dtoa_r+0x2e0>)
 8009624:	4602      	mov	r2, r0
 8009626:	f240 11af 	movw	r1, #431	@ 0x1af
 800962a:	e6d8      	b.n	80093de <_dtoa_r+0x2e>
 800962c:	2301      	movs	r3, #1
 800962e:	e7e0      	b.n	80095f2 <_dtoa_r+0x242>
 8009630:	2401      	movs	r4, #1
 8009632:	2300      	movs	r3, #0
 8009634:	9309      	str	r3, [sp, #36]	@ 0x24
 8009636:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009638:	f04f 33ff 	mov.w	r3, #4294967295
 800963c:	9300      	str	r3, [sp, #0]
 800963e:	9307      	str	r3, [sp, #28]
 8009640:	2200      	movs	r2, #0
 8009642:	2312      	movs	r3, #18
 8009644:	e7d0      	b.n	80095e8 <_dtoa_r+0x238>
 8009646:	2301      	movs	r3, #1
 8009648:	930b      	str	r3, [sp, #44]	@ 0x2c
 800964a:	e7f5      	b.n	8009638 <_dtoa_r+0x288>
 800964c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800964e:	9300      	str	r3, [sp, #0]
 8009650:	9307      	str	r3, [sp, #28]
 8009652:	e7d7      	b.n	8009604 <_dtoa_r+0x254>
 8009654:	3101      	adds	r1, #1
 8009656:	0052      	lsls	r2, r2, #1
 8009658:	e7d8      	b.n	800960c <_dtoa_r+0x25c>
 800965a:	bf00      	nop
 800965c:	f3af 8000 	nop.w
 8009660:	636f4361 	.word	0x636f4361
 8009664:	3fd287a7 	.word	0x3fd287a7
 8009668:	8b60c8b3 	.word	0x8b60c8b3
 800966c:	3fc68a28 	.word	0x3fc68a28
 8009670:	509f79fb 	.word	0x509f79fb
 8009674:	3fd34413 	.word	0x3fd34413
 8009678:	0800b52d 	.word	0x0800b52d
 800967c:	0800b544 	.word	0x0800b544
 8009680:	7ff00000 	.word	0x7ff00000
 8009684:	0800b4fd 	.word	0x0800b4fd
 8009688:	3ff80000 	.word	0x3ff80000
 800968c:	0800b640 	.word	0x0800b640
 8009690:	0800b59c 	.word	0x0800b59c
 8009694:	0800b529 	.word	0x0800b529
 8009698:	0800b4fc 	.word	0x0800b4fc
 800969c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80096a0:	6018      	str	r0, [r3, #0]
 80096a2:	9b07      	ldr	r3, [sp, #28]
 80096a4:	2b0e      	cmp	r3, #14
 80096a6:	f200 80a4 	bhi.w	80097f2 <_dtoa_r+0x442>
 80096aa:	2c00      	cmp	r4, #0
 80096ac:	f000 80a1 	beq.w	80097f2 <_dtoa_r+0x442>
 80096b0:	2f00      	cmp	r7, #0
 80096b2:	dd33      	ble.n	800971c <_dtoa_r+0x36c>
 80096b4:	4bad      	ldr	r3, [pc, #692]	@ (800996c <_dtoa_r+0x5bc>)
 80096b6:	f007 020f 	and.w	r2, r7, #15
 80096ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096be:	ed93 7b00 	vldr	d7, [r3]
 80096c2:	05f8      	lsls	r0, r7, #23
 80096c4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80096c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80096cc:	d516      	bpl.n	80096fc <_dtoa_r+0x34c>
 80096ce:	4ba8      	ldr	r3, [pc, #672]	@ (8009970 <_dtoa_r+0x5c0>)
 80096d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80096d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80096d8:	f7f7 f8c0 	bl	800085c <__aeabi_ddiv>
 80096dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096e0:	f004 040f 	and.w	r4, r4, #15
 80096e4:	2603      	movs	r6, #3
 80096e6:	4da2      	ldr	r5, [pc, #648]	@ (8009970 <_dtoa_r+0x5c0>)
 80096e8:	b954      	cbnz	r4, 8009700 <_dtoa_r+0x350>
 80096ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096f2:	f7f7 f8b3 	bl	800085c <__aeabi_ddiv>
 80096f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096fa:	e028      	b.n	800974e <_dtoa_r+0x39e>
 80096fc:	2602      	movs	r6, #2
 80096fe:	e7f2      	b.n	80096e6 <_dtoa_r+0x336>
 8009700:	07e1      	lsls	r1, r4, #31
 8009702:	d508      	bpl.n	8009716 <_dtoa_r+0x366>
 8009704:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009708:	e9d5 2300 	ldrd	r2, r3, [r5]
 800970c:	f7f6 ff7c 	bl	8000608 <__aeabi_dmul>
 8009710:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009714:	3601      	adds	r6, #1
 8009716:	1064      	asrs	r4, r4, #1
 8009718:	3508      	adds	r5, #8
 800971a:	e7e5      	b.n	80096e8 <_dtoa_r+0x338>
 800971c:	f000 80d2 	beq.w	80098c4 <_dtoa_r+0x514>
 8009720:	427c      	negs	r4, r7
 8009722:	4b92      	ldr	r3, [pc, #584]	@ (800996c <_dtoa_r+0x5bc>)
 8009724:	4d92      	ldr	r5, [pc, #584]	@ (8009970 <_dtoa_r+0x5c0>)
 8009726:	f004 020f 	and.w	r2, r4, #15
 800972a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800972e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009732:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009736:	f7f6 ff67 	bl	8000608 <__aeabi_dmul>
 800973a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800973e:	1124      	asrs	r4, r4, #4
 8009740:	2300      	movs	r3, #0
 8009742:	2602      	movs	r6, #2
 8009744:	2c00      	cmp	r4, #0
 8009746:	f040 80b2 	bne.w	80098ae <_dtoa_r+0x4fe>
 800974a:	2b00      	cmp	r3, #0
 800974c:	d1d3      	bne.n	80096f6 <_dtoa_r+0x346>
 800974e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009750:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009754:	2b00      	cmp	r3, #0
 8009756:	f000 80b7 	beq.w	80098c8 <_dtoa_r+0x518>
 800975a:	4b86      	ldr	r3, [pc, #536]	@ (8009974 <_dtoa_r+0x5c4>)
 800975c:	2200      	movs	r2, #0
 800975e:	4620      	mov	r0, r4
 8009760:	4629      	mov	r1, r5
 8009762:	f7f7 f9c3 	bl	8000aec <__aeabi_dcmplt>
 8009766:	2800      	cmp	r0, #0
 8009768:	f000 80ae 	beq.w	80098c8 <_dtoa_r+0x518>
 800976c:	9b07      	ldr	r3, [sp, #28]
 800976e:	2b00      	cmp	r3, #0
 8009770:	f000 80aa 	beq.w	80098c8 <_dtoa_r+0x518>
 8009774:	9b00      	ldr	r3, [sp, #0]
 8009776:	2b00      	cmp	r3, #0
 8009778:	dd37      	ble.n	80097ea <_dtoa_r+0x43a>
 800977a:	1e7b      	subs	r3, r7, #1
 800977c:	9304      	str	r3, [sp, #16]
 800977e:	4620      	mov	r0, r4
 8009780:	4b7d      	ldr	r3, [pc, #500]	@ (8009978 <_dtoa_r+0x5c8>)
 8009782:	2200      	movs	r2, #0
 8009784:	4629      	mov	r1, r5
 8009786:	f7f6 ff3f 	bl	8000608 <__aeabi_dmul>
 800978a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800978e:	9c00      	ldr	r4, [sp, #0]
 8009790:	3601      	adds	r6, #1
 8009792:	4630      	mov	r0, r6
 8009794:	f7f6 fece 	bl	8000534 <__aeabi_i2d>
 8009798:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800979c:	f7f6 ff34 	bl	8000608 <__aeabi_dmul>
 80097a0:	4b76      	ldr	r3, [pc, #472]	@ (800997c <_dtoa_r+0x5cc>)
 80097a2:	2200      	movs	r2, #0
 80097a4:	f7f6 fd7a 	bl	800029c <__adddf3>
 80097a8:	4605      	mov	r5, r0
 80097aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80097ae:	2c00      	cmp	r4, #0
 80097b0:	f040 808d 	bne.w	80098ce <_dtoa_r+0x51e>
 80097b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097b8:	4b71      	ldr	r3, [pc, #452]	@ (8009980 <_dtoa_r+0x5d0>)
 80097ba:	2200      	movs	r2, #0
 80097bc:	f7f6 fd6c 	bl	8000298 <__aeabi_dsub>
 80097c0:	4602      	mov	r2, r0
 80097c2:	460b      	mov	r3, r1
 80097c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80097c8:	462a      	mov	r2, r5
 80097ca:	4633      	mov	r3, r6
 80097cc:	f7f7 f9ac 	bl	8000b28 <__aeabi_dcmpgt>
 80097d0:	2800      	cmp	r0, #0
 80097d2:	f040 828b 	bne.w	8009cec <_dtoa_r+0x93c>
 80097d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097da:	462a      	mov	r2, r5
 80097dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80097e0:	f7f7 f984 	bl	8000aec <__aeabi_dcmplt>
 80097e4:	2800      	cmp	r0, #0
 80097e6:	f040 8128 	bne.w	8009a3a <_dtoa_r+0x68a>
 80097ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80097ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80097f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	f2c0 815a 	blt.w	8009aae <_dtoa_r+0x6fe>
 80097fa:	2f0e      	cmp	r7, #14
 80097fc:	f300 8157 	bgt.w	8009aae <_dtoa_r+0x6fe>
 8009800:	4b5a      	ldr	r3, [pc, #360]	@ (800996c <_dtoa_r+0x5bc>)
 8009802:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009806:	ed93 7b00 	vldr	d7, [r3]
 800980a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800980c:	2b00      	cmp	r3, #0
 800980e:	ed8d 7b00 	vstr	d7, [sp]
 8009812:	da03      	bge.n	800981c <_dtoa_r+0x46c>
 8009814:	9b07      	ldr	r3, [sp, #28]
 8009816:	2b00      	cmp	r3, #0
 8009818:	f340 8101 	ble.w	8009a1e <_dtoa_r+0x66e>
 800981c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009820:	4656      	mov	r6, sl
 8009822:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009826:	4620      	mov	r0, r4
 8009828:	4629      	mov	r1, r5
 800982a:	f7f7 f817 	bl	800085c <__aeabi_ddiv>
 800982e:	f7f7 f99b 	bl	8000b68 <__aeabi_d2iz>
 8009832:	4680      	mov	r8, r0
 8009834:	f7f6 fe7e 	bl	8000534 <__aeabi_i2d>
 8009838:	e9dd 2300 	ldrd	r2, r3, [sp]
 800983c:	f7f6 fee4 	bl	8000608 <__aeabi_dmul>
 8009840:	4602      	mov	r2, r0
 8009842:	460b      	mov	r3, r1
 8009844:	4620      	mov	r0, r4
 8009846:	4629      	mov	r1, r5
 8009848:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800984c:	f7f6 fd24 	bl	8000298 <__aeabi_dsub>
 8009850:	f806 4b01 	strb.w	r4, [r6], #1
 8009854:	9d07      	ldr	r5, [sp, #28]
 8009856:	eba6 040a 	sub.w	r4, r6, sl
 800985a:	42a5      	cmp	r5, r4
 800985c:	4602      	mov	r2, r0
 800985e:	460b      	mov	r3, r1
 8009860:	f040 8117 	bne.w	8009a92 <_dtoa_r+0x6e2>
 8009864:	f7f6 fd1a 	bl	800029c <__adddf3>
 8009868:	e9dd 2300 	ldrd	r2, r3, [sp]
 800986c:	4604      	mov	r4, r0
 800986e:	460d      	mov	r5, r1
 8009870:	f7f7 f95a 	bl	8000b28 <__aeabi_dcmpgt>
 8009874:	2800      	cmp	r0, #0
 8009876:	f040 80f9 	bne.w	8009a6c <_dtoa_r+0x6bc>
 800987a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800987e:	4620      	mov	r0, r4
 8009880:	4629      	mov	r1, r5
 8009882:	f7f7 f929 	bl	8000ad8 <__aeabi_dcmpeq>
 8009886:	b118      	cbz	r0, 8009890 <_dtoa_r+0x4e0>
 8009888:	f018 0f01 	tst.w	r8, #1
 800988c:	f040 80ee 	bne.w	8009a6c <_dtoa_r+0x6bc>
 8009890:	4649      	mov	r1, r9
 8009892:	4658      	mov	r0, fp
 8009894:	f000 fc90 	bl	800a1b8 <_Bfree>
 8009898:	2300      	movs	r3, #0
 800989a:	7033      	strb	r3, [r6, #0]
 800989c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800989e:	3701      	adds	r7, #1
 80098a0:	601f      	str	r7, [r3, #0]
 80098a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	f000 831d 	beq.w	8009ee4 <_dtoa_r+0xb34>
 80098aa:	601e      	str	r6, [r3, #0]
 80098ac:	e31a      	b.n	8009ee4 <_dtoa_r+0xb34>
 80098ae:	07e2      	lsls	r2, r4, #31
 80098b0:	d505      	bpl.n	80098be <_dtoa_r+0x50e>
 80098b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80098b6:	f7f6 fea7 	bl	8000608 <__aeabi_dmul>
 80098ba:	3601      	adds	r6, #1
 80098bc:	2301      	movs	r3, #1
 80098be:	1064      	asrs	r4, r4, #1
 80098c0:	3508      	adds	r5, #8
 80098c2:	e73f      	b.n	8009744 <_dtoa_r+0x394>
 80098c4:	2602      	movs	r6, #2
 80098c6:	e742      	b.n	800974e <_dtoa_r+0x39e>
 80098c8:	9c07      	ldr	r4, [sp, #28]
 80098ca:	9704      	str	r7, [sp, #16]
 80098cc:	e761      	b.n	8009792 <_dtoa_r+0x3e2>
 80098ce:	4b27      	ldr	r3, [pc, #156]	@ (800996c <_dtoa_r+0x5bc>)
 80098d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80098d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80098d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80098da:	4454      	add	r4, sl
 80098dc:	2900      	cmp	r1, #0
 80098de:	d053      	beq.n	8009988 <_dtoa_r+0x5d8>
 80098e0:	4928      	ldr	r1, [pc, #160]	@ (8009984 <_dtoa_r+0x5d4>)
 80098e2:	2000      	movs	r0, #0
 80098e4:	f7f6 ffba 	bl	800085c <__aeabi_ddiv>
 80098e8:	4633      	mov	r3, r6
 80098ea:	462a      	mov	r2, r5
 80098ec:	f7f6 fcd4 	bl	8000298 <__aeabi_dsub>
 80098f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80098f4:	4656      	mov	r6, sl
 80098f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098fa:	f7f7 f935 	bl	8000b68 <__aeabi_d2iz>
 80098fe:	4605      	mov	r5, r0
 8009900:	f7f6 fe18 	bl	8000534 <__aeabi_i2d>
 8009904:	4602      	mov	r2, r0
 8009906:	460b      	mov	r3, r1
 8009908:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800990c:	f7f6 fcc4 	bl	8000298 <__aeabi_dsub>
 8009910:	3530      	adds	r5, #48	@ 0x30
 8009912:	4602      	mov	r2, r0
 8009914:	460b      	mov	r3, r1
 8009916:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800991a:	f806 5b01 	strb.w	r5, [r6], #1
 800991e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009922:	f7f7 f8e3 	bl	8000aec <__aeabi_dcmplt>
 8009926:	2800      	cmp	r0, #0
 8009928:	d171      	bne.n	8009a0e <_dtoa_r+0x65e>
 800992a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800992e:	4911      	ldr	r1, [pc, #68]	@ (8009974 <_dtoa_r+0x5c4>)
 8009930:	2000      	movs	r0, #0
 8009932:	f7f6 fcb1 	bl	8000298 <__aeabi_dsub>
 8009936:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800993a:	f7f7 f8d7 	bl	8000aec <__aeabi_dcmplt>
 800993e:	2800      	cmp	r0, #0
 8009940:	f040 8095 	bne.w	8009a6e <_dtoa_r+0x6be>
 8009944:	42a6      	cmp	r6, r4
 8009946:	f43f af50 	beq.w	80097ea <_dtoa_r+0x43a>
 800994a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800994e:	4b0a      	ldr	r3, [pc, #40]	@ (8009978 <_dtoa_r+0x5c8>)
 8009950:	2200      	movs	r2, #0
 8009952:	f7f6 fe59 	bl	8000608 <__aeabi_dmul>
 8009956:	4b08      	ldr	r3, [pc, #32]	@ (8009978 <_dtoa_r+0x5c8>)
 8009958:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800995c:	2200      	movs	r2, #0
 800995e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009962:	f7f6 fe51 	bl	8000608 <__aeabi_dmul>
 8009966:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800996a:	e7c4      	b.n	80098f6 <_dtoa_r+0x546>
 800996c:	0800b640 	.word	0x0800b640
 8009970:	0800b618 	.word	0x0800b618
 8009974:	3ff00000 	.word	0x3ff00000
 8009978:	40240000 	.word	0x40240000
 800997c:	401c0000 	.word	0x401c0000
 8009980:	40140000 	.word	0x40140000
 8009984:	3fe00000 	.word	0x3fe00000
 8009988:	4631      	mov	r1, r6
 800998a:	4628      	mov	r0, r5
 800998c:	f7f6 fe3c 	bl	8000608 <__aeabi_dmul>
 8009990:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009994:	9415      	str	r4, [sp, #84]	@ 0x54
 8009996:	4656      	mov	r6, sl
 8009998:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800999c:	f7f7 f8e4 	bl	8000b68 <__aeabi_d2iz>
 80099a0:	4605      	mov	r5, r0
 80099a2:	f7f6 fdc7 	bl	8000534 <__aeabi_i2d>
 80099a6:	4602      	mov	r2, r0
 80099a8:	460b      	mov	r3, r1
 80099aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099ae:	f7f6 fc73 	bl	8000298 <__aeabi_dsub>
 80099b2:	3530      	adds	r5, #48	@ 0x30
 80099b4:	f806 5b01 	strb.w	r5, [r6], #1
 80099b8:	4602      	mov	r2, r0
 80099ba:	460b      	mov	r3, r1
 80099bc:	42a6      	cmp	r6, r4
 80099be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80099c2:	f04f 0200 	mov.w	r2, #0
 80099c6:	d124      	bne.n	8009a12 <_dtoa_r+0x662>
 80099c8:	4bac      	ldr	r3, [pc, #688]	@ (8009c7c <_dtoa_r+0x8cc>)
 80099ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80099ce:	f7f6 fc65 	bl	800029c <__adddf3>
 80099d2:	4602      	mov	r2, r0
 80099d4:	460b      	mov	r3, r1
 80099d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099da:	f7f7 f8a5 	bl	8000b28 <__aeabi_dcmpgt>
 80099de:	2800      	cmp	r0, #0
 80099e0:	d145      	bne.n	8009a6e <_dtoa_r+0x6be>
 80099e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80099e6:	49a5      	ldr	r1, [pc, #660]	@ (8009c7c <_dtoa_r+0x8cc>)
 80099e8:	2000      	movs	r0, #0
 80099ea:	f7f6 fc55 	bl	8000298 <__aeabi_dsub>
 80099ee:	4602      	mov	r2, r0
 80099f0:	460b      	mov	r3, r1
 80099f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099f6:	f7f7 f879 	bl	8000aec <__aeabi_dcmplt>
 80099fa:	2800      	cmp	r0, #0
 80099fc:	f43f aef5 	beq.w	80097ea <_dtoa_r+0x43a>
 8009a00:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009a02:	1e73      	subs	r3, r6, #1
 8009a04:	9315      	str	r3, [sp, #84]	@ 0x54
 8009a06:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009a0a:	2b30      	cmp	r3, #48	@ 0x30
 8009a0c:	d0f8      	beq.n	8009a00 <_dtoa_r+0x650>
 8009a0e:	9f04      	ldr	r7, [sp, #16]
 8009a10:	e73e      	b.n	8009890 <_dtoa_r+0x4e0>
 8009a12:	4b9b      	ldr	r3, [pc, #620]	@ (8009c80 <_dtoa_r+0x8d0>)
 8009a14:	f7f6 fdf8 	bl	8000608 <__aeabi_dmul>
 8009a18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a1c:	e7bc      	b.n	8009998 <_dtoa_r+0x5e8>
 8009a1e:	d10c      	bne.n	8009a3a <_dtoa_r+0x68a>
 8009a20:	4b98      	ldr	r3, [pc, #608]	@ (8009c84 <_dtoa_r+0x8d4>)
 8009a22:	2200      	movs	r2, #0
 8009a24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a28:	f7f6 fdee 	bl	8000608 <__aeabi_dmul>
 8009a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a30:	f7f7 f870 	bl	8000b14 <__aeabi_dcmpge>
 8009a34:	2800      	cmp	r0, #0
 8009a36:	f000 8157 	beq.w	8009ce8 <_dtoa_r+0x938>
 8009a3a:	2400      	movs	r4, #0
 8009a3c:	4625      	mov	r5, r4
 8009a3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a40:	43db      	mvns	r3, r3
 8009a42:	9304      	str	r3, [sp, #16]
 8009a44:	4656      	mov	r6, sl
 8009a46:	2700      	movs	r7, #0
 8009a48:	4621      	mov	r1, r4
 8009a4a:	4658      	mov	r0, fp
 8009a4c:	f000 fbb4 	bl	800a1b8 <_Bfree>
 8009a50:	2d00      	cmp	r5, #0
 8009a52:	d0dc      	beq.n	8009a0e <_dtoa_r+0x65e>
 8009a54:	b12f      	cbz	r7, 8009a62 <_dtoa_r+0x6b2>
 8009a56:	42af      	cmp	r7, r5
 8009a58:	d003      	beq.n	8009a62 <_dtoa_r+0x6b2>
 8009a5a:	4639      	mov	r1, r7
 8009a5c:	4658      	mov	r0, fp
 8009a5e:	f000 fbab 	bl	800a1b8 <_Bfree>
 8009a62:	4629      	mov	r1, r5
 8009a64:	4658      	mov	r0, fp
 8009a66:	f000 fba7 	bl	800a1b8 <_Bfree>
 8009a6a:	e7d0      	b.n	8009a0e <_dtoa_r+0x65e>
 8009a6c:	9704      	str	r7, [sp, #16]
 8009a6e:	4633      	mov	r3, r6
 8009a70:	461e      	mov	r6, r3
 8009a72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a76:	2a39      	cmp	r2, #57	@ 0x39
 8009a78:	d107      	bne.n	8009a8a <_dtoa_r+0x6da>
 8009a7a:	459a      	cmp	sl, r3
 8009a7c:	d1f8      	bne.n	8009a70 <_dtoa_r+0x6c0>
 8009a7e:	9a04      	ldr	r2, [sp, #16]
 8009a80:	3201      	adds	r2, #1
 8009a82:	9204      	str	r2, [sp, #16]
 8009a84:	2230      	movs	r2, #48	@ 0x30
 8009a86:	f88a 2000 	strb.w	r2, [sl]
 8009a8a:	781a      	ldrb	r2, [r3, #0]
 8009a8c:	3201      	adds	r2, #1
 8009a8e:	701a      	strb	r2, [r3, #0]
 8009a90:	e7bd      	b.n	8009a0e <_dtoa_r+0x65e>
 8009a92:	4b7b      	ldr	r3, [pc, #492]	@ (8009c80 <_dtoa_r+0x8d0>)
 8009a94:	2200      	movs	r2, #0
 8009a96:	f7f6 fdb7 	bl	8000608 <__aeabi_dmul>
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	4604      	mov	r4, r0
 8009aa0:	460d      	mov	r5, r1
 8009aa2:	f7f7 f819 	bl	8000ad8 <__aeabi_dcmpeq>
 8009aa6:	2800      	cmp	r0, #0
 8009aa8:	f43f aebb 	beq.w	8009822 <_dtoa_r+0x472>
 8009aac:	e6f0      	b.n	8009890 <_dtoa_r+0x4e0>
 8009aae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009ab0:	2a00      	cmp	r2, #0
 8009ab2:	f000 80db 	beq.w	8009c6c <_dtoa_r+0x8bc>
 8009ab6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ab8:	2a01      	cmp	r2, #1
 8009aba:	f300 80bf 	bgt.w	8009c3c <_dtoa_r+0x88c>
 8009abe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009ac0:	2a00      	cmp	r2, #0
 8009ac2:	f000 80b7 	beq.w	8009c34 <_dtoa_r+0x884>
 8009ac6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009aca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009acc:	4646      	mov	r6, r8
 8009ace:	9a08      	ldr	r2, [sp, #32]
 8009ad0:	2101      	movs	r1, #1
 8009ad2:	441a      	add	r2, r3
 8009ad4:	4658      	mov	r0, fp
 8009ad6:	4498      	add	r8, r3
 8009ad8:	9208      	str	r2, [sp, #32]
 8009ada:	f000 fc21 	bl	800a320 <__i2b>
 8009ade:	4605      	mov	r5, r0
 8009ae0:	b15e      	cbz	r6, 8009afa <_dtoa_r+0x74a>
 8009ae2:	9b08      	ldr	r3, [sp, #32]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	dd08      	ble.n	8009afa <_dtoa_r+0x74a>
 8009ae8:	42b3      	cmp	r3, r6
 8009aea:	9a08      	ldr	r2, [sp, #32]
 8009aec:	bfa8      	it	ge
 8009aee:	4633      	movge	r3, r6
 8009af0:	eba8 0803 	sub.w	r8, r8, r3
 8009af4:	1af6      	subs	r6, r6, r3
 8009af6:	1ad3      	subs	r3, r2, r3
 8009af8:	9308      	str	r3, [sp, #32]
 8009afa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009afc:	b1f3      	cbz	r3, 8009b3c <_dtoa_r+0x78c>
 8009afe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	f000 80b7 	beq.w	8009c74 <_dtoa_r+0x8c4>
 8009b06:	b18c      	cbz	r4, 8009b2c <_dtoa_r+0x77c>
 8009b08:	4629      	mov	r1, r5
 8009b0a:	4622      	mov	r2, r4
 8009b0c:	4658      	mov	r0, fp
 8009b0e:	f000 fcc7 	bl	800a4a0 <__pow5mult>
 8009b12:	464a      	mov	r2, r9
 8009b14:	4601      	mov	r1, r0
 8009b16:	4605      	mov	r5, r0
 8009b18:	4658      	mov	r0, fp
 8009b1a:	f000 fc17 	bl	800a34c <__multiply>
 8009b1e:	4649      	mov	r1, r9
 8009b20:	9004      	str	r0, [sp, #16]
 8009b22:	4658      	mov	r0, fp
 8009b24:	f000 fb48 	bl	800a1b8 <_Bfree>
 8009b28:	9b04      	ldr	r3, [sp, #16]
 8009b2a:	4699      	mov	r9, r3
 8009b2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b2e:	1b1a      	subs	r2, r3, r4
 8009b30:	d004      	beq.n	8009b3c <_dtoa_r+0x78c>
 8009b32:	4649      	mov	r1, r9
 8009b34:	4658      	mov	r0, fp
 8009b36:	f000 fcb3 	bl	800a4a0 <__pow5mult>
 8009b3a:	4681      	mov	r9, r0
 8009b3c:	2101      	movs	r1, #1
 8009b3e:	4658      	mov	r0, fp
 8009b40:	f000 fbee 	bl	800a320 <__i2b>
 8009b44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b46:	4604      	mov	r4, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	f000 81cf 	beq.w	8009eec <_dtoa_r+0xb3c>
 8009b4e:	461a      	mov	r2, r3
 8009b50:	4601      	mov	r1, r0
 8009b52:	4658      	mov	r0, fp
 8009b54:	f000 fca4 	bl	800a4a0 <__pow5mult>
 8009b58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b5a:	2b01      	cmp	r3, #1
 8009b5c:	4604      	mov	r4, r0
 8009b5e:	f300 8095 	bgt.w	8009c8c <_dtoa_r+0x8dc>
 8009b62:	9b02      	ldr	r3, [sp, #8]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	f040 8087 	bne.w	8009c78 <_dtoa_r+0x8c8>
 8009b6a:	9b03      	ldr	r3, [sp, #12]
 8009b6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	f040 8089 	bne.w	8009c88 <_dtoa_r+0x8d8>
 8009b76:	9b03      	ldr	r3, [sp, #12]
 8009b78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009b7c:	0d1b      	lsrs	r3, r3, #20
 8009b7e:	051b      	lsls	r3, r3, #20
 8009b80:	b12b      	cbz	r3, 8009b8e <_dtoa_r+0x7de>
 8009b82:	9b08      	ldr	r3, [sp, #32]
 8009b84:	3301      	adds	r3, #1
 8009b86:	9308      	str	r3, [sp, #32]
 8009b88:	f108 0801 	add.w	r8, r8, #1
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	f000 81b0 	beq.w	8009ef8 <_dtoa_r+0xb48>
 8009b98:	6923      	ldr	r3, [r4, #16]
 8009b9a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009b9e:	6918      	ldr	r0, [r3, #16]
 8009ba0:	f000 fb72 	bl	800a288 <__hi0bits>
 8009ba4:	f1c0 0020 	rsb	r0, r0, #32
 8009ba8:	9b08      	ldr	r3, [sp, #32]
 8009baa:	4418      	add	r0, r3
 8009bac:	f010 001f 	ands.w	r0, r0, #31
 8009bb0:	d077      	beq.n	8009ca2 <_dtoa_r+0x8f2>
 8009bb2:	f1c0 0320 	rsb	r3, r0, #32
 8009bb6:	2b04      	cmp	r3, #4
 8009bb8:	dd6b      	ble.n	8009c92 <_dtoa_r+0x8e2>
 8009bba:	9b08      	ldr	r3, [sp, #32]
 8009bbc:	f1c0 001c 	rsb	r0, r0, #28
 8009bc0:	4403      	add	r3, r0
 8009bc2:	4480      	add	r8, r0
 8009bc4:	4406      	add	r6, r0
 8009bc6:	9308      	str	r3, [sp, #32]
 8009bc8:	f1b8 0f00 	cmp.w	r8, #0
 8009bcc:	dd05      	ble.n	8009bda <_dtoa_r+0x82a>
 8009bce:	4649      	mov	r1, r9
 8009bd0:	4642      	mov	r2, r8
 8009bd2:	4658      	mov	r0, fp
 8009bd4:	f000 fcbe 	bl	800a554 <__lshift>
 8009bd8:	4681      	mov	r9, r0
 8009bda:	9b08      	ldr	r3, [sp, #32]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	dd05      	ble.n	8009bec <_dtoa_r+0x83c>
 8009be0:	4621      	mov	r1, r4
 8009be2:	461a      	mov	r2, r3
 8009be4:	4658      	mov	r0, fp
 8009be6:	f000 fcb5 	bl	800a554 <__lshift>
 8009bea:	4604      	mov	r4, r0
 8009bec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d059      	beq.n	8009ca6 <_dtoa_r+0x8f6>
 8009bf2:	4621      	mov	r1, r4
 8009bf4:	4648      	mov	r0, r9
 8009bf6:	f000 fd19 	bl	800a62c <__mcmp>
 8009bfa:	2800      	cmp	r0, #0
 8009bfc:	da53      	bge.n	8009ca6 <_dtoa_r+0x8f6>
 8009bfe:	1e7b      	subs	r3, r7, #1
 8009c00:	9304      	str	r3, [sp, #16]
 8009c02:	4649      	mov	r1, r9
 8009c04:	2300      	movs	r3, #0
 8009c06:	220a      	movs	r2, #10
 8009c08:	4658      	mov	r0, fp
 8009c0a:	f000 faf7 	bl	800a1fc <__multadd>
 8009c0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c10:	4681      	mov	r9, r0
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	f000 8172 	beq.w	8009efc <_dtoa_r+0xb4c>
 8009c18:	2300      	movs	r3, #0
 8009c1a:	4629      	mov	r1, r5
 8009c1c:	220a      	movs	r2, #10
 8009c1e:	4658      	mov	r0, fp
 8009c20:	f000 faec 	bl	800a1fc <__multadd>
 8009c24:	9b00      	ldr	r3, [sp, #0]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	4605      	mov	r5, r0
 8009c2a:	dc67      	bgt.n	8009cfc <_dtoa_r+0x94c>
 8009c2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c2e:	2b02      	cmp	r3, #2
 8009c30:	dc41      	bgt.n	8009cb6 <_dtoa_r+0x906>
 8009c32:	e063      	b.n	8009cfc <_dtoa_r+0x94c>
 8009c34:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009c36:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009c3a:	e746      	b.n	8009aca <_dtoa_r+0x71a>
 8009c3c:	9b07      	ldr	r3, [sp, #28]
 8009c3e:	1e5c      	subs	r4, r3, #1
 8009c40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c42:	42a3      	cmp	r3, r4
 8009c44:	bfbf      	itttt	lt
 8009c46:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009c48:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009c4a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009c4c:	1ae3      	sublt	r3, r4, r3
 8009c4e:	bfb4      	ite	lt
 8009c50:	18d2      	addlt	r2, r2, r3
 8009c52:	1b1c      	subge	r4, r3, r4
 8009c54:	9b07      	ldr	r3, [sp, #28]
 8009c56:	bfbc      	itt	lt
 8009c58:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009c5a:	2400      	movlt	r4, #0
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	bfb5      	itete	lt
 8009c60:	eba8 0603 	sublt.w	r6, r8, r3
 8009c64:	9b07      	ldrge	r3, [sp, #28]
 8009c66:	2300      	movlt	r3, #0
 8009c68:	4646      	movge	r6, r8
 8009c6a:	e730      	b.n	8009ace <_dtoa_r+0x71e>
 8009c6c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009c6e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009c70:	4646      	mov	r6, r8
 8009c72:	e735      	b.n	8009ae0 <_dtoa_r+0x730>
 8009c74:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009c76:	e75c      	b.n	8009b32 <_dtoa_r+0x782>
 8009c78:	2300      	movs	r3, #0
 8009c7a:	e788      	b.n	8009b8e <_dtoa_r+0x7de>
 8009c7c:	3fe00000 	.word	0x3fe00000
 8009c80:	40240000 	.word	0x40240000
 8009c84:	40140000 	.word	0x40140000
 8009c88:	9b02      	ldr	r3, [sp, #8]
 8009c8a:	e780      	b.n	8009b8e <_dtoa_r+0x7de>
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c90:	e782      	b.n	8009b98 <_dtoa_r+0x7e8>
 8009c92:	d099      	beq.n	8009bc8 <_dtoa_r+0x818>
 8009c94:	9a08      	ldr	r2, [sp, #32]
 8009c96:	331c      	adds	r3, #28
 8009c98:	441a      	add	r2, r3
 8009c9a:	4498      	add	r8, r3
 8009c9c:	441e      	add	r6, r3
 8009c9e:	9208      	str	r2, [sp, #32]
 8009ca0:	e792      	b.n	8009bc8 <_dtoa_r+0x818>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	e7f6      	b.n	8009c94 <_dtoa_r+0x8e4>
 8009ca6:	9b07      	ldr	r3, [sp, #28]
 8009ca8:	9704      	str	r7, [sp, #16]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	dc20      	bgt.n	8009cf0 <_dtoa_r+0x940>
 8009cae:	9300      	str	r3, [sp, #0]
 8009cb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cb2:	2b02      	cmp	r3, #2
 8009cb4:	dd1e      	ble.n	8009cf4 <_dtoa_r+0x944>
 8009cb6:	9b00      	ldr	r3, [sp, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	f47f aec0 	bne.w	8009a3e <_dtoa_r+0x68e>
 8009cbe:	4621      	mov	r1, r4
 8009cc0:	2205      	movs	r2, #5
 8009cc2:	4658      	mov	r0, fp
 8009cc4:	f000 fa9a 	bl	800a1fc <__multadd>
 8009cc8:	4601      	mov	r1, r0
 8009cca:	4604      	mov	r4, r0
 8009ccc:	4648      	mov	r0, r9
 8009cce:	f000 fcad 	bl	800a62c <__mcmp>
 8009cd2:	2800      	cmp	r0, #0
 8009cd4:	f77f aeb3 	ble.w	8009a3e <_dtoa_r+0x68e>
 8009cd8:	4656      	mov	r6, sl
 8009cda:	2331      	movs	r3, #49	@ 0x31
 8009cdc:	f806 3b01 	strb.w	r3, [r6], #1
 8009ce0:	9b04      	ldr	r3, [sp, #16]
 8009ce2:	3301      	adds	r3, #1
 8009ce4:	9304      	str	r3, [sp, #16]
 8009ce6:	e6ae      	b.n	8009a46 <_dtoa_r+0x696>
 8009ce8:	9c07      	ldr	r4, [sp, #28]
 8009cea:	9704      	str	r7, [sp, #16]
 8009cec:	4625      	mov	r5, r4
 8009cee:	e7f3      	b.n	8009cd8 <_dtoa_r+0x928>
 8009cf0:	9b07      	ldr	r3, [sp, #28]
 8009cf2:	9300      	str	r3, [sp, #0]
 8009cf4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	f000 8104 	beq.w	8009f04 <_dtoa_r+0xb54>
 8009cfc:	2e00      	cmp	r6, #0
 8009cfe:	dd05      	ble.n	8009d0c <_dtoa_r+0x95c>
 8009d00:	4629      	mov	r1, r5
 8009d02:	4632      	mov	r2, r6
 8009d04:	4658      	mov	r0, fp
 8009d06:	f000 fc25 	bl	800a554 <__lshift>
 8009d0a:	4605      	mov	r5, r0
 8009d0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d05a      	beq.n	8009dc8 <_dtoa_r+0xa18>
 8009d12:	6869      	ldr	r1, [r5, #4]
 8009d14:	4658      	mov	r0, fp
 8009d16:	f000 fa0f 	bl	800a138 <_Balloc>
 8009d1a:	4606      	mov	r6, r0
 8009d1c:	b928      	cbnz	r0, 8009d2a <_dtoa_r+0x97a>
 8009d1e:	4b84      	ldr	r3, [pc, #528]	@ (8009f30 <_dtoa_r+0xb80>)
 8009d20:	4602      	mov	r2, r0
 8009d22:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009d26:	f7ff bb5a 	b.w	80093de <_dtoa_r+0x2e>
 8009d2a:	692a      	ldr	r2, [r5, #16]
 8009d2c:	3202      	adds	r2, #2
 8009d2e:	0092      	lsls	r2, r2, #2
 8009d30:	f105 010c 	add.w	r1, r5, #12
 8009d34:	300c      	adds	r0, #12
 8009d36:	f001 f985 	bl	800b044 <memcpy>
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	4631      	mov	r1, r6
 8009d3e:	4658      	mov	r0, fp
 8009d40:	f000 fc08 	bl	800a554 <__lshift>
 8009d44:	f10a 0301 	add.w	r3, sl, #1
 8009d48:	9307      	str	r3, [sp, #28]
 8009d4a:	9b00      	ldr	r3, [sp, #0]
 8009d4c:	4453      	add	r3, sl
 8009d4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d50:	9b02      	ldr	r3, [sp, #8]
 8009d52:	f003 0301 	and.w	r3, r3, #1
 8009d56:	462f      	mov	r7, r5
 8009d58:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d5a:	4605      	mov	r5, r0
 8009d5c:	9b07      	ldr	r3, [sp, #28]
 8009d5e:	4621      	mov	r1, r4
 8009d60:	3b01      	subs	r3, #1
 8009d62:	4648      	mov	r0, r9
 8009d64:	9300      	str	r3, [sp, #0]
 8009d66:	f7ff fa98 	bl	800929a <quorem>
 8009d6a:	4639      	mov	r1, r7
 8009d6c:	9002      	str	r0, [sp, #8]
 8009d6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009d72:	4648      	mov	r0, r9
 8009d74:	f000 fc5a 	bl	800a62c <__mcmp>
 8009d78:	462a      	mov	r2, r5
 8009d7a:	9008      	str	r0, [sp, #32]
 8009d7c:	4621      	mov	r1, r4
 8009d7e:	4658      	mov	r0, fp
 8009d80:	f000 fc70 	bl	800a664 <__mdiff>
 8009d84:	68c2      	ldr	r2, [r0, #12]
 8009d86:	4606      	mov	r6, r0
 8009d88:	bb02      	cbnz	r2, 8009dcc <_dtoa_r+0xa1c>
 8009d8a:	4601      	mov	r1, r0
 8009d8c:	4648      	mov	r0, r9
 8009d8e:	f000 fc4d 	bl	800a62c <__mcmp>
 8009d92:	4602      	mov	r2, r0
 8009d94:	4631      	mov	r1, r6
 8009d96:	4658      	mov	r0, fp
 8009d98:	920e      	str	r2, [sp, #56]	@ 0x38
 8009d9a:	f000 fa0d 	bl	800a1b8 <_Bfree>
 8009d9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009da0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009da2:	9e07      	ldr	r6, [sp, #28]
 8009da4:	ea43 0102 	orr.w	r1, r3, r2
 8009da8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009daa:	4319      	orrs	r1, r3
 8009dac:	d110      	bne.n	8009dd0 <_dtoa_r+0xa20>
 8009dae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009db2:	d029      	beq.n	8009e08 <_dtoa_r+0xa58>
 8009db4:	9b08      	ldr	r3, [sp, #32]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	dd02      	ble.n	8009dc0 <_dtoa_r+0xa10>
 8009dba:	9b02      	ldr	r3, [sp, #8]
 8009dbc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009dc0:	9b00      	ldr	r3, [sp, #0]
 8009dc2:	f883 8000 	strb.w	r8, [r3]
 8009dc6:	e63f      	b.n	8009a48 <_dtoa_r+0x698>
 8009dc8:	4628      	mov	r0, r5
 8009dca:	e7bb      	b.n	8009d44 <_dtoa_r+0x994>
 8009dcc:	2201      	movs	r2, #1
 8009dce:	e7e1      	b.n	8009d94 <_dtoa_r+0x9e4>
 8009dd0:	9b08      	ldr	r3, [sp, #32]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	db04      	blt.n	8009de0 <_dtoa_r+0xa30>
 8009dd6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009dd8:	430b      	orrs	r3, r1
 8009dda:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009ddc:	430b      	orrs	r3, r1
 8009dde:	d120      	bne.n	8009e22 <_dtoa_r+0xa72>
 8009de0:	2a00      	cmp	r2, #0
 8009de2:	dded      	ble.n	8009dc0 <_dtoa_r+0xa10>
 8009de4:	4649      	mov	r1, r9
 8009de6:	2201      	movs	r2, #1
 8009de8:	4658      	mov	r0, fp
 8009dea:	f000 fbb3 	bl	800a554 <__lshift>
 8009dee:	4621      	mov	r1, r4
 8009df0:	4681      	mov	r9, r0
 8009df2:	f000 fc1b 	bl	800a62c <__mcmp>
 8009df6:	2800      	cmp	r0, #0
 8009df8:	dc03      	bgt.n	8009e02 <_dtoa_r+0xa52>
 8009dfa:	d1e1      	bne.n	8009dc0 <_dtoa_r+0xa10>
 8009dfc:	f018 0f01 	tst.w	r8, #1
 8009e00:	d0de      	beq.n	8009dc0 <_dtoa_r+0xa10>
 8009e02:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009e06:	d1d8      	bne.n	8009dba <_dtoa_r+0xa0a>
 8009e08:	9a00      	ldr	r2, [sp, #0]
 8009e0a:	2339      	movs	r3, #57	@ 0x39
 8009e0c:	7013      	strb	r3, [r2, #0]
 8009e0e:	4633      	mov	r3, r6
 8009e10:	461e      	mov	r6, r3
 8009e12:	3b01      	subs	r3, #1
 8009e14:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009e18:	2a39      	cmp	r2, #57	@ 0x39
 8009e1a:	d052      	beq.n	8009ec2 <_dtoa_r+0xb12>
 8009e1c:	3201      	adds	r2, #1
 8009e1e:	701a      	strb	r2, [r3, #0]
 8009e20:	e612      	b.n	8009a48 <_dtoa_r+0x698>
 8009e22:	2a00      	cmp	r2, #0
 8009e24:	dd07      	ble.n	8009e36 <_dtoa_r+0xa86>
 8009e26:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009e2a:	d0ed      	beq.n	8009e08 <_dtoa_r+0xa58>
 8009e2c:	9a00      	ldr	r2, [sp, #0]
 8009e2e:	f108 0301 	add.w	r3, r8, #1
 8009e32:	7013      	strb	r3, [r2, #0]
 8009e34:	e608      	b.n	8009a48 <_dtoa_r+0x698>
 8009e36:	9b07      	ldr	r3, [sp, #28]
 8009e38:	9a07      	ldr	r2, [sp, #28]
 8009e3a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009e3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d028      	beq.n	8009e96 <_dtoa_r+0xae6>
 8009e44:	4649      	mov	r1, r9
 8009e46:	2300      	movs	r3, #0
 8009e48:	220a      	movs	r2, #10
 8009e4a:	4658      	mov	r0, fp
 8009e4c:	f000 f9d6 	bl	800a1fc <__multadd>
 8009e50:	42af      	cmp	r7, r5
 8009e52:	4681      	mov	r9, r0
 8009e54:	f04f 0300 	mov.w	r3, #0
 8009e58:	f04f 020a 	mov.w	r2, #10
 8009e5c:	4639      	mov	r1, r7
 8009e5e:	4658      	mov	r0, fp
 8009e60:	d107      	bne.n	8009e72 <_dtoa_r+0xac2>
 8009e62:	f000 f9cb 	bl	800a1fc <__multadd>
 8009e66:	4607      	mov	r7, r0
 8009e68:	4605      	mov	r5, r0
 8009e6a:	9b07      	ldr	r3, [sp, #28]
 8009e6c:	3301      	adds	r3, #1
 8009e6e:	9307      	str	r3, [sp, #28]
 8009e70:	e774      	b.n	8009d5c <_dtoa_r+0x9ac>
 8009e72:	f000 f9c3 	bl	800a1fc <__multadd>
 8009e76:	4629      	mov	r1, r5
 8009e78:	4607      	mov	r7, r0
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	220a      	movs	r2, #10
 8009e7e:	4658      	mov	r0, fp
 8009e80:	f000 f9bc 	bl	800a1fc <__multadd>
 8009e84:	4605      	mov	r5, r0
 8009e86:	e7f0      	b.n	8009e6a <_dtoa_r+0xaba>
 8009e88:	9b00      	ldr	r3, [sp, #0]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	bfcc      	ite	gt
 8009e8e:	461e      	movgt	r6, r3
 8009e90:	2601      	movle	r6, #1
 8009e92:	4456      	add	r6, sl
 8009e94:	2700      	movs	r7, #0
 8009e96:	4649      	mov	r1, r9
 8009e98:	2201      	movs	r2, #1
 8009e9a:	4658      	mov	r0, fp
 8009e9c:	f000 fb5a 	bl	800a554 <__lshift>
 8009ea0:	4621      	mov	r1, r4
 8009ea2:	4681      	mov	r9, r0
 8009ea4:	f000 fbc2 	bl	800a62c <__mcmp>
 8009ea8:	2800      	cmp	r0, #0
 8009eaa:	dcb0      	bgt.n	8009e0e <_dtoa_r+0xa5e>
 8009eac:	d102      	bne.n	8009eb4 <_dtoa_r+0xb04>
 8009eae:	f018 0f01 	tst.w	r8, #1
 8009eb2:	d1ac      	bne.n	8009e0e <_dtoa_r+0xa5e>
 8009eb4:	4633      	mov	r3, r6
 8009eb6:	461e      	mov	r6, r3
 8009eb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ebc:	2a30      	cmp	r2, #48	@ 0x30
 8009ebe:	d0fa      	beq.n	8009eb6 <_dtoa_r+0xb06>
 8009ec0:	e5c2      	b.n	8009a48 <_dtoa_r+0x698>
 8009ec2:	459a      	cmp	sl, r3
 8009ec4:	d1a4      	bne.n	8009e10 <_dtoa_r+0xa60>
 8009ec6:	9b04      	ldr	r3, [sp, #16]
 8009ec8:	3301      	adds	r3, #1
 8009eca:	9304      	str	r3, [sp, #16]
 8009ecc:	2331      	movs	r3, #49	@ 0x31
 8009ece:	f88a 3000 	strb.w	r3, [sl]
 8009ed2:	e5b9      	b.n	8009a48 <_dtoa_r+0x698>
 8009ed4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009ed6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009f34 <_dtoa_r+0xb84>
 8009eda:	b11b      	cbz	r3, 8009ee4 <_dtoa_r+0xb34>
 8009edc:	f10a 0308 	add.w	r3, sl, #8
 8009ee0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009ee2:	6013      	str	r3, [r2, #0]
 8009ee4:	4650      	mov	r0, sl
 8009ee6:	b019      	add	sp, #100	@ 0x64
 8009ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009eee:	2b01      	cmp	r3, #1
 8009ef0:	f77f ae37 	ble.w	8009b62 <_dtoa_r+0x7b2>
 8009ef4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ef6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ef8:	2001      	movs	r0, #1
 8009efa:	e655      	b.n	8009ba8 <_dtoa_r+0x7f8>
 8009efc:	9b00      	ldr	r3, [sp, #0]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	f77f aed6 	ble.w	8009cb0 <_dtoa_r+0x900>
 8009f04:	4656      	mov	r6, sl
 8009f06:	4621      	mov	r1, r4
 8009f08:	4648      	mov	r0, r9
 8009f0a:	f7ff f9c6 	bl	800929a <quorem>
 8009f0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009f12:	f806 8b01 	strb.w	r8, [r6], #1
 8009f16:	9b00      	ldr	r3, [sp, #0]
 8009f18:	eba6 020a 	sub.w	r2, r6, sl
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	ddb3      	ble.n	8009e88 <_dtoa_r+0xad8>
 8009f20:	4649      	mov	r1, r9
 8009f22:	2300      	movs	r3, #0
 8009f24:	220a      	movs	r2, #10
 8009f26:	4658      	mov	r0, fp
 8009f28:	f000 f968 	bl	800a1fc <__multadd>
 8009f2c:	4681      	mov	r9, r0
 8009f2e:	e7ea      	b.n	8009f06 <_dtoa_r+0xb56>
 8009f30:	0800b59c 	.word	0x0800b59c
 8009f34:	0800b520 	.word	0x0800b520

08009f38 <_free_r>:
 8009f38:	b538      	push	{r3, r4, r5, lr}
 8009f3a:	4605      	mov	r5, r0
 8009f3c:	2900      	cmp	r1, #0
 8009f3e:	d041      	beq.n	8009fc4 <_free_r+0x8c>
 8009f40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f44:	1f0c      	subs	r4, r1, #4
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	bfb8      	it	lt
 8009f4a:	18e4      	addlt	r4, r4, r3
 8009f4c:	f000 f8e8 	bl	800a120 <__malloc_lock>
 8009f50:	4a1d      	ldr	r2, [pc, #116]	@ (8009fc8 <_free_r+0x90>)
 8009f52:	6813      	ldr	r3, [r2, #0]
 8009f54:	b933      	cbnz	r3, 8009f64 <_free_r+0x2c>
 8009f56:	6063      	str	r3, [r4, #4]
 8009f58:	6014      	str	r4, [r2, #0]
 8009f5a:	4628      	mov	r0, r5
 8009f5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f60:	f000 b8e4 	b.w	800a12c <__malloc_unlock>
 8009f64:	42a3      	cmp	r3, r4
 8009f66:	d908      	bls.n	8009f7a <_free_r+0x42>
 8009f68:	6820      	ldr	r0, [r4, #0]
 8009f6a:	1821      	adds	r1, r4, r0
 8009f6c:	428b      	cmp	r3, r1
 8009f6e:	bf01      	itttt	eq
 8009f70:	6819      	ldreq	r1, [r3, #0]
 8009f72:	685b      	ldreq	r3, [r3, #4]
 8009f74:	1809      	addeq	r1, r1, r0
 8009f76:	6021      	streq	r1, [r4, #0]
 8009f78:	e7ed      	b.n	8009f56 <_free_r+0x1e>
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	b10b      	cbz	r3, 8009f84 <_free_r+0x4c>
 8009f80:	42a3      	cmp	r3, r4
 8009f82:	d9fa      	bls.n	8009f7a <_free_r+0x42>
 8009f84:	6811      	ldr	r1, [r2, #0]
 8009f86:	1850      	adds	r0, r2, r1
 8009f88:	42a0      	cmp	r0, r4
 8009f8a:	d10b      	bne.n	8009fa4 <_free_r+0x6c>
 8009f8c:	6820      	ldr	r0, [r4, #0]
 8009f8e:	4401      	add	r1, r0
 8009f90:	1850      	adds	r0, r2, r1
 8009f92:	4283      	cmp	r3, r0
 8009f94:	6011      	str	r1, [r2, #0]
 8009f96:	d1e0      	bne.n	8009f5a <_free_r+0x22>
 8009f98:	6818      	ldr	r0, [r3, #0]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	6053      	str	r3, [r2, #4]
 8009f9e:	4408      	add	r0, r1
 8009fa0:	6010      	str	r0, [r2, #0]
 8009fa2:	e7da      	b.n	8009f5a <_free_r+0x22>
 8009fa4:	d902      	bls.n	8009fac <_free_r+0x74>
 8009fa6:	230c      	movs	r3, #12
 8009fa8:	602b      	str	r3, [r5, #0]
 8009faa:	e7d6      	b.n	8009f5a <_free_r+0x22>
 8009fac:	6820      	ldr	r0, [r4, #0]
 8009fae:	1821      	adds	r1, r4, r0
 8009fb0:	428b      	cmp	r3, r1
 8009fb2:	bf04      	itt	eq
 8009fb4:	6819      	ldreq	r1, [r3, #0]
 8009fb6:	685b      	ldreq	r3, [r3, #4]
 8009fb8:	6063      	str	r3, [r4, #4]
 8009fba:	bf04      	itt	eq
 8009fbc:	1809      	addeq	r1, r1, r0
 8009fbe:	6021      	streq	r1, [r4, #0]
 8009fc0:	6054      	str	r4, [r2, #4]
 8009fc2:	e7ca      	b.n	8009f5a <_free_r+0x22>
 8009fc4:	bd38      	pop	{r3, r4, r5, pc}
 8009fc6:	bf00      	nop
 8009fc8:	20000638 	.word	0x20000638

08009fcc <malloc>:
 8009fcc:	4b02      	ldr	r3, [pc, #8]	@ (8009fd8 <malloc+0xc>)
 8009fce:	4601      	mov	r1, r0
 8009fd0:	6818      	ldr	r0, [r3, #0]
 8009fd2:	f000 b825 	b.w	800a020 <_malloc_r>
 8009fd6:	bf00      	nop
 8009fd8:	20000018 	.word	0x20000018

08009fdc <sbrk_aligned>:
 8009fdc:	b570      	push	{r4, r5, r6, lr}
 8009fde:	4e0f      	ldr	r6, [pc, #60]	@ (800a01c <sbrk_aligned+0x40>)
 8009fe0:	460c      	mov	r4, r1
 8009fe2:	6831      	ldr	r1, [r6, #0]
 8009fe4:	4605      	mov	r5, r0
 8009fe6:	b911      	cbnz	r1, 8009fee <sbrk_aligned+0x12>
 8009fe8:	f001 f81c 	bl	800b024 <_sbrk_r>
 8009fec:	6030      	str	r0, [r6, #0]
 8009fee:	4621      	mov	r1, r4
 8009ff0:	4628      	mov	r0, r5
 8009ff2:	f001 f817 	bl	800b024 <_sbrk_r>
 8009ff6:	1c43      	adds	r3, r0, #1
 8009ff8:	d103      	bne.n	800a002 <sbrk_aligned+0x26>
 8009ffa:	f04f 34ff 	mov.w	r4, #4294967295
 8009ffe:	4620      	mov	r0, r4
 800a000:	bd70      	pop	{r4, r5, r6, pc}
 800a002:	1cc4      	adds	r4, r0, #3
 800a004:	f024 0403 	bic.w	r4, r4, #3
 800a008:	42a0      	cmp	r0, r4
 800a00a:	d0f8      	beq.n	8009ffe <sbrk_aligned+0x22>
 800a00c:	1a21      	subs	r1, r4, r0
 800a00e:	4628      	mov	r0, r5
 800a010:	f001 f808 	bl	800b024 <_sbrk_r>
 800a014:	3001      	adds	r0, #1
 800a016:	d1f2      	bne.n	8009ffe <sbrk_aligned+0x22>
 800a018:	e7ef      	b.n	8009ffa <sbrk_aligned+0x1e>
 800a01a:	bf00      	nop
 800a01c:	20000634 	.word	0x20000634

0800a020 <_malloc_r>:
 800a020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a024:	1ccd      	adds	r5, r1, #3
 800a026:	f025 0503 	bic.w	r5, r5, #3
 800a02a:	3508      	adds	r5, #8
 800a02c:	2d0c      	cmp	r5, #12
 800a02e:	bf38      	it	cc
 800a030:	250c      	movcc	r5, #12
 800a032:	2d00      	cmp	r5, #0
 800a034:	4606      	mov	r6, r0
 800a036:	db01      	blt.n	800a03c <_malloc_r+0x1c>
 800a038:	42a9      	cmp	r1, r5
 800a03a:	d904      	bls.n	800a046 <_malloc_r+0x26>
 800a03c:	230c      	movs	r3, #12
 800a03e:	6033      	str	r3, [r6, #0]
 800a040:	2000      	movs	r0, #0
 800a042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a046:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a11c <_malloc_r+0xfc>
 800a04a:	f000 f869 	bl	800a120 <__malloc_lock>
 800a04e:	f8d8 3000 	ldr.w	r3, [r8]
 800a052:	461c      	mov	r4, r3
 800a054:	bb44      	cbnz	r4, 800a0a8 <_malloc_r+0x88>
 800a056:	4629      	mov	r1, r5
 800a058:	4630      	mov	r0, r6
 800a05a:	f7ff ffbf 	bl	8009fdc <sbrk_aligned>
 800a05e:	1c43      	adds	r3, r0, #1
 800a060:	4604      	mov	r4, r0
 800a062:	d158      	bne.n	800a116 <_malloc_r+0xf6>
 800a064:	f8d8 4000 	ldr.w	r4, [r8]
 800a068:	4627      	mov	r7, r4
 800a06a:	2f00      	cmp	r7, #0
 800a06c:	d143      	bne.n	800a0f6 <_malloc_r+0xd6>
 800a06e:	2c00      	cmp	r4, #0
 800a070:	d04b      	beq.n	800a10a <_malloc_r+0xea>
 800a072:	6823      	ldr	r3, [r4, #0]
 800a074:	4639      	mov	r1, r7
 800a076:	4630      	mov	r0, r6
 800a078:	eb04 0903 	add.w	r9, r4, r3
 800a07c:	f000 ffd2 	bl	800b024 <_sbrk_r>
 800a080:	4581      	cmp	r9, r0
 800a082:	d142      	bne.n	800a10a <_malloc_r+0xea>
 800a084:	6821      	ldr	r1, [r4, #0]
 800a086:	1a6d      	subs	r5, r5, r1
 800a088:	4629      	mov	r1, r5
 800a08a:	4630      	mov	r0, r6
 800a08c:	f7ff ffa6 	bl	8009fdc <sbrk_aligned>
 800a090:	3001      	adds	r0, #1
 800a092:	d03a      	beq.n	800a10a <_malloc_r+0xea>
 800a094:	6823      	ldr	r3, [r4, #0]
 800a096:	442b      	add	r3, r5
 800a098:	6023      	str	r3, [r4, #0]
 800a09a:	f8d8 3000 	ldr.w	r3, [r8]
 800a09e:	685a      	ldr	r2, [r3, #4]
 800a0a0:	bb62      	cbnz	r2, 800a0fc <_malloc_r+0xdc>
 800a0a2:	f8c8 7000 	str.w	r7, [r8]
 800a0a6:	e00f      	b.n	800a0c8 <_malloc_r+0xa8>
 800a0a8:	6822      	ldr	r2, [r4, #0]
 800a0aa:	1b52      	subs	r2, r2, r5
 800a0ac:	d420      	bmi.n	800a0f0 <_malloc_r+0xd0>
 800a0ae:	2a0b      	cmp	r2, #11
 800a0b0:	d917      	bls.n	800a0e2 <_malloc_r+0xc2>
 800a0b2:	1961      	adds	r1, r4, r5
 800a0b4:	42a3      	cmp	r3, r4
 800a0b6:	6025      	str	r5, [r4, #0]
 800a0b8:	bf18      	it	ne
 800a0ba:	6059      	strne	r1, [r3, #4]
 800a0bc:	6863      	ldr	r3, [r4, #4]
 800a0be:	bf08      	it	eq
 800a0c0:	f8c8 1000 	streq.w	r1, [r8]
 800a0c4:	5162      	str	r2, [r4, r5]
 800a0c6:	604b      	str	r3, [r1, #4]
 800a0c8:	4630      	mov	r0, r6
 800a0ca:	f000 f82f 	bl	800a12c <__malloc_unlock>
 800a0ce:	f104 000b 	add.w	r0, r4, #11
 800a0d2:	1d23      	adds	r3, r4, #4
 800a0d4:	f020 0007 	bic.w	r0, r0, #7
 800a0d8:	1ac2      	subs	r2, r0, r3
 800a0da:	bf1c      	itt	ne
 800a0dc:	1a1b      	subne	r3, r3, r0
 800a0de:	50a3      	strne	r3, [r4, r2]
 800a0e0:	e7af      	b.n	800a042 <_malloc_r+0x22>
 800a0e2:	6862      	ldr	r2, [r4, #4]
 800a0e4:	42a3      	cmp	r3, r4
 800a0e6:	bf0c      	ite	eq
 800a0e8:	f8c8 2000 	streq.w	r2, [r8]
 800a0ec:	605a      	strne	r2, [r3, #4]
 800a0ee:	e7eb      	b.n	800a0c8 <_malloc_r+0xa8>
 800a0f0:	4623      	mov	r3, r4
 800a0f2:	6864      	ldr	r4, [r4, #4]
 800a0f4:	e7ae      	b.n	800a054 <_malloc_r+0x34>
 800a0f6:	463c      	mov	r4, r7
 800a0f8:	687f      	ldr	r7, [r7, #4]
 800a0fa:	e7b6      	b.n	800a06a <_malloc_r+0x4a>
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	42a3      	cmp	r3, r4
 800a102:	d1fb      	bne.n	800a0fc <_malloc_r+0xdc>
 800a104:	2300      	movs	r3, #0
 800a106:	6053      	str	r3, [r2, #4]
 800a108:	e7de      	b.n	800a0c8 <_malloc_r+0xa8>
 800a10a:	230c      	movs	r3, #12
 800a10c:	6033      	str	r3, [r6, #0]
 800a10e:	4630      	mov	r0, r6
 800a110:	f000 f80c 	bl	800a12c <__malloc_unlock>
 800a114:	e794      	b.n	800a040 <_malloc_r+0x20>
 800a116:	6005      	str	r5, [r0, #0]
 800a118:	e7d6      	b.n	800a0c8 <_malloc_r+0xa8>
 800a11a:	bf00      	nop
 800a11c:	20000638 	.word	0x20000638

0800a120 <__malloc_lock>:
 800a120:	4801      	ldr	r0, [pc, #4]	@ (800a128 <__malloc_lock+0x8>)
 800a122:	f7ff b8b8 	b.w	8009296 <__retarget_lock_acquire_recursive>
 800a126:	bf00      	nop
 800a128:	20000630 	.word	0x20000630

0800a12c <__malloc_unlock>:
 800a12c:	4801      	ldr	r0, [pc, #4]	@ (800a134 <__malloc_unlock+0x8>)
 800a12e:	f7ff b8b3 	b.w	8009298 <__retarget_lock_release_recursive>
 800a132:	bf00      	nop
 800a134:	20000630 	.word	0x20000630

0800a138 <_Balloc>:
 800a138:	b570      	push	{r4, r5, r6, lr}
 800a13a:	69c6      	ldr	r6, [r0, #28]
 800a13c:	4604      	mov	r4, r0
 800a13e:	460d      	mov	r5, r1
 800a140:	b976      	cbnz	r6, 800a160 <_Balloc+0x28>
 800a142:	2010      	movs	r0, #16
 800a144:	f7ff ff42 	bl	8009fcc <malloc>
 800a148:	4602      	mov	r2, r0
 800a14a:	61e0      	str	r0, [r4, #28]
 800a14c:	b920      	cbnz	r0, 800a158 <_Balloc+0x20>
 800a14e:	4b18      	ldr	r3, [pc, #96]	@ (800a1b0 <_Balloc+0x78>)
 800a150:	4818      	ldr	r0, [pc, #96]	@ (800a1b4 <_Balloc+0x7c>)
 800a152:	216b      	movs	r1, #107	@ 0x6b
 800a154:	f000 ff84 	bl	800b060 <__assert_func>
 800a158:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a15c:	6006      	str	r6, [r0, #0]
 800a15e:	60c6      	str	r6, [r0, #12]
 800a160:	69e6      	ldr	r6, [r4, #28]
 800a162:	68f3      	ldr	r3, [r6, #12]
 800a164:	b183      	cbz	r3, 800a188 <_Balloc+0x50>
 800a166:	69e3      	ldr	r3, [r4, #28]
 800a168:	68db      	ldr	r3, [r3, #12]
 800a16a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a16e:	b9b8      	cbnz	r0, 800a1a0 <_Balloc+0x68>
 800a170:	2101      	movs	r1, #1
 800a172:	fa01 f605 	lsl.w	r6, r1, r5
 800a176:	1d72      	adds	r2, r6, #5
 800a178:	0092      	lsls	r2, r2, #2
 800a17a:	4620      	mov	r0, r4
 800a17c:	f000 ff8e 	bl	800b09c <_calloc_r>
 800a180:	b160      	cbz	r0, 800a19c <_Balloc+0x64>
 800a182:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a186:	e00e      	b.n	800a1a6 <_Balloc+0x6e>
 800a188:	2221      	movs	r2, #33	@ 0x21
 800a18a:	2104      	movs	r1, #4
 800a18c:	4620      	mov	r0, r4
 800a18e:	f000 ff85 	bl	800b09c <_calloc_r>
 800a192:	69e3      	ldr	r3, [r4, #28]
 800a194:	60f0      	str	r0, [r6, #12]
 800a196:	68db      	ldr	r3, [r3, #12]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d1e4      	bne.n	800a166 <_Balloc+0x2e>
 800a19c:	2000      	movs	r0, #0
 800a19e:	bd70      	pop	{r4, r5, r6, pc}
 800a1a0:	6802      	ldr	r2, [r0, #0]
 800a1a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a1ac:	e7f7      	b.n	800a19e <_Balloc+0x66>
 800a1ae:	bf00      	nop
 800a1b0:	0800b52d 	.word	0x0800b52d
 800a1b4:	0800b5ad 	.word	0x0800b5ad

0800a1b8 <_Bfree>:
 800a1b8:	b570      	push	{r4, r5, r6, lr}
 800a1ba:	69c6      	ldr	r6, [r0, #28]
 800a1bc:	4605      	mov	r5, r0
 800a1be:	460c      	mov	r4, r1
 800a1c0:	b976      	cbnz	r6, 800a1e0 <_Bfree+0x28>
 800a1c2:	2010      	movs	r0, #16
 800a1c4:	f7ff ff02 	bl	8009fcc <malloc>
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	61e8      	str	r0, [r5, #28]
 800a1cc:	b920      	cbnz	r0, 800a1d8 <_Bfree+0x20>
 800a1ce:	4b09      	ldr	r3, [pc, #36]	@ (800a1f4 <_Bfree+0x3c>)
 800a1d0:	4809      	ldr	r0, [pc, #36]	@ (800a1f8 <_Bfree+0x40>)
 800a1d2:	218f      	movs	r1, #143	@ 0x8f
 800a1d4:	f000 ff44 	bl	800b060 <__assert_func>
 800a1d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1dc:	6006      	str	r6, [r0, #0]
 800a1de:	60c6      	str	r6, [r0, #12]
 800a1e0:	b13c      	cbz	r4, 800a1f2 <_Bfree+0x3a>
 800a1e2:	69eb      	ldr	r3, [r5, #28]
 800a1e4:	6862      	ldr	r2, [r4, #4]
 800a1e6:	68db      	ldr	r3, [r3, #12]
 800a1e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a1ec:	6021      	str	r1, [r4, #0]
 800a1ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a1f2:	bd70      	pop	{r4, r5, r6, pc}
 800a1f4:	0800b52d 	.word	0x0800b52d
 800a1f8:	0800b5ad 	.word	0x0800b5ad

0800a1fc <__multadd>:
 800a1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a200:	690d      	ldr	r5, [r1, #16]
 800a202:	4607      	mov	r7, r0
 800a204:	460c      	mov	r4, r1
 800a206:	461e      	mov	r6, r3
 800a208:	f101 0c14 	add.w	ip, r1, #20
 800a20c:	2000      	movs	r0, #0
 800a20e:	f8dc 3000 	ldr.w	r3, [ip]
 800a212:	b299      	uxth	r1, r3
 800a214:	fb02 6101 	mla	r1, r2, r1, r6
 800a218:	0c1e      	lsrs	r6, r3, #16
 800a21a:	0c0b      	lsrs	r3, r1, #16
 800a21c:	fb02 3306 	mla	r3, r2, r6, r3
 800a220:	b289      	uxth	r1, r1
 800a222:	3001      	adds	r0, #1
 800a224:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a228:	4285      	cmp	r5, r0
 800a22a:	f84c 1b04 	str.w	r1, [ip], #4
 800a22e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a232:	dcec      	bgt.n	800a20e <__multadd+0x12>
 800a234:	b30e      	cbz	r6, 800a27a <__multadd+0x7e>
 800a236:	68a3      	ldr	r3, [r4, #8]
 800a238:	42ab      	cmp	r3, r5
 800a23a:	dc19      	bgt.n	800a270 <__multadd+0x74>
 800a23c:	6861      	ldr	r1, [r4, #4]
 800a23e:	4638      	mov	r0, r7
 800a240:	3101      	adds	r1, #1
 800a242:	f7ff ff79 	bl	800a138 <_Balloc>
 800a246:	4680      	mov	r8, r0
 800a248:	b928      	cbnz	r0, 800a256 <__multadd+0x5a>
 800a24a:	4602      	mov	r2, r0
 800a24c:	4b0c      	ldr	r3, [pc, #48]	@ (800a280 <__multadd+0x84>)
 800a24e:	480d      	ldr	r0, [pc, #52]	@ (800a284 <__multadd+0x88>)
 800a250:	21ba      	movs	r1, #186	@ 0xba
 800a252:	f000 ff05 	bl	800b060 <__assert_func>
 800a256:	6922      	ldr	r2, [r4, #16]
 800a258:	3202      	adds	r2, #2
 800a25a:	f104 010c 	add.w	r1, r4, #12
 800a25e:	0092      	lsls	r2, r2, #2
 800a260:	300c      	adds	r0, #12
 800a262:	f000 feef 	bl	800b044 <memcpy>
 800a266:	4621      	mov	r1, r4
 800a268:	4638      	mov	r0, r7
 800a26a:	f7ff ffa5 	bl	800a1b8 <_Bfree>
 800a26e:	4644      	mov	r4, r8
 800a270:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a274:	3501      	adds	r5, #1
 800a276:	615e      	str	r6, [r3, #20]
 800a278:	6125      	str	r5, [r4, #16]
 800a27a:	4620      	mov	r0, r4
 800a27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a280:	0800b59c 	.word	0x0800b59c
 800a284:	0800b5ad 	.word	0x0800b5ad

0800a288 <__hi0bits>:
 800a288:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a28c:	4603      	mov	r3, r0
 800a28e:	bf36      	itet	cc
 800a290:	0403      	lslcc	r3, r0, #16
 800a292:	2000      	movcs	r0, #0
 800a294:	2010      	movcc	r0, #16
 800a296:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a29a:	bf3c      	itt	cc
 800a29c:	021b      	lslcc	r3, r3, #8
 800a29e:	3008      	addcc	r0, #8
 800a2a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a2a4:	bf3c      	itt	cc
 800a2a6:	011b      	lslcc	r3, r3, #4
 800a2a8:	3004      	addcc	r0, #4
 800a2aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2ae:	bf3c      	itt	cc
 800a2b0:	009b      	lslcc	r3, r3, #2
 800a2b2:	3002      	addcc	r0, #2
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	db05      	blt.n	800a2c4 <__hi0bits+0x3c>
 800a2b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a2bc:	f100 0001 	add.w	r0, r0, #1
 800a2c0:	bf08      	it	eq
 800a2c2:	2020      	moveq	r0, #32
 800a2c4:	4770      	bx	lr

0800a2c6 <__lo0bits>:
 800a2c6:	6803      	ldr	r3, [r0, #0]
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	f013 0007 	ands.w	r0, r3, #7
 800a2ce:	d00b      	beq.n	800a2e8 <__lo0bits+0x22>
 800a2d0:	07d9      	lsls	r1, r3, #31
 800a2d2:	d421      	bmi.n	800a318 <__lo0bits+0x52>
 800a2d4:	0798      	lsls	r0, r3, #30
 800a2d6:	bf49      	itett	mi
 800a2d8:	085b      	lsrmi	r3, r3, #1
 800a2da:	089b      	lsrpl	r3, r3, #2
 800a2dc:	2001      	movmi	r0, #1
 800a2de:	6013      	strmi	r3, [r2, #0]
 800a2e0:	bf5c      	itt	pl
 800a2e2:	6013      	strpl	r3, [r2, #0]
 800a2e4:	2002      	movpl	r0, #2
 800a2e6:	4770      	bx	lr
 800a2e8:	b299      	uxth	r1, r3
 800a2ea:	b909      	cbnz	r1, 800a2f0 <__lo0bits+0x2a>
 800a2ec:	0c1b      	lsrs	r3, r3, #16
 800a2ee:	2010      	movs	r0, #16
 800a2f0:	b2d9      	uxtb	r1, r3
 800a2f2:	b909      	cbnz	r1, 800a2f8 <__lo0bits+0x32>
 800a2f4:	3008      	adds	r0, #8
 800a2f6:	0a1b      	lsrs	r3, r3, #8
 800a2f8:	0719      	lsls	r1, r3, #28
 800a2fa:	bf04      	itt	eq
 800a2fc:	091b      	lsreq	r3, r3, #4
 800a2fe:	3004      	addeq	r0, #4
 800a300:	0799      	lsls	r1, r3, #30
 800a302:	bf04      	itt	eq
 800a304:	089b      	lsreq	r3, r3, #2
 800a306:	3002      	addeq	r0, #2
 800a308:	07d9      	lsls	r1, r3, #31
 800a30a:	d403      	bmi.n	800a314 <__lo0bits+0x4e>
 800a30c:	085b      	lsrs	r3, r3, #1
 800a30e:	f100 0001 	add.w	r0, r0, #1
 800a312:	d003      	beq.n	800a31c <__lo0bits+0x56>
 800a314:	6013      	str	r3, [r2, #0]
 800a316:	4770      	bx	lr
 800a318:	2000      	movs	r0, #0
 800a31a:	4770      	bx	lr
 800a31c:	2020      	movs	r0, #32
 800a31e:	4770      	bx	lr

0800a320 <__i2b>:
 800a320:	b510      	push	{r4, lr}
 800a322:	460c      	mov	r4, r1
 800a324:	2101      	movs	r1, #1
 800a326:	f7ff ff07 	bl	800a138 <_Balloc>
 800a32a:	4602      	mov	r2, r0
 800a32c:	b928      	cbnz	r0, 800a33a <__i2b+0x1a>
 800a32e:	4b05      	ldr	r3, [pc, #20]	@ (800a344 <__i2b+0x24>)
 800a330:	4805      	ldr	r0, [pc, #20]	@ (800a348 <__i2b+0x28>)
 800a332:	f240 1145 	movw	r1, #325	@ 0x145
 800a336:	f000 fe93 	bl	800b060 <__assert_func>
 800a33a:	2301      	movs	r3, #1
 800a33c:	6144      	str	r4, [r0, #20]
 800a33e:	6103      	str	r3, [r0, #16]
 800a340:	bd10      	pop	{r4, pc}
 800a342:	bf00      	nop
 800a344:	0800b59c 	.word	0x0800b59c
 800a348:	0800b5ad 	.word	0x0800b5ad

0800a34c <__multiply>:
 800a34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a350:	4614      	mov	r4, r2
 800a352:	690a      	ldr	r2, [r1, #16]
 800a354:	6923      	ldr	r3, [r4, #16]
 800a356:	429a      	cmp	r2, r3
 800a358:	bfa8      	it	ge
 800a35a:	4623      	movge	r3, r4
 800a35c:	460f      	mov	r7, r1
 800a35e:	bfa4      	itt	ge
 800a360:	460c      	movge	r4, r1
 800a362:	461f      	movge	r7, r3
 800a364:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a368:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a36c:	68a3      	ldr	r3, [r4, #8]
 800a36e:	6861      	ldr	r1, [r4, #4]
 800a370:	eb0a 0609 	add.w	r6, sl, r9
 800a374:	42b3      	cmp	r3, r6
 800a376:	b085      	sub	sp, #20
 800a378:	bfb8      	it	lt
 800a37a:	3101      	addlt	r1, #1
 800a37c:	f7ff fedc 	bl	800a138 <_Balloc>
 800a380:	b930      	cbnz	r0, 800a390 <__multiply+0x44>
 800a382:	4602      	mov	r2, r0
 800a384:	4b44      	ldr	r3, [pc, #272]	@ (800a498 <__multiply+0x14c>)
 800a386:	4845      	ldr	r0, [pc, #276]	@ (800a49c <__multiply+0x150>)
 800a388:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a38c:	f000 fe68 	bl	800b060 <__assert_func>
 800a390:	f100 0514 	add.w	r5, r0, #20
 800a394:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a398:	462b      	mov	r3, r5
 800a39a:	2200      	movs	r2, #0
 800a39c:	4543      	cmp	r3, r8
 800a39e:	d321      	bcc.n	800a3e4 <__multiply+0x98>
 800a3a0:	f107 0114 	add.w	r1, r7, #20
 800a3a4:	f104 0214 	add.w	r2, r4, #20
 800a3a8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a3ac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a3b0:	9302      	str	r3, [sp, #8]
 800a3b2:	1b13      	subs	r3, r2, r4
 800a3b4:	3b15      	subs	r3, #21
 800a3b6:	f023 0303 	bic.w	r3, r3, #3
 800a3ba:	3304      	adds	r3, #4
 800a3bc:	f104 0715 	add.w	r7, r4, #21
 800a3c0:	42ba      	cmp	r2, r7
 800a3c2:	bf38      	it	cc
 800a3c4:	2304      	movcc	r3, #4
 800a3c6:	9301      	str	r3, [sp, #4]
 800a3c8:	9b02      	ldr	r3, [sp, #8]
 800a3ca:	9103      	str	r1, [sp, #12]
 800a3cc:	428b      	cmp	r3, r1
 800a3ce:	d80c      	bhi.n	800a3ea <__multiply+0x9e>
 800a3d0:	2e00      	cmp	r6, #0
 800a3d2:	dd03      	ble.n	800a3dc <__multiply+0x90>
 800a3d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d05b      	beq.n	800a494 <__multiply+0x148>
 800a3dc:	6106      	str	r6, [r0, #16]
 800a3de:	b005      	add	sp, #20
 800a3e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3e4:	f843 2b04 	str.w	r2, [r3], #4
 800a3e8:	e7d8      	b.n	800a39c <__multiply+0x50>
 800a3ea:	f8b1 a000 	ldrh.w	sl, [r1]
 800a3ee:	f1ba 0f00 	cmp.w	sl, #0
 800a3f2:	d024      	beq.n	800a43e <__multiply+0xf2>
 800a3f4:	f104 0e14 	add.w	lr, r4, #20
 800a3f8:	46a9      	mov	r9, r5
 800a3fa:	f04f 0c00 	mov.w	ip, #0
 800a3fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a402:	f8d9 3000 	ldr.w	r3, [r9]
 800a406:	fa1f fb87 	uxth.w	fp, r7
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	fb0a 330b 	mla	r3, sl, fp, r3
 800a410:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a414:	f8d9 7000 	ldr.w	r7, [r9]
 800a418:	4463      	add	r3, ip
 800a41a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a41e:	fb0a c70b 	mla	r7, sl, fp, ip
 800a422:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a426:	b29b      	uxth	r3, r3
 800a428:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a42c:	4572      	cmp	r2, lr
 800a42e:	f849 3b04 	str.w	r3, [r9], #4
 800a432:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a436:	d8e2      	bhi.n	800a3fe <__multiply+0xb2>
 800a438:	9b01      	ldr	r3, [sp, #4]
 800a43a:	f845 c003 	str.w	ip, [r5, r3]
 800a43e:	9b03      	ldr	r3, [sp, #12]
 800a440:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a444:	3104      	adds	r1, #4
 800a446:	f1b9 0f00 	cmp.w	r9, #0
 800a44a:	d021      	beq.n	800a490 <__multiply+0x144>
 800a44c:	682b      	ldr	r3, [r5, #0]
 800a44e:	f104 0c14 	add.w	ip, r4, #20
 800a452:	46ae      	mov	lr, r5
 800a454:	f04f 0a00 	mov.w	sl, #0
 800a458:	f8bc b000 	ldrh.w	fp, [ip]
 800a45c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a460:	fb09 770b 	mla	r7, r9, fp, r7
 800a464:	4457      	add	r7, sl
 800a466:	b29b      	uxth	r3, r3
 800a468:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a46c:	f84e 3b04 	str.w	r3, [lr], #4
 800a470:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a474:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a478:	f8be 3000 	ldrh.w	r3, [lr]
 800a47c:	fb09 330a 	mla	r3, r9, sl, r3
 800a480:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a484:	4562      	cmp	r2, ip
 800a486:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a48a:	d8e5      	bhi.n	800a458 <__multiply+0x10c>
 800a48c:	9f01      	ldr	r7, [sp, #4]
 800a48e:	51eb      	str	r3, [r5, r7]
 800a490:	3504      	adds	r5, #4
 800a492:	e799      	b.n	800a3c8 <__multiply+0x7c>
 800a494:	3e01      	subs	r6, #1
 800a496:	e79b      	b.n	800a3d0 <__multiply+0x84>
 800a498:	0800b59c 	.word	0x0800b59c
 800a49c:	0800b5ad 	.word	0x0800b5ad

0800a4a0 <__pow5mult>:
 800a4a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4a4:	4615      	mov	r5, r2
 800a4a6:	f012 0203 	ands.w	r2, r2, #3
 800a4aa:	4607      	mov	r7, r0
 800a4ac:	460e      	mov	r6, r1
 800a4ae:	d007      	beq.n	800a4c0 <__pow5mult+0x20>
 800a4b0:	4c25      	ldr	r4, [pc, #148]	@ (800a548 <__pow5mult+0xa8>)
 800a4b2:	3a01      	subs	r2, #1
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a4ba:	f7ff fe9f 	bl	800a1fc <__multadd>
 800a4be:	4606      	mov	r6, r0
 800a4c0:	10ad      	asrs	r5, r5, #2
 800a4c2:	d03d      	beq.n	800a540 <__pow5mult+0xa0>
 800a4c4:	69fc      	ldr	r4, [r7, #28]
 800a4c6:	b97c      	cbnz	r4, 800a4e8 <__pow5mult+0x48>
 800a4c8:	2010      	movs	r0, #16
 800a4ca:	f7ff fd7f 	bl	8009fcc <malloc>
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	61f8      	str	r0, [r7, #28]
 800a4d2:	b928      	cbnz	r0, 800a4e0 <__pow5mult+0x40>
 800a4d4:	4b1d      	ldr	r3, [pc, #116]	@ (800a54c <__pow5mult+0xac>)
 800a4d6:	481e      	ldr	r0, [pc, #120]	@ (800a550 <__pow5mult+0xb0>)
 800a4d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a4dc:	f000 fdc0 	bl	800b060 <__assert_func>
 800a4e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a4e4:	6004      	str	r4, [r0, #0]
 800a4e6:	60c4      	str	r4, [r0, #12]
 800a4e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a4ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a4f0:	b94c      	cbnz	r4, 800a506 <__pow5mult+0x66>
 800a4f2:	f240 2171 	movw	r1, #625	@ 0x271
 800a4f6:	4638      	mov	r0, r7
 800a4f8:	f7ff ff12 	bl	800a320 <__i2b>
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	f8c8 0008 	str.w	r0, [r8, #8]
 800a502:	4604      	mov	r4, r0
 800a504:	6003      	str	r3, [r0, #0]
 800a506:	f04f 0900 	mov.w	r9, #0
 800a50a:	07eb      	lsls	r3, r5, #31
 800a50c:	d50a      	bpl.n	800a524 <__pow5mult+0x84>
 800a50e:	4631      	mov	r1, r6
 800a510:	4622      	mov	r2, r4
 800a512:	4638      	mov	r0, r7
 800a514:	f7ff ff1a 	bl	800a34c <__multiply>
 800a518:	4631      	mov	r1, r6
 800a51a:	4680      	mov	r8, r0
 800a51c:	4638      	mov	r0, r7
 800a51e:	f7ff fe4b 	bl	800a1b8 <_Bfree>
 800a522:	4646      	mov	r6, r8
 800a524:	106d      	asrs	r5, r5, #1
 800a526:	d00b      	beq.n	800a540 <__pow5mult+0xa0>
 800a528:	6820      	ldr	r0, [r4, #0]
 800a52a:	b938      	cbnz	r0, 800a53c <__pow5mult+0x9c>
 800a52c:	4622      	mov	r2, r4
 800a52e:	4621      	mov	r1, r4
 800a530:	4638      	mov	r0, r7
 800a532:	f7ff ff0b 	bl	800a34c <__multiply>
 800a536:	6020      	str	r0, [r4, #0]
 800a538:	f8c0 9000 	str.w	r9, [r0]
 800a53c:	4604      	mov	r4, r0
 800a53e:	e7e4      	b.n	800a50a <__pow5mult+0x6a>
 800a540:	4630      	mov	r0, r6
 800a542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a546:	bf00      	nop
 800a548:	0800b608 	.word	0x0800b608
 800a54c:	0800b52d 	.word	0x0800b52d
 800a550:	0800b5ad 	.word	0x0800b5ad

0800a554 <__lshift>:
 800a554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a558:	460c      	mov	r4, r1
 800a55a:	6849      	ldr	r1, [r1, #4]
 800a55c:	6923      	ldr	r3, [r4, #16]
 800a55e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a562:	68a3      	ldr	r3, [r4, #8]
 800a564:	4607      	mov	r7, r0
 800a566:	4691      	mov	r9, r2
 800a568:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a56c:	f108 0601 	add.w	r6, r8, #1
 800a570:	42b3      	cmp	r3, r6
 800a572:	db0b      	blt.n	800a58c <__lshift+0x38>
 800a574:	4638      	mov	r0, r7
 800a576:	f7ff fddf 	bl	800a138 <_Balloc>
 800a57a:	4605      	mov	r5, r0
 800a57c:	b948      	cbnz	r0, 800a592 <__lshift+0x3e>
 800a57e:	4602      	mov	r2, r0
 800a580:	4b28      	ldr	r3, [pc, #160]	@ (800a624 <__lshift+0xd0>)
 800a582:	4829      	ldr	r0, [pc, #164]	@ (800a628 <__lshift+0xd4>)
 800a584:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a588:	f000 fd6a 	bl	800b060 <__assert_func>
 800a58c:	3101      	adds	r1, #1
 800a58e:	005b      	lsls	r3, r3, #1
 800a590:	e7ee      	b.n	800a570 <__lshift+0x1c>
 800a592:	2300      	movs	r3, #0
 800a594:	f100 0114 	add.w	r1, r0, #20
 800a598:	f100 0210 	add.w	r2, r0, #16
 800a59c:	4618      	mov	r0, r3
 800a59e:	4553      	cmp	r3, sl
 800a5a0:	db33      	blt.n	800a60a <__lshift+0xb6>
 800a5a2:	6920      	ldr	r0, [r4, #16]
 800a5a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a5a8:	f104 0314 	add.w	r3, r4, #20
 800a5ac:	f019 091f 	ands.w	r9, r9, #31
 800a5b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a5b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a5b8:	d02b      	beq.n	800a612 <__lshift+0xbe>
 800a5ba:	f1c9 0e20 	rsb	lr, r9, #32
 800a5be:	468a      	mov	sl, r1
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	6818      	ldr	r0, [r3, #0]
 800a5c4:	fa00 f009 	lsl.w	r0, r0, r9
 800a5c8:	4310      	orrs	r0, r2
 800a5ca:	f84a 0b04 	str.w	r0, [sl], #4
 800a5ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5d2:	459c      	cmp	ip, r3
 800a5d4:	fa22 f20e 	lsr.w	r2, r2, lr
 800a5d8:	d8f3      	bhi.n	800a5c2 <__lshift+0x6e>
 800a5da:	ebac 0304 	sub.w	r3, ip, r4
 800a5de:	3b15      	subs	r3, #21
 800a5e0:	f023 0303 	bic.w	r3, r3, #3
 800a5e4:	3304      	adds	r3, #4
 800a5e6:	f104 0015 	add.w	r0, r4, #21
 800a5ea:	4584      	cmp	ip, r0
 800a5ec:	bf38      	it	cc
 800a5ee:	2304      	movcc	r3, #4
 800a5f0:	50ca      	str	r2, [r1, r3]
 800a5f2:	b10a      	cbz	r2, 800a5f8 <__lshift+0xa4>
 800a5f4:	f108 0602 	add.w	r6, r8, #2
 800a5f8:	3e01      	subs	r6, #1
 800a5fa:	4638      	mov	r0, r7
 800a5fc:	612e      	str	r6, [r5, #16]
 800a5fe:	4621      	mov	r1, r4
 800a600:	f7ff fdda 	bl	800a1b8 <_Bfree>
 800a604:	4628      	mov	r0, r5
 800a606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a60a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a60e:	3301      	adds	r3, #1
 800a610:	e7c5      	b.n	800a59e <__lshift+0x4a>
 800a612:	3904      	subs	r1, #4
 800a614:	f853 2b04 	ldr.w	r2, [r3], #4
 800a618:	f841 2f04 	str.w	r2, [r1, #4]!
 800a61c:	459c      	cmp	ip, r3
 800a61e:	d8f9      	bhi.n	800a614 <__lshift+0xc0>
 800a620:	e7ea      	b.n	800a5f8 <__lshift+0xa4>
 800a622:	bf00      	nop
 800a624:	0800b59c 	.word	0x0800b59c
 800a628:	0800b5ad 	.word	0x0800b5ad

0800a62c <__mcmp>:
 800a62c:	690a      	ldr	r2, [r1, #16]
 800a62e:	4603      	mov	r3, r0
 800a630:	6900      	ldr	r0, [r0, #16]
 800a632:	1a80      	subs	r0, r0, r2
 800a634:	b530      	push	{r4, r5, lr}
 800a636:	d10e      	bne.n	800a656 <__mcmp+0x2a>
 800a638:	3314      	adds	r3, #20
 800a63a:	3114      	adds	r1, #20
 800a63c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a640:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a644:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a648:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a64c:	4295      	cmp	r5, r2
 800a64e:	d003      	beq.n	800a658 <__mcmp+0x2c>
 800a650:	d205      	bcs.n	800a65e <__mcmp+0x32>
 800a652:	f04f 30ff 	mov.w	r0, #4294967295
 800a656:	bd30      	pop	{r4, r5, pc}
 800a658:	42a3      	cmp	r3, r4
 800a65a:	d3f3      	bcc.n	800a644 <__mcmp+0x18>
 800a65c:	e7fb      	b.n	800a656 <__mcmp+0x2a>
 800a65e:	2001      	movs	r0, #1
 800a660:	e7f9      	b.n	800a656 <__mcmp+0x2a>
	...

0800a664 <__mdiff>:
 800a664:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a668:	4689      	mov	r9, r1
 800a66a:	4606      	mov	r6, r0
 800a66c:	4611      	mov	r1, r2
 800a66e:	4648      	mov	r0, r9
 800a670:	4614      	mov	r4, r2
 800a672:	f7ff ffdb 	bl	800a62c <__mcmp>
 800a676:	1e05      	subs	r5, r0, #0
 800a678:	d112      	bne.n	800a6a0 <__mdiff+0x3c>
 800a67a:	4629      	mov	r1, r5
 800a67c:	4630      	mov	r0, r6
 800a67e:	f7ff fd5b 	bl	800a138 <_Balloc>
 800a682:	4602      	mov	r2, r0
 800a684:	b928      	cbnz	r0, 800a692 <__mdiff+0x2e>
 800a686:	4b3f      	ldr	r3, [pc, #252]	@ (800a784 <__mdiff+0x120>)
 800a688:	f240 2137 	movw	r1, #567	@ 0x237
 800a68c:	483e      	ldr	r0, [pc, #248]	@ (800a788 <__mdiff+0x124>)
 800a68e:	f000 fce7 	bl	800b060 <__assert_func>
 800a692:	2301      	movs	r3, #1
 800a694:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a698:	4610      	mov	r0, r2
 800a69a:	b003      	add	sp, #12
 800a69c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6a0:	bfbc      	itt	lt
 800a6a2:	464b      	movlt	r3, r9
 800a6a4:	46a1      	movlt	r9, r4
 800a6a6:	4630      	mov	r0, r6
 800a6a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a6ac:	bfba      	itte	lt
 800a6ae:	461c      	movlt	r4, r3
 800a6b0:	2501      	movlt	r5, #1
 800a6b2:	2500      	movge	r5, #0
 800a6b4:	f7ff fd40 	bl	800a138 <_Balloc>
 800a6b8:	4602      	mov	r2, r0
 800a6ba:	b918      	cbnz	r0, 800a6c4 <__mdiff+0x60>
 800a6bc:	4b31      	ldr	r3, [pc, #196]	@ (800a784 <__mdiff+0x120>)
 800a6be:	f240 2145 	movw	r1, #581	@ 0x245
 800a6c2:	e7e3      	b.n	800a68c <__mdiff+0x28>
 800a6c4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a6c8:	6926      	ldr	r6, [r4, #16]
 800a6ca:	60c5      	str	r5, [r0, #12]
 800a6cc:	f109 0310 	add.w	r3, r9, #16
 800a6d0:	f109 0514 	add.w	r5, r9, #20
 800a6d4:	f104 0e14 	add.w	lr, r4, #20
 800a6d8:	f100 0b14 	add.w	fp, r0, #20
 800a6dc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a6e0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a6e4:	9301      	str	r3, [sp, #4]
 800a6e6:	46d9      	mov	r9, fp
 800a6e8:	f04f 0c00 	mov.w	ip, #0
 800a6ec:	9b01      	ldr	r3, [sp, #4]
 800a6ee:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a6f2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a6f6:	9301      	str	r3, [sp, #4]
 800a6f8:	fa1f f38a 	uxth.w	r3, sl
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	b283      	uxth	r3, r0
 800a700:	1acb      	subs	r3, r1, r3
 800a702:	0c00      	lsrs	r0, r0, #16
 800a704:	4463      	add	r3, ip
 800a706:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a70a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a70e:	b29b      	uxth	r3, r3
 800a710:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a714:	4576      	cmp	r6, lr
 800a716:	f849 3b04 	str.w	r3, [r9], #4
 800a71a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a71e:	d8e5      	bhi.n	800a6ec <__mdiff+0x88>
 800a720:	1b33      	subs	r3, r6, r4
 800a722:	3b15      	subs	r3, #21
 800a724:	f023 0303 	bic.w	r3, r3, #3
 800a728:	3415      	adds	r4, #21
 800a72a:	3304      	adds	r3, #4
 800a72c:	42a6      	cmp	r6, r4
 800a72e:	bf38      	it	cc
 800a730:	2304      	movcc	r3, #4
 800a732:	441d      	add	r5, r3
 800a734:	445b      	add	r3, fp
 800a736:	461e      	mov	r6, r3
 800a738:	462c      	mov	r4, r5
 800a73a:	4544      	cmp	r4, r8
 800a73c:	d30e      	bcc.n	800a75c <__mdiff+0xf8>
 800a73e:	f108 0103 	add.w	r1, r8, #3
 800a742:	1b49      	subs	r1, r1, r5
 800a744:	f021 0103 	bic.w	r1, r1, #3
 800a748:	3d03      	subs	r5, #3
 800a74a:	45a8      	cmp	r8, r5
 800a74c:	bf38      	it	cc
 800a74e:	2100      	movcc	r1, #0
 800a750:	440b      	add	r3, r1
 800a752:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a756:	b191      	cbz	r1, 800a77e <__mdiff+0x11a>
 800a758:	6117      	str	r7, [r2, #16]
 800a75a:	e79d      	b.n	800a698 <__mdiff+0x34>
 800a75c:	f854 1b04 	ldr.w	r1, [r4], #4
 800a760:	46e6      	mov	lr, ip
 800a762:	0c08      	lsrs	r0, r1, #16
 800a764:	fa1c fc81 	uxtah	ip, ip, r1
 800a768:	4471      	add	r1, lr
 800a76a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a76e:	b289      	uxth	r1, r1
 800a770:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a774:	f846 1b04 	str.w	r1, [r6], #4
 800a778:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a77c:	e7dd      	b.n	800a73a <__mdiff+0xd6>
 800a77e:	3f01      	subs	r7, #1
 800a780:	e7e7      	b.n	800a752 <__mdiff+0xee>
 800a782:	bf00      	nop
 800a784:	0800b59c 	.word	0x0800b59c
 800a788:	0800b5ad 	.word	0x0800b5ad

0800a78c <__d2b>:
 800a78c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a790:	460f      	mov	r7, r1
 800a792:	2101      	movs	r1, #1
 800a794:	ec59 8b10 	vmov	r8, r9, d0
 800a798:	4616      	mov	r6, r2
 800a79a:	f7ff fccd 	bl	800a138 <_Balloc>
 800a79e:	4604      	mov	r4, r0
 800a7a0:	b930      	cbnz	r0, 800a7b0 <__d2b+0x24>
 800a7a2:	4602      	mov	r2, r0
 800a7a4:	4b23      	ldr	r3, [pc, #140]	@ (800a834 <__d2b+0xa8>)
 800a7a6:	4824      	ldr	r0, [pc, #144]	@ (800a838 <__d2b+0xac>)
 800a7a8:	f240 310f 	movw	r1, #783	@ 0x30f
 800a7ac:	f000 fc58 	bl	800b060 <__assert_func>
 800a7b0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a7b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a7b8:	b10d      	cbz	r5, 800a7be <__d2b+0x32>
 800a7ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a7be:	9301      	str	r3, [sp, #4]
 800a7c0:	f1b8 0300 	subs.w	r3, r8, #0
 800a7c4:	d023      	beq.n	800a80e <__d2b+0x82>
 800a7c6:	4668      	mov	r0, sp
 800a7c8:	9300      	str	r3, [sp, #0]
 800a7ca:	f7ff fd7c 	bl	800a2c6 <__lo0bits>
 800a7ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a7d2:	b1d0      	cbz	r0, 800a80a <__d2b+0x7e>
 800a7d4:	f1c0 0320 	rsb	r3, r0, #32
 800a7d8:	fa02 f303 	lsl.w	r3, r2, r3
 800a7dc:	430b      	orrs	r3, r1
 800a7de:	40c2      	lsrs	r2, r0
 800a7e0:	6163      	str	r3, [r4, #20]
 800a7e2:	9201      	str	r2, [sp, #4]
 800a7e4:	9b01      	ldr	r3, [sp, #4]
 800a7e6:	61a3      	str	r3, [r4, #24]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	bf0c      	ite	eq
 800a7ec:	2201      	moveq	r2, #1
 800a7ee:	2202      	movne	r2, #2
 800a7f0:	6122      	str	r2, [r4, #16]
 800a7f2:	b1a5      	cbz	r5, 800a81e <__d2b+0x92>
 800a7f4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a7f8:	4405      	add	r5, r0
 800a7fa:	603d      	str	r5, [r7, #0]
 800a7fc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a800:	6030      	str	r0, [r6, #0]
 800a802:	4620      	mov	r0, r4
 800a804:	b003      	add	sp, #12
 800a806:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a80a:	6161      	str	r1, [r4, #20]
 800a80c:	e7ea      	b.n	800a7e4 <__d2b+0x58>
 800a80e:	a801      	add	r0, sp, #4
 800a810:	f7ff fd59 	bl	800a2c6 <__lo0bits>
 800a814:	9b01      	ldr	r3, [sp, #4]
 800a816:	6163      	str	r3, [r4, #20]
 800a818:	3020      	adds	r0, #32
 800a81a:	2201      	movs	r2, #1
 800a81c:	e7e8      	b.n	800a7f0 <__d2b+0x64>
 800a81e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a822:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a826:	6038      	str	r0, [r7, #0]
 800a828:	6918      	ldr	r0, [r3, #16]
 800a82a:	f7ff fd2d 	bl	800a288 <__hi0bits>
 800a82e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a832:	e7e5      	b.n	800a800 <__d2b+0x74>
 800a834:	0800b59c 	.word	0x0800b59c
 800a838:	0800b5ad 	.word	0x0800b5ad

0800a83c <__ssputs_r>:
 800a83c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a840:	688e      	ldr	r6, [r1, #8]
 800a842:	461f      	mov	r7, r3
 800a844:	42be      	cmp	r6, r7
 800a846:	680b      	ldr	r3, [r1, #0]
 800a848:	4682      	mov	sl, r0
 800a84a:	460c      	mov	r4, r1
 800a84c:	4690      	mov	r8, r2
 800a84e:	d82d      	bhi.n	800a8ac <__ssputs_r+0x70>
 800a850:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a854:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a858:	d026      	beq.n	800a8a8 <__ssputs_r+0x6c>
 800a85a:	6965      	ldr	r5, [r4, #20]
 800a85c:	6909      	ldr	r1, [r1, #16]
 800a85e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a862:	eba3 0901 	sub.w	r9, r3, r1
 800a866:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a86a:	1c7b      	adds	r3, r7, #1
 800a86c:	444b      	add	r3, r9
 800a86e:	106d      	asrs	r5, r5, #1
 800a870:	429d      	cmp	r5, r3
 800a872:	bf38      	it	cc
 800a874:	461d      	movcc	r5, r3
 800a876:	0553      	lsls	r3, r2, #21
 800a878:	d527      	bpl.n	800a8ca <__ssputs_r+0x8e>
 800a87a:	4629      	mov	r1, r5
 800a87c:	f7ff fbd0 	bl	800a020 <_malloc_r>
 800a880:	4606      	mov	r6, r0
 800a882:	b360      	cbz	r0, 800a8de <__ssputs_r+0xa2>
 800a884:	6921      	ldr	r1, [r4, #16]
 800a886:	464a      	mov	r2, r9
 800a888:	f000 fbdc 	bl	800b044 <memcpy>
 800a88c:	89a3      	ldrh	r3, [r4, #12]
 800a88e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a892:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a896:	81a3      	strh	r3, [r4, #12]
 800a898:	6126      	str	r6, [r4, #16]
 800a89a:	6165      	str	r5, [r4, #20]
 800a89c:	444e      	add	r6, r9
 800a89e:	eba5 0509 	sub.w	r5, r5, r9
 800a8a2:	6026      	str	r6, [r4, #0]
 800a8a4:	60a5      	str	r5, [r4, #8]
 800a8a6:	463e      	mov	r6, r7
 800a8a8:	42be      	cmp	r6, r7
 800a8aa:	d900      	bls.n	800a8ae <__ssputs_r+0x72>
 800a8ac:	463e      	mov	r6, r7
 800a8ae:	6820      	ldr	r0, [r4, #0]
 800a8b0:	4632      	mov	r2, r6
 800a8b2:	4641      	mov	r1, r8
 800a8b4:	f000 fb9c 	bl	800aff0 <memmove>
 800a8b8:	68a3      	ldr	r3, [r4, #8]
 800a8ba:	1b9b      	subs	r3, r3, r6
 800a8bc:	60a3      	str	r3, [r4, #8]
 800a8be:	6823      	ldr	r3, [r4, #0]
 800a8c0:	4433      	add	r3, r6
 800a8c2:	6023      	str	r3, [r4, #0]
 800a8c4:	2000      	movs	r0, #0
 800a8c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8ca:	462a      	mov	r2, r5
 800a8cc:	f000 fc0c 	bl	800b0e8 <_realloc_r>
 800a8d0:	4606      	mov	r6, r0
 800a8d2:	2800      	cmp	r0, #0
 800a8d4:	d1e0      	bne.n	800a898 <__ssputs_r+0x5c>
 800a8d6:	6921      	ldr	r1, [r4, #16]
 800a8d8:	4650      	mov	r0, sl
 800a8da:	f7ff fb2d 	bl	8009f38 <_free_r>
 800a8de:	230c      	movs	r3, #12
 800a8e0:	f8ca 3000 	str.w	r3, [sl]
 800a8e4:	89a3      	ldrh	r3, [r4, #12]
 800a8e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8ea:	81a3      	strh	r3, [r4, #12]
 800a8ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a8f0:	e7e9      	b.n	800a8c6 <__ssputs_r+0x8a>
	...

0800a8f4 <_svfiprintf_r>:
 800a8f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8f8:	4698      	mov	r8, r3
 800a8fa:	898b      	ldrh	r3, [r1, #12]
 800a8fc:	061b      	lsls	r3, r3, #24
 800a8fe:	b09d      	sub	sp, #116	@ 0x74
 800a900:	4607      	mov	r7, r0
 800a902:	460d      	mov	r5, r1
 800a904:	4614      	mov	r4, r2
 800a906:	d510      	bpl.n	800a92a <_svfiprintf_r+0x36>
 800a908:	690b      	ldr	r3, [r1, #16]
 800a90a:	b973      	cbnz	r3, 800a92a <_svfiprintf_r+0x36>
 800a90c:	2140      	movs	r1, #64	@ 0x40
 800a90e:	f7ff fb87 	bl	800a020 <_malloc_r>
 800a912:	6028      	str	r0, [r5, #0]
 800a914:	6128      	str	r0, [r5, #16]
 800a916:	b930      	cbnz	r0, 800a926 <_svfiprintf_r+0x32>
 800a918:	230c      	movs	r3, #12
 800a91a:	603b      	str	r3, [r7, #0]
 800a91c:	f04f 30ff 	mov.w	r0, #4294967295
 800a920:	b01d      	add	sp, #116	@ 0x74
 800a922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a926:	2340      	movs	r3, #64	@ 0x40
 800a928:	616b      	str	r3, [r5, #20]
 800a92a:	2300      	movs	r3, #0
 800a92c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a92e:	2320      	movs	r3, #32
 800a930:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a934:	f8cd 800c 	str.w	r8, [sp, #12]
 800a938:	2330      	movs	r3, #48	@ 0x30
 800a93a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800aad8 <_svfiprintf_r+0x1e4>
 800a93e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a942:	f04f 0901 	mov.w	r9, #1
 800a946:	4623      	mov	r3, r4
 800a948:	469a      	mov	sl, r3
 800a94a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a94e:	b10a      	cbz	r2, 800a954 <_svfiprintf_r+0x60>
 800a950:	2a25      	cmp	r2, #37	@ 0x25
 800a952:	d1f9      	bne.n	800a948 <_svfiprintf_r+0x54>
 800a954:	ebba 0b04 	subs.w	fp, sl, r4
 800a958:	d00b      	beq.n	800a972 <_svfiprintf_r+0x7e>
 800a95a:	465b      	mov	r3, fp
 800a95c:	4622      	mov	r2, r4
 800a95e:	4629      	mov	r1, r5
 800a960:	4638      	mov	r0, r7
 800a962:	f7ff ff6b 	bl	800a83c <__ssputs_r>
 800a966:	3001      	adds	r0, #1
 800a968:	f000 80a7 	beq.w	800aaba <_svfiprintf_r+0x1c6>
 800a96c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a96e:	445a      	add	r2, fp
 800a970:	9209      	str	r2, [sp, #36]	@ 0x24
 800a972:	f89a 3000 	ldrb.w	r3, [sl]
 800a976:	2b00      	cmp	r3, #0
 800a978:	f000 809f 	beq.w	800aaba <_svfiprintf_r+0x1c6>
 800a97c:	2300      	movs	r3, #0
 800a97e:	f04f 32ff 	mov.w	r2, #4294967295
 800a982:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a986:	f10a 0a01 	add.w	sl, sl, #1
 800a98a:	9304      	str	r3, [sp, #16]
 800a98c:	9307      	str	r3, [sp, #28]
 800a98e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a992:	931a      	str	r3, [sp, #104]	@ 0x68
 800a994:	4654      	mov	r4, sl
 800a996:	2205      	movs	r2, #5
 800a998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a99c:	484e      	ldr	r0, [pc, #312]	@ (800aad8 <_svfiprintf_r+0x1e4>)
 800a99e:	f7f5 fc1f 	bl	80001e0 <memchr>
 800a9a2:	9a04      	ldr	r2, [sp, #16]
 800a9a4:	b9d8      	cbnz	r0, 800a9de <_svfiprintf_r+0xea>
 800a9a6:	06d0      	lsls	r0, r2, #27
 800a9a8:	bf44      	itt	mi
 800a9aa:	2320      	movmi	r3, #32
 800a9ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9b0:	0711      	lsls	r1, r2, #28
 800a9b2:	bf44      	itt	mi
 800a9b4:	232b      	movmi	r3, #43	@ 0x2b
 800a9b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9ba:	f89a 3000 	ldrb.w	r3, [sl]
 800a9be:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9c0:	d015      	beq.n	800a9ee <_svfiprintf_r+0xfa>
 800a9c2:	9a07      	ldr	r2, [sp, #28]
 800a9c4:	4654      	mov	r4, sl
 800a9c6:	2000      	movs	r0, #0
 800a9c8:	f04f 0c0a 	mov.w	ip, #10
 800a9cc:	4621      	mov	r1, r4
 800a9ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9d2:	3b30      	subs	r3, #48	@ 0x30
 800a9d4:	2b09      	cmp	r3, #9
 800a9d6:	d94b      	bls.n	800aa70 <_svfiprintf_r+0x17c>
 800a9d8:	b1b0      	cbz	r0, 800aa08 <_svfiprintf_r+0x114>
 800a9da:	9207      	str	r2, [sp, #28]
 800a9dc:	e014      	b.n	800aa08 <_svfiprintf_r+0x114>
 800a9de:	eba0 0308 	sub.w	r3, r0, r8
 800a9e2:	fa09 f303 	lsl.w	r3, r9, r3
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	9304      	str	r3, [sp, #16]
 800a9ea:	46a2      	mov	sl, r4
 800a9ec:	e7d2      	b.n	800a994 <_svfiprintf_r+0xa0>
 800a9ee:	9b03      	ldr	r3, [sp, #12]
 800a9f0:	1d19      	adds	r1, r3, #4
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	9103      	str	r1, [sp, #12]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	bfbb      	ittet	lt
 800a9fa:	425b      	neglt	r3, r3
 800a9fc:	f042 0202 	orrlt.w	r2, r2, #2
 800aa00:	9307      	strge	r3, [sp, #28]
 800aa02:	9307      	strlt	r3, [sp, #28]
 800aa04:	bfb8      	it	lt
 800aa06:	9204      	strlt	r2, [sp, #16]
 800aa08:	7823      	ldrb	r3, [r4, #0]
 800aa0a:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa0c:	d10a      	bne.n	800aa24 <_svfiprintf_r+0x130>
 800aa0e:	7863      	ldrb	r3, [r4, #1]
 800aa10:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa12:	d132      	bne.n	800aa7a <_svfiprintf_r+0x186>
 800aa14:	9b03      	ldr	r3, [sp, #12]
 800aa16:	1d1a      	adds	r2, r3, #4
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	9203      	str	r2, [sp, #12]
 800aa1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aa20:	3402      	adds	r4, #2
 800aa22:	9305      	str	r3, [sp, #20]
 800aa24:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800aae8 <_svfiprintf_r+0x1f4>
 800aa28:	7821      	ldrb	r1, [r4, #0]
 800aa2a:	2203      	movs	r2, #3
 800aa2c:	4650      	mov	r0, sl
 800aa2e:	f7f5 fbd7 	bl	80001e0 <memchr>
 800aa32:	b138      	cbz	r0, 800aa44 <_svfiprintf_r+0x150>
 800aa34:	9b04      	ldr	r3, [sp, #16]
 800aa36:	eba0 000a 	sub.w	r0, r0, sl
 800aa3a:	2240      	movs	r2, #64	@ 0x40
 800aa3c:	4082      	lsls	r2, r0
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	3401      	adds	r4, #1
 800aa42:	9304      	str	r3, [sp, #16]
 800aa44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa48:	4824      	ldr	r0, [pc, #144]	@ (800aadc <_svfiprintf_r+0x1e8>)
 800aa4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aa4e:	2206      	movs	r2, #6
 800aa50:	f7f5 fbc6 	bl	80001e0 <memchr>
 800aa54:	2800      	cmp	r0, #0
 800aa56:	d036      	beq.n	800aac6 <_svfiprintf_r+0x1d2>
 800aa58:	4b21      	ldr	r3, [pc, #132]	@ (800aae0 <_svfiprintf_r+0x1ec>)
 800aa5a:	bb1b      	cbnz	r3, 800aaa4 <_svfiprintf_r+0x1b0>
 800aa5c:	9b03      	ldr	r3, [sp, #12]
 800aa5e:	3307      	adds	r3, #7
 800aa60:	f023 0307 	bic.w	r3, r3, #7
 800aa64:	3308      	adds	r3, #8
 800aa66:	9303      	str	r3, [sp, #12]
 800aa68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa6a:	4433      	add	r3, r6
 800aa6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa6e:	e76a      	b.n	800a946 <_svfiprintf_r+0x52>
 800aa70:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa74:	460c      	mov	r4, r1
 800aa76:	2001      	movs	r0, #1
 800aa78:	e7a8      	b.n	800a9cc <_svfiprintf_r+0xd8>
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	3401      	adds	r4, #1
 800aa7e:	9305      	str	r3, [sp, #20]
 800aa80:	4619      	mov	r1, r3
 800aa82:	f04f 0c0a 	mov.w	ip, #10
 800aa86:	4620      	mov	r0, r4
 800aa88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa8c:	3a30      	subs	r2, #48	@ 0x30
 800aa8e:	2a09      	cmp	r2, #9
 800aa90:	d903      	bls.n	800aa9a <_svfiprintf_r+0x1a6>
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d0c6      	beq.n	800aa24 <_svfiprintf_r+0x130>
 800aa96:	9105      	str	r1, [sp, #20]
 800aa98:	e7c4      	b.n	800aa24 <_svfiprintf_r+0x130>
 800aa9a:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa9e:	4604      	mov	r4, r0
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	e7f0      	b.n	800aa86 <_svfiprintf_r+0x192>
 800aaa4:	ab03      	add	r3, sp, #12
 800aaa6:	9300      	str	r3, [sp, #0]
 800aaa8:	462a      	mov	r2, r5
 800aaaa:	4b0e      	ldr	r3, [pc, #56]	@ (800aae4 <_svfiprintf_r+0x1f0>)
 800aaac:	a904      	add	r1, sp, #16
 800aaae:	4638      	mov	r0, r7
 800aab0:	f7fd fe84 	bl	80087bc <_printf_float>
 800aab4:	1c42      	adds	r2, r0, #1
 800aab6:	4606      	mov	r6, r0
 800aab8:	d1d6      	bne.n	800aa68 <_svfiprintf_r+0x174>
 800aaba:	89ab      	ldrh	r3, [r5, #12]
 800aabc:	065b      	lsls	r3, r3, #25
 800aabe:	f53f af2d 	bmi.w	800a91c <_svfiprintf_r+0x28>
 800aac2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aac4:	e72c      	b.n	800a920 <_svfiprintf_r+0x2c>
 800aac6:	ab03      	add	r3, sp, #12
 800aac8:	9300      	str	r3, [sp, #0]
 800aaca:	462a      	mov	r2, r5
 800aacc:	4b05      	ldr	r3, [pc, #20]	@ (800aae4 <_svfiprintf_r+0x1f0>)
 800aace:	a904      	add	r1, sp, #16
 800aad0:	4638      	mov	r0, r7
 800aad2:	f7fe f90b 	bl	8008cec <_printf_i>
 800aad6:	e7ed      	b.n	800aab4 <_svfiprintf_r+0x1c0>
 800aad8:	0800b708 	.word	0x0800b708
 800aadc:	0800b712 	.word	0x0800b712
 800aae0:	080087bd 	.word	0x080087bd
 800aae4:	0800a83d 	.word	0x0800a83d
 800aae8:	0800b70e 	.word	0x0800b70e

0800aaec <__sfputc_r>:
 800aaec:	6893      	ldr	r3, [r2, #8]
 800aaee:	3b01      	subs	r3, #1
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	b410      	push	{r4}
 800aaf4:	6093      	str	r3, [r2, #8]
 800aaf6:	da08      	bge.n	800ab0a <__sfputc_r+0x1e>
 800aaf8:	6994      	ldr	r4, [r2, #24]
 800aafa:	42a3      	cmp	r3, r4
 800aafc:	db01      	blt.n	800ab02 <__sfputc_r+0x16>
 800aafe:	290a      	cmp	r1, #10
 800ab00:	d103      	bne.n	800ab0a <__sfputc_r+0x1e>
 800ab02:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab06:	f000 b9df 	b.w	800aec8 <__swbuf_r>
 800ab0a:	6813      	ldr	r3, [r2, #0]
 800ab0c:	1c58      	adds	r0, r3, #1
 800ab0e:	6010      	str	r0, [r2, #0]
 800ab10:	7019      	strb	r1, [r3, #0]
 800ab12:	4608      	mov	r0, r1
 800ab14:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab18:	4770      	bx	lr

0800ab1a <__sfputs_r>:
 800ab1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab1c:	4606      	mov	r6, r0
 800ab1e:	460f      	mov	r7, r1
 800ab20:	4614      	mov	r4, r2
 800ab22:	18d5      	adds	r5, r2, r3
 800ab24:	42ac      	cmp	r4, r5
 800ab26:	d101      	bne.n	800ab2c <__sfputs_r+0x12>
 800ab28:	2000      	movs	r0, #0
 800ab2a:	e007      	b.n	800ab3c <__sfputs_r+0x22>
 800ab2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab30:	463a      	mov	r2, r7
 800ab32:	4630      	mov	r0, r6
 800ab34:	f7ff ffda 	bl	800aaec <__sfputc_r>
 800ab38:	1c43      	adds	r3, r0, #1
 800ab3a:	d1f3      	bne.n	800ab24 <__sfputs_r+0xa>
 800ab3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ab40 <_vfiprintf_r>:
 800ab40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab44:	460d      	mov	r5, r1
 800ab46:	b09d      	sub	sp, #116	@ 0x74
 800ab48:	4614      	mov	r4, r2
 800ab4a:	4698      	mov	r8, r3
 800ab4c:	4606      	mov	r6, r0
 800ab4e:	b118      	cbz	r0, 800ab58 <_vfiprintf_r+0x18>
 800ab50:	6a03      	ldr	r3, [r0, #32]
 800ab52:	b90b      	cbnz	r3, 800ab58 <_vfiprintf_r+0x18>
 800ab54:	f7fe fa76 	bl	8009044 <__sinit>
 800ab58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab5a:	07d9      	lsls	r1, r3, #31
 800ab5c:	d405      	bmi.n	800ab6a <_vfiprintf_r+0x2a>
 800ab5e:	89ab      	ldrh	r3, [r5, #12]
 800ab60:	059a      	lsls	r2, r3, #22
 800ab62:	d402      	bmi.n	800ab6a <_vfiprintf_r+0x2a>
 800ab64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab66:	f7fe fb96 	bl	8009296 <__retarget_lock_acquire_recursive>
 800ab6a:	89ab      	ldrh	r3, [r5, #12]
 800ab6c:	071b      	lsls	r3, r3, #28
 800ab6e:	d501      	bpl.n	800ab74 <_vfiprintf_r+0x34>
 800ab70:	692b      	ldr	r3, [r5, #16]
 800ab72:	b99b      	cbnz	r3, 800ab9c <_vfiprintf_r+0x5c>
 800ab74:	4629      	mov	r1, r5
 800ab76:	4630      	mov	r0, r6
 800ab78:	f000 f9e4 	bl	800af44 <__swsetup_r>
 800ab7c:	b170      	cbz	r0, 800ab9c <_vfiprintf_r+0x5c>
 800ab7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab80:	07dc      	lsls	r4, r3, #31
 800ab82:	d504      	bpl.n	800ab8e <_vfiprintf_r+0x4e>
 800ab84:	f04f 30ff 	mov.w	r0, #4294967295
 800ab88:	b01d      	add	sp, #116	@ 0x74
 800ab8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab8e:	89ab      	ldrh	r3, [r5, #12]
 800ab90:	0598      	lsls	r0, r3, #22
 800ab92:	d4f7      	bmi.n	800ab84 <_vfiprintf_r+0x44>
 800ab94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab96:	f7fe fb7f 	bl	8009298 <__retarget_lock_release_recursive>
 800ab9a:	e7f3      	b.n	800ab84 <_vfiprintf_r+0x44>
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	9309      	str	r3, [sp, #36]	@ 0x24
 800aba0:	2320      	movs	r3, #32
 800aba2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aba6:	f8cd 800c 	str.w	r8, [sp, #12]
 800abaa:	2330      	movs	r3, #48	@ 0x30
 800abac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ad5c <_vfiprintf_r+0x21c>
 800abb0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800abb4:	f04f 0901 	mov.w	r9, #1
 800abb8:	4623      	mov	r3, r4
 800abba:	469a      	mov	sl, r3
 800abbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abc0:	b10a      	cbz	r2, 800abc6 <_vfiprintf_r+0x86>
 800abc2:	2a25      	cmp	r2, #37	@ 0x25
 800abc4:	d1f9      	bne.n	800abba <_vfiprintf_r+0x7a>
 800abc6:	ebba 0b04 	subs.w	fp, sl, r4
 800abca:	d00b      	beq.n	800abe4 <_vfiprintf_r+0xa4>
 800abcc:	465b      	mov	r3, fp
 800abce:	4622      	mov	r2, r4
 800abd0:	4629      	mov	r1, r5
 800abd2:	4630      	mov	r0, r6
 800abd4:	f7ff ffa1 	bl	800ab1a <__sfputs_r>
 800abd8:	3001      	adds	r0, #1
 800abda:	f000 80a7 	beq.w	800ad2c <_vfiprintf_r+0x1ec>
 800abde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800abe0:	445a      	add	r2, fp
 800abe2:	9209      	str	r2, [sp, #36]	@ 0x24
 800abe4:	f89a 3000 	ldrb.w	r3, [sl]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	f000 809f 	beq.w	800ad2c <_vfiprintf_r+0x1ec>
 800abee:	2300      	movs	r3, #0
 800abf0:	f04f 32ff 	mov.w	r2, #4294967295
 800abf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abf8:	f10a 0a01 	add.w	sl, sl, #1
 800abfc:	9304      	str	r3, [sp, #16]
 800abfe:	9307      	str	r3, [sp, #28]
 800ac00:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ac04:	931a      	str	r3, [sp, #104]	@ 0x68
 800ac06:	4654      	mov	r4, sl
 800ac08:	2205      	movs	r2, #5
 800ac0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac0e:	4853      	ldr	r0, [pc, #332]	@ (800ad5c <_vfiprintf_r+0x21c>)
 800ac10:	f7f5 fae6 	bl	80001e0 <memchr>
 800ac14:	9a04      	ldr	r2, [sp, #16]
 800ac16:	b9d8      	cbnz	r0, 800ac50 <_vfiprintf_r+0x110>
 800ac18:	06d1      	lsls	r1, r2, #27
 800ac1a:	bf44      	itt	mi
 800ac1c:	2320      	movmi	r3, #32
 800ac1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac22:	0713      	lsls	r3, r2, #28
 800ac24:	bf44      	itt	mi
 800ac26:	232b      	movmi	r3, #43	@ 0x2b
 800ac28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac2c:	f89a 3000 	ldrb.w	r3, [sl]
 800ac30:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac32:	d015      	beq.n	800ac60 <_vfiprintf_r+0x120>
 800ac34:	9a07      	ldr	r2, [sp, #28]
 800ac36:	4654      	mov	r4, sl
 800ac38:	2000      	movs	r0, #0
 800ac3a:	f04f 0c0a 	mov.w	ip, #10
 800ac3e:	4621      	mov	r1, r4
 800ac40:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac44:	3b30      	subs	r3, #48	@ 0x30
 800ac46:	2b09      	cmp	r3, #9
 800ac48:	d94b      	bls.n	800ace2 <_vfiprintf_r+0x1a2>
 800ac4a:	b1b0      	cbz	r0, 800ac7a <_vfiprintf_r+0x13a>
 800ac4c:	9207      	str	r2, [sp, #28]
 800ac4e:	e014      	b.n	800ac7a <_vfiprintf_r+0x13a>
 800ac50:	eba0 0308 	sub.w	r3, r0, r8
 800ac54:	fa09 f303 	lsl.w	r3, r9, r3
 800ac58:	4313      	orrs	r3, r2
 800ac5a:	9304      	str	r3, [sp, #16]
 800ac5c:	46a2      	mov	sl, r4
 800ac5e:	e7d2      	b.n	800ac06 <_vfiprintf_r+0xc6>
 800ac60:	9b03      	ldr	r3, [sp, #12]
 800ac62:	1d19      	adds	r1, r3, #4
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	9103      	str	r1, [sp, #12]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	bfbb      	ittet	lt
 800ac6c:	425b      	neglt	r3, r3
 800ac6e:	f042 0202 	orrlt.w	r2, r2, #2
 800ac72:	9307      	strge	r3, [sp, #28]
 800ac74:	9307      	strlt	r3, [sp, #28]
 800ac76:	bfb8      	it	lt
 800ac78:	9204      	strlt	r2, [sp, #16]
 800ac7a:	7823      	ldrb	r3, [r4, #0]
 800ac7c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac7e:	d10a      	bne.n	800ac96 <_vfiprintf_r+0x156>
 800ac80:	7863      	ldrb	r3, [r4, #1]
 800ac82:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac84:	d132      	bne.n	800acec <_vfiprintf_r+0x1ac>
 800ac86:	9b03      	ldr	r3, [sp, #12]
 800ac88:	1d1a      	adds	r2, r3, #4
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	9203      	str	r2, [sp, #12]
 800ac8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ac92:	3402      	adds	r4, #2
 800ac94:	9305      	str	r3, [sp, #20]
 800ac96:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ad6c <_vfiprintf_r+0x22c>
 800ac9a:	7821      	ldrb	r1, [r4, #0]
 800ac9c:	2203      	movs	r2, #3
 800ac9e:	4650      	mov	r0, sl
 800aca0:	f7f5 fa9e 	bl	80001e0 <memchr>
 800aca4:	b138      	cbz	r0, 800acb6 <_vfiprintf_r+0x176>
 800aca6:	9b04      	ldr	r3, [sp, #16]
 800aca8:	eba0 000a 	sub.w	r0, r0, sl
 800acac:	2240      	movs	r2, #64	@ 0x40
 800acae:	4082      	lsls	r2, r0
 800acb0:	4313      	orrs	r3, r2
 800acb2:	3401      	adds	r4, #1
 800acb4:	9304      	str	r3, [sp, #16]
 800acb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acba:	4829      	ldr	r0, [pc, #164]	@ (800ad60 <_vfiprintf_r+0x220>)
 800acbc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800acc0:	2206      	movs	r2, #6
 800acc2:	f7f5 fa8d 	bl	80001e0 <memchr>
 800acc6:	2800      	cmp	r0, #0
 800acc8:	d03f      	beq.n	800ad4a <_vfiprintf_r+0x20a>
 800acca:	4b26      	ldr	r3, [pc, #152]	@ (800ad64 <_vfiprintf_r+0x224>)
 800accc:	bb1b      	cbnz	r3, 800ad16 <_vfiprintf_r+0x1d6>
 800acce:	9b03      	ldr	r3, [sp, #12]
 800acd0:	3307      	adds	r3, #7
 800acd2:	f023 0307 	bic.w	r3, r3, #7
 800acd6:	3308      	adds	r3, #8
 800acd8:	9303      	str	r3, [sp, #12]
 800acda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acdc:	443b      	add	r3, r7
 800acde:	9309      	str	r3, [sp, #36]	@ 0x24
 800ace0:	e76a      	b.n	800abb8 <_vfiprintf_r+0x78>
 800ace2:	fb0c 3202 	mla	r2, ip, r2, r3
 800ace6:	460c      	mov	r4, r1
 800ace8:	2001      	movs	r0, #1
 800acea:	e7a8      	b.n	800ac3e <_vfiprintf_r+0xfe>
 800acec:	2300      	movs	r3, #0
 800acee:	3401      	adds	r4, #1
 800acf0:	9305      	str	r3, [sp, #20]
 800acf2:	4619      	mov	r1, r3
 800acf4:	f04f 0c0a 	mov.w	ip, #10
 800acf8:	4620      	mov	r0, r4
 800acfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acfe:	3a30      	subs	r2, #48	@ 0x30
 800ad00:	2a09      	cmp	r2, #9
 800ad02:	d903      	bls.n	800ad0c <_vfiprintf_r+0x1cc>
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d0c6      	beq.n	800ac96 <_vfiprintf_r+0x156>
 800ad08:	9105      	str	r1, [sp, #20]
 800ad0a:	e7c4      	b.n	800ac96 <_vfiprintf_r+0x156>
 800ad0c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad10:	4604      	mov	r4, r0
 800ad12:	2301      	movs	r3, #1
 800ad14:	e7f0      	b.n	800acf8 <_vfiprintf_r+0x1b8>
 800ad16:	ab03      	add	r3, sp, #12
 800ad18:	9300      	str	r3, [sp, #0]
 800ad1a:	462a      	mov	r2, r5
 800ad1c:	4b12      	ldr	r3, [pc, #72]	@ (800ad68 <_vfiprintf_r+0x228>)
 800ad1e:	a904      	add	r1, sp, #16
 800ad20:	4630      	mov	r0, r6
 800ad22:	f7fd fd4b 	bl	80087bc <_printf_float>
 800ad26:	4607      	mov	r7, r0
 800ad28:	1c78      	adds	r0, r7, #1
 800ad2a:	d1d6      	bne.n	800acda <_vfiprintf_r+0x19a>
 800ad2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad2e:	07d9      	lsls	r1, r3, #31
 800ad30:	d405      	bmi.n	800ad3e <_vfiprintf_r+0x1fe>
 800ad32:	89ab      	ldrh	r3, [r5, #12]
 800ad34:	059a      	lsls	r2, r3, #22
 800ad36:	d402      	bmi.n	800ad3e <_vfiprintf_r+0x1fe>
 800ad38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad3a:	f7fe faad 	bl	8009298 <__retarget_lock_release_recursive>
 800ad3e:	89ab      	ldrh	r3, [r5, #12]
 800ad40:	065b      	lsls	r3, r3, #25
 800ad42:	f53f af1f 	bmi.w	800ab84 <_vfiprintf_r+0x44>
 800ad46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad48:	e71e      	b.n	800ab88 <_vfiprintf_r+0x48>
 800ad4a:	ab03      	add	r3, sp, #12
 800ad4c:	9300      	str	r3, [sp, #0]
 800ad4e:	462a      	mov	r2, r5
 800ad50:	4b05      	ldr	r3, [pc, #20]	@ (800ad68 <_vfiprintf_r+0x228>)
 800ad52:	a904      	add	r1, sp, #16
 800ad54:	4630      	mov	r0, r6
 800ad56:	f7fd ffc9 	bl	8008cec <_printf_i>
 800ad5a:	e7e4      	b.n	800ad26 <_vfiprintf_r+0x1e6>
 800ad5c:	0800b708 	.word	0x0800b708
 800ad60:	0800b712 	.word	0x0800b712
 800ad64:	080087bd 	.word	0x080087bd
 800ad68:	0800ab1b 	.word	0x0800ab1b
 800ad6c:	0800b70e 	.word	0x0800b70e

0800ad70 <__sflush_r>:
 800ad70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ad74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad78:	0716      	lsls	r6, r2, #28
 800ad7a:	4605      	mov	r5, r0
 800ad7c:	460c      	mov	r4, r1
 800ad7e:	d454      	bmi.n	800ae2a <__sflush_r+0xba>
 800ad80:	684b      	ldr	r3, [r1, #4]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	dc02      	bgt.n	800ad8c <__sflush_r+0x1c>
 800ad86:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	dd48      	ble.n	800ae1e <__sflush_r+0xae>
 800ad8c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ad8e:	2e00      	cmp	r6, #0
 800ad90:	d045      	beq.n	800ae1e <__sflush_r+0xae>
 800ad92:	2300      	movs	r3, #0
 800ad94:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ad98:	682f      	ldr	r7, [r5, #0]
 800ad9a:	6a21      	ldr	r1, [r4, #32]
 800ad9c:	602b      	str	r3, [r5, #0]
 800ad9e:	d030      	beq.n	800ae02 <__sflush_r+0x92>
 800ada0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ada2:	89a3      	ldrh	r3, [r4, #12]
 800ada4:	0759      	lsls	r1, r3, #29
 800ada6:	d505      	bpl.n	800adb4 <__sflush_r+0x44>
 800ada8:	6863      	ldr	r3, [r4, #4]
 800adaa:	1ad2      	subs	r2, r2, r3
 800adac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800adae:	b10b      	cbz	r3, 800adb4 <__sflush_r+0x44>
 800adb0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800adb2:	1ad2      	subs	r2, r2, r3
 800adb4:	2300      	movs	r3, #0
 800adb6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800adb8:	6a21      	ldr	r1, [r4, #32]
 800adba:	4628      	mov	r0, r5
 800adbc:	47b0      	blx	r6
 800adbe:	1c43      	adds	r3, r0, #1
 800adc0:	89a3      	ldrh	r3, [r4, #12]
 800adc2:	d106      	bne.n	800add2 <__sflush_r+0x62>
 800adc4:	6829      	ldr	r1, [r5, #0]
 800adc6:	291d      	cmp	r1, #29
 800adc8:	d82b      	bhi.n	800ae22 <__sflush_r+0xb2>
 800adca:	4a2a      	ldr	r2, [pc, #168]	@ (800ae74 <__sflush_r+0x104>)
 800adcc:	410a      	asrs	r2, r1
 800adce:	07d6      	lsls	r6, r2, #31
 800add0:	d427      	bmi.n	800ae22 <__sflush_r+0xb2>
 800add2:	2200      	movs	r2, #0
 800add4:	6062      	str	r2, [r4, #4]
 800add6:	04d9      	lsls	r1, r3, #19
 800add8:	6922      	ldr	r2, [r4, #16]
 800adda:	6022      	str	r2, [r4, #0]
 800addc:	d504      	bpl.n	800ade8 <__sflush_r+0x78>
 800adde:	1c42      	adds	r2, r0, #1
 800ade0:	d101      	bne.n	800ade6 <__sflush_r+0x76>
 800ade2:	682b      	ldr	r3, [r5, #0]
 800ade4:	b903      	cbnz	r3, 800ade8 <__sflush_r+0x78>
 800ade6:	6560      	str	r0, [r4, #84]	@ 0x54
 800ade8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800adea:	602f      	str	r7, [r5, #0]
 800adec:	b1b9      	cbz	r1, 800ae1e <__sflush_r+0xae>
 800adee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800adf2:	4299      	cmp	r1, r3
 800adf4:	d002      	beq.n	800adfc <__sflush_r+0x8c>
 800adf6:	4628      	mov	r0, r5
 800adf8:	f7ff f89e 	bl	8009f38 <_free_r>
 800adfc:	2300      	movs	r3, #0
 800adfe:	6363      	str	r3, [r4, #52]	@ 0x34
 800ae00:	e00d      	b.n	800ae1e <__sflush_r+0xae>
 800ae02:	2301      	movs	r3, #1
 800ae04:	4628      	mov	r0, r5
 800ae06:	47b0      	blx	r6
 800ae08:	4602      	mov	r2, r0
 800ae0a:	1c50      	adds	r0, r2, #1
 800ae0c:	d1c9      	bne.n	800ada2 <__sflush_r+0x32>
 800ae0e:	682b      	ldr	r3, [r5, #0]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d0c6      	beq.n	800ada2 <__sflush_r+0x32>
 800ae14:	2b1d      	cmp	r3, #29
 800ae16:	d001      	beq.n	800ae1c <__sflush_r+0xac>
 800ae18:	2b16      	cmp	r3, #22
 800ae1a:	d11e      	bne.n	800ae5a <__sflush_r+0xea>
 800ae1c:	602f      	str	r7, [r5, #0]
 800ae1e:	2000      	movs	r0, #0
 800ae20:	e022      	b.n	800ae68 <__sflush_r+0xf8>
 800ae22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae26:	b21b      	sxth	r3, r3
 800ae28:	e01b      	b.n	800ae62 <__sflush_r+0xf2>
 800ae2a:	690f      	ldr	r7, [r1, #16]
 800ae2c:	2f00      	cmp	r7, #0
 800ae2e:	d0f6      	beq.n	800ae1e <__sflush_r+0xae>
 800ae30:	0793      	lsls	r3, r2, #30
 800ae32:	680e      	ldr	r6, [r1, #0]
 800ae34:	bf08      	it	eq
 800ae36:	694b      	ldreq	r3, [r1, #20]
 800ae38:	600f      	str	r7, [r1, #0]
 800ae3a:	bf18      	it	ne
 800ae3c:	2300      	movne	r3, #0
 800ae3e:	eba6 0807 	sub.w	r8, r6, r7
 800ae42:	608b      	str	r3, [r1, #8]
 800ae44:	f1b8 0f00 	cmp.w	r8, #0
 800ae48:	dde9      	ble.n	800ae1e <__sflush_r+0xae>
 800ae4a:	6a21      	ldr	r1, [r4, #32]
 800ae4c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ae4e:	4643      	mov	r3, r8
 800ae50:	463a      	mov	r2, r7
 800ae52:	4628      	mov	r0, r5
 800ae54:	47b0      	blx	r6
 800ae56:	2800      	cmp	r0, #0
 800ae58:	dc08      	bgt.n	800ae6c <__sflush_r+0xfc>
 800ae5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae62:	81a3      	strh	r3, [r4, #12]
 800ae64:	f04f 30ff 	mov.w	r0, #4294967295
 800ae68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae6c:	4407      	add	r7, r0
 800ae6e:	eba8 0800 	sub.w	r8, r8, r0
 800ae72:	e7e7      	b.n	800ae44 <__sflush_r+0xd4>
 800ae74:	dfbffffe 	.word	0xdfbffffe

0800ae78 <_fflush_r>:
 800ae78:	b538      	push	{r3, r4, r5, lr}
 800ae7a:	690b      	ldr	r3, [r1, #16]
 800ae7c:	4605      	mov	r5, r0
 800ae7e:	460c      	mov	r4, r1
 800ae80:	b913      	cbnz	r3, 800ae88 <_fflush_r+0x10>
 800ae82:	2500      	movs	r5, #0
 800ae84:	4628      	mov	r0, r5
 800ae86:	bd38      	pop	{r3, r4, r5, pc}
 800ae88:	b118      	cbz	r0, 800ae92 <_fflush_r+0x1a>
 800ae8a:	6a03      	ldr	r3, [r0, #32]
 800ae8c:	b90b      	cbnz	r3, 800ae92 <_fflush_r+0x1a>
 800ae8e:	f7fe f8d9 	bl	8009044 <__sinit>
 800ae92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d0f3      	beq.n	800ae82 <_fflush_r+0xa>
 800ae9a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ae9c:	07d0      	lsls	r0, r2, #31
 800ae9e:	d404      	bmi.n	800aeaa <_fflush_r+0x32>
 800aea0:	0599      	lsls	r1, r3, #22
 800aea2:	d402      	bmi.n	800aeaa <_fflush_r+0x32>
 800aea4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aea6:	f7fe f9f6 	bl	8009296 <__retarget_lock_acquire_recursive>
 800aeaa:	4628      	mov	r0, r5
 800aeac:	4621      	mov	r1, r4
 800aeae:	f7ff ff5f 	bl	800ad70 <__sflush_r>
 800aeb2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aeb4:	07da      	lsls	r2, r3, #31
 800aeb6:	4605      	mov	r5, r0
 800aeb8:	d4e4      	bmi.n	800ae84 <_fflush_r+0xc>
 800aeba:	89a3      	ldrh	r3, [r4, #12]
 800aebc:	059b      	lsls	r3, r3, #22
 800aebe:	d4e1      	bmi.n	800ae84 <_fflush_r+0xc>
 800aec0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aec2:	f7fe f9e9 	bl	8009298 <__retarget_lock_release_recursive>
 800aec6:	e7dd      	b.n	800ae84 <_fflush_r+0xc>

0800aec8 <__swbuf_r>:
 800aec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeca:	460e      	mov	r6, r1
 800aecc:	4614      	mov	r4, r2
 800aece:	4605      	mov	r5, r0
 800aed0:	b118      	cbz	r0, 800aeda <__swbuf_r+0x12>
 800aed2:	6a03      	ldr	r3, [r0, #32]
 800aed4:	b90b      	cbnz	r3, 800aeda <__swbuf_r+0x12>
 800aed6:	f7fe f8b5 	bl	8009044 <__sinit>
 800aeda:	69a3      	ldr	r3, [r4, #24]
 800aedc:	60a3      	str	r3, [r4, #8]
 800aede:	89a3      	ldrh	r3, [r4, #12]
 800aee0:	071a      	lsls	r2, r3, #28
 800aee2:	d501      	bpl.n	800aee8 <__swbuf_r+0x20>
 800aee4:	6923      	ldr	r3, [r4, #16]
 800aee6:	b943      	cbnz	r3, 800aefa <__swbuf_r+0x32>
 800aee8:	4621      	mov	r1, r4
 800aeea:	4628      	mov	r0, r5
 800aeec:	f000 f82a 	bl	800af44 <__swsetup_r>
 800aef0:	b118      	cbz	r0, 800aefa <__swbuf_r+0x32>
 800aef2:	f04f 37ff 	mov.w	r7, #4294967295
 800aef6:	4638      	mov	r0, r7
 800aef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aefa:	6823      	ldr	r3, [r4, #0]
 800aefc:	6922      	ldr	r2, [r4, #16]
 800aefe:	1a98      	subs	r0, r3, r2
 800af00:	6963      	ldr	r3, [r4, #20]
 800af02:	b2f6      	uxtb	r6, r6
 800af04:	4283      	cmp	r3, r0
 800af06:	4637      	mov	r7, r6
 800af08:	dc05      	bgt.n	800af16 <__swbuf_r+0x4e>
 800af0a:	4621      	mov	r1, r4
 800af0c:	4628      	mov	r0, r5
 800af0e:	f7ff ffb3 	bl	800ae78 <_fflush_r>
 800af12:	2800      	cmp	r0, #0
 800af14:	d1ed      	bne.n	800aef2 <__swbuf_r+0x2a>
 800af16:	68a3      	ldr	r3, [r4, #8]
 800af18:	3b01      	subs	r3, #1
 800af1a:	60a3      	str	r3, [r4, #8]
 800af1c:	6823      	ldr	r3, [r4, #0]
 800af1e:	1c5a      	adds	r2, r3, #1
 800af20:	6022      	str	r2, [r4, #0]
 800af22:	701e      	strb	r6, [r3, #0]
 800af24:	6962      	ldr	r2, [r4, #20]
 800af26:	1c43      	adds	r3, r0, #1
 800af28:	429a      	cmp	r2, r3
 800af2a:	d004      	beq.n	800af36 <__swbuf_r+0x6e>
 800af2c:	89a3      	ldrh	r3, [r4, #12]
 800af2e:	07db      	lsls	r3, r3, #31
 800af30:	d5e1      	bpl.n	800aef6 <__swbuf_r+0x2e>
 800af32:	2e0a      	cmp	r6, #10
 800af34:	d1df      	bne.n	800aef6 <__swbuf_r+0x2e>
 800af36:	4621      	mov	r1, r4
 800af38:	4628      	mov	r0, r5
 800af3a:	f7ff ff9d 	bl	800ae78 <_fflush_r>
 800af3e:	2800      	cmp	r0, #0
 800af40:	d0d9      	beq.n	800aef6 <__swbuf_r+0x2e>
 800af42:	e7d6      	b.n	800aef2 <__swbuf_r+0x2a>

0800af44 <__swsetup_r>:
 800af44:	b538      	push	{r3, r4, r5, lr}
 800af46:	4b29      	ldr	r3, [pc, #164]	@ (800afec <__swsetup_r+0xa8>)
 800af48:	4605      	mov	r5, r0
 800af4a:	6818      	ldr	r0, [r3, #0]
 800af4c:	460c      	mov	r4, r1
 800af4e:	b118      	cbz	r0, 800af58 <__swsetup_r+0x14>
 800af50:	6a03      	ldr	r3, [r0, #32]
 800af52:	b90b      	cbnz	r3, 800af58 <__swsetup_r+0x14>
 800af54:	f7fe f876 	bl	8009044 <__sinit>
 800af58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af5c:	0719      	lsls	r1, r3, #28
 800af5e:	d422      	bmi.n	800afa6 <__swsetup_r+0x62>
 800af60:	06da      	lsls	r2, r3, #27
 800af62:	d407      	bmi.n	800af74 <__swsetup_r+0x30>
 800af64:	2209      	movs	r2, #9
 800af66:	602a      	str	r2, [r5, #0]
 800af68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af6c:	81a3      	strh	r3, [r4, #12]
 800af6e:	f04f 30ff 	mov.w	r0, #4294967295
 800af72:	e033      	b.n	800afdc <__swsetup_r+0x98>
 800af74:	0758      	lsls	r0, r3, #29
 800af76:	d512      	bpl.n	800af9e <__swsetup_r+0x5a>
 800af78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af7a:	b141      	cbz	r1, 800af8e <__swsetup_r+0x4a>
 800af7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af80:	4299      	cmp	r1, r3
 800af82:	d002      	beq.n	800af8a <__swsetup_r+0x46>
 800af84:	4628      	mov	r0, r5
 800af86:	f7fe ffd7 	bl	8009f38 <_free_r>
 800af8a:	2300      	movs	r3, #0
 800af8c:	6363      	str	r3, [r4, #52]	@ 0x34
 800af8e:	89a3      	ldrh	r3, [r4, #12]
 800af90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800af94:	81a3      	strh	r3, [r4, #12]
 800af96:	2300      	movs	r3, #0
 800af98:	6063      	str	r3, [r4, #4]
 800af9a:	6923      	ldr	r3, [r4, #16]
 800af9c:	6023      	str	r3, [r4, #0]
 800af9e:	89a3      	ldrh	r3, [r4, #12]
 800afa0:	f043 0308 	orr.w	r3, r3, #8
 800afa4:	81a3      	strh	r3, [r4, #12]
 800afa6:	6923      	ldr	r3, [r4, #16]
 800afa8:	b94b      	cbnz	r3, 800afbe <__swsetup_r+0x7a>
 800afaa:	89a3      	ldrh	r3, [r4, #12]
 800afac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800afb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800afb4:	d003      	beq.n	800afbe <__swsetup_r+0x7a>
 800afb6:	4621      	mov	r1, r4
 800afb8:	4628      	mov	r0, r5
 800afba:	f000 f909 	bl	800b1d0 <__smakebuf_r>
 800afbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afc2:	f013 0201 	ands.w	r2, r3, #1
 800afc6:	d00a      	beq.n	800afde <__swsetup_r+0x9a>
 800afc8:	2200      	movs	r2, #0
 800afca:	60a2      	str	r2, [r4, #8]
 800afcc:	6962      	ldr	r2, [r4, #20]
 800afce:	4252      	negs	r2, r2
 800afd0:	61a2      	str	r2, [r4, #24]
 800afd2:	6922      	ldr	r2, [r4, #16]
 800afd4:	b942      	cbnz	r2, 800afe8 <__swsetup_r+0xa4>
 800afd6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800afda:	d1c5      	bne.n	800af68 <__swsetup_r+0x24>
 800afdc:	bd38      	pop	{r3, r4, r5, pc}
 800afde:	0799      	lsls	r1, r3, #30
 800afe0:	bf58      	it	pl
 800afe2:	6962      	ldrpl	r2, [r4, #20]
 800afe4:	60a2      	str	r2, [r4, #8]
 800afe6:	e7f4      	b.n	800afd2 <__swsetup_r+0x8e>
 800afe8:	2000      	movs	r0, #0
 800afea:	e7f7      	b.n	800afdc <__swsetup_r+0x98>
 800afec:	20000018 	.word	0x20000018

0800aff0 <memmove>:
 800aff0:	4288      	cmp	r0, r1
 800aff2:	b510      	push	{r4, lr}
 800aff4:	eb01 0402 	add.w	r4, r1, r2
 800aff8:	d902      	bls.n	800b000 <memmove+0x10>
 800affa:	4284      	cmp	r4, r0
 800affc:	4623      	mov	r3, r4
 800affe:	d807      	bhi.n	800b010 <memmove+0x20>
 800b000:	1e43      	subs	r3, r0, #1
 800b002:	42a1      	cmp	r1, r4
 800b004:	d008      	beq.n	800b018 <memmove+0x28>
 800b006:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b00a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b00e:	e7f8      	b.n	800b002 <memmove+0x12>
 800b010:	4402      	add	r2, r0
 800b012:	4601      	mov	r1, r0
 800b014:	428a      	cmp	r2, r1
 800b016:	d100      	bne.n	800b01a <memmove+0x2a>
 800b018:	bd10      	pop	{r4, pc}
 800b01a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b01e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b022:	e7f7      	b.n	800b014 <memmove+0x24>

0800b024 <_sbrk_r>:
 800b024:	b538      	push	{r3, r4, r5, lr}
 800b026:	4d06      	ldr	r5, [pc, #24]	@ (800b040 <_sbrk_r+0x1c>)
 800b028:	2300      	movs	r3, #0
 800b02a:	4604      	mov	r4, r0
 800b02c:	4608      	mov	r0, r1
 800b02e:	602b      	str	r3, [r5, #0]
 800b030:	f7f7 fd48 	bl	8002ac4 <_sbrk>
 800b034:	1c43      	adds	r3, r0, #1
 800b036:	d102      	bne.n	800b03e <_sbrk_r+0x1a>
 800b038:	682b      	ldr	r3, [r5, #0]
 800b03a:	b103      	cbz	r3, 800b03e <_sbrk_r+0x1a>
 800b03c:	6023      	str	r3, [r4, #0]
 800b03e:	bd38      	pop	{r3, r4, r5, pc}
 800b040:	2000062c 	.word	0x2000062c

0800b044 <memcpy>:
 800b044:	440a      	add	r2, r1
 800b046:	4291      	cmp	r1, r2
 800b048:	f100 33ff 	add.w	r3, r0, #4294967295
 800b04c:	d100      	bne.n	800b050 <memcpy+0xc>
 800b04e:	4770      	bx	lr
 800b050:	b510      	push	{r4, lr}
 800b052:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b056:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b05a:	4291      	cmp	r1, r2
 800b05c:	d1f9      	bne.n	800b052 <memcpy+0xe>
 800b05e:	bd10      	pop	{r4, pc}

0800b060 <__assert_func>:
 800b060:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b062:	4614      	mov	r4, r2
 800b064:	461a      	mov	r2, r3
 800b066:	4b09      	ldr	r3, [pc, #36]	@ (800b08c <__assert_func+0x2c>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4605      	mov	r5, r0
 800b06c:	68d8      	ldr	r0, [r3, #12]
 800b06e:	b954      	cbnz	r4, 800b086 <__assert_func+0x26>
 800b070:	4b07      	ldr	r3, [pc, #28]	@ (800b090 <__assert_func+0x30>)
 800b072:	461c      	mov	r4, r3
 800b074:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b078:	9100      	str	r1, [sp, #0]
 800b07a:	462b      	mov	r3, r5
 800b07c:	4905      	ldr	r1, [pc, #20]	@ (800b094 <__assert_func+0x34>)
 800b07e:	f000 f86f 	bl	800b160 <fiprintf>
 800b082:	f000 f903 	bl	800b28c <abort>
 800b086:	4b04      	ldr	r3, [pc, #16]	@ (800b098 <__assert_func+0x38>)
 800b088:	e7f4      	b.n	800b074 <__assert_func+0x14>
 800b08a:	bf00      	nop
 800b08c:	20000018 	.word	0x20000018
 800b090:	0800b75e 	.word	0x0800b75e
 800b094:	0800b730 	.word	0x0800b730
 800b098:	0800b723 	.word	0x0800b723

0800b09c <_calloc_r>:
 800b09c:	b570      	push	{r4, r5, r6, lr}
 800b09e:	fba1 5402 	umull	r5, r4, r1, r2
 800b0a2:	b93c      	cbnz	r4, 800b0b4 <_calloc_r+0x18>
 800b0a4:	4629      	mov	r1, r5
 800b0a6:	f7fe ffbb 	bl	800a020 <_malloc_r>
 800b0aa:	4606      	mov	r6, r0
 800b0ac:	b928      	cbnz	r0, 800b0ba <_calloc_r+0x1e>
 800b0ae:	2600      	movs	r6, #0
 800b0b0:	4630      	mov	r0, r6
 800b0b2:	bd70      	pop	{r4, r5, r6, pc}
 800b0b4:	220c      	movs	r2, #12
 800b0b6:	6002      	str	r2, [r0, #0]
 800b0b8:	e7f9      	b.n	800b0ae <_calloc_r+0x12>
 800b0ba:	462a      	mov	r2, r5
 800b0bc:	4621      	mov	r1, r4
 800b0be:	f7fe f86c 	bl	800919a <memset>
 800b0c2:	e7f5      	b.n	800b0b0 <_calloc_r+0x14>

0800b0c4 <__ascii_mbtowc>:
 800b0c4:	b082      	sub	sp, #8
 800b0c6:	b901      	cbnz	r1, 800b0ca <__ascii_mbtowc+0x6>
 800b0c8:	a901      	add	r1, sp, #4
 800b0ca:	b142      	cbz	r2, 800b0de <__ascii_mbtowc+0x1a>
 800b0cc:	b14b      	cbz	r3, 800b0e2 <__ascii_mbtowc+0x1e>
 800b0ce:	7813      	ldrb	r3, [r2, #0]
 800b0d0:	600b      	str	r3, [r1, #0]
 800b0d2:	7812      	ldrb	r2, [r2, #0]
 800b0d4:	1e10      	subs	r0, r2, #0
 800b0d6:	bf18      	it	ne
 800b0d8:	2001      	movne	r0, #1
 800b0da:	b002      	add	sp, #8
 800b0dc:	4770      	bx	lr
 800b0de:	4610      	mov	r0, r2
 800b0e0:	e7fb      	b.n	800b0da <__ascii_mbtowc+0x16>
 800b0e2:	f06f 0001 	mvn.w	r0, #1
 800b0e6:	e7f8      	b.n	800b0da <__ascii_mbtowc+0x16>

0800b0e8 <_realloc_r>:
 800b0e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0ec:	4680      	mov	r8, r0
 800b0ee:	4615      	mov	r5, r2
 800b0f0:	460c      	mov	r4, r1
 800b0f2:	b921      	cbnz	r1, 800b0fe <_realloc_r+0x16>
 800b0f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0f8:	4611      	mov	r1, r2
 800b0fa:	f7fe bf91 	b.w	800a020 <_malloc_r>
 800b0fe:	b92a      	cbnz	r2, 800b10c <_realloc_r+0x24>
 800b100:	f7fe ff1a 	bl	8009f38 <_free_r>
 800b104:	2400      	movs	r4, #0
 800b106:	4620      	mov	r0, r4
 800b108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b10c:	f000 f8c5 	bl	800b29a <_malloc_usable_size_r>
 800b110:	4285      	cmp	r5, r0
 800b112:	4606      	mov	r6, r0
 800b114:	d802      	bhi.n	800b11c <_realloc_r+0x34>
 800b116:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b11a:	d8f4      	bhi.n	800b106 <_realloc_r+0x1e>
 800b11c:	4629      	mov	r1, r5
 800b11e:	4640      	mov	r0, r8
 800b120:	f7fe ff7e 	bl	800a020 <_malloc_r>
 800b124:	4607      	mov	r7, r0
 800b126:	2800      	cmp	r0, #0
 800b128:	d0ec      	beq.n	800b104 <_realloc_r+0x1c>
 800b12a:	42b5      	cmp	r5, r6
 800b12c:	462a      	mov	r2, r5
 800b12e:	4621      	mov	r1, r4
 800b130:	bf28      	it	cs
 800b132:	4632      	movcs	r2, r6
 800b134:	f7ff ff86 	bl	800b044 <memcpy>
 800b138:	4621      	mov	r1, r4
 800b13a:	4640      	mov	r0, r8
 800b13c:	f7fe fefc 	bl	8009f38 <_free_r>
 800b140:	463c      	mov	r4, r7
 800b142:	e7e0      	b.n	800b106 <_realloc_r+0x1e>

0800b144 <__ascii_wctomb>:
 800b144:	4603      	mov	r3, r0
 800b146:	4608      	mov	r0, r1
 800b148:	b141      	cbz	r1, 800b15c <__ascii_wctomb+0x18>
 800b14a:	2aff      	cmp	r2, #255	@ 0xff
 800b14c:	d904      	bls.n	800b158 <__ascii_wctomb+0x14>
 800b14e:	228a      	movs	r2, #138	@ 0x8a
 800b150:	601a      	str	r2, [r3, #0]
 800b152:	f04f 30ff 	mov.w	r0, #4294967295
 800b156:	4770      	bx	lr
 800b158:	700a      	strb	r2, [r1, #0]
 800b15a:	2001      	movs	r0, #1
 800b15c:	4770      	bx	lr
	...

0800b160 <fiprintf>:
 800b160:	b40e      	push	{r1, r2, r3}
 800b162:	b503      	push	{r0, r1, lr}
 800b164:	4601      	mov	r1, r0
 800b166:	ab03      	add	r3, sp, #12
 800b168:	4805      	ldr	r0, [pc, #20]	@ (800b180 <fiprintf+0x20>)
 800b16a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b16e:	6800      	ldr	r0, [r0, #0]
 800b170:	9301      	str	r3, [sp, #4]
 800b172:	f7ff fce5 	bl	800ab40 <_vfiprintf_r>
 800b176:	b002      	add	sp, #8
 800b178:	f85d eb04 	ldr.w	lr, [sp], #4
 800b17c:	b003      	add	sp, #12
 800b17e:	4770      	bx	lr
 800b180:	20000018 	.word	0x20000018

0800b184 <__swhatbuf_r>:
 800b184:	b570      	push	{r4, r5, r6, lr}
 800b186:	460c      	mov	r4, r1
 800b188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b18c:	2900      	cmp	r1, #0
 800b18e:	b096      	sub	sp, #88	@ 0x58
 800b190:	4615      	mov	r5, r2
 800b192:	461e      	mov	r6, r3
 800b194:	da0d      	bge.n	800b1b2 <__swhatbuf_r+0x2e>
 800b196:	89a3      	ldrh	r3, [r4, #12]
 800b198:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b19c:	f04f 0100 	mov.w	r1, #0
 800b1a0:	bf14      	ite	ne
 800b1a2:	2340      	movne	r3, #64	@ 0x40
 800b1a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b1a8:	2000      	movs	r0, #0
 800b1aa:	6031      	str	r1, [r6, #0]
 800b1ac:	602b      	str	r3, [r5, #0]
 800b1ae:	b016      	add	sp, #88	@ 0x58
 800b1b0:	bd70      	pop	{r4, r5, r6, pc}
 800b1b2:	466a      	mov	r2, sp
 800b1b4:	f000 f848 	bl	800b248 <_fstat_r>
 800b1b8:	2800      	cmp	r0, #0
 800b1ba:	dbec      	blt.n	800b196 <__swhatbuf_r+0x12>
 800b1bc:	9901      	ldr	r1, [sp, #4]
 800b1be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b1c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b1c6:	4259      	negs	r1, r3
 800b1c8:	4159      	adcs	r1, r3
 800b1ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b1ce:	e7eb      	b.n	800b1a8 <__swhatbuf_r+0x24>

0800b1d0 <__smakebuf_r>:
 800b1d0:	898b      	ldrh	r3, [r1, #12]
 800b1d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1d4:	079d      	lsls	r5, r3, #30
 800b1d6:	4606      	mov	r6, r0
 800b1d8:	460c      	mov	r4, r1
 800b1da:	d507      	bpl.n	800b1ec <__smakebuf_r+0x1c>
 800b1dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b1e0:	6023      	str	r3, [r4, #0]
 800b1e2:	6123      	str	r3, [r4, #16]
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	6163      	str	r3, [r4, #20]
 800b1e8:	b003      	add	sp, #12
 800b1ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1ec:	ab01      	add	r3, sp, #4
 800b1ee:	466a      	mov	r2, sp
 800b1f0:	f7ff ffc8 	bl	800b184 <__swhatbuf_r>
 800b1f4:	9f00      	ldr	r7, [sp, #0]
 800b1f6:	4605      	mov	r5, r0
 800b1f8:	4639      	mov	r1, r7
 800b1fa:	4630      	mov	r0, r6
 800b1fc:	f7fe ff10 	bl	800a020 <_malloc_r>
 800b200:	b948      	cbnz	r0, 800b216 <__smakebuf_r+0x46>
 800b202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b206:	059a      	lsls	r2, r3, #22
 800b208:	d4ee      	bmi.n	800b1e8 <__smakebuf_r+0x18>
 800b20a:	f023 0303 	bic.w	r3, r3, #3
 800b20e:	f043 0302 	orr.w	r3, r3, #2
 800b212:	81a3      	strh	r3, [r4, #12]
 800b214:	e7e2      	b.n	800b1dc <__smakebuf_r+0xc>
 800b216:	89a3      	ldrh	r3, [r4, #12]
 800b218:	6020      	str	r0, [r4, #0]
 800b21a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b21e:	81a3      	strh	r3, [r4, #12]
 800b220:	9b01      	ldr	r3, [sp, #4]
 800b222:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b226:	b15b      	cbz	r3, 800b240 <__smakebuf_r+0x70>
 800b228:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b22c:	4630      	mov	r0, r6
 800b22e:	f000 f81d 	bl	800b26c <_isatty_r>
 800b232:	b128      	cbz	r0, 800b240 <__smakebuf_r+0x70>
 800b234:	89a3      	ldrh	r3, [r4, #12]
 800b236:	f023 0303 	bic.w	r3, r3, #3
 800b23a:	f043 0301 	orr.w	r3, r3, #1
 800b23e:	81a3      	strh	r3, [r4, #12]
 800b240:	89a3      	ldrh	r3, [r4, #12]
 800b242:	431d      	orrs	r5, r3
 800b244:	81a5      	strh	r5, [r4, #12]
 800b246:	e7cf      	b.n	800b1e8 <__smakebuf_r+0x18>

0800b248 <_fstat_r>:
 800b248:	b538      	push	{r3, r4, r5, lr}
 800b24a:	4d07      	ldr	r5, [pc, #28]	@ (800b268 <_fstat_r+0x20>)
 800b24c:	2300      	movs	r3, #0
 800b24e:	4604      	mov	r4, r0
 800b250:	4608      	mov	r0, r1
 800b252:	4611      	mov	r1, r2
 800b254:	602b      	str	r3, [r5, #0]
 800b256:	f7f7 fc0d 	bl	8002a74 <_fstat>
 800b25a:	1c43      	adds	r3, r0, #1
 800b25c:	d102      	bne.n	800b264 <_fstat_r+0x1c>
 800b25e:	682b      	ldr	r3, [r5, #0]
 800b260:	b103      	cbz	r3, 800b264 <_fstat_r+0x1c>
 800b262:	6023      	str	r3, [r4, #0]
 800b264:	bd38      	pop	{r3, r4, r5, pc}
 800b266:	bf00      	nop
 800b268:	2000062c 	.word	0x2000062c

0800b26c <_isatty_r>:
 800b26c:	b538      	push	{r3, r4, r5, lr}
 800b26e:	4d06      	ldr	r5, [pc, #24]	@ (800b288 <_isatty_r+0x1c>)
 800b270:	2300      	movs	r3, #0
 800b272:	4604      	mov	r4, r0
 800b274:	4608      	mov	r0, r1
 800b276:	602b      	str	r3, [r5, #0]
 800b278:	f7f7 fc0c 	bl	8002a94 <_isatty>
 800b27c:	1c43      	adds	r3, r0, #1
 800b27e:	d102      	bne.n	800b286 <_isatty_r+0x1a>
 800b280:	682b      	ldr	r3, [r5, #0]
 800b282:	b103      	cbz	r3, 800b286 <_isatty_r+0x1a>
 800b284:	6023      	str	r3, [r4, #0]
 800b286:	bd38      	pop	{r3, r4, r5, pc}
 800b288:	2000062c 	.word	0x2000062c

0800b28c <abort>:
 800b28c:	b508      	push	{r3, lr}
 800b28e:	2006      	movs	r0, #6
 800b290:	f000 f834 	bl	800b2fc <raise>
 800b294:	2001      	movs	r0, #1
 800b296:	f7f7 fb9d 	bl	80029d4 <_exit>

0800b29a <_malloc_usable_size_r>:
 800b29a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b29e:	1f18      	subs	r0, r3, #4
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	bfbc      	itt	lt
 800b2a4:	580b      	ldrlt	r3, [r1, r0]
 800b2a6:	18c0      	addlt	r0, r0, r3
 800b2a8:	4770      	bx	lr

0800b2aa <_raise_r>:
 800b2aa:	291f      	cmp	r1, #31
 800b2ac:	b538      	push	{r3, r4, r5, lr}
 800b2ae:	4605      	mov	r5, r0
 800b2b0:	460c      	mov	r4, r1
 800b2b2:	d904      	bls.n	800b2be <_raise_r+0x14>
 800b2b4:	2316      	movs	r3, #22
 800b2b6:	6003      	str	r3, [r0, #0]
 800b2b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2bc:	bd38      	pop	{r3, r4, r5, pc}
 800b2be:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b2c0:	b112      	cbz	r2, 800b2c8 <_raise_r+0x1e>
 800b2c2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b2c6:	b94b      	cbnz	r3, 800b2dc <_raise_r+0x32>
 800b2c8:	4628      	mov	r0, r5
 800b2ca:	f000 f831 	bl	800b330 <_getpid_r>
 800b2ce:	4622      	mov	r2, r4
 800b2d0:	4601      	mov	r1, r0
 800b2d2:	4628      	mov	r0, r5
 800b2d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2d8:	f000 b818 	b.w	800b30c <_kill_r>
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d00a      	beq.n	800b2f6 <_raise_r+0x4c>
 800b2e0:	1c59      	adds	r1, r3, #1
 800b2e2:	d103      	bne.n	800b2ec <_raise_r+0x42>
 800b2e4:	2316      	movs	r3, #22
 800b2e6:	6003      	str	r3, [r0, #0]
 800b2e8:	2001      	movs	r0, #1
 800b2ea:	e7e7      	b.n	800b2bc <_raise_r+0x12>
 800b2ec:	2100      	movs	r1, #0
 800b2ee:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b2f2:	4620      	mov	r0, r4
 800b2f4:	4798      	blx	r3
 800b2f6:	2000      	movs	r0, #0
 800b2f8:	e7e0      	b.n	800b2bc <_raise_r+0x12>
	...

0800b2fc <raise>:
 800b2fc:	4b02      	ldr	r3, [pc, #8]	@ (800b308 <raise+0xc>)
 800b2fe:	4601      	mov	r1, r0
 800b300:	6818      	ldr	r0, [r3, #0]
 800b302:	f7ff bfd2 	b.w	800b2aa <_raise_r>
 800b306:	bf00      	nop
 800b308:	20000018 	.word	0x20000018

0800b30c <_kill_r>:
 800b30c:	b538      	push	{r3, r4, r5, lr}
 800b30e:	4d07      	ldr	r5, [pc, #28]	@ (800b32c <_kill_r+0x20>)
 800b310:	2300      	movs	r3, #0
 800b312:	4604      	mov	r4, r0
 800b314:	4608      	mov	r0, r1
 800b316:	4611      	mov	r1, r2
 800b318:	602b      	str	r3, [r5, #0]
 800b31a:	f7f7 fb4b 	bl	80029b4 <_kill>
 800b31e:	1c43      	adds	r3, r0, #1
 800b320:	d102      	bne.n	800b328 <_kill_r+0x1c>
 800b322:	682b      	ldr	r3, [r5, #0]
 800b324:	b103      	cbz	r3, 800b328 <_kill_r+0x1c>
 800b326:	6023      	str	r3, [r4, #0]
 800b328:	bd38      	pop	{r3, r4, r5, pc}
 800b32a:	bf00      	nop
 800b32c:	2000062c 	.word	0x2000062c

0800b330 <_getpid_r>:
 800b330:	f7f7 bb38 	b.w	80029a4 <_getpid>

0800b334 <_init>:
 800b334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b336:	bf00      	nop
 800b338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b33a:	bc08      	pop	{r3}
 800b33c:	469e      	mov	lr, r3
 800b33e:	4770      	bx	lr

0800b340 <_fini>:
 800b340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b342:	bf00      	nop
 800b344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b346:	bc08      	pop	{r3}
 800b348:	469e      	mov	lr, r3
 800b34a:	4770      	bx	lr
