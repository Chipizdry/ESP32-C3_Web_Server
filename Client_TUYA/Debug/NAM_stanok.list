
NAM_stanok.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e28  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08006fc8  08006fc8  00007fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070fc  080070fc  0000905c  2**0
                  CONTENTS
  4 .ARM          00000008  080070fc  080070fc  000080fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007104  08007104  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007104  08007104  00008104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007108  08007108  00008108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800710c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000384  2000005c  08007168  0000905c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  08007168  000093e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012bcc  00000000  00000000  0000908c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025fb  00000000  00000000  0001bc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001160  00000000  00000000  0001e258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dc6  00000000  00000000  0001f3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002c27  00000000  00000000  0002017e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015e34  00000000  00000000  00022da5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a254d  00000000  00000000  00038bd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000db126  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fc0  00000000  00000000  000db16c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  000e012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006fb0 	.word	0x08006fb0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08006fb0 	.word	0x08006fb0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <I2C_send>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void I2C_send(uint8_t data, uint8_t flags)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af02      	add	r7, sp, #8
 8000576:	4603      	mov	r3, r0
 8000578:	460a      	mov	r2, r1
 800057a:	71fb      	strb	r3, [r7, #7]
 800057c:	4613      	mov	r3, r2
 800057e:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef res;
	    for(;;) {                                                                     // бесконечный цикл
	        res = HAL_I2C_IsDeviceReady(&hi2c1, LCD_ADDR, 1, HAL_MAX_DELAY);          // проверяем, готово ли устройство по адресу lcd_addr для связи
 8000580:	f04f 33ff 	mov.w	r3, #4294967295
 8000584:	2201      	movs	r2, #1
 8000586:	214e      	movs	r1, #78	@ 0x4e
 8000588:	4820      	ldr	r0, [pc, #128]	@ (800060c <I2C_send+0x9c>)
 800058a:	f002 fb97 	bl	8002cbc <HAL_I2C_IsDeviceReady>
 800058e:	4603      	mov	r3, r0
 8000590:	73fb      	strb	r3, [r7, #15]
	        if(res == HAL_OK) break;                                                  // если да, то выходим из бесконечного цикла
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d000      	beq.n	800059a <I2C_send+0x2a>
	        res = HAL_I2C_IsDeviceReady(&hi2c1, LCD_ADDR, 1, HAL_MAX_DELAY);          // проверяем, готово ли устройство по адресу lcd_addr для связи
 8000598:	e7f2      	b.n	8000580 <I2C_send+0x10>
	        if(res == HAL_OK) break;                                                  // если да, то выходим из бесконечного цикла
 800059a:	bf00      	nop
	    }

	uint8_t up = data & 0xF0;                 // операция �? с 1111 0000, приводит к обнулению последних бит с 0 по 3, остаются биты с 4 по 7
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	f023 030f 	bic.w	r3, r3, #15
 80005a2:	73bb      	strb	r3, [r7, #14]
	uint8_t lo = (data << 4) & 0xF0;          // тоже самое, но data сдвигается на 4 бита влево, т.е. в этой
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	011b      	lsls	r3, r3, #4
 80005a8:	737b      	strb	r3, [r7, #13]
	                                           // переменной остаются  биты с 0 по 3
	uint8_t data_arr[4];
	data_arr[0] = up|flags|BACKLIGHT|PIN_EN;  // 4-7 биты содержат информацию, биты 0-3 конфигурируют работу
 80005aa:	7bba      	ldrb	r2, [r7, #14]
 80005ac:	79bb      	ldrb	r3, [r7, #6]
 80005ae:	4313      	orrs	r3, r2
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	f043 030c 	orr.w	r3, r3, #12
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	723b      	strb	r3, [r7, #8]
	data_arr[1] = up|flags|BACKLIGHT;         // ублирование сигнала, на выводе Е в этот раз 0
 80005ba:	7bba      	ldrb	r2, [r7, #14]
 80005bc:	79bb      	ldrb	r3, [r7, #6]
 80005be:	4313      	orrs	r3, r2
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	f043 0308 	orr.w	r3, r3, #8
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	727b      	strb	r3, [r7, #9]
	data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 80005ca:	7b7a      	ldrb	r2, [r7, #13]
 80005cc:	79bb      	ldrb	r3, [r7, #6]
 80005ce:	4313      	orrs	r3, r2
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	f043 030c 	orr.w	r3, r3, #12
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	72bb      	strb	r3, [r7, #10]
	data_arr[3] = lo|flags|BACKLIGHT;
 80005da:	7b7a      	ldrb	r2, [r7, #13]
 80005dc:	79bb      	ldrb	r3, [r7, #6]
 80005de:	4313      	orrs	r3, r2
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	f043 0308 	orr.w	r3, r3, #8
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 80005ea:	f107 0208 	add.w	r2, r7, #8
 80005ee:	f04f 33ff 	mov.w	r3, #4294967295
 80005f2:	9300      	str	r3, [sp, #0]
 80005f4:	2304      	movs	r3, #4
 80005f6:	214e      	movs	r1, #78	@ 0x4e
 80005f8:	4804      	ldr	r0, [pc, #16]	@ (800060c <I2C_send+0x9c>)
 80005fa:	f002 fa61 	bl	8002ac0 <HAL_I2C_Master_Transmit>
	HAL_Delay(LCD_DELAY_MS);
 80005fe:	2005      	movs	r0, #5
 8000600:	f001 f996 	bl	8001930 <HAL_Delay>
}
 8000604:	bf00      	nop
 8000606:	3710      	adds	r7, #16
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	200000c0 	.word	0x200000c0

08000610 <LCD_SendString>:


void LCD_SendString(char *str)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]

	while(*str) {                                   // пока строчка не закончится
 8000618:	e008      	b.n	800062c <LCD_SendString+0x1c>
		I2C_send((uint8_t)(*str), 1);               // передача первого символа строки
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2101      	movs	r1, #1
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff ffa5 	bl	8000570 <I2C_send>
        str++;                                      // сдвиг строки налево на 1 символ
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	3301      	adds	r3, #1
 800062a:	607b      	str	r3, [r7, #4]
	while(*str) {                                   // пока строчка не закончится
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d1f2      	bne.n	800061a <LCD_SendString+0xa>
    }
}
 8000634:	bf00      	nop
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b5b0      	push	{r4, r5, r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f001 f901 	bl	800184c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 fa83 	bl	8000b54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f000 fd87 	bl	8001160 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000652:	f000 fb3d 	bl	8000cd0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000656:	f000 fd59 	bl	800110c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800065a:	f000 fbc1 	bl	8000de0 <MX_TIM1_Init>
  MX_RTC_Init();
 800065e:	f000 fb65 	bl	8000d2c <MX_RTC_Init>
  MX_ADC1_Init();
 8000662:	f000 fae3 	bl	8000c2c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000666:	f000 fc5d 	bl	8000f24 <MX_TIM2_Init>
  MX_TIM3_Init();
 800066a:	f000 fcd9 	bl	8001020 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  I2C_send(0b00110000,0);   // 8ми битный интерфейс
 800066e:	2100      	movs	r1, #0
 8000670:	2030      	movs	r0, #48	@ 0x30
 8000672:	f7ff ff7d 	bl	8000570 <I2C_send>
   I2C_send(0b00000010,0);   // установка курсора в начале строки
 8000676:	2100      	movs	r1, #0
 8000678:	2002      	movs	r0, #2
 800067a:	f7ff ff79 	bl	8000570 <I2C_send>
   I2C_send(0b00001100,0);   // нормальный режим работы
 800067e:	2100      	movs	r1, #0
 8000680:	200c      	movs	r0, #12
 8000682:	f7ff ff75 	bl	8000570 <I2C_send>
   I2C_send(0b00000001,0);   // очистка дисплея
 8000686:	2100      	movs	r1, #0
 8000688:	2001      	movs	r0, #1
 800068a:	f7ff ff71 	bl	8000570 <I2C_send>
   //  LCD_SendString("  Hello ");
   //  I2C_send(0b11000000,0);   // переход на 2 строку

   //  I2C_send(0b10010100,0);   // переход на 3 строку

     I2C_send(0b11010100,0);   // переход на 4 строку
 800068e:	2100      	movs	r1, #0
 8000690:	20d4      	movs	r0, #212	@ 0xd4
 8000692:	f7ff ff6d 	bl	8000570 <I2C_send>

     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000696:	2100      	movs	r1, #0
 8000698:	48ac      	ldr	r0, [pc, #688]	@ (800094c <main+0x30c>)
 800069a:	f003 fec9 	bl	8004430 <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)==0)&&(flag==0)){
 800069e:	2110      	movs	r1, #16
 80006a0:	48ab      	ldr	r0, [pc, #684]	@ (8000950 <main+0x310>)
 80006a2:	f002 f873 	bl	800278c <HAL_GPIO_ReadPin>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d11c      	bne.n	80006e6 <main+0xa6>
 80006ac:	4ba9      	ldr	r3, [pc, #676]	@ (8000954 <main+0x314>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d118      	bne.n	80006e6 <main+0xa6>
		  regim++;
 80006b4:	4ba8      	ldr	r3, [pc, #672]	@ (8000958 <main+0x318>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	3301      	adds	r3, #1
 80006ba:	b2da      	uxtb	r2, r3
 80006bc:	4ba6      	ldr	r3, [pc, #664]	@ (8000958 <main+0x318>)
 80006be:	701a      	strb	r2, [r3, #0]
		  flag=1;
 80006c0:	4ba4      	ldr	r3, [pc, #656]	@ (8000954 <main+0x314>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	701a      	strb	r2, [r3, #0]
		  arm=0;
 80006c6:	4ba5      	ldr	r3, [pc, #660]	@ (800095c <main+0x31c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
		  run=0;
 80006cc:	4ba4      	ldr	r3, [pc, #656]	@ (8000960 <main+0x320>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(150);
 80006d2:	2096      	movs	r0, #150	@ 0x96
 80006d4:	f001 f92c 	bl	8001930 <HAL_Delay>
		  if(regim>3){regim=1;}
 80006d8:	4b9f      	ldr	r3, [pc, #636]	@ (8000958 <main+0x318>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b03      	cmp	r3, #3
 80006de:	d902      	bls.n	80006e6 <main+0xa6>
 80006e0:	4b9d      	ldr	r3, [pc, #628]	@ (8000958 <main+0x318>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	701a      	strb	r2, [r3, #0]
         }


	  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)==1)&&(flag==1)){
 80006e6:	2110      	movs	r1, #16
 80006e8:	4899      	ldr	r0, [pc, #612]	@ (8000950 <main+0x310>)
 80006ea:	f002 f84f 	bl	800278c <HAL_GPIO_ReadPin>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d109      	bne.n	8000708 <main+0xc8>
 80006f4:	4b97      	ldr	r3, [pc, #604]	@ (8000954 <main+0x314>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d105      	bne.n	8000708 <main+0xc8>

		  flag=0;
 80006fc:	4b95      	ldr	r3, [pc, #596]	@ (8000954 <main+0x314>)
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(150);
 8000702:	2096      	movs	r0, #150	@ 0x96
 8000704:	f001 f914 	bl	8001930 <HAL_Delay>

	  }

	  sprintf(time_buffer,"%04d-%02d-%02d  %02d:%02d:%02d",year, month, date,hour, minute, second);
 8000708:	4b96      	ldr	r3, [pc, #600]	@ (8000964 <main+0x324>)
 800070a:	881b      	ldrh	r3, [r3, #0]
 800070c:	461c      	mov	r4, r3
 800070e:	4b96      	ldr	r3, [pc, #600]	@ (8000968 <main+0x328>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	461d      	mov	r5, r3
 8000714:	4b95      	ldr	r3, [pc, #596]	@ (800096c <main+0x32c>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	461a      	mov	r2, r3
 800071a:	4b95      	ldr	r3, [pc, #596]	@ (8000970 <main+0x330>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	4619      	mov	r1, r3
 8000720:	4b94      	ldr	r3, [pc, #592]	@ (8000974 <main+0x334>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	4618      	mov	r0, r3
 8000726:	4b94      	ldr	r3, [pc, #592]	@ (8000978 <main+0x338>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	9303      	str	r3, [sp, #12]
 800072c:	9002      	str	r0, [sp, #8]
 800072e:	9101      	str	r1, [sp, #4]
 8000730:	9200      	str	r2, [sp, #0]
 8000732:	462b      	mov	r3, r5
 8000734:	4622      	mov	r2, r4
 8000736:	4991      	ldr	r1, [pc, #580]	@ (800097c <main+0x33c>)
 8000738:	4891      	ldr	r0, [pc, #580]	@ (8000980 <main+0x340>)
 800073a:	f005 ff99 	bl	8006670 <siprintf>
	  	  		//I2C_send(0b00000001,0);   // очистка дисплея
	  	  	    I2C_send(0b11010100,0);   // переход на 4 строку
 800073e:	2100      	movs	r1, #0
 8000740:	20d4      	movs	r0, #212	@ 0xd4
 8000742:	f7ff ff15 	bl	8000570 <I2C_send>
	  	  		LCD_SendString(time_buffer);
 8000746:	488e      	ldr	r0, [pc, #568]	@ (8000980 <main+0x340>)
 8000748:	f7ff ff62 	bl	8000610 <LCD_SendString>




	  if(regim==1){
 800074c:	4b82      	ldr	r3, [pc, #520]	@ (8000958 <main+0x318>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b01      	cmp	r3, #1
 8000752:	f040 80dc 	bne.w	800090e <main+0x2ce>
		  I2C_send(0b10000000,0);   // переход на 1 строку
 8000756:	2100      	movs	r1, #0
 8000758:	2080      	movs	r0, #128	@ 0x80
 800075a:	f7ff ff09 	bl	8000570 <I2C_send>
		  LCD_SendString("RUN MODE-           ");
 800075e:	4889      	ldr	r0, [pc, #548]	@ (8000984 <main+0x344>)
 8000760:	f7ff ff56 	bl	8000610 <LCD_SendString>
		  I2C_send(0b11000000,0);   // переход на 2 строку
 8000764:	2100      	movs	r1, #0
 8000766:	20c0      	movs	r0, #192	@ 0xc0
 8000768:	f7ff ff02 	bl	8000570 <I2C_send>
		  sprintf(info_buffer,"Turns=%04d      ",turns);
 800076c:	4b86      	ldr	r3, [pc, #536]	@ (8000988 <main+0x348>)
 800076e:	881b      	ldrh	r3, [r3, #0]
 8000770:	461a      	mov	r2, r3
 8000772:	4986      	ldr	r1, [pc, #536]	@ (800098c <main+0x34c>)
 8000774:	4886      	ldr	r0, [pc, #536]	@ (8000990 <main+0x350>)
 8000776:	f005 ff7b 	bl	8006670 <siprintf>
		  LCD_SendString(info_buffer);
 800077a:	4885      	ldr	r0, [pc, #532]	@ (8000990 <main+0x350>)
 800077c:	f7ff ff48 	bl	8000610 <LCD_SendString>
		  FORVARD;
 8000780:	2200      	movs	r2, #0
 8000782:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000786:	4883      	ldr	r0, [pc, #524]	@ (8000994 <main+0x354>)
 8000788:	f002 f818 	bl	80027bc <HAL_GPIO_WritePin>
		  I2C_send(0b10010100,0);   // переход на 3 строку
 800078c:	2100      	movs	r1, #0
 800078e:	2094      	movs	r0, #148	@ 0x94
 8000790:	f7ff feee 	bl	8000570 <I2C_send>
		  sprintf(info_buffer,"Speed=%04d RPM     ",speed);
 8000794:	4b80      	ldr	r3, [pc, #512]	@ (8000998 <main+0x358>)
 8000796:	881b      	ldrh	r3, [r3, #0]
 8000798:	461a      	mov	r2, r3
 800079a:	4980      	ldr	r1, [pc, #512]	@ (800099c <main+0x35c>)
 800079c:	487c      	ldr	r0, [pc, #496]	@ (8000990 <main+0x350>)
 800079e:	f005 ff67 	bl	8006670 <siprintf>
		  		  LCD_SendString(info_buffer);
 80007a2:	487b      	ldr	r0, [pc, #492]	@ (8000990 <main+0x350>)
 80007a4:	f7ff ff34 	bl	8000610 <LCD_SendString>



		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==1)&&(arm==0)&&(run==0)){
 80007a8:	2108      	movs	r1, #8
 80007aa:	4869      	ldr	r0, [pc, #420]	@ (8000950 <main+0x310>)
 80007ac:	f001 ffee 	bl	800278c <HAL_GPIO_ReadPin>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d119      	bne.n	80007ea <main+0x1aa>
 80007b6:	4b69      	ldr	r3, [pc, #420]	@ (800095c <main+0x31c>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d115      	bne.n	80007ea <main+0x1aa>
 80007be:	4b68      	ldr	r3, [pc, #416]	@ (8000960 <main+0x320>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d111      	bne.n	80007ea <main+0x1aa>
			  HAL_Delay(50);
 80007c6:	2032      	movs	r0, #50	@ 0x32
 80007c8:	f001 f8b2 	bl	8001930 <HAL_Delay>
			  I2C_send(0b10000000,0);   // переход на 1 строку
 80007cc:	2100      	movs	r1, #0
 80007ce:	2080      	movs	r0, #128	@ 0x80
 80007d0:	f7ff fece 	bl	8000570 <I2C_send>
			  		  LCD_SendString("RUN MODE- READY...  ");
 80007d4:	4872      	ldr	r0, [pc, #456]	@ (80009a0 <main+0x360>)
 80007d6:	f7ff ff1b 	bl	8000610 <LCD_SendString>
			  		 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80007da:	2100      	movs	r1, #0
 80007dc:	485b      	ldr	r0, [pc, #364]	@ (800094c <main+0x30c>)
 80007de:	f003 fed7 	bl	8004590 <HAL_TIM_PWM_Stop>
			  		 HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80007e2:	2100      	movs	r1, #0
 80007e4:	4859      	ldr	r0, [pc, #356]	@ (800094c <main+0x30c>)
 80007e6:	f004 fece 	bl	8005586 <HAL_TIMEx_PWMN_Stop>
		  }

		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==0)&&(arm==0)&&(run==0)){
 80007ea:	2108      	movs	r1, #8
 80007ec:	4858      	ldr	r0, [pc, #352]	@ (8000950 <main+0x310>)
 80007ee:	f001 ffcd 	bl	800278c <HAL_GPIO_ReadPin>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d10d      	bne.n	8000814 <main+0x1d4>
 80007f8:	4b58      	ldr	r3, [pc, #352]	@ (800095c <main+0x31c>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d109      	bne.n	8000814 <main+0x1d4>
 8000800:	4b57      	ldr	r3, [pc, #348]	@ (8000960 <main+0x320>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d105      	bne.n	8000814 <main+0x1d4>
                 arm=1;
 8000808:	4b54      	ldr	r3, [pc, #336]	@ (800095c <main+0x31c>)
 800080a:	2201      	movs	r2, #1
 800080c:	701a      	strb	r2, [r3, #0]
					  HAL_Delay(150); }
 800080e:	2096      	movs	r0, #150	@ 0x96
 8000810:	f001 f88e 	bl	8001930 <HAL_Delay>

		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==1)&&(arm==1)&&(run==0)){
 8000814:	2108      	movs	r1, #8
 8000816:	484e      	ldr	r0, [pc, #312]	@ (8000950 <main+0x310>)
 8000818:	f001 ffb8 	bl	800278c <HAL_GPIO_ReadPin>
 800081c:	4603      	mov	r3, r0
 800081e:	2b01      	cmp	r3, #1
 8000820:	d114      	bne.n	800084c <main+0x20c>
 8000822:	4b4e      	ldr	r3, [pc, #312]	@ (800095c <main+0x31c>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b01      	cmp	r3, #1
 8000828:	d110      	bne.n	800084c <main+0x20c>
 800082a:	4b4d      	ldr	r3, [pc, #308]	@ (8000960 <main+0x320>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d10c      	bne.n	800084c <main+0x20c>
		 			  HAL_Delay(50);
 8000832:	2032      	movs	r0, #50	@ 0x32
 8000834:	f001 f87c 	bl	8001930 <HAL_Delay>
		 			  run=1;
 8000838:	4b49      	ldr	r3, [pc, #292]	@ (8000960 <main+0x320>)
 800083a:	2201      	movs	r2, #1
 800083c:	701a      	strb	r2, [r3, #0]
		 			  I2C_send(0b10000000,0);   // переход на 1 строку
 800083e:	2100      	movs	r1, #0
 8000840:	2080      	movs	r0, #128	@ 0x80
 8000842:	f7ff fe95 	bl	8000570 <I2C_send>
		 			  		  LCD_SendString("RUN MODE- RUNING    ");
 8000846:	4857      	ldr	r0, [pc, #348]	@ (80009a4 <main+0x364>)
 8000848:	f7ff fee2 	bl	8000610 <LCD_SendString>

                }


		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==1)&&(arm==1)&&(run==1)){
 800084c:	2108      	movs	r1, #8
 800084e:	4840      	ldr	r0, [pc, #256]	@ (8000950 <main+0x310>)
 8000850:	f001 ff9c 	bl	800278c <HAL_GPIO_ReadPin>
 8000854:	4603      	mov	r3, r0
 8000856:	2b01      	cmp	r3, #1
 8000858:	d125      	bne.n	80008a6 <main+0x266>
 800085a:	4b40      	ldr	r3, [pc, #256]	@ (800095c <main+0x31c>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d121      	bne.n	80008a6 <main+0x266>
 8000862:	4b3f      	ldr	r3, [pc, #252]	@ (8000960 <main+0x320>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d11d      	bne.n	80008a6 <main+0x266>

		 		                      I2C_send(0b10000000,0);   // переход на 1 строку
 800086a:	2100      	movs	r1, #0
 800086c:	2080      	movs	r0, #128	@ 0x80
 800086e:	f7ff fe7f 	bl	8000570 <I2C_send>
		 		                      LCD_SendString("RUN MODE- RUNING    ");
 8000872:	484c      	ldr	r0, [pc, #304]	@ (80009a4 <main+0x364>)
 8000874:	f7ff fecc 	bl	8000610 <LCD_SendString>

		 		                     HAL_ADC_Start(&hadc1); // запускаем преобразование сигнала АЦП
 8000878:	484b      	ldr	r0, [pc, #300]	@ (80009a8 <main+0x368>)
 800087a:	f001 f8c1 	bl	8001a00 <HAL_ADC_Start>
		 		                     HAL_ADC_PollForConversion(&hadc1, 100); // ожидаем окончания преобразования
 800087e:	2164      	movs	r1, #100	@ 0x64
 8000880:	4849      	ldr	r0, [pc, #292]	@ (80009a8 <main+0x368>)
 8000882:	f001 f9a4 	bl	8001bce <HAL_ADC_PollForConversion>
		 		                     adc = HAL_ADC_GetValue(&hadc1); // читаем полученное значение в переменную adc
 8000886:	4848      	ldr	r0, [pc, #288]	@ (80009a8 <main+0x368>)
 8000888:	f001 fa2c 	bl	8001ce4 <HAL_ADC_GetValue>
 800088c:	4603      	mov	r3, r0
 800088e:	b29a      	uxth	r2, r3
 8000890:	4b46      	ldr	r3, [pc, #280]	@ (80009ac <main+0x36c>)
 8000892:	801a      	strh	r2, [r3, #0]
		 		                     HAL_ADC_Stop(&hadc1); // останавливаем АЦП (не обязательно)
 8000894:	4844      	ldr	r0, [pc, #272]	@ (80009a8 <main+0x368>)
 8000896:	f001 f967 	bl	8001b68 <HAL_ADC_Stop>
		 		                     speed=adc-230;
 800089a:	4b44      	ldr	r3, [pc, #272]	@ (80009ac <main+0x36c>)
 800089c:	881b      	ldrh	r3, [r3, #0]
 800089e:	3be6      	subs	r3, #230	@ 0xe6
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	4b3d      	ldr	r3, [pc, #244]	@ (8000998 <main+0x358>)
 80008a4:	801a      	strh	r2, [r3, #0]
		 	*/

		 		 					}


		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==0)&&(arm==1)&&(run==1)){
 80008a6:	2108      	movs	r1, #8
 80008a8:	4829      	ldr	r0, [pc, #164]	@ (8000950 <main+0x310>)
 80008aa:	f001 ff6f 	bl	800278c <HAL_GPIO_ReadPin>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d114      	bne.n	80008de <main+0x29e>
 80008b4:	4b29      	ldr	r3, [pc, #164]	@ (800095c <main+0x31c>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d110      	bne.n	80008de <main+0x29e>
 80008bc:	4b28      	ldr	r3, [pc, #160]	@ (8000960 <main+0x320>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d10c      	bne.n	80008de <main+0x29e>
		                       arm=0;
 80008c4:	4b25      	ldr	r3, [pc, #148]	@ (800095c <main+0x31c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	701a      	strb	r2, [r3, #0]
		                       I2C_send(0b10000000,0);   // переход на 1 строку
 80008ca:	2100      	movs	r1, #0
 80008cc:	2080      	movs	r0, #128	@ 0x80
 80008ce:	f7ff fe4f 	bl	8000570 <I2C_send>
		                        LCD_SendString("RUN MODE- RUNING    ");
 80008d2:	4834      	ldr	r0, [pc, #208]	@ (80009a4 <main+0x364>)
 80008d4:	f7ff fe9c 	bl	8000610 <LCD_SendString>
		 					  HAL_Delay(150); }
 80008d8:	2096      	movs	r0, #150	@ 0x96
 80008da:	f001 f829 	bl	8001930 <HAL_Delay>

		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==1)&&(arm==0)&&(run==1)){
 80008de:	2108      	movs	r1, #8
 80008e0:	481b      	ldr	r0, [pc, #108]	@ (8000950 <main+0x310>)
 80008e2:	f001 ff53 	bl	800278c <HAL_GPIO_ReadPin>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d110      	bne.n	800090e <main+0x2ce>
 80008ec:	4b1b      	ldr	r3, [pc, #108]	@ (800095c <main+0x31c>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d10c      	bne.n	800090e <main+0x2ce>
 80008f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000960 <main+0x320>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d108      	bne.n	800090e <main+0x2ce>
				                       arm=0;
 80008fc:	4b17      	ldr	r3, [pc, #92]	@ (800095c <main+0x31c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	701a      	strb	r2, [r3, #0]
				                       run=0;
 8000902:	4b17      	ldr	r3, [pc, #92]	@ (8000960 <main+0x320>)
 8000904:	2200      	movs	r2, #0
 8000906:	701a      	strb	r2, [r3, #0]
				 					  HAL_Delay(150); }
 8000908:	2096      	movs	r0, #150	@ 0x96
 800090a:	f001 f811 	bl	8001930 <HAL_Delay>

	  }

	  if(regim==2){
 800090e:	4b12      	ldr	r3, [pc, #72]	@ (8000958 <main+0x318>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b02      	cmp	r3, #2
 8000914:	f040 80fd 	bne.w	8000b12 <main+0x4d2>
	 		  I2C_send(0b10000000,0);   // переход на 1 строку
 8000918:	2100      	movs	r1, #0
 800091a:	2080      	movs	r0, #128	@ 0x80
 800091c:	f7ff fe28 	bl	8000570 <I2C_send>
	 		  LCD_SendString("REVERS MODE         ");
 8000920:	4823      	ldr	r0, [pc, #140]	@ (80009b0 <main+0x370>)
 8000922:	f7ff fe75 	bl	8000610 <LCD_SendString>
	 		  REVERS;
 8000926:	2201      	movs	r2, #1
 8000928:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800092c:	4819      	ldr	r0, [pc, #100]	@ (8000994 <main+0x354>)
 800092e:	f001 ff45 	bl	80027bc <HAL_GPIO_WritePin>
	/////////////////////////////////////REVERS/////////////////////////////////////////////
	 		 if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==1)&&(arm==0)&&(run==0)){
 8000932:	2108      	movs	r1, #8
 8000934:	4806      	ldr	r0, [pc, #24]	@ (8000950 <main+0x310>)
 8000936:	f001 ff29 	bl	800278c <HAL_GPIO_ReadPin>
 800093a:	4603      	mov	r3, r0
 800093c:	2b01      	cmp	r3, #1
 800093e:	d147      	bne.n	80009d0 <main+0x390>
 8000940:	4b06      	ldr	r3, [pc, #24]	@ (800095c <main+0x31c>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d143      	bne.n	80009d0 <main+0x390>
 8000948:	e034      	b.n	80009b4 <main+0x374>
 800094a:	bf00      	nop
 800094c:	20000134 	.word	0x20000134
 8000950:	40020400 	.word	0x40020400
 8000954:	20000283 	.word	0x20000283
 8000958:	20000284 	.word	0x20000284
 800095c:	20000288 	.word	0x20000288
 8000960:	20000289 	.word	0x20000289
 8000964:	2000027c 	.word	0x2000027c
 8000968:	2000027e 	.word	0x2000027e
 800096c:	2000027f 	.word	0x2000027f
 8000970:	20000280 	.word	0x20000280
 8000974:	20000281 	.word	0x20000281
 8000978:	20000282 	.word	0x20000282
 800097c:	08006fc8 	.word	0x08006fc8
 8000980:	20000254 	.word	0x20000254
 8000984:	08006fe8 	.word	0x08006fe8
 8000988:	20000286 	.word	0x20000286
 800098c:	08007000 	.word	0x08007000
 8000990:	20000268 	.word	0x20000268
 8000994:	40020000 	.word	0x40020000
 8000998:	2000028a 	.word	0x2000028a
 800099c:	08007014 	.word	0x08007014
 80009a0:	08007028 	.word	0x08007028
 80009a4:	08007040 	.word	0x08007040
 80009a8:	20000078 	.word	0x20000078
 80009ac:	2000028c 	.word	0x2000028c
 80009b0:	08007058 	.word	0x08007058
 80009b4:	4b5d      	ldr	r3, [pc, #372]	@ (8000b2c <main+0x4ec>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d109      	bne.n	80009d0 <main+0x390>
	 		 			  HAL_Delay(50);
 80009bc:	2032      	movs	r0, #50	@ 0x32
 80009be:	f000 ffb7 	bl	8001930 <HAL_Delay>
	 		 			  I2C_send(0b10000000,0);   // переход на 1 строку
 80009c2:	2100      	movs	r1, #0
 80009c4:	2080      	movs	r0, #128	@ 0x80
 80009c6:	f7ff fdd3 	bl	8000570 <I2C_send>
	 		 			  		  LCD_SendString("REVERS MODE- READY...  ");
 80009ca:	4859      	ldr	r0, [pc, #356]	@ (8000b30 <main+0x4f0>)
 80009cc:	f7ff fe20 	bl	8000610 <LCD_SendString>
	 		 			  	//	 HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
	 		 			  	//	 HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
	 		 		  }

	 		 		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==0)&&(arm==0)&&(run==0)){
 80009d0:	2108      	movs	r1, #8
 80009d2:	4858      	ldr	r0, [pc, #352]	@ (8000b34 <main+0x4f4>)
 80009d4:	f001 feda 	bl	800278c <HAL_GPIO_ReadPin>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d10d      	bne.n	80009fa <main+0x3ba>
 80009de:	4b56      	ldr	r3, [pc, #344]	@ (8000b38 <main+0x4f8>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d109      	bne.n	80009fa <main+0x3ba>
 80009e6:	4b51      	ldr	r3, [pc, #324]	@ (8000b2c <main+0x4ec>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d105      	bne.n	80009fa <main+0x3ba>
	 		                       arm=1;
 80009ee:	4b52      	ldr	r3, [pc, #328]	@ (8000b38 <main+0x4f8>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	701a      	strb	r2, [r3, #0]
	 		 					  HAL_Delay(150); }
 80009f4:	2096      	movs	r0, #150	@ 0x96
 80009f6:	f000 ff9b 	bl	8001930 <HAL_Delay>

	 		 		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==1)&&(arm==1)&&(run==0)){
 80009fa:	2108      	movs	r1, #8
 80009fc:	484d      	ldr	r0, [pc, #308]	@ (8000b34 <main+0x4f4>)
 80009fe:	f001 fec5 	bl	800278c <HAL_GPIO_ReadPin>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d125      	bne.n	8000a54 <main+0x414>
 8000a08:	4b4b      	ldr	r3, [pc, #300]	@ (8000b38 <main+0x4f8>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d121      	bne.n	8000a54 <main+0x414>
 8000a10:	4b46      	ldr	r3, [pc, #280]	@ (8000b2c <main+0x4ec>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d11d      	bne.n	8000a54 <main+0x414>
	 		 		 			  HAL_Delay(50);
 8000a18:	2032      	movs	r0, #50	@ 0x32
 8000a1a:	f000 ff89 	bl	8001930 <HAL_Delay>
	 		 		 			  run=1;
 8000a1e:	4b43      	ldr	r3, [pc, #268]	@ (8000b2c <main+0x4ec>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	701a      	strb	r2, [r3, #0]
	 		 		 			  I2C_send(0b10000000,0);   // переход на 1 строку
 8000a24:	2100      	movs	r1, #0
 8000a26:	2080      	movs	r0, #128	@ 0x80
 8000a28:	f7ff fda2 	bl	8000570 <I2C_send>
	 		 		 			  		  LCD_SendString("REVERS MODE- RUNING    ");
 8000a2c:	4843      	ldr	r0, [pc, #268]	@ (8000b3c <main+0x4fc>)
 8000a2e:	f7ff fdef 	bl	8000610 <LCD_SendString>

	 		 		 			  	  HAL_ADC_Start(&hadc1); // запускаем преобразование сигнала АЦП
 8000a32:	4843      	ldr	r0, [pc, #268]	@ (8000b40 <main+0x500>)
 8000a34:	f000 ffe4 	bl	8001a00 <HAL_ADC_Start>
	 		 		 			      HAL_ADC_PollForConversion(&hadc1, 100); // ожидаем окончания преобразования
 8000a38:	2164      	movs	r1, #100	@ 0x64
 8000a3a:	4841      	ldr	r0, [pc, #260]	@ (8000b40 <main+0x500>)
 8000a3c:	f001 f8c7 	bl	8001bce <HAL_ADC_PollForConversion>
	 		 		 			      adc = HAL_ADC_GetValue(&hadc1); // читаем полученное значение в переменную adc
 8000a40:	483f      	ldr	r0, [pc, #252]	@ (8000b40 <main+0x500>)
 8000a42:	f001 f94f 	bl	8001ce4 <HAL_ADC_GetValue>
 8000a46:	4603      	mov	r3, r0
 8000a48:	b29a      	uxth	r2, r3
 8000a4a:	4b3e      	ldr	r3, [pc, #248]	@ (8000b44 <main+0x504>)
 8000a4c:	801a      	strh	r2, [r3, #0]
	 		 		 			      HAL_ADC_Stop(&hadc1); // останавливаем АЦП (не обязательно)
 8000a4e:	483c      	ldr	r0, [pc, #240]	@ (8000b40 <main+0x500>)
 8000a50:	f001 f88a 	bl	8001b68 <HAL_ADC_Stop>

	 		                      }


	 		 		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==1)&&(arm==1)&&(run==1)){
 8000a54:	2108      	movs	r1, #8
 8000a56:	4837      	ldr	r0, [pc, #220]	@ (8000b34 <main+0x4f4>)
 8000a58:	f001 fe98 	bl	800278c <HAL_GPIO_ReadPin>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d123      	bne.n	8000aaa <main+0x46a>
 8000a62:	4b35      	ldr	r3, [pc, #212]	@ (8000b38 <main+0x4f8>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d11f      	bne.n	8000aaa <main+0x46a>
 8000a6a:	4b30      	ldr	r3, [pc, #192]	@ (8000b2c <main+0x4ec>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d11b      	bne.n	8000aaa <main+0x46a>

	 		 		 		                      I2C_send(0b10000000,0);   // переход на 1 строку
 8000a72:	2100      	movs	r1, #0
 8000a74:	2080      	movs	r0, #128	@ 0x80
 8000a76:	f7ff fd7b 	bl	8000570 <I2C_send>
	 		 		 		                      LCD_SendString("REVERS MODE- RUNING    ");
 8000a7a:	4830      	ldr	r0, [pc, #192]	@ (8000b3c <main+0x4fc>)
 8000a7c:	f7ff fdc8 	bl	8000610 <LCD_SendString>
	 		 		 		                    //   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	 		 		 		                    //   HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);

	 		 		 		                    HAL_ADC_Start(&hadc1); // запускаем преобразование сигнала АЦП
 8000a80:	482f      	ldr	r0, [pc, #188]	@ (8000b40 <main+0x500>)
 8000a82:	f000 ffbd 	bl	8001a00 <HAL_ADC_Start>
	 		 		 		                    HAL_ADC_PollForConversion(&hadc1, 100); // ожидаем окончания преобразования
 8000a86:	2164      	movs	r1, #100	@ 0x64
 8000a88:	482d      	ldr	r0, [pc, #180]	@ (8000b40 <main+0x500>)
 8000a8a:	f001 f8a0 	bl	8001bce <HAL_ADC_PollForConversion>
	 		 		 		                    adc = HAL_ADC_GetValue(&hadc1); // читаем полученное значение в переменную adc
 8000a8e:	482c      	ldr	r0, [pc, #176]	@ (8000b40 <main+0x500>)
 8000a90:	f001 f928 	bl	8001ce4 <HAL_ADC_GetValue>
 8000a94:	4603      	mov	r3, r0
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	4b2a      	ldr	r3, [pc, #168]	@ (8000b44 <main+0x504>)
 8000a9a:	801a      	strh	r2, [r3, #0]
	 		 		 		                     HAL_ADC_Stop(&hadc1); // останавливаем АЦП (не обязательно)
 8000a9c:	4828      	ldr	r0, [pc, #160]	@ (8000b40 <main+0x500>)
 8000a9e:	f001 f863 	bl	8001b68 <HAL_ADC_Stop>
	 		 		 		                     speed=adc;
 8000aa2:	4b28      	ldr	r3, [pc, #160]	@ (8000b44 <main+0x504>)
 8000aa4:	881a      	ldrh	r2, [r3, #0]
 8000aa6:	4b28      	ldr	r3, [pc, #160]	@ (8000b48 <main+0x508>)
 8000aa8:	801a      	strh	r2, [r3, #0]
	 		 		 		 					}


	 		 		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==0)&&(arm==1)&&(run==1)){
 8000aaa:	2108      	movs	r1, #8
 8000aac:	4821      	ldr	r0, [pc, #132]	@ (8000b34 <main+0x4f4>)
 8000aae:	f001 fe6d 	bl	800278c <HAL_GPIO_ReadPin>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d114      	bne.n	8000ae2 <main+0x4a2>
 8000ab8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b38 <main+0x4f8>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d110      	bne.n	8000ae2 <main+0x4a2>
 8000ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b2c <main+0x4ec>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d10c      	bne.n	8000ae2 <main+0x4a2>
	 		 		                       arm=0;
 8000ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b38 <main+0x4f8>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
	 		 		                       I2C_send(0b10000000,0);   // переход на 1 строку
 8000ace:	2100      	movs	r1, #0
 8000ad0:	2080      	movs	r0, #128	@ 0x80
 8000ad2:	f7ff fd4d 	bl	8000570 <I2C_send>
	 		 		                        LCD_SendString("REVERS MODE- RUNING    ");
 8000ad6:	4819      	ldr	r0, [pc, #100]	@ (8000b3c <main+0x4fc>)
 8000ad8:	f7ff fd9a 	bl	8000610 <LCD_SendString>
	 		 		 					  HAL_Delay(150); }
 8000adc:	2096      	movs	r0, #150	@ 0x96
 8000ade:	f000 ff27 	bl	8001930 <HAL_Delay>

	 		 		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==1)&&(arm==0)&&(run==1)){
 8000ae2:	2108      	movs	r1, #8
 8000ae4:	4813      	ldr	r0, [pc, #76]	@ (8000b34 <main+0x4f4>)
 8000ae6:	f001 fe51 	bl	800278c <HAL_GPIO_ReadPin>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d110      	bne.n	8000b12 <main+0x4d2>
 8000af0:	4b11      	ldr	r3, [pc, #68]	@ (8000b38 <main+0x4f8>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d10c      	bne.n	8000b12 <main+0x4d2>
 8000af8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b2c <main+0x4ec>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d108      	bne.n	8000b12 <main+0x4d2>
	 		 				                       arm=0;
 8000b00:	4b0d      	ldr	r3, [pc, #52]	@ (8000b38 <main+0x4f8>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	701a      	strb	r2, [r3, #0]
	 		 				                       run=0;
 8000b06:	4b09      	ldr	r3, [pc, #36]	@ (8000b2c <main+0x4ec>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	701a      	strb	r2, [r3, #0]
	 		 				 					  HAL_Delay(150); }
 8000b0c:	2096      	movs	r0, #150	@ 0x96
 8000b0e:	f000 ff0f 	bl	8001930 <HAL_Delay>


	 	  }

	  if(regim==3){
 8000b12:	4b0e      	ldr	r3, [pc, #56]	@ (8000b4c <main+0x50c>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b03      	cmp	r3, #3
 8000b18:	f47f adc1 	bne.w	800069e <main+0x5e>
		 		  I2C_send(0b10000000,0);   // переход на 1 строку
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	2080      	movs	r0, #128	@ 0x80
 8000b20:	f7ff fd26 	bl	8000570 <I2C_send>
		 		  LCD_SendString("SETUP MODE     ");
 8000b24:	480a      	ldr	r0, [pc, #40]	@ (8000b50 <main+0x510>)
 8000b26:	f7ff fd73 	bl	8000610 <LCD_SendString>
	  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)==0)&&(flag==0)){
 8000b2a:	e5b8      	b.n	800069e <main+0x5e>
 8000b2c:	20000289 	.word	0x20000289
 8000b30:	08007070 	.word	0x08007070
 8000b34:	40020400 	.word	0x40020400
 8000b38:	20000288 	.word	0x20000288
 8000b3c:	08007088 	.word	0x08007088
 8000b40:	20000078 	.word	0x20000078
 8000b44:	2000028c 	.word	0x2000028c
 8000b48:	2000028a 	.word	0x2000028a
 8000b4c:	20000284 	.word	0x20000284
 8000b50:	080070a0 	.word	0x080070a0

08000b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b094      	sub	sp, #80	@ 0x50
 8000b58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5a:	f107 0320 	add.w	r3, r7, #32
 8000b5e:	2230      	movs	r2, #48	@ 0x30
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f005 fda4 	bl	80066b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b68:	f107 030c 	add.w	r3, r7, #12
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	4b29      	ldr	r3, [pc, #164]	@ (8000c24 <SystemClock_Config+0xd0>)
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b80:	4a28      	ldr	r2, [pc, #160]	@ (8000c24 <SystemClock_Config+0xd0>)
 8000b82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b86:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b88:	4b26      	ldr	r3, [pc, #152]	@ (8000c24 <SystemClock_Config+0xd0>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b94:	2300      	movs	r3, #0
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	4b23      	ldr	r3, [pc, #140]	@ (8000c28 <SystemClock_Config+0xd4>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ba0:	4a21      	ldr	r2, [pc, #132]	@ (8000c28 <SystemClock_Config+0xd4>)
 8000ba2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ba6:	6013      	str	r3, [r2, #0]
 8000ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c28 <SystemClock_Config+0xd4>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000bb4:	230a      	movs	r3, #10
 8000bb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bbc:	2310      	movs	r3, #16
 8000bbe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bcc:	2308      	movs	r3, #8
 8000bce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000bd0:	2354      	movs	r3, #84	@ 0x54
 8000bd2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bd8:	2304      	movs	r3, #4
 8000bda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bdc:	f107 0320 	add.w	r3, r7, #32
 8000be0:	4618      	mov	r0, r3
 8000be2:	f002 fbf5 	bl	80033d0 <HAL_RCC_OscConfig>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000bec:	f000 fb40 	bl	8001270 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf0:	230f      	movs	r3, #15
 8000bf2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c06:	f107 030c 	add.w	r3, r7, #12
 8000c0a:	2102      	movs	r1, #2
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f002 fe57 	bl	80038c0 <HAL_RCC_ClockConfig>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000c18:	f000 fb2a 	bl	8001270 <Error_Handler>
  }
}
 8000c1c:	bf00      	nop
 8000c1e:	3750      	adds	r7, #80	@ 0x50
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40007000 	.word	0x40007000

08000c2c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c32:	463b      	mov	r3, r7
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c3e:	4b21      	ldr	r3, [pc, #132]	@ (8000cc4 <MX_ADC1_Init+0x98>)
 8000c40:	4a21      	ldr	r2, [pc, #132]	@ (8000cc8 <MX_ADC1_Init+0x9c>)
 8000c42:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c44:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc4 <MX_ADC1_Init+0x98>)
 8000c46:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000c4a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc4 <MX_ADC1_Init+0x98>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000c52:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc4 <MX_ADC1_Init+0x98>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c58:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc4 <MX_ADC1_Init+0x98>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c5e:	4b19      	ldr	r3, [pc, #100]	@ (8000cc4 <MX_ADC1_Init+0x98>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c66:	4b17      	ldr	r3, [pc, #92]	@ (8000cc4 <MX_ADC1_Init+0x98>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c6c:	4b15      	ldr	r3, [pc, #84]	@ (8000cc4 <MX_ADC1_Init+0x98>)
 8000c6e:	4a17      	ldr	r2, [pc, #92]	@ (8000ccc <MX_ADC1_Init+0xa0>)
 8000c70:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c72:	4b14      	ldr	r3, [pc, #80]	@ (8000cc4 <MX_ADC1_Init+0x98>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c78:	4b12      	ldr	r3, [pc, #72]	@ (8000cc4 <MX_ADC1_Init+0x98>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c7e:	4b11      	ldr	r3, [pc, #68]	@ (8000cc4 <MX_ADC1_Init+0x98>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c86:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc4 <MX_ADC1_Init+0x98>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c8c:	480d      	ldr	r0, [pc, #52]	@ (8000cc4 <MX_ADC1_Init+0x98>)
 8000c8e:	f000 fe73 	bl	8001978 <HAL_ADC_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000c98:	f000 faea 	bl	8001270 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000c9c:	2306      	movs	r3, #6
 8000c9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ca8:	463b      	mov	r3, r7
 8000caa:	4619      	mov	r1, r3
 8000cac:	4805      	ldr	r0, [pc, #20]	@ (8000cc4 <MX_ADC1_Init+0x98>)
 8000cae:	f001 f827 	bl	8001d00 <HAL_ADC_ConfigChannel>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000cb8:	f000 fada 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	3710      	adds	r7, #16
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000078 	.word	0x20000078
 8000cc8:	40012000 	.word	0x40012000
 8000ccc:	0f000001 	.word	0x0f000001

08000cd0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cd4:	4b12      	ldr	r3, [pc, #72]	@ (8000d20 <MX_I2C1_Init+0x50>)
 8000cd6:	4a13      	ldr	r2, [pc, #76]	@ (8000d24 <MX_I2C1_Init+0x54>)
 8000cd8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000cda:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <MX_I2C1_Init+0x50>)
 8000cdc:	4a12      	ldr	r2, [pc, #72]	@ (8000d28 <MX_I2C1_Init+0x58>)
 8000cde:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d20 <MX_I2C1_Init+0x50>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d20 <MX_I2C1_Init+0x50>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cec:	4b0c      	ldr	r3, [pc, #48]	@ (8000d20 <MX_I2C1_Init+0x50>)
 8000cee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000cf2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8000d20 <MX_I2C1_Init+0x50>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cfa:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <MX_I2C1_Init+0x50>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <MX_I2C1_Init+0x50>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d06:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <MX_I2C1_Init+0x50>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d0c:	4804      	ldr	r0, [pc, #16]	@ (8000d20 <MX_I2C1_Init+0x50>)
 8000d0e:	f001 fd93 	bl	8002838 <HAL_I2C_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d18:	f000 faaa 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	200000c0 	.word	0x200000c0
 8000d24:	40005400 	.word	0x40005400
 8000d28:	000186a0 	.word	0x000186a0

08000d2c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000d40:	2300      	movs	r3, #0
 8000d42:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d44:	4b24      	ldr	r3, [pc, #144]	@ (8000dd8 <MX_RTC_Init+0xac>)
 8000d46:	4a25      	ldr	r2, [pc, #148]	@ (8000ddc <MX_RTC_Init+0xb0>)
 8000d48:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d4a:	4b23      	ldr	r3, [pc, #140]	@ (8000dd8 <MX_RTC_Init+0xac>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d50:	4b21      	ldr	r3, [pc, #132]	@ (8000dd8 <MX_RTC_Init+0xac>)
 8000d52:	227f      	movs	r2, #127	@ 0x7f
 8000d54:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d56:	4b20      	ldr	r3, [pc, #128]	@ (8000dd8 <MX_RTC_Init+0xac>)
 8000d58:	22ff      	movs	r2, #255	@ 0xff
 8000d5a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd8 <MX_RTC_Init+0xac>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d62:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd8 <MX_RTC_Init+0xac>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d68:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd8 <MX_RTC_Init+0xac>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d6e:	481a      	ldr	r0, [pc, #104]	@ (8000dd8 <MX_RTC_Init+0xac>)
 8000d70:	f003 f874 	bl	8003e5c <HAL_RTC_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000d7a:	f000 fa79 	bl	8001270 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	2201      	movs	r2, #1
 8000d96:	4619      	mov	r1, r3
 8000d98:	480f      	ldr	r0, [pc, #60]	@ (8000dd8 <MX_RTC_Init+0xac>)
 8000d9a:	f003 f8e2 	bl	8003f62 <HAL_RTC_SetTime>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000da4:	f000 fa64 	bl	8001270 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000da8:	2301      	movs	r3, #1
 8000daa:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;
 8000dac:	2304      	movs	r3, #4
 8000dae:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000db0:	2301      	movs	r3, #1
 8000db2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000db8:	463b      	mov	r3, r7
 8000dba:	2201      	movs	r2, #1
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4806      	ldr	r0, [pc, #24]	@ (8000dd8 <MX_RTC_Init+0xac>)
 8000dc0:	f003 f969 	bl	8004096 <HAL_RTC_SetDate>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000dca:	f000 fa51 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000dce:	bf00      	nop
 8000dd0:	3718      	adds	r7, #24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000114 	.word	0x20000114
 8000ddc:	40002800 	.word	0x40002800

08000de0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b096      	sub	sp, #88	@ 0x58
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000de6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
 8000e0c:	611a      	str	r2, [r3, #16]
 8000e0e:	615a      	str	r2, [r3, #20]
 8000e10:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	2220      	movs	r2, #32
 8000e16:	2100      	movs	r1, #0
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f005 fc49 	bl	80066b0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e1e:	4b3f      	ldr	r3, [pc, #252]	@ (8000f1c <MX_TIM1_Init+0x13c>)
 8000e20:	4a3f      	ldr	r2, [pc, #252]	@ (8000f20 <MX_TIM1_Init+0x140>)
 8000e22:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e24:	4b3d      	ldr	r3, [pc, #244]	@ (8000f1c <MX_TIM1_Init+0x13c>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2a:	4b3c      	ldr	r3, [pc, #240]	@ (8000f1c <MX_TIM1_Init+0x13c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1500;
 8000e30:	4b3a      	ldr	r3, [pc, #232]	@ (8000f1c <MX_TIM1_Init+0x13c>)
 8000e32:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000e36:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e38:	4b38      	ldr	r3, [pc, #224]	@ (8000f1c <MX_TIM1_Init+0x13c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e3e:	4b37      	ldr	r3, [pc, #220]	@ (8000f1c <MX_TIM1_Init+0x13c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e44:	4b35      	ldr	r3, [pc, #212]	@ (8000f1c <MX_TIM1_Init+0x13c>)
 8000e46:	2280      	movs	r2, #128	@ 0x80
 8000e48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e4a:	4834      	ldr	r0, [pc, #208]	@ (8000f1c <MX_TIM1_Init+0x13c>)
 8000e4c:	f003 fa48 	bl	80042e0 <HAL_TIM_Base_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000e56:	f000 fa0b 	bl	8001270 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e60:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000e64:	4619      	mov	r1, r3
 8000e66:	482d      	ldr	r0, [pc, #180]	@ (8000f1c <MX_TIM1_Init+0x13c>)
 8000e68:	f003 fe9e 	bl	8004ba8 <HAL_TIM_ConfigClockSource>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000e72:	f000 f9fd 	bl	8001270 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e76:	4829      	ldr	r0, [pc, #164]	@ (8000f1c <MX_TIM1_Init+0x13c>)
 8000e78:	f003 fa81 	bl	800437e <HAL_TIM_PWM_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000e82:	f000 f9f5 	bl	8001270 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e86:	2300      	movs	r3, #0
 8000e88:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e8e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000e92:	4619      	mov	r1, r3
 8000e94:	4821      	ldr	r0, [pc, #132]	@ (8000f1c <MX_TIM1_Init+0x13c>)
 8000e96:	f004 fbd3 	bl	8005640 <HAL_TIMEx_MasterConfigSynchronization>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000ea0:	f000 f9e6 	bl	8001270 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ea4:	2360      	movs	r3, #96	@ 0x60
 8000ea6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 750;
 8000ea8:	f240 23ee 	movw	r3, #750	@ 0x2ee
 8000eac:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ec2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4814      	ldr	r0, [pc, #80]	@ (8000f1c <MX_TIM1_Init+0x13c>)
 8000ecc:	f003 fdaa 	bl	8004a24 <HAL_TIM_PWM_ConfigChannel>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000ed6:	f000 f9cb 	bl	8001270 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000eee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ef2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ef8:	1d3b      	adds	r3, r7, #4
 8000efa:	4619      	mov	r1, r3
 8000efc:	4807      	ldr	r0, [pc, #28]	@ (8000f1c <MX_TIM1_Init+0x13c>)
 8000efe:	f004 fc0d 	bl	800571c <HAL_TIMEx_ConfigBreakDeadTime>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000f08:	f000 f9b2 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f0c:	4803      	ldr	r0, [pc, #12]	@ (8000f1c <MX_TIM1_Init+0x13c>)
 8000f0e:	f000 fb0f 	bl	8001530 <HAL_TIM_MspPostInit>

}
 8000f12:	bf00      	nop
 8000f14:	3758      	adds	r7, #88	@ 0x58
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000134 	.word	0x20000134
 8000f20:	40010000 	.word	0x40010000

08000f24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08a      	sub	sp, #40	@ 0x28
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2a:	f107 0318 	add.w	r3, r7, #24
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f38:	f107 0310 	add.w	r3, r7, #16
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f42:	463b      	mov	r3, r7
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f4e:	4b33      	ldr	r3, [pc, #204]	@ (800101c <MX_TIM2_Init+0xf8>)
 8000f50:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f54:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f56:	4b31      	ldr	r3, [pc, #196]	@ (800101c <MX_TIM2_Init+0xf8>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5c:	4b2f      	ldr	r3, [pc, #188]	@ (800101c <MX_TIM2_Init+0xf8>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000f62:	4b2e      	ldr	r3, [pc, #184]	@ (800101c <MX_TIM2_Init+0xf8>)
 8000f64:	f04f 32ff 	mov.w	r2, #4294967295
 8000f68:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f6a:	4b2c      	ldr	r3, [pc, #176]	@ (800101c <MX_TIM2_Init+0xf8>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f70:	4b2a      	ldr	r3, [pc, #168]	@ (800101c <MX_TIM2_Init+0xf8>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f76:	4829      	ldr	r0, [pc, #164]	@ (800101c <MX_TIM2_Init+0xf8>)
 8000f78:	f003 f9b2 	bl	80042e0 <HAL_TIM_Base_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000f82:	f000 f975 	bl	8001270 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f8a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f8c:	f107 0318 	add.w	r3, r7, #24
 8000f90:	4619      	mov	r1, r3
 8000f92:	4822      	ldr	r0, [pc, #136]	@ (800101c <MX_TIM2_Init+0xf8>)
 8000f94:	f003 fe08 	bl	8004ba8 <HAL_TIM_ConfigClockSource>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000f9e:	f000 f967 	bl	8001270 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000fa2:	481e      	ldr	r0, [pc, #120]	@ (800101c <MX_TIM2_Init+0xf8>)
 8000fa4:	f003 fb58 	bl	8004658 <HAL_TIM_IC_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000fae:	f000 f95f 	bl	8001270 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fba:	f107 0310 	add.w	r3, r7, #16
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4816      	ldr	r0, [pc, #88]	@ (800101c <MX_TIM2_Init+0xf8>)
 8000fc2:	f004 fb3d 	bl	8005640 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000fcc:	f000 f950 	bl	8001270 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	480d      	ldr	r0, [pc, #52]	@ (800101c <MX_TIM2_Init+0xf8>)
 8000fe8:	f003 fc7f 	bl	80048ea <HAL_TIM_IC_ConfigChannel>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000ff2:	f000 f93d 	bl	8001270 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000ffe:	463b      	mov	r3, r7
 8001000:	2204      	movs	r2, #4
 8001002:	4619      	mov	r1, r3
 8001004:	4805      	ldr	r0, [pc, #20]	@ (800101c <MX_TIM2_Init+0xf8>)
 8001006:	f003 fc70 	bl	80048ea <HAL_TIM_IC_ConfigChannel>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001010:	f000 f92e 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001014:	bf00      	nop
 8001016:	3728      	adds	r7, #40	@ 0x28
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	2000017c 	.word	0x2000017c

08001020 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08e      	sub	sp, #56	@ 0x38
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001026:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001034:	f107 0320 	add.w	r3, r7, #32
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
 800104c:	615a      	str	r2, [r3, #20]
 800104e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001050:	4b2c      	ldr	r3, [pc, #176]	@ (8001104 <MX_TIM3_Init+0xe4>)
 8001052:	4a2d      	ldr	r2, [pc, #180]	@ (8001108 <MX_TIM3_Init+0xe8>)
 8001054:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001056:	4b2b      	ldr	r3, [pc, #172]	@ (8001104 <MX_TIM3_Init+0xe4>)
 8001058:	2200      	movs	r2, #0
 800105a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105c:	4b29      	ldr	r3, [pc, #164]	@ (8001104 <MX_TIM3_Init+0xe4>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001062:	4b28      	ldr	r3, [pc, #160]	@ (8001104 <MX_TIM3_Init+0xe4>)
 8001064:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001068:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106a:	4b26      	ldr	r3, [pc, #152]	@ (8001104 <MX_TIM3_Init+0xe4>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001070:	4b24      	ldr	r3, [pc, #144]	@ (8001104 <MX_TIM3_Init+0xe4>)
 8001072:	2200      	movs	r2, #0
 8001074:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001076:	4823      	ldr	r0, [pc, #140]	@ (8001104 <MX_TIM3_Init+0xe4>)
 8001078:	f003 f932 	bl	80042e0 <HAL_TIM_Base_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001082:	f000 f8f5 	bl	8001270 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001086:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800108a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800108c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001090:	4619      	mov	r1, r3
 8001092:	481c      	ldr	r0, [pc, #112]	@ (8001104 <MX_TIM3_Init+0xe4>)
 8001094:	f003 fd88 	bl	8004ba8 <HAL_TIM_ConfigClockSource>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800109e:	f000 f8e7 	bl	8001270 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010a2:	4818      	ldr	r0, [pc, #96]	@ (8001104 <MX_TIM3_Init+0xe4>)
 80010a4:	f003 f96b 	bl	800437e <HAL_TIM_PWM_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80010ae:	f000 f8df 	bl	8001270 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b2:	2300      	movs	r3, #0
 80010b4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b6:	2300      	movs	r3, #0
 80010b8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010ba:	f107 0320 	add.w	r3, r7, #32
 80010be:	4619      	mov	r1, r3
 80010c0:	4810      	ldr	r0, [pc, #64]	@ (8001104 <MX_TIM3_Init+0xe4>)
 80010c2:	f004 fabd 	bl	8005640 <HAL_TIMEx_MasterConfigSynchronization>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80010cc:	f000 f8d0 	bl	8001270 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010d0:	2360      	movs	r3, #96	@ 0x60
 80010d2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	2204      	movs	r2, #4
 80010e4:	4619      	mov	r1, r3
 80010e6:	4807      	ldr	r0, [pc, #28]	@ (8001104 <MX_TIM3_Init+0xe4>)
 80010e8:	f003 fc9c 	bl	8004a24 <HAL_TIM_PWM_ConfigChannel>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80010f2:	f000 f8bd 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010f6:	4803      	ldr	r0, [pc, #12]	@ (8001104 <MX_TIM3_Init+0xe4>)
 80010f8:	f000 fa1a 	bl	8001530 <HAL_TIM_MspPostInit>

}
 80010fc:	bf00      	nop
 80010fe:	3738      	adds	r7, #56	@ 0x38
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	200001c4 	.word	0x200001c4
 8001108:	40000400 	.word	0x40000400

0800110c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001110:	4b11      	ldr	r3, [pc, #68]	@ (8001158 <MX_USART1_UART_Init+0x4c>)
 8001112:	4a12      	ldr	r2, [pc, #72]	@ (800115c <MX_USART1_UART_Init+0x50>)
 8001114:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001116:	4b10      	ldr	r3, [pc, #64]	@ (8001158 <MX_USART1_UART_Init+0x4c>)
 8001118:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800111c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800111e:	4b0e      	ldr	r3, [pc, #56]	@ (8001158 <MX_USART1_UART_Init+0x4c>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001124:	4b0c      	ldr	r3, [pc, #48]	@ (8001158 <MX_USART1_UART_Init+0x4c>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800112a:	4b0b      	ldr	r3, [pc, #44]	@ (8001158 <MX_USART1_UART_Init+0x4c>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001130:	4b09      	ldr	r3, [pc, #36]	@ (8001158 <MX_USART1_UART_Init+0x4c>)
 8001132:	220c      	movs	r2, #12
 8001134:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001136:	4b08      	ldr	r3, [pc, #32]	@ (8001158 <MX_USART1_UART_Init+0x4c>)
 8001138:	2200      	movs	r2, #0
 800113a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800113c:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <MX_USART1_UART_Init+0x4c>)
 800113e:	2200      	movs	r2, #0
 8001140:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001142:	4805      	ldr	r0, [pc, #20]	@ (8001158 <MX_USART1_UART_Init+0x4c>)
 8001144:	f004 fb75 	bl	8005832 <HAL_UART_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800114e:	f000 f88f 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	2000020c 	.word	0x2000020c
 800115c:	40011000 	.word	0x40011000

08001160 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b088      	sub	sp, #32
 8001164:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001166:	f107 030c 	add.w	r3, r7, #12
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
 8001174:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	4b3a      	ldr	r3, [pc, #232]	@ (8001264 <MX_GPIO_Init+0x104>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117e:	4a39      	ldr	r2, [pc, #228]	@ (8001264 <MX_GPIO_Init+0x104>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6313      	str	r3, [r2, #48]	@ 0x30
 8001186:	4b37      	ldr	r3, [pc, #220]	@ (8001264 <MX_GPIO_Init+0x104>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	4b33      	ldr	r3, [pc, #204]	@ (8001264 <MX_GPIO_Init+0x104>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119a:	4a32      	ldr	r2, [pc, #200]	@ (8001264 <MX_GPIO_Init+0x104>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a2:	4b30      	ldr	r3, [pc, #192]	@ (8001264 <MX_GPIO_Init+0x104>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZ_Pin|DIRECTION_2_Pin, GPIO_PIN_RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80011b4:	482c      	ldr	r0, [pc, #176]	@ (8001268 <MX_GPIO_Init+0x108>)
 80011b6:	f001 fb01 	bl	80027bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STOP_2_Pin|STOP_DRIVER_Pin|DIRECTION_Pin, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	f44f 4118 	mov.w	r1, #38912	@ 0x9800
 80011c0:	482a      	ldr	r0, [pc, #168]	@ (800126c <MX_GPIO_Init+0x10c>)
 80011c2:	f001 fafb 	bl	80027bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUZZ_Pin DIRECTION_2_Pin */
  GPIO_InitStruct.Pin = BUZZ_Pin|DIRECTION_2_Pin;
 80011c6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80011ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	4619      	mov	r1, r3
 80011de:	4822      	ldr	r0, [pc, #136]	@ (8001268 <MX_GPIO_Init+0x108>)
 80011e0:	f001 f950 	bl	8002484 <HAL_GPIO_Init>

  /*Configure GPIO pins : STOP_2_Pin STOP_DRIVER_Pin DIRECTION_Pin */
  GPIO_InitStruct.Pin = STOP_2_Pin|STOP_DRIVER_Pin|DIRECTION_Pin;
 80011e4:	f44f 4318 	mov.w	r3, #38912	@ 0x9800
 80011e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ea:	2301      	movs	r3, #1
 80011ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f6:	f107 030c 	add.w	r3, r7, #12
 80011fa:	4619      	mov	r1, r3
 80011fc:	481b      	ldr	r0, [pc, #108]	@ (800126c <MX_GPIO_Init+0x10c>)
 80011fe:	f001 f941 	bl	8002484 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIRECT_BUTTON_Pin */
  GPIO_InitStruct.Pin = DIRECT_BUTTON_Pin;
 8001202:	2308      	movs	r3, #8
 8001204:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DIRECT_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800120e:	f107 030c 	add.w	r3, r7, #12
 8001212:	4619      	mov	r1, r3
 8001214:	4814      	ldr	r0, [pc, #80]	@ (8001268 <MX_GPIO_Init+0x108>)
 8001216:	f001 f935 	bl	8002484 <HAL_GPIO_Init>

  /*Configure GPIO pin : MODE_BUT_Pin */
  GPIO_InitStruct.Pin = MODE_BUT_Pin;
 800121a:	2310      	movs	r3, #16
 800121c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001222:	2301      	movs	r3, #1
 8001224:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MODE_BUT_GPIO_Port, &GPIO_InitStruct);
 8001226:	f107 030c 	add.w	r3, r7, #12
 800122a:	4619      	mov	r1, r3
 800122c:	480e      	ldr	r0, [pc, #56]	@ (8001268 <MX_GPIO_Init+0x108>)
 800122e:	f001 f929 	bl	8002484 <HAL_GPIO_Init>

  /*Configure GPIO pin : Counter_Pin */
  GPIO_InitStruct.Pin = Counter_Pin;
 8001232:	2320      	movs	r3, #32
 8001234:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001236:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800123a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Counter_GPIO_Port, &GPIO_InitStruct);
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	4619      	mov	r1, r3
 8001246:	4808      	ldr	r0, [pc, #32]	@ (8001268 <MX_GPIO_Init+0x108>)
 8001248:	f001 f91c 	bl	8002484 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800124c:	2200      	movs	r2, #0
 800124e:	2100      	movs	r1, #0
 8001250:	2017      	movs	r0, #23
 8001252:	f001 f84e 	bl	80022f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001256:	2017      	movs	r0, #23
 8001258:	f001 f867 	bl	800232a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800125c:	bf00      	nop
 800125e:	3720      	adds	r7, #32
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40023800 	.word	0x40023800
 8001268:	40020400 	.word	0x40020400
 800126c:	40020000 	.word	0x40020000

08001270 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001274:	b672      	cpsid	i
}
 8001276:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <Error_Handler+0x8>

0800127c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	4b10      	ldr	r3, [pc, #64]	@ (80012c8 <HAL_MspInit+0x4c>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800128a:	4a0f      	ldr	r2, [pc, #60]	@ (80012c8 <HAL_MspInit+0x4c>)
 800128c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001290:	6453      	str	r3, [r2, #68]	@ 0x44
 8001292:	4b0d      	ldr	r3, [pc, #52]	@ (80012c8 <HAL_MspInit+0x4c>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001296:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	603b      	str	r3, [r7, #0]
 80012a2:	4b09      	ldr	r3, [pc, #36]	@ (80012c8 <HAL_MspInit+0x4c>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a6:	4a08      	ldr	r2, [pc, #32]	@ (80012c8 <HAL_MspInit+0x4c>)
 80012a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ae:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <HAL_MspInit+0x4c>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	40023800 	.word	0x40023800

080012cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08a      	sub	sp, #40	@ 0x28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a17      	ldr	r2, [pc, #92]	@ (8001348 <HAL_ADC_MspInit+0x7c>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d127      	bne.n	800133e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	613b      	str	r3, [r7, #16]
 80012f2:	4b16      	ldr	r3, [pc, #88]	@ (800134c <HAL_ADC_MspInit+0x80>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f6:	4a15      	ldr	r2, [pc, #84]	@ (800134c <HAL_ADC_MspInit+0x80>)
 80012f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80012fe:	4b13      	ldr	r3, [pc, #76]	@ (800134c <HAL_ADC_MspInit+0x80>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001306:	613b      	str	r3, [r7, #16]
 8001308:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	4b0f      	ldr	r3, [pc, #60]	@ (800134c <HAL_ADC_MspInit+0x80>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001312:	4a0e      	ldr	r2, [pc, #56]	@ (800134c <HAL_ADC_MspInit+0x80>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6313      	str	r3, [r2, #48]	@ 0x30
 800131a:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <HAL_ADC_MspInit+0x80>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = INP_1_Pin|INP_2_Pin|SPEED_Pin|Pedal_Pin;
 8001326:	2378      	movs	r3, #120	@ 0x78
 8001328:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800132a:	2303      	movs	r3, #3
 800132c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001332:	f107 0314 	add.w	r3, r7, #20
 8001336:	4619      	mov	r1, r3
 8001338:	4805      	ldr	r0, [pc, #20]	@ (8001350 <HAL_ADC_MspInit+0x84>)
 800133a:	f001 f8a3 	bl	8002484 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800133e:	bf00      	nop
 8001340:	3728      	adds	r7, #40	@ 0x28
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40012000 	.word	0x40012000
 800134c:	40023800 	.word	0x40023800
 8001350:	40020000 	.word	0x40020000

08001354 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08a      	sub	sp, #40	@ 0x28
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a19      	ldr	r2, [pc, #100]	@ (80013d8 <HAL_I2C_MspInit+0x84>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d12b      	bne.n	80013ce <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	4b18      	ldr	r3, [pc, #96]	@ (80013dc <HAL_I2C_MspInit+0x88>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	4a17      	ldr	r2, [pc, #92]	@ (80013dc <HAL_I2C_MspInit+0x88>)
 8001380:	f043 0302 	orr.w	r3, r3, #2
 8001384:	6313      	str	r3, [r2, #48]	@ 0x30
 8001386:	4b15      	ldr	r3, [pc, #84]	@ (80013dc <HAL_I2C_MspInit+0x88>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001392:	23c0      	movs	r3, #192	@ 0xc0
 8001394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001396:	2312      	movs	r3, #18
 8001398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139e:	2303      	movs	r3, #3
 80013a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013a2:	2304      	movs	r3, #4
 80013a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	4619      	mov	r1, r3
 80013ac:	480c      	ldr	r0, [pc, #48]	@ (80013e0 <HAL_I2C_MspInit+0x8c>)
 80013ae:	f001 f869 	bl	8002484 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	4b09      	ldr	r3, [pc, #36]	@ (80013dc <HAL_I2C_MspInit+0x88>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ba:	4a08      	ldr	r2, [pc, #32]	@ (80013dc <HAL_I2C_MspInit+0x88>)
 80013bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80013c2:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <HAL_I2C_MspInit+0x88>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013ce:	bf00      	nop
 80013d0:	3728      	adds	r7, #40	@ 0x28
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40005400 	.word	0x40005400
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40020400 	.word	0x40020400

080013e4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b088      	sub	sp, #32
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013ec:	f107 030c 	add.w	r3, r7, #12
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a0c      	ldr	r2, [pc, #48]	@ (8001434 <HAL_RTC_MspInit+0x50>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d111      	bne.n	800142a <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001406:	2302      	movs	r3, #2
 8001408:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800140a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800140e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001410:	f107 030c 	add.w	r3, r7, #12
 8001414:	4618      	mov	r0, r3
 8001416:	f002 fc33 	bl	8003c80 <HAL_RCCEx_PeriphCLKConfig>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001420:	f7ff ff26 	bl	8001270 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001424:	4b04      	ldr	r3, [pc, #16]	@ (8001438 <HAL_RTC_MspInit+0x54>)
 8001426:	2201      	movs	r2, #1
 8001428:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800142a:	bf00      	nop
 800142c:	3720      	adds	r7, #32
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40002800 	.word	0x40002800
 8001438:	42470e3c 	.word	0x42470e3c

0800143c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08c      	sub	sp, #48	@ 0x30
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 031c 	add.w	r3, r7, #28
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a31      	ldr	r2, [pc, #196]	@ (8001520 <HAL_TIM_Base_MspInit+0xe4>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d10e      	bne.n	800147c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	61bb      	str	r3, [r7, #24]
 8001462:	4b30      	ldr	r3, [pc, #192]	@ (8001524 <HAL_TIM_Base_MspInit+0xe8>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001466:	4a2f      	ldr	r2, [pc, #188]	@ (8001524 <HAL_TIM_Base_MspInit+0xe8>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6453      	str	r3, [r2, #68]	@ 0x44
 800146e:	4b2d      	ldr	r3, [pc, #180]	@ (8001524 <HAL_TIM_Base_MspInit+0xe8>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	61bb      	str	r3, [r7, #24]
 8001478:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800147a:	e04c      	b.n	8001516 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM2)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001484:	d134      	bne.n	80014f0 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]
 800148a:	4b26      	ldr	r3, [pc, #152]	@ (8001524 <HAL_TIM_Base_MspInit+0xe8>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148e:	4a25      	ldr	r2, [pc, #148]	@ (8001524 <HAL_TIM_Base_MspInit+0xe8>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6413      	str	r3, [r2, #64]	@ 0x40
 8001496:	4b23      	ldr	r3, [pc, #140]	@ (8001524 <HAL_TIM_Base_MspInit+0xe8>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]
 80014a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001524 <HAL_TIM_Base_MspInit+0xe8>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	4a1e      	ldr	r2, [pc, #120]	@ (8001524 <HAL_TIM_Base_MspInit+0xe8>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001524 <HAL_TIM_Base_MspInit+0xe8>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	613b      	str	r3, [r7, #16]
 80014bc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Counter_2_Pin;
 80014be:	2301      	movs	r3, #1
 80014c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	2300      	movs	r3, #0
 80014cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014ce:	2301      	movs	r3, #1
 80014d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Counter_2_GPIO_Port, &GPIO_InitStruct);
 80014d2:	f107 031c 	add.w	r3, r7, #28
 80014d6:	4619      	mov	r1, r3
 80014d8:	4813      	ldr	r0, [pc, #76]	@ (8001528 <HAL_TIM_Base_MspInit+0xec>)
 80014da:	f000 ffd3 	bl	8002484 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	2100      	movs	r1, #0
 80014e2:	201c      	movs	r0, #28
 80014e4:	f000 ff05 	bl	80022f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014e8:	201c      	movs	r0, #28
 80014ea:	f000 ff1e 	bl	800232a <HAL_NVIC_EnableIRQ>
}
 80014ee:	e012      	b.n	8001516 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM3)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a0d      	ldr	r2, [pc, #52]	@ (800152c <HAL_TIM_Base_MspInit+0xf0>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d10d      	bne.n	8001516 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	4b09      	ldr	r3, [pc, #36]	@ (8001524 <HAL_TIM_Base_MspInit+0xe8>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001502:	4a08      	ldr	r2, [pc, #32]	@ (8001524 <HAL_TIM_Base_MspInit+0xe8>)
 8001504:	f043 0302 	orr.w	r3, r3, #2
 8001508:	6413      	str	r3, [r2, #64]	@ 0x40
 800150a:	4b06      	ldr	r3, [pc, #24]	@ (8001524 <HAL_TIM_Base_MspInit+0xe8>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
}
 8001516:	bf00      	nop
 8001518:	3730      	adds	r7, #48	@ 0x30
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40010000 	.word	0x40010000
 8001524:	40023800 	.word	0x40023800
 8001528:	40020000 	.word	0x40020000
 800152c:	40000400 	.word	0x40000400

08001530 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	@ 0x28
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a34      	ldr	r2, [pc, #208]	@ (8001620 <HAL_TIM_MspPostInit+0xf0>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d13e      	bne.n	80015d0 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	4b33      	ldr	r3, [pc, #204]	@ (8001624 <HAL_TIM_MspPostInit+0xf4>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155a:	4a32      	ldr	r2, [pc, #200]	@ (8001624 <HAL_TIM_MspPostInit+0xf4>)
 800155c:	f043 0302 	orr.w	r3, r3, #2
 8001560:	6313      	str	r3, [r2, #48]	@ 0x30
 8001562:	4b30      	ldr	r3, [pc, #192]	@ (8001624 <HAL_TIM_MspPostInit+0xf4>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	4b2c      	ldr	r3, [pc, #176]	@ (8001624 <HAL_TIM_MspPostInit+0xf4>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	4a2b      	ldr	r2, [pc, #172]	@ (8001624 <HAL_TIM_MspPostInit+0xf4>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6313      	str	r3, [r2, #48]	@ 0x30
 800157e:	4b29      	ldr	r3, [pc, #164]	@ (8001624 <HAL_TIM_MspPostInit+0xf4>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB13     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800158a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800158e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001598:	2300      	movs	r3, #0
 800159a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800159c:	2301      	movs	r3, #1
 800159e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4619      	mov	r1, r3
 80015a6:	4820      	ldr	r0, [pc, #128]	@ (8001628 <HAL_TIM_MspPostInit+0xf8>)
 80015a8:	f000 ff6c 	bl	8002484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b2:	2302      	movs	r3, #2
 80015b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ba:	2300      	movs	r3, #0
 80015bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80015be:	2301      	movs	r3, #1
 80015c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	4619      	mov	r1, r3
 80015c8:	4818      	ldr	r0, [pc, #96]	@ (800162c <HAL_TIM_MspPostInit+0xfc>)
 80015ca:	f000 ff5b 	bl	8002484 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80015ce:	e022      	b.n	8001616 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM3)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a16      	ldr	r2, [pc, #88]	@ (8001630 <HAL_TIM_MspPostInit+0x100>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d11d      	bne.n	8001616 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	4b11      	ldr	r3, [pc, #68]	@ (8001624 <HAL_TIM_MspPostInit+0xf4>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	4a10      	ldr	r2, [pc, #64]	@ (8001624 <HAL_TIM_MspPostInit+0xf4>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001624 <HAL_TIM_MspPostInit+0xf4>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	60bb      	str	r3, [r7, #8]
 80015f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80015f6:	2380      	movs	r3, #128	@ 0x80
 80015f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2300      	movs	r3, #0
 8001604:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001606:	2302      	movs	r3, #2
 8001608:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	4619      	mov	r1, r3
 8001610:	4806      	ldr	r0, [pc, #24]	@ (800162c <HAL_TIM_MspPostInit+0xfc>)
 8001612:	f000 ff37 	bl	8002484 <HAL_GPIO_Init>
}
 8001616:	bf00      	nop
 8001618:	3728      	adds	r7, #40	@ 0x28
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40010000 	.word	0x40010000
 8001624:	40023800 	.word	0x40023800
 8001628:	40020400 	.word	0x40020400
 800162c:	40020000 	.word	0x40020000
 8001630:	40000400 	.word	0x40000400

08001634 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08a      	sub	sp, #40	@ 0x28
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a1d      	ldr	r2, [pc, #116]	@ (80016c8 <HAL_UART_MspInit+0x94>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d134      	bne.n	80016c0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	4b1c      	ldr	r3, [pc, #112]	@ (80016cc <HAL_UART_MspInit+0x98>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800165e:	4a1b      	ldr	r2, [pc, #108]	@ (80016cc <HAL_UART_MspInit+0x98>)
 8001660:	f043 0310 	orr.w	r3, r3, #16
 8001664:	6453      	str	r3, [r2, #68]	@ 0x44
 8001666:	4b19      	ldr	r3, [pc, #100]	@ (80016cc <HAL_UART_MspInit+0x98>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166a:	f003 0310 	and.w	r3, r3, #16
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	4b15      	ldr	r3, [pc, #84]	@ (80016cc <HAL_UART_MspInit+0x98>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	4a14      	ldr	r2, [pc, #80]	@ (80016cc <HAL_UART_MspInit+0x98>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6313      	str	r3, [r2, #48]	@ 0x30
 8001682:	4b12      	ldr	r3, [pc, #72]	@ (80016cc <HAL_UART_MspInit+0x98>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800168e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2302      	movs	r3, #2
 8001696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169c:	2303      	movs	r3, #3
 800169e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016a0:	2307      	movs	r3, #7
 80016a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	4619      	mov	r1, r3
 80016aa:	4809      	ldr	r0, [pc, #36]	@ (80016d0 <HAL_UART_MspInit+0x9c>)
 80016ac:	f000 feea 	bl	8002484 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2100      	movs	r1, #0
 80016b4:	2025      	movs	r0, #37	@ 0x25
 80016b6:	f000 fe1c 	bl	80022f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016ba:	2025      	movs	r0, #37	@ 0x25
 80016bc:	f000 fe35 	bl	800232a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80016c0:	bf00      	nop
 80016c2:	3728      	adds	r7, #40	@ 0x28
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40011000 	.word	0x40011000
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40020000 	.word	0x40020000

080016d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016d8:	bf00      	nop
 80016da:	e7fd      	b.n	80016d8 <NMI_Handler+0x4>

080016dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e0:	bf00      	nop
 80016e2:	e7fd      	b.n	80016e0 <HardFault_Handler+0x4>

080016e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e8:	bf00      	nop
 80016ea:	e7fd      	b.n	80016e8 <MemManage_Handler+0x4>

080016ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f0:	bf00      	nop
 80016f2:	e7fd      	b.n	80016f0 <BusFault_Handler+0x4>

080016f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f8:	bf00      	nop
 80016fa:	e7fd      	b.n	80016f8 <UsageFault_Handler+0x4>

080016fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800172a:	f000 f8e1 	bl	80018f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}

08001732 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Counter_Pin);
 8001736:	2020      	movs	r0, #32
 8001738:	f001 f85a 	bl	80027f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}

08001740 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001744:	4802      	ldr	r0, [pc, #8]	@ (8001750 <TIM2_IRQHandler+0x10>)
 8001746:	f002 ffe0 	bl	800470a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	2000017c 	.word	0x2000017c

08001754 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001758:	4802      	ldr	r0, [pc, #8]	@ (8001764 <USART1_IRQHandler+0x10>)
 800175a:	f004 f8bb 	bl	80058d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	2000020c 	.word	0x2000020c

08001768 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001770:	4a14      	ldr	r2, [pc, #80]	@ (80017c4 <_sbrk+0x5c>)
 8001772:	4b15      	ldr	r3, [pc, #84]	@ (80017c8 <_sbrk+0x60>)
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800177c:	4b13      	ldr	r3, [pc, #76]	@ (80017cc <_sbrk+0x64>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d102      	bne.n	800178a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001784:	4b11      	ldr	r3, [pc, #68]	@ (80017cc <_sbrk+0x64>)
 8001786:	4a12      	ldr	r2, [pc, #72]	@ (80017d0 <_sbrk+0x68>)
 8001788:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800178a:	4b10      	ldr	r3, [pc, #64]	@ (80017cc <_sbrk+0x64>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4413      	add	r3, r2
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	429a      	cmp	r2, r3
 8001796:	d207      	bcs.n	80017a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001798:	f004 ff92 	bl	80066c0 <__errno>
 800179c:	4603      	mov	r3, r0
 800179e:	220c      	movs	r2, #12
 80017a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017a2:	f04f 33ff 	mov.w	r3, #4294967295
 80017a6:	e009      	b.n	80017bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017a8:	4b08      	ldr	r3, [pc, #32]	@ (80017cc <_sbrk+0x64>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ae:	4b07      	ldr	r3, [pc, #28]	@ (80017cc <_sbrk+0x64>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	4a05      	ldr	r2, [pc, #20]	@ (80017cc <_sbrk+0x64>)
 80017b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ba:	68fb      	ldr	r3, [r7, #12]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20010000 	.word	0x20010000
 80017c8:	00000400 	.word	0x00000400
 80017cc:	20000290 	.word	0x20000290
 80017d0:	200003e0 	.word	0x200003e0

080017d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017d8:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <SystemInit+0x20>)
 80017da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017de:	4a05      	ldr	r2, [pc, #20]	@ (80017f4 <SystemInit+0x20>)
 80017e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001830 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017fc:	480d      	ldr	r0, [pc, #52]	@ (8001834 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017fe:	490e      	ldr	r1, [pc, #56]	@ (8001838 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001800:	4a0e      	ldr	r2, [pc, #56]	@ (800183c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001804:	e002      	b.n	800180c <LoopCopyDataInit>

08001806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800180a:	3304      	adds	r3, #4

0800180c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800180c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001810:	d3f9      	bcc.n	8001806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001812:	4a0b      	ldr	r2, [pc, #44]	@ (8001840 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001814:	4c0b      	ldr	r4, [pc, #44]	@ (8001844 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001818:	e001      	b.n	800181e <LoopFillZerobss>

0800181a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800181a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800181c:	3204      	adds	r2, #4

0800181e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001820:	d3fb      	bcc.n	800181a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001822:	f7ff ffd7 	bl	80017d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001826:	f004 ff51 	bl	80066cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800182a:	f7fe ff09 	bl	8000640 <main>
  bx  lr    
 800182e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001830:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001838:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800183c:	0800710c 	.word	0x0800710c
  ldr r2, =_sbss
 8001840:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001844:	200003e0 	.word	0x200003e0

08001848 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001848:	e7fe      	b.n	8001848 <ADC_IRQHandler>
	...

0800184c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001850:	4b0e      	ldr	r3, [pc, #56]	@ (800188c <HAL_Init+0x40>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a0d      	ldr	r2, [pc, #52]	@ (800188c <HAL_Init+0x40>)
 8001856:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800185a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800185c:	4b0b      	ldr	r3, [pc, #44]	@ (800188c <HAL_Init+0x40>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a0a      	ldr	r2, [pc, #40]	@ (800188c <HAL_Init+0x40>)
 8001862:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001866:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001868:	4b08      	ldr	r3, [pc, #32]	@ (800188c <HAL_Init+0x40>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a07      	ldr	r2, [pc, #28]	@ (800188c <HAL_Init+0x40>)
 800186e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001872:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001874:	2003      	movs	r0, #3
 8001876:	f000 fd31 	bl	80022dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800187a:	200f      	movs	r0, #15
 800187c:	f000 f808 	bl	8001890 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001880:	f7ff fcfc 	bl	800127c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40023c00 	.word	0x40023c00

08001890 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001898:	4b12      	ldr	r3, [pc, #72]	@ (80018e4 <HAL_InitTick+0x54>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b12      	ldr	r3, [pc, #72]	@ (80018e8 <HAL_InitTick+0x58>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	4619      	mov	r1, r3
 80018a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 fd49 	bl	8002346 <HAL_SYSTICK_Config>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e00e      	b.n	80018dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b0f      	cmp	r3, #15
 80018c2:	d80a      	bhi.n	80018da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018c4:	2200      	movs	r2, #0
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	f04f 30ff 	mov.w	r0, #4294967295
 80018cc:	f000 fd11 	bl	80022f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018d0:	4a06      	ldr	r2, [pc, #24]	@ (80018ec <HAL_InitTick+0x5c>)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
 80018d8:	e000      	b.n	80018dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20000000 	.word	0x20000000
 80018e8:	20000008 	.word	0x20000008
 80018ec:	20000004 	.word	0x20000004

080018f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018f4:	4b06      	ldr	r3, [pc, #24]	@ (8001910 <HAL_IncTick+0x20>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	461a      	mov	r2, r3
 80018fa:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <HAL_IncTick+0x24>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4413      	add	r3, r2
 8001900:	4a04      	ldr	r2, [pc, #16]	@ (8001914 <HAL_IncTick+0x24>)
 8001902:	6013      	str	r3, [r2, #0]
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	20000008 	.word	0x20000008
 8001914:	20000294 	.word	0x20000294

08001918 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return uwTick;
 800191c:	4b03      	ldr	r3, [pc, #12]	@ (800192c <HAL_GetTick+0x14>)
 800191e:	681b      	ldr	r3, [r3, #0]
}
 8001920:	4618      	mov	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	20000294 	.word	0x20000294

08001930 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001938:	f7ff ffee 	bl	8001918 <HAL_GetTick>
 800193c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001948:	d005      	beq.n	8001956 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800194a:	4b0a      	ldr	r3, [pc, #40]	@ (8001974 <HAL_Delay+0x44>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	461a      	mov	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4413      	add	r3, r2
 8001954:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001956:	bf00      	nop
 8001958:	f7ff ffde 	bl	8001918 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	429a      	cmp	r2, r3
 8001966:	d8f7      	bhi.n	8001958 <HAL_Delay+0x28>
  {
  }
}
 8001968:	bf00      	nop
 800196a:	bf00      	nop
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20000008 	.word	0x20000008

08001978 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001980:	2300      	movs	r3, #0
 8001982:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e033      	b.n	80019f6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001992:	2b00      	cmp	r3, #0
 8001994:	d109      	bne.n	80019aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff fc98 	bl	80012cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	f003 0310 	and.w	r3, r3, #16
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d118      	bne.n	80019e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ba:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80019be:	f023 0302 	bic.w	r3, r3, #2
 80019c2:	f043 0202 	orr.w	r2, r3, #2
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 faba 	bl	8001f44 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019da:	f023 0303 	bic.w	r3, r3, #3
 80019de:	f043 0201 	orr.w	r2, r3, #1
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	641a      	str	r2, [r3, #64]	@ 0x40
 80019e6:	e001      	b.n	80019ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
	...

08001a00 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d101      	bne.n	8001a1a <HAL_ADC_Start+0x1a>
 8001a16:	2302      	movs	r3, #2
 8001a18:	e097      	b.n	8001b4a <HAL_ADC_Start+0x14a>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d018      	beq.n	8001a62 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f042 0201 	orr.w	r2, r2, #1
 8001a3e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a40:	4b45      	ldr	r3, [pc, #276]	@ (8001b58 <HAL_ADC_Start+0x158>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a45      	ldr	r2, [pc, #276]	@ (8001b5c <HAL_ADC_Start+0x15c>)
 8001a46:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4a:	0c9a      	lsrs	r2, r3, #18
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	4413      	add	r3, r2
 8001a52:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001a54:	e002      	b.n	8001a5c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1f9      	bne.n	8001a56 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d15f      	bne.n	8001b30 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a74:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001a78:	f023 0301 	bic.w	r3, r3, #1
 8001a7c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d007      	beq.n	8001aa2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a96:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a9a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001aaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001aae:	d106      	bne.n	8001abe <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab4:	f023 0206 	bic.w	r2, r3, #6
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	645a      	str	r2, [r3, #68]	@ 0x44
 8001abc:	e002      	b.n	8001ac4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001acc:	4b24      	ldr	r3, [pc, #144]	@ (8001b60 <HAL_ADC_Start+0x160>)
 8001ace:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001ad8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f003 031f 	and.w	r3, r3, #31
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10f      	bne.n	8001b06 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d129      	bne.n	8001b48 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689a      	ldr	r2, [r3, #8]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	e020      	b.n	8001b48 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a16      	ldr	r2, [pc, #88]	@ (8001b64 <HAL_ADC_Start+0x164>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d11b      	bne.n	8001b48 <HAL_ADC_Start+0x148>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d114      	bne.n	8001b48 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	e00b      	b.n	8001b48 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b34:	f043 0210 	orr.w	r2, r3, #16
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b40:	f043 0201 	orr.w	r2, r3, #1
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	20000000 	.word	0x20000000
 8001b5c:	431bde83 	.word	0x431bde83
 8001b60:	40012300 	.word	0x40012300
 8001b64:	40012000 	.word	0x40012000

08001b68 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d101      	bne.n	8001b7e <HAL_ADC_Stop+0x16>
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	e021      	b.n	8001bc2 <HAL_ADC_Stop+0x5a>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f022 0201 	bic.w	r2, r2, #1
 8001b94:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d109      	bne.n	8001bb8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001bac:	f023 0301 	bic.w	r3, r3, #1
 8001bb0:	f043 0201 	orr.w	r2, r3, #1
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b084      	sub	sp, #16
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
 8001bd6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001be6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bea:	d113      	bne.n	8001c14 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001bf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001bfa:	d10b      	bne.n	8001c14 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c00:	f043 0220 	orr.w	r2, r3, #32
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e063      	b.n	8001cdc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c14:	f7ff fe80 	bl	8001918 <HAL_GetTick>
 8001c18:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c1a:	e021      	b.n	8001c60 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c22:	d01d      	beq.n	8001c60 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d007      	beq.n	8001c3a <HAL_ADC_PollForConversion+0x6c>
 8001c2a:	f7ff fe75 	bl	8001918 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d212      	bcs.n	8001c60 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d00b      	beq.n	8001c60 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4c:	f043 0204 	orr.w	r2, r3, #4
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e03d      	b.n	8001cdc <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d1d6      	bne.n	8001c1c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f06f 0212 	mvn.w	r2, #18
 8001c76:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d123      	bne.n	8001cda <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d11f      	bne.n	8001cda <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ca0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d006      	beq.n	8001cb6 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d111      	bne.n	8001cda <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d105      	bne.n	8001cda <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd2:	f043 0201 	orr.w	r2, r3, #1
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
	...

08001d00 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d101      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x1c>
 8001d18:	2302      	movs	r3, #2
 8001d1a:	e105      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x228>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b09      	cmp	r3, #9
 8001d2a:	d925      	bls.n	8001d78 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68d9      	ldr	r1, [r3, #12]
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	4413      	add	r3, r2
 8001d40:	3b1e      	subs	r3, #30
 8001d42:	2207      	movs	r2, #7
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43da      	mvns	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	400a      	ands	r2, r1
 8001d50:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68d9      	ldr	r1, [r3, #12]
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	4618      	mov	r0, r3
 8001d64:	4603      	mov	r3, r0
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	4403      	add	r3, r0
 8001d6a:	3b1e      	subs	r3, #30
 8001d6c:	409a      	lsls	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	430a      	orrs	r2, r1
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	e022      	b.n	8001dbe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6919      	ldr	r1, [r3, #16]
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	461a      	mov	r2, r3
 8001d86:	4613      	mov	r3, r2
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	4413      	add	r3, r2
 8001d8c:	2207      	movs	r2, #7
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43da      	mvns	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	400a      	ands	r2, r1
 8001d9a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6919      	ldr	r1, [r3, #16]
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	4618      	mov	r0, r3
 8001dae:	4603      	mov	r3, r0
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	4403      	add	r3, r0
 8001db4:	409a      	lsls	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b06      	cmp	r3, #6
 8001dc4:	d824      	bhi.n	8001e10 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	3b05      	subs	r3, #5
 8001dd8:	221f      	movs	r2, #31
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43da      	mvns	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	400a      	ands	r2, r1
 8001de6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	4618      	mov	r0, r3
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	3b05      	subs	r3, #5
 8001e02:	fa00 f203 	lsl.w	r2, r0, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e0e:	e04c      	b.n	8001eaa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2b0c      	cmp	r3, #12
 8001e16:	d824      	bhi.n	8001e62 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685a      	ldr	r2, [r3, #4]
 8001e22:	4613      	mov	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4413      	add	r3, r2
 8001e28:	3b23      	subs	r3, #35	@ 0x23
 8001e2a:	221f      	movs	r2, #31
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43da      	mvns	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	400a      	ands	r2, r1
 8001e38:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	4618      	mov	r0, r3
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	3b23      	subs	r3, #35	@ 0x23
 8001e54:	fa00 f203 	lsl.w	r2, r0, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e60:	e023      	b.n	8001eaa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	3b41      	subs	r3, #65	@ 0x41
 8001e74:	221f      	movs	r2, #31
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43da      	mvns	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	400a      	ands	r2, r1
 8001e82:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	4618      	mov	r0, r3
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	4613      	mov	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	3b41      	subs	r3, #65	@ 0x41
 8001e9e:	fa00 f203 	lsl.w	r2, r0, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001eaa:	4b22      	ldr	r3, [pc, #136]	@ (8001f34 <HAL_ADC_ConfigChannel+0x234>)
 8001eac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a21      	ldr	r2, [pc, #132]	@ (8001f38 <HAL_ADC_ConfigChannel+0x238>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d109      	bne.n	8001ecc <HAL_ADC_ConfigChannel+0x1cc>
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2b12      	cmp	r3, #18
 8001ebe:	d105      	bne.n	8001ecc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a19      	ldr	r2, [pc, #100]	@ (8001f38 <HAL_ADC_ConfigChannel+0x238>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d123      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x21e>
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2b10      	cmp	r3, #16
 8001edc:	d003      	beq.n	8001ee6 <HAL_ADC_ConfigChannel+0x1e6>
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2b11      	cmp	r3, #17
 8001ee4:	d11b      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2b10      	cmp	r3, #16
 8001ef8:	d111      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001efa:	4b10      	ldr	r3, [pc, #64]	@ (8001f3c <HAL_ADC_ConfigChannel+0x23c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a10      	ldr	r2, [pc, #64]	@ (8001f40 <HAL_ADC_ConfigChannel+0x240>)
 8001f00:	fba2 2303 	umull	r2, r3, r2, r3
 8001f04:	0c9a      	lsrs	r2, r3, #18
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f10:	e002      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	3b01      	subs	r3, #1
 8001f16:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f9      	bne.n	8001f12 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	40012300 	.word	0x40012300
 8001f38:	40012000 	.word	0x40012000
 8001f3c:	20000000 	.word	0x20000000
 8001f40:	431bde83 	.word	0x431bde83

08001f44 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f4c:	4b79      	ldr	r3, [pc, #484]	@ (8002134 <ADC_Init+0x1f0>)
 8001f4e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	431a      	orrs	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6859      	ldr	r1, [r3, #4]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	021a      	lsls	r2, r3, #8
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001f9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6859      	ldr	r1, [r3, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	689a      	ldr	r2, [r3, #8]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6899      	ldr	r1, [r3, #8]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68da      	ldr	r2, [r3, #12]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd6:	4a58      	ldr	r2, [pc, #352]	@ (8002138 <ADC_Init+0x1f4>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d022      	beq.n	8002022 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6899      	ldr	r1, [r3, #8]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800200c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6899      	ldr	r1, [r3, #8]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	430a      	orrs	r2, r1
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	e00f      	b.n	8002042 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002030:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002040:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 0202 	bic.w	r2, r2, #2
 8002050:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6899      	ldr	r1, [r3, #8]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	7e1b      	ldrb	r3, [r3, #24]
 800205c:	005a      	lsls	r2, r3, #1
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 3020 	ldrb.w	r3, [r3, #32]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d01b      	beq.n	80020a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800207e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800208e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6859      	ldr	r1, [r3, #4]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209a:	3b01      	subs	r3, #1
 800209c:	035a      	lsls	r2, r3, #13
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	e007      	b.n	80020b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020b6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80020c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	051a      	lsls	r2, r3, #20
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80020ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6899      	ldr	r1, [r3, #8]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80020fa:	025a      	lsls	r2, r3, #9
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	430a      	orrs	r2, r1
 8002102:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002112:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6899      	ldr	r1, [r3, #8]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	029a      	lsls	r2, r3, #10
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	430a      	orrs	r2, r1
 8002126:	609a      	str	r2, [r3, #8]
}
 8002128:	bf00      	nop
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	40012300 	.word	0x40012300
 8002138:	0f000001 	.word	0x0f000001

0800213c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800214c:	4b0c      	ldr	r3, [pc, #48]	@ (8002180 <__NVIC_SetPriorityGrouping+0x44>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002158:	4013      	ands	r3, r2
 800215a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002164:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002168:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800216c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800216e:	4a04      	ldr	r2, [pc, #16]	@ (8002180 <__NVIC_SetPriorityGrouping+0x44>)
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	60d3      	str	r3, [r2, #12]
}
 8002174:	bf00      	nop
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002188:	4b04      	ldr	r3, [pc, #16]	@ (800219c <__NVIC_GetPriorityGrouping+0x18>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	0a1b      	lsrs	r3, r3, #8
 800218e:	f003 0307 	and.w	r3, r3, #7
}
 8002192:	4618      	mov	r0, r3
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	db0b      	blt.n	80021ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	f003 021f 	and.w	r2, r3, #31
 80021b8:	4907      	ldr	r1, [pc, #28]	@ (80021d8 <__NVIC_EnableIRQ+0x38>)
 80021ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021be:	095b      	lsrs	r3, r3, #5
 80021c0:	2001      	movs	r0, #1
 80021c2:	fa00 f202 	lsl.w	r2, r0, r2
 80021c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	e000e100 	.word	0xe000e100

080021dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	6039      	str	r1, [r7, #0]
 80021e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	db0a      	blt.n	8002206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	490c      	ldr	r1, [pc, #48]	@ (8002228 <__NVIC_SetPriority+0x4c>)
 80021f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fa:	0112      	lsls	r2, r2, #4
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	440b      	add	r3, r1
 8002200:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002204:	e00a      	b.n	800221c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	b2da      	uxtb	r2, r3
 800220a:	4908      	ldr	r1, [pc, #32]	@ (800222c <__NVIC_SetPriority+0x50>)
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	3b04      	subs	r3, #4
 8002214:	0112      	lsls	r2, r2, #4
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	440b      	add	r3, r1
 800221a:	761a      	strb	r2, [r3, #24]
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	e000e100 	.word	0xe000e100
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002230:	b480      	push	{r7}
 8002232:	b089      	sub	sp, #36	@ 0x24
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f1c3 0307 	rsb	r3, r3, #7
 800224a:	2b04      	cmp	r3, #4
 800224c:	bf28      	it	cs
 800224e:	2304      	movcs	r3, #4
 8002250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	3304      	adds	r3, #4
 8002256:	2b06      	cmp	r3, #6
 8002258:	d902      	bls.n	8002260 <NVIC_EncodePriority+0x30>
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	3b03      	subs	r3, #3
 800225e:	e000      	b.n	8002262 <NVIC_EncodePriority+0x32>
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002264:	f04f 32ff 	mov.w	r2, #4294967295
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43da      	mvns	r2, r3
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	401a      	ands	r2, r3
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002278:	f04f 31ff 	mov.w	r1, #4294967295
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	fa01 f303 	lsl.w	r3, r1, r3
 8002282:	43d9      	mvns	r1, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002288:	4313      	orrs	r3, r2
         );
}
 800228a:	4618      	mov	r0, r3
 800228c:	3724      	adds	r7, #36	@ 0x24
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
	...

08002298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022a8:	d301      	bcc.n	80022ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022aa:	2301      	movs	r3, #1
 80022ac:	e00f      	b.n	80022ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ae:	4a0a      	ldr	r2, [pc, #40]	@ (80022d8 <SysTick_Config+0x40>)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022b6:	210f      	movs	r1, #15
 80022b8:	f04f 30ff 	mov.w	r0, #4294967295
 80022bc:	f7ff ff8e 	bl	80021dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022c0:	4b05      	ldr	r3, [pc, #20]	@ (80022d8 <SysTick_Config+0x40>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022c6:	4b04      	ldr	r3, [pc, #16]	@ (80022d8 <SysTick_Config+0x40>)
 80022c8:	2207      	movs	r2, #7
 80022ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	e000e010 	.word	0xe000e010

080022dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f7ff ff29 	bl	800213c <__NVIC_SetPriorityGrouping>
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b086      	sub	sp, #24
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	4603      	mov	r3, r0
 80022fa:	60b9      	str	r1, [r7, #8]
 80022fc:	607a      	str	r2, [r7, #4]
 80022fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002300:	2300      	movs	r3, #0
 8002302:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002304:	f7ff ff3e 	bl	8002184 <__NVIC_GetPriorityGrouping>
 8002308:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	68b9      	ldr	r1, [r7, #8]
 800230e:	6978      	ldr	r0, [r7, #20]
 8002310:	f7ff ff8e 	bl	8002230 <NVIC_EncodePriority>
 8002314:	4602      	mov	r2, r0
 8002316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800231a:	4611      	mov	r1, r2
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff ff5d 	bl	80021dc <__NVIC_SetPriority>
}
 8002322:	bf00      	nop
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b082      	sub	sp, #8
 800232e:	af00      	add	r7, sp, #0
 8002330:	4603      	mov	r3, r0
 8002332:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff ff31 	bl	80021a0 <__NVIC_EnableIRQ>
}
 800233e:	bf00      	nop
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b082      	sub	sp, #8
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7ff ffa2 	bl	8002298 <SysTick_Config>
 8002354:	4603      	mov	r3, r0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b084      	sub	sp, #16
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800236a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800236c:	f7ff fad4 	bl	8001918 <HAL_GetTick>
 8002370:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d008      	beq.n	8002390 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2280      	movs	r2, #128	@ 0x80
 8002382:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e052      	b.n	8002436 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 0216 	bic.w	r2, r2, #22
 800239e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	695a      	ldr	r2, [r3, #20]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023ae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d103      	bne.n	80023c0 <HAL_DMA_Abort+0x62>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d007      	beq.n	80023d0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 0208 	bic.w	r2, r2, #8
 80023ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0201 	bic.w	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023e0:	e013      	b.n	800240a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023e2:	f7ff fa99 	bl	8001918 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b05      	cmp	r3, #5
 80023ee:	d90c      	bls.n	800240a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2220      	movs	r2, #32
 80023f4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2203      	movs	r2, #3
 80023fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e015      	b.n	8002436 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1e4      	bne.n	80023e2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800241c:	223f      	movs	r2, #63	@ 0x3f
 800241e:	409a      	lsls	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d004      	beq.n	800245c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2280      	movs	r2, #128	@ 0x80
 8002456:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e00c      	b.n	8002476 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2205      	movs	r2, #5
 8002460:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 0201 	bic.w	r2, r2, #1
 8002472:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
	...

08002484 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002484:	b480      	push	{r7}
 8002486:	b089      	sub	sp, #36	@ 0x24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800248e:	2300      	movs	r3, #0
 8002490:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002492:	2300      	movs	r3, #0
 8002494:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002496:	2300      	movs	r3, #0
 8002498:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]
 800249e:	e159      	b.n	8002754 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024a0:	2201      	movs	r2, #1
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	4013      	ands	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	f040 8148 	bne.w	800274e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d005      	beq.n	80024d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d130      	bne.n	8002538 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	2203      	movs	r2, #3
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	43db      	mvns	r3, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4013      	ands	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	68da      	ldr	r2, [r3, #12]
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800250c:	2201      	movs	r2, #1
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4013      	ands	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	091b      	lsrs	r3, r3, #4
 8002522:	f003 0201 	and.w	r2, r3, #1
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 0303 	and.w	r3, r3, #3
 8002540:	2b03      	cmp	r3, #3
 8002542:	d017      	beq.n	8002574 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	2203      	movs	r2, #3
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4013      	ands	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4313      	orrs	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d123      	bne.n	80025c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	08da      	lsrs	r2, r3, #3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3208      	adds	r2, #8
 8002588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800258c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	220f      	movs	r2, #15
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4013      	ands	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	691a      	ldr	r2, [r3, #16]
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	08da      	lsrs	r2, r3, #3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	3208      	adds	r2, #8
 80025c2:	69b9      	ldr	r1, [r7, #24]
 80025c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	2203      	movs	r2, #3
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 0203 	and.w	r2, r3, #3
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 80a2 	beq.w	800274e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	60fb      	str	r3, [r7, #12]
 800260e:	4b57      	ldr	r3, [pc, #348]	@ (800276c <HAL_GPIO_Init+0x2e8>)
 8002610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002612:	4a56      	ldr	r2, [pc, #344]	@ (800276c <HAL_GPIO_Init+0x2e8>)
 8002614:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002618:	6453      	str	r3, [r2, #68]	@ 0x44
 800261a:	4b54      	ldr	r3, [pc, #336]	@ (800276c <HAL_GPIO_Init+0x2e8>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002626:	4a52      	ldr	r2, [pc, #328]	@ (8002770 <HAL_GPIO_Init+0x2ec>)
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	089b      	lsrs	r3, r3, #2
 800262c:	3302      	adds	r3, #2
 800262e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002632:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	220f      	movs	r2, #15
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43db      	mvns	r3, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4013      	ands	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a49      	ldr	r2, [pc, #292]	@ (8002774 <HAL_GPIO_Init+0x2f0>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d019      	beq.n	8002686 <HAL_GPIO_Init+0x202>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a48      	ldr	r2, [pc, #288]	@ (8002778 <HAL_GPIO_Init+0x2f4>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d013      	beq.n	8002682 <HAL_GPIO_Init+0x1fe>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a47      	ldr	r2, [pc, #284]	@ (800277c <HAL_GPIO_Init+0x2f8>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d00d      	beq.n	800267e <HAL_GPIO_Init+0x1fa>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a46      	ldr	r2, [pc, #280]	@ (8002780 <HAL_GPIO_Init+0x2fc>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d007      	beq.n	800267a <HAL_GPIO_Init+0x1f6>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a45      	ldr	r2, [pc, #276]	@ (8002784 <HAL_GPIO_Init+0x300>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d101      	bne.n	8002676 <HAL_GPIO_Init+0x1f2>
 8002672:	2304      	movs	r3, #4
 8002674:	e008      	b.n	8002688 <HAL_GPIO_Init+0x204>
 8002676:	2307      	movs	r3, #7
 8002678:	e006      	b.n	8002688 <HAL_GPIO_Init+0x204>
 800267a:	2303      	movs	r3, #3
 800267c:	e004      	b.n	8002688 <HAL_GPIO_Init+0x204>
 800267e:	2302      	movs	r3, #2
 8002680:	e002      	b.n	8002688 <HAL_GPIO_Init+0x204>
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <HAL_GPIO_Init+0x204>
 8002686:	2300      	movs	r3, #0
 8002688:	69fa      	ldr	r2, [r7, #28]
 800268a:	f002 0203 	and.w	r2, r2, #3
 800268e:	0092      	lsls	r2, r2, #2
 8002690:	4093      	lsls	r3, r2
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4313      	orrs	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002698:	4935      	ldr	r1, [pc, #212]	@ (8002770 <HAL_GPIO_Init+0x2ec>)
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	089b      	lsrs	r3, r3, #2
 800269e:	3302      	adds	r3, #2
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026a6:	4b38      	ldr	r3, [pc, #224]	@ (8002788 <HAL_GPIO_Init+0x304>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	43db      	mvns	r3, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4013      	ands	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026ca:	4a2f      	ldr	r2, [pc, #188]	@ (8002788 <HAL_GPIO_Init+0x304>)
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026d0:	4b2d      	ldr	r3, [pc, #180]	@ (8002788 <HAL_GPIO_Init+0x304>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	43db      	mvns	r3, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4013      	ands	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026f4:	4a24      	ldr	r2, [pc, #144]	@ (8002788 <HAL_GPIO_Init+0x304>)
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026fa:	4b23      	ldr	r3, [pc, #140]	@ (8002788 <HAL_GPIO_Init+0x304>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	43db      	mvns	r3, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4013      	ands	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	4313      	orrs	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800271e:	4a1a      	ldr	r2, [pc, #104]	@ (8002788 <HAL_GPIO_Init+0x304>)
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002724:	4b18      	ldr	r3, [pc, #96]	@ (8002788 <HAL_GPIO_Init+0x304>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	43db      	mvns	r3, r3
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4013      	ands	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	4313      	orrs	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002748:	4a0f      	ldr	r2, [pc, #60]	@ (8002788 <HAL_GPIO_Init+0x304>)
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	3301      	adds	r3, #1
 8002752:	61fb      	str	r3, [r7, #28]
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	2b0f      	cmp	r3, #15
 8002758:	f67f aea2 	bls.w	80024a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800275c:	bf00      	nop
 800275e:	bf00      	nop
 8002760:	3724      	adds	r7, #36	@ 0x24
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	40023800 	.word	0x40023800
 8002770:	40013800 	.word	0x40013800
 8002774:	40020000 	.word	0x40020000
 8002778:	40020400 	.word	0x40020400
 800277c:	40020800 	.word	0x40020800
 8002780:	40020c00 	.word	0x40020c00
 8002784:	40021000 	.word	0x40021000
 8002788:	40013c00 	.word	0x40013c00

0800278c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	460b      	mov	r3, r1
 8002796:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	691a      	ldr	r2, [r3, #16]
 800279c:	887b      	ldrh	r3, [r7, #2]
 800279e:	4013      	ands	r3, r2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d002      	beq.n	80027aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027a4:	2301      	movs	r3, #1
 80027a6:	73fb      	strb	r3, [r7, #15]
 80027a8:	e001      	b.n	80027ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027aa:	2300      	movs	r3, #0
 80027ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	460b      	mov	r3, r1
 80027c6:	807b      	strh	r3, [r7, #2]
 80027c8:	4613      	mov	r3, r2
 80027ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027cc:	787b      	ldrb	r3, [r7, #1]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027d2:	887a      	ldrh	r2, [r7, #2]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027d8:	e003      	b.n	80027e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027da:	887b      	ldrh	r3, [r7, #2]
 80027dc:	041a      	lsls	r2, r3, #16
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	619a      	str	r2, [r3, #24]
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
	...

080027f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80027fa:	4b08      	ldr	r3, [pc, #32]	@ (800281c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027fc:	695a      	ldr	r2, [r3, #20]
 80027fe:	88fb      	ldrh	r3, [r7, #6]
 8002800:	4013      	ands	r3, r2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d006      	beq.n	8002814 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002806:	4a05      	ldr	r2, [pc, #20]	@ (800281c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002808:	88fb      	ldrh	r3, [r7, #6]
 800280a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800280c:	88fb      	ldrh	r3, [r7, #6]
 800280e:	4618      	mov	r0, r3
 8002810:	f000 f806 	bl	8002820 <HAL_GPIO_EXTI_Callback>
  }
}
 8002814:	bf00      	nop
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40013c00 	.word	0x40013c00

08002820 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
	...

08002838 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e12b      	b.n	8002aa2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d106      	bne.n	8002864 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7fe fd78 	bl	8001354 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2224      	movs	r2, #36	@ 0x24
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 0201 	bic.w	r2, r2, #1
 800287a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800288a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800289a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800289c:	f001 f9c8 	bl	8003c30 <HAL_RCC_GetPCLK1Freq>
 80028a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	4a81      	ldr	r2, [pc, #516]	@ (8002aac <HAL_I2C_Init+0x274>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d807      	bhi.n	80028bc <HAL_I2C_Init+0x84>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4a80      	ldr	r2, [pc, #512]	@ (8002ab0 <HAL_I2C_Init+0x278>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	bf94      	ite	ls
 80028b4:	2301      	movls	r3, #1
 80028b6:	2300      	movhi	r3, #0
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	e006      	b.n	80028ca <HAL_I2C_Init+0x92>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4a7d      	ldr	r2, [pc, #500]	@ (8002ab4 <HAL_I2C_Init+0x27c>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	bf94      	ite	ls
 80028c4:	2301      	movls	r3, #1
 80028c6:	2300      	movhi	r3, #0
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e0e7      	b.n	8002aa2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	4a78      	ldr	r2, [pc, #480]	@ (8002ab8 <HAL_I2C_Init+0x280>)
 80028d6:	fba2 2303 	umull	r2, r3, r2, r3
 80028da:	0c9b      	lsrs	r3, r3, #18
 80028dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	4a6a      	ldr	r2, [pc, #424]	@ (8002aac <HAL_I2C_Init+0x274>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d802      	bhi.n	800290c <HAL_I2C_Init+0xd4>
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	3301      	adds	r3, #1
 800290a:	e009      	b.n	8002920 <HAL_I2C_Init+0xe8>
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002912:	fb02 f303 	mul.w	r3, r2, r3
 8002916:	4a69      	ldr	r2, [pc, #420]	@ (8002abc <HAL_I2C_Init+0x284>)
 8002918:	fba2 2303 	umull	r2, r3, r2, r3
 800291c:	099b      	lsrs	r3, r3, #6
 800291e:	3301      	adds	r3, #1
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6812      	ldr	r2, [r2, #0]
 8002924:	430b      	orrs	r3, r1
 8002926:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002932:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	495c      	ldr	r1, [pc, #368]	@ (8002aac <HAL_I2C_Init+0x274>)
 800293c:	428b      	cmp	r3, r1
 800293e:	d819      	bhi.n	8002974 <HAL_I2C_Init+0x13c>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	1e59      	subs	r1, r3, #1
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	fbb1 f3f3 	udiv	r3, r1, r3
 800294e:	1c59      	adds	r1, r3, #1
 8002950:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002954:	400b      	ands	r3, r1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00a      	beq.n	8002970 <HAL_I2C_Init+0x138>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	1e59      	subs	r1, r3, #1
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	fbb1 f3f3 	udiv	r3, r1, r3
 8002968:	3301      	adds	r3, #1
 800296a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800296e:	e051      	b.n	8002a14 <HAL_I2C_Init+0x1dc>
 8002970:	2304      	movs	r3, #4
 8002972:	e04f      	b.n	8002a14 <HAL_I2C_Init+0x1dc>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d111      	bne.n	80029a0 <HAL_I2C_Init+0x168>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	1e58      	subs	r0, r3, #1
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6859      	ldr	r1, [r3, #4]
 8002984:	460b      	mov	r3, r1
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	440b      	add	r3, r1
 800298a:	fbb0 f3f3 	udiv	r3, r0, r3
 800298e:	3301      	adds	r3, #1
 8002990:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002994:	2b00      	cmp	r3, #0
 8002996:	bf0c      	ite	eq
 8002998:	2301      	moveq	r3, #1
 800299a:	2300      	movne	r3, #0
 800299c:	b2db      	uxtb	r3, r3
 800299e:	e012      	b.n	80029c6 <HAL_I2C_Init+0x18e>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	1e58      	subs	r0, r3, #1
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6859      	ldr	r1, [r3, #4]
 80029a8:	460b      	mov	r3, r1
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	0099      	lsls	r1, r3, #2
 80029b0:	440b      	add	r3, r1
 80029b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029b6:	3301      	adds	r3, #1
 80029b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029bc:	2b00      	cmp	r3, #0
 80029be:	bf0c      	ite	eq
 80029c0:	2301      	moveq	r3, #1
 80029c2:	2300      	movne	r3, #0
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <HAL_I2C_Init+0x196>
 80029ca:	2301      	movs	r3, #1
 80029cc:	e022      	b.n	8002a14 <HAL_I2C_Init+0x1dc>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10e      	bne.n	80029f4 <HAL_I2C_Init+0x1bc>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	1e58      	subs	r0, r3, #1
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6859      	ldr	r1, [r3, #4]
 80029de:	460b      	mov	r3, r1
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	440b      	add	r3, r1
 80029e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80029e8:	3301      	adds	r3, #1
 80029ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029f2:	e00f      	b.n	8002a14 <HAL_I2C_Init+0x1dc>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	1e58      	subs	r0, r3, #1
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6859      	ldr	r1, [r3, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	440b      	add	r3, r1
 8002a02:	0099      	lsls	r1, r3, #2
 8002a04:	440b      	add	r3, r1
 8002a06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	6809      	ldr	r1, [r1, #0]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69da      	ldr	r2, [r3, #28]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	430a      	orrs	r2, r1
 8002a36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002a42:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	6911      	ldr	r1, [r2, #16]
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	68d2      	ldr	r2, [r2, #12]
 8002a4e:	4311      	orrs	r1, r2
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6812      	ldr	r2, [r2, #0]
 8002a54:	430b      	orrs	r3, r1
 8002a56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	695a      	ldr	r2, [r3, #20]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 0201 	orr.w	r2, r2, #1
 8002a82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2220      	movs	r2, #32
 8002a8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	000186a0 	.word	0x000186a0
 8002ab0:	001e847f 	.word	0x001e847f
 8002ab4:	003d08ff 	.word	0x003d08ff
 8002ab8:	431bde83 	.word	0x431bde83
 8002abc:	10624dd3 	.word	0x10624dd3

08002ac0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b088      	sub	sp, #32
 8002ac4:	af02      	add	r7, sp, #8
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	607a      	str	r2, [r7, #4]
 8002aca:	461a      	mov	r2, r3
 8002acc:	460b      	mov	r3, r1
 8002ace:	817b      	strh	r3, [r7, #10]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ad4:	f7fe ff20 	bl	8001918 <HAL_GetTick>
 8002ad8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b20      	cmp	r3, #32
 8002ae4:	f040 80e0 	bne.w	8002ca8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	2319      	movs	r3, #25
 8002aee:	2201      	movs	r2, #1
 8002af0:	4970      	ldr	r1, [pc, #448]	@ (8002cb4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 fa92 	bl	800301c <I2C_WaitOnFlagUntilTimeout>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002afe:	2302      	movs	r3, #2
 8002b00:	e0d3      	b.n	8002caa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d101      	bne.n	8002b10 <HAL_I2C_Master_Transmit+0x50>
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	e0cc      	b.n	8002caa <HAL_I2C_Master_Transmit+0x1ea>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d007      	beq.n	8002b36 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f042 0201 	orr.w	r2, r2, #1
 8002b34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2221      	movs	r2, #33	@ 0x21
 8002b4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2210      	movs	r2, #16
 8002b52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	893a      	ldrh	r2, [r7, #8]
 8002b66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	4a50      	ldr	r2, [pc, #320]	@ (8002cb8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002b76:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b78:	8979      	ldrh	r1, [r7, #10]
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	6a3a      	ldr	r2, [r7, #32]
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 f9ca 	bl	8002f18 <I2C_MasterRequestWrite>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e08d      	b.n	8002caa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b8e:	2300      	movs	r3, #0
 8002b90:	613b      	str	r3, [r7, #16]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	613b      	str	r3, [r7, #16]
 8002ba2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ba4:	e066      	b.n	8002c74 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	6a39      	ldr	r1, [r7, #32]
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f000 fb50 	bl	8003250 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00d      	beq.n	8002bd2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d107      	bne.n	8002bce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bcc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e06b      	b.n	8002caa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd6:	781a      	ldrb	r2, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be2:	1c5a      	adds	r2, r3, #1
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b04      	cmp	r3, #4
 8002c0e:	d11b      	bne.n	8002c48 <HAL_I2C_Master_Transmit+0x188>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d017      	beq.n	8002c48 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1c:	781a      	ldrb	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c28:	1c5a      	adds	r2, r3, #1
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	3b01      	subs	r3, #1
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	6a39      	ldr	r1, [r7, #32]
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 fb47 	bl	80032e0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00d      	beq.n	8002c74 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5c:	2b04      	cmp	r3, #4
 8002c5e:	d107      	bne.n	8002c70 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c6e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e01a      	b.n	8002caa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d194      	bne.n	8002ba6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2220      	movs	r2, #32
 8002c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	e000      	b.n	8002caa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ca8:	2302      	movs	r3, #2
  }
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3718      	adds	r7, #24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	00100002 	.word	0x00100002
 8002cb8:	ffff0000 	.word	0xffff0000

08002cbc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b08a      	sub	sp, #40	@ 0x28
 8002cc0:	af02      	add	r7, sp, #8
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	607a      	str	r2, [r7, #4]
 8002cc6:	603b      	str	r3, [r7, #0]
 8002cc8:	460b      	mov	r3, r1
 8002cca:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002ccc:	f7fe fe24 	bl	8001918 <HAL_GetTick>
 8002cd0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b20      	cmp	r3, #32
 8002ce0:	f040 8111 	bne.w	8002f06 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	2319      	movs	r3, #25
 8002cea:	2201      	movs	r2, #1
 8002cec:	4988      	ldr	r1, [pc, #544]	@ (8002f10 <HAL_I2C_IsDeviceReady+0x254>)
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f000 f994 	bl	800301c <I2C_WaitOnFlagUntilTimeout>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	e104      	b.n	8002f08 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <HAL_I2C_IsDeviceReady+0x50>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e0fd      	b.n	8002f08 <HAL_I2C_IsDeviceReady+0x24c>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d007      	beq.n	8002d32 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f042 0201 	orr.w	r2, r2, #1
 8002d30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d40:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2224      	movs	r2, #36	@ 0x24
 8002d46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4a70      	ldr	r2, [pc, #448]	@ (8002f14 <HAL_I2C_IsDeviceReady+0x258>)
 8002d54:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d64:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f000 f952 	bl	800301c <I2C_WaitOnFlagUntilTimeout>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00d      	beq.n	8002d9a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d8c:	d103      	bne.n	8002d96 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d94:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e0b6      	b.n	8002f08 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d9a:	897b      	ldrh	r3, [r7, #10]
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	461a      	mov	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002da8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002daa:	f7fe fdb5 	bl	8001918 <HAL_GetTick>
 8002dae:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	bf0c      	ite	eq
 8002dbe:	2301      	moveq	r3, #1
 8002dc0:	2300      	movne	r3, #0
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dd4:	bf0c      	ite	eq
 8002dd6:	2301      	moveq	r3, #1
 8002dd8:	2300      	movne	r3, #0
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002dde:	e025      	b.n	8002e2c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002de0:	f7fe fd9a 	bl	8001918 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d302      	bcc.n	8002df6 <HAL_I2C_IsDeviceReady+0x13a>
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d103      	bne.n	8002dfe <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	22a0      	movs	r2, #160	@ 0xa0
 8002dfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	bf0c      	ite	eq
 8002e0c:	2301      	moveq	r3, #1
 8002e0e:	2300      	movne	r3, #0
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e22:	bf0c      	ite	eq
 8002e24:	2301      	moveq	r3, #1
 8002e26:	2300      	movne	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2ba0      	cmp	r3, #160	@ 0xa0
 8002e36:	d005      	beq.n	8002e44 <HAL_I2C_IsDeviceReady+0x188>
 8002e38:	7dfb      	ldrb	r3, [r7, #23]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d102      	bne.n	8002e44 <HAL_I2C_IsDeviceReady+0x188>
 8002e3e:	7dbb      	ldrb	r3, [r7, #22]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0cd      	beq.n	8002de0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2220      	movs	r2, #32
 8002e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d129      	bne.n	8002eae <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e68:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	613b      	str	r3, [r7, #16]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	613b      	str	r3, [r7, #16]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	613b      	str	r3, [r7, #16]
 8002e7e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	2319      	movs	r3, #25
 8002e86:	2201      	movs	r2, #1
 8002e88:	4921      	ldr	r1, [pc, #132]	@ (8002f10 <HAL_I2C_IsDeviceReady+0x254>)
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f000 f8c6 	bl	800301c <I2C_WaitOnFlagUntilTimeout>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e036      	b.n	8002f08 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	e02c      	b.n	8002f08 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ebc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ec6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	2319      	movs	r3, #25
 8002ece:	2201      	movs	r2, #1
 8002ed0:	490f      	ldr	r1, [pc, #60]	@ (8002f10 <HAL_I2C_IsDeviceReady+0x254>)
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f000 f8a2 	bl	800301c <I2C_WaitOnFlagUntilTimeout>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e012      	b.n	8002f08 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	f4ff af32 	bcc.w	8002d56 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e000      	b.n	8002f08 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002f06:	2302      	movs	r3, #2
  }
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3720      	adds	r7, #32
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	00100002 	.word	0x00100002
 8002f14:	ffff0000 	.word	0xffff0000

08002f18 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b088      	sub	sp, #32
 8002f1c:	af02      	add	r7, sp, #8
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	607a      	str	r2, [r7, #4]
 8002f22:	603b      	str	r3, [r7, #0]
 8002f24:	460b      	mov	r3, r1
 8002f26:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f2c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	2b08      	cmp	r3, #8
 8002f32:	d006      	beq.n	8002f42 <I2C_MasterRequestWrite+0x2a>
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d003      	beq.n	8002f42 <I2C_MasterRequestWrite+0x2a>
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f40:	d108      	bne.n	8002f54 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	e00b      	b.n	8002f6c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f58:	2b12      	cmp	r3, #18
 8002f5a:	d107      	bne.n	8002f6c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f6a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f000 f84f 	bl	800301c <I2C_WaitOnFlagUntilTimeout>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00d      	beq.n	8002fa0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f92:	d103      	bne.n	8002f9c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f9a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e035      	b.n	800300c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fa8:	d108      	bne.n	8002fbc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002faa:	897b      	ldrh	r3, [r7, #10]
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	461a      	mov	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002fb8:	611a      	str	r2, [r3, #16]
 8002fba:	e01b      	b.n	8002ff4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002fbc:	897b      	ldrh	r3, [r7, #10]
 8002fbe:	11db      	asrs	r3, r3, #7
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	f003 0306 	and.w	r3, r3, #6
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	f063 030f 	orn	r3, r3, #15
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	490e      	ldr	r1, [pc, #56]	@ (8003014 <I2C_MasterRequestWrite+0xfc>)
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 f898 	bl	8003110 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e010      	b.n	800300c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002fea:	897b      	ldrh	r3, [r7, #10]
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	4907      	ldr	r1, [pc, #28]	@ (8003018 <I2C_MasterRequestWrite+0x100>)
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f000 f888 	bl	8003110 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e000      	b.n	800300c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3718      	adds	r7, #24
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	00010008 	.word	0x00010008
 8003018:	00010002 	.word	0x00010002

0800301c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	603b      	str	r3, [r7, #0]
 8003028:	4613      	mov	r3, r2
 800302a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800302c:	e048      	b.n	80030c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003034:	d044      	beq.n	80030c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003036:	f7fe fc6f 	bl	8001918 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	429a      	cmp	r2, r3
 8003044:	d302      	bcc.n	800304c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d139      	bne.n	80030c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	0c1b      	lsrs	r3, r3, #16
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b01      	cmp	r3, #1
 8003054:	d10d      	bne.n	8003072 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	43da      	mvns	r2, r3
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	4013      	ands	r3, r2
 8003062:	b29b      	uxth	r3, r3
 8003064:	2b00      	cmp	r3, #0
 8003066:	bf0c      	ite	eq
 8003068:	2301      	moveq	r3, #1
 800306a:	2300      	movne	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	461a      	mov	r2, r3
 8003070:	e00c      	b.n	800308c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	43da      	mvns	r2, r3
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	4013      	ands	r3, r2
 800307e:	b29b      	uxth	r3, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	bf0c      	ite	eq
 8003084:	2301      	moveq	r3, #1
 8003086:	2300      	movne	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	461a      	mov	r2, r3
 800308c:	79fb      	ldrb	r3, [r7, #7]
 800308e:	429a      	cmp	r2, r3
 8003090:	d116      	bne.n	80030c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2220      	movs	r2, #32
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ac:	f043 0220 	orr.w	r2, r3, #32
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e023      	b.n	8003108 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	0c1b      	lsrs	r3, r3, #16
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d10d      	bne.n	80030e6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	43da      	mvns	r2, r3
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	4013      	ands	r3, r2
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	2b00      	cmp	r3, #0
 80030da:	bf0c      	ite	eq
 80030dc:	2301      	moveq	r3, #1
 80030de:	2300      	movne	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	461a      	mov	r2, r3
 80030e4:	e00c      	b.n	8003100 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	43da      	mvns	r2, r3
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	4013      	ands	r3, r2
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	bf0c      	ite	eq
 80030f8:	2301      	moveq	r3, #1
 80030fa:	2300      	movne	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	461a      	mov	r2, r3
 8003100:	79fb      	ldrb	r3, [r7, #7]
 8003102:	429a      	cmp	r2, r3
 8003104:	d093      	beq.n	800302e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
 800311c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800311e:	e071      	b.n	8003204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800312a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800312e:	d123      	bne.n	8003178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800313e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003148:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2220      	movs	r2, #32
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003164:	f043 0204 	orr.w	r2, r3, #4
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e067      	b.n	8003248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317e:	d041      	beq.n	8003204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003180:	f7fe fbca 	bl	8001918 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	429a      	cmp	r2, r3
 800318e:	d302      	bcc.n	8003196 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d136      	bne.n	8003204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	0c1b      	lsrs	r3, r3, #16
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b01      	cmp	r3, #1
 800319e:	d10c      	bne.n	80031ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	43da      	mvns	r2, r3
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	4013      	ands	r3, r2
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	bf14      	ite	ne
 80031b2:	2301      	movne	r3, #1
 80031b4:	2300      	moveq	r3, #0
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	e00b      	b.n	80031d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	43da      	mvns	r2, r3
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	4013      	ands	r3, r2
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	bf14      	ite	ne
 80031cc:	2301      	movne	r3, #1
 80031ce:	2300      	moveq	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d016      	beq.n	8003204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2220      	movs	r2, #32
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f0:	f043 0220 	orr.w	r2, r3, #32
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e021      	b.n	8003248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	0c1b      	lsrs	r3, r3, #16
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b01      	cmp	r3, #1
 800320c:	d10c      	bne.n	8003228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	43da      	mvns	r2, r3
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	4013      	ands	r3, r2
 800321a:	b29b      	uxth	r3, r3
 800321c:	2b00      	cmp	r3, #0
 800321e:	bf14      	ite	ne
 8003220:	2301      	movne	r3, #1
 8003222:	2300      	moveq	r3, #0
 8003224:	b2db      	uxtb	r3, r3
 8003226:	e00b      	b.n	8003240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	43da      	mvns	r2, r3
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	4013      	ands	r3, r2
 8003234:	b29b      	uxth	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	bf14      	ite	ne
 800323a:	2301      	movne	r3, #1
 800323c:	2300      	moveq	r3, #0
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b00      	cmp	r3, #0
 8003242:	f47f af6d 	bne.w	8003120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800325c:	e034      	b.n	80032c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f000 f886 	bl	8003370 <I2C_IsAcknowledgeFailed>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e034      	b.n	80032d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003274:	d028      	beq.n	80032c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003276:	f7fe fb4f 	bl	8001918 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	68ba      	ldr	r2, [r7, #8]
 8003282:	429a      	cmp	r2, r3
 8003284:	d302      	bcc.n	800328c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d11d      	bne.n	80032c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003296:	2b80      	cmp	r3, #128	@ 0x80
 8003298:	d016      	beq.n	80032c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2220      	movs	r2, #32
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b4:	f043 0220 	orr.w	r2, r3, #32
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e007      	b.n	80032d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032d2:	2b80      	cmp	r3, #128	@ 0x80
 80032d4:	d1c3      	bne.n	800325e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032ec:	e034      	b.n	8003358 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f000 f83e 	bl	8003370 <I2C_IsAcknowledgeFailed>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e034      	b.n	8003368 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003304:	d028      	beq.n	8003358 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003306:	f7fe fb07 	bl	8001918 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	68ba      	ldr	r2, [r7, #8]
 8003312:	429a      	cmp	r2, r3
 8003314:	d302      	bcc.n	800331c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d11d      	bne.n	8003358 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	f003 0304 	and.w	r3, r3, #4
 8003326:	2b04      	cmp	r3, #4
 8003328:	d016      	beq.n	8003358 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2220      	movs	r2, #32
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003344:	f043 0220 	orr.w	r2, r3, #32
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e007      	b.n	8003368 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	f003 0304 	and.w	r3, r3, #4
 8003362:	2b04      	cmp	r3, #4
 8003364:	d1c3      	bne.n	80032ee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003382:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003386:	d11b      	bne.n	80033c0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003390:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2220      	movs	r2, #32
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ac:	f043 0204 	orr.w	r2, r3, #4
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e000      	b.n	80033c2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
	...

080033d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e267      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d075      	beq.n	80034da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033ee:	4b88      	ldr	r3, [pc, #544]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 030c 	and.w	r3, r3, #12
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	d00c      	beq.n	8003414 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033fa:	4b85      	ldr	r3, [pc, #532]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003402:	2b08      	cmp	r3, #8
 8003404:	d112      	bne.n	800342c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003406:	4b82      	ldr	r3, [pc, #520]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800340e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003412:	d10b      	bne.n	800342c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003414:	4b7e      	ldr	r3, [pc, #504]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d05b      	beq.n	80034d8 <HAL_RCC_OscConfig+0x108>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d157      	bne.n	80034d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e242      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003434:	d106      	bne.n	8003444 <HAL_RCC_OscConfig+0x74>
 8003436:	4b76      	ldr	r3, [pc, #472]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a75      	ldr	r2, [pc, #468]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 800343c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	e01d      	b.n	8003480 <HAL_RCC_OscConfig+0xb0>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800344c:	d10c      	bne.n	8003468 <HAL_RCC_OscConfig+0x98>
 800344e:	4b70      	ldr	r3, [pc, #448]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a6f      	ldr	r2, [pc, #444]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 8003454:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	4b6d      	ldr	r3, [pc, #436]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a6c      	ldr	r2, [pc, #432]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 8003460:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003464:	6013      	str	r3, [r2, #0]
 8003466:	e00b      	b.n	8003480 <HAL_RCC_OscConfig+0xb0>
 8003468:	4b69      	ldr	r3, [pc, #420]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a68      	ldr	r2, [pc, #416]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 800346e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003472:	6013      	str	r3, [r2, #0]
 8003474:	4b66      	ldr	r3, [pc, #408]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a65      	ldr	r2, [pc, #404]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 800347a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800347e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d013      	beq.n	80034b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003488:	f7fe fa46 	bl	8001918 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003490:	f7fe fa42 	bl	8001918 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b64      	cmp	r3, #100	@ 0x64
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e207      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a2:	4b5b      	ldr	r3, [pc, #364]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0f0      	beq.n	8003490 <HAL_RCC_OscConfig+0xc0>
 80034ae:	e014      	b.n	80034da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b0:	f7fe fa32 	bl	8001918 <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034b8:	f7fe fa2e 	bl	8001918 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b64      	cmp	r3, #100	@ 0x64
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e1f3      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ca:	4b51      	ldr	r3, [pc, #324]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1f0      	bne.n	80034b8 <HAL_RCC_OscConfig+0xe8>
 80034d6:	e000      	b.n	80034da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d063      	beq.n	80035ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034e6:	4b4a      	ldr	r3, [pc, #296]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 030c 	and.w	r3, r3, #12
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00b      	beq.n	800350a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034f2:	4b47      	ldr	r3, [pc, #284]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d11c      	bne.n	8003538 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034fe:	4b44      	ldr	r3, [pc, #272]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d116      	bne.n	8003538 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800350a:	4b41      	ldr	r3, [pc, #260]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d005      	beq.n	8003522 <HAL_RCC_OscConfig+0x152>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d001      	beq.n	8003522 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e1c7      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003522:	4b3b      	ldr	r3, [pc, #236]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	4937      	ldr	r1, [pc, #220]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 8003532:	4313      	orrs	r3, r2
 8003534:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003536:	e03a      	b.n	80035ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d020      	beq.n	8003582 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003540:	4b34      	ldr	r3, [pc, #208]	@ (8003614 <HAL_RCC_OscConfig+0x244>)
 8003542:	2201      	movs	r2, #1
 8003544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003546:	f7fe f9e7 	bl	8001918 <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800354e:	f7fe f9e3 	bl	8001918 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e1a8      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003560:	4b2b      	ldr	r3, [pc, #172]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0f0      	beq.n	800354e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800356c:	4b28      	ldr	r3, [pc, #160]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	4925      	ldr	r1, [pc, #148]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 800357c:	4313      	orrs	r3, r2
 800357e:	600b      	str	r3, [r1, #0]
 8003580:	e015      	b.n	80035ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003582:	4b24      	ldr	r3, [pc, #144]	@ (8003614 <HAL_RCC_OscConfig+0x244>)
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003588:	f7fe f9c6 	bl	8001918 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003590:	f7fe f9c2 	bl	8001918 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e187      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f0      	bne.n	8003590 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0308 	and.w	r3, r3, #8
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d036      	beq.n	8003628 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d016      	beq.n	80035f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035c2:	4b15      	ldr	r3, [pc, #84]	@ (8003618 <HAL_RCC_OscConfig+0x248>)
 80035c4:	2201      	movs	r2, #1
 80035c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c8:	f7fe f9a6 	bl	8001918 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035d0:	f7fe f9a2 	bl	8001918 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e167      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 80035e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0f0      	beq.n	80035d0 <HAL_RCC_OscConfig+0x200>
 80035ee:	e01b      	b.n	8003628 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035f0:	4b09      	ldr	r3, [pc, #36]	@ (8003618 <HAL_RCC_OscConfig+0x248>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f6:	f7fe f98f 	bl	8001918 <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035fc:	e00e      	b.n	800361c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035fe:	f7fe f98b 	bl	8001918 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d907      	bls.n	800361c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e150      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
 8003610:	40023800 	.word	0x40023800
 8003614:	42470000 	.word	0x42470000
 8003618:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800361c:	4b88      	ldr	r3, [pc, #544]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 800361e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1ea      	bne.n	80035fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 8097 	beq.w	8003764 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003636:	2300      	movs	r3, #0
 8003638:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800363a:	4b81      	ldr	r3, [pc, #516]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 800363c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10f      	bne.n	8003666 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003646:	2300      	movs	r3, #0
 8003648:	60bb      	str	r3, [r7, #8]
 800364a:	4b7d      	ldr	r3, [pc, #500]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 800364c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364e:	4a7c      	ldr	r2, [pc, #496]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 8003650:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003654:	6413      	str	r3, [r2, #64]	@ 0x40
 8003656:	4b7a      	ldr	r3, [pc, #488]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 8003658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800365e:	60bb      	str	r3, [r7, #8]
 8003660:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003662:	2301      	movs	r3, #1
 8003664:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003666:	4b77      	ldr	r3, [pc, #476]	@ (8003844 <HAL_RCC_OscConfig+0x474>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800366e:	2b00      	cmp	r3, #0
 8003670:	d118      	bne.n	80036a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003672:	4b74      	ldr	r3, [pc, #464]	@ (8003844 <HAL_RCC_OscConfig+0x474>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a73      	ldr	r2, [pc, #460]	@ (8003844 <HAL_RCC_OscConfig+0x474>)
 8003678:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800367c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800367e:	f7fe f94b 	bl	8001918 <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003684:	e008      	b.n	8003698 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003686:	f7fe f947 	bl	8001918 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e10c      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003698:	4b6a      	ldr	r3, [pc, #424]	@ (8003844 <HAL_RCC_OscConfig+0x474>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d0f0      	beq.n	8003686 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d106      	bne.n	80036ba <HAL_RCC_OscConfig+0x2ea>
 80036ac:	4b64      	ldr	r3, [pc, #400]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 80036ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036b0:	4a63      	ldr	r2, [pc, #396]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80036b8:	e01c      	b.n	80036f4 <HAL_RCC_OscConfig+0x324>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	2b05      	cmp	r3, #5
 80036c0:	d10c      	bne.n	80036dc <HAL_RCC_OscConfig+0x30c>
 80036c2:	4b5f      	ldr	r3, [pc, #380]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 80036c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c6:	4a5e      	ldr	r2, [pc, #376]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 80036c8:	f043 0304 	orr.w	r3, r3, #4
 80036cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80036ce:	4b5c      	ldr	r3, [pc, #368]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 80036d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036d2:	4a5b      	ldr	r2, [pc, #364]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 80036d4:	f043 0301 	orr.w	r3, r3, #1
 80036d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80036da:	e00b      	b.n	80036f4 <HAL_RCC_OscConfig+0x324>
 80036dc:	4b58      	ldr	r3, [pc, #352]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 80036de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036e0:	4a57      	ldr	r2, [pc, #348]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 80036e2:	f023 0301 	bic.w	r3, r3, #1
 80036e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80036e8:	4b55      	ldr	r3, [pc, #340]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 80036ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ec:	4a54      	ldr	r2, [pc, #336]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 80036ee:	f023 0304 	bic.w	r3, r3, #4
 80036f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d015      	beq.n	8003728 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fc:	f7fe f90c 	bl	8001918 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003702:	e00a      	b.n	800371a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003704:	f7fe f908 	bl	8001918 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003712:	4293      	cmp	r3, r2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e0cb      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800371a:	4b49      	ldr	r3, [pc, #292]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 800371c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0ee      	beq.n	8003704 <HAL_RCC_OscConfig+0x334>
 8003726:	e014      	b.n	8003752 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003728:	f7fe f8f6 	bl	8001918 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800372e:	e00a      	b.n	8003746 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003730:	f7fe f8f2 	bl	8001918 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800373e:	4293      	cmp	r3, r2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e0b5      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003746:	4b3e      	ldr	r3, [pc, #248]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 8003748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1ee      	bne.n	8003730 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003752:	7dfb      	ldrb	r3, [r7, #23]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d105      	bne.n	8003764 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003758:	4b39      	ldr	r3, [pc, #228]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 800375a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375c:	4a38      	ldr	r2, [pc, #224]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 800375e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003762:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 80a1 	beq.w	80038b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800376e:	4b34      	ldr	r3, [pc, #208]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f003 030c 	and.w	r3, r3, #12
 8003776:	2b08      	cmp	r3, #8
 8003778:	d05c      	beq.n	8003834 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	2b02      	cmp	r3, #2
 8003780:	d141      	bne.n	8003806 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003782:	4b31      	ldr	r3, [pc, #196]	@ (8003848 <HAL_RCC_OscConfig+0x478>)
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003788:	f7fe f8c6 	bl	8001918 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003790:	f7fe f8c2 	bl	8001918 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e087      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a2:	4b27      	ldr	r3, [pc, #156]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f0      	bne.n	8003790 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69da      	ldr	r2, [r3, #28]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	431a      	orrs	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037bc:	019b      	lsls	r3, r3, #6
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c4:	085b      	lsrs	r3, r3, #1
 80037c6:	3b01      	subs	r3, #1
 80037c8:	041b      	lsls	r3, r3, #16
 80037ca:	431a      	orrs	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d0:	061b      	lsls	r3, r3, #24
 80037d2:	491b      	ldr	r1, [pc, #108]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003848 <HAL_RCC_OscConfig+0x478>)
 80037da:	2201      	movs	r2, #1
 80037dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037de:	f7fe f89b 	bl	8001918 <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037e6:	f7fe f897 	bl	8001918 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e05c      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f8:	4b11      	ldr	r3, [pc, #68]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0f0      	beq.n	80037e6 <HAL_RCC_OscConfig+0x416>
 8003804:	e054      	b.n	80038b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003806:	4b10      	ldr	r3, [pc, #64]	@ (8003848 <HAL_RCC_OscConfig+0x478>)
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380c:	f7fe f884 	bl	8001918 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003814:	f7fe f880 	bl	8001918 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e045      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003826:	4b06      	ldr	r3, [pc, #24]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f0      	bne.n	8003814 <HAL_RCC_OscConfig+0x444>
 8003832:	e03d      	b.n	80038b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d107      	bne.n	800384c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e038      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
 8003840:	40023800 	.word	0x40023800
 8003844:	40007000 	.word	0x40007000
 8003848:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800384c:	4b1b      	ldr	r3, [pc, #108]	@ (80038bc <HAL_RCC_OscConfig+0x4ec>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d028      	beq.n	80038ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003864:	429a      	cmp	r2, r3
 8003866:	d121      	bne.n	80038ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003872:	429a      	cmp	r2, r3
 8003874:	d11a      	bne.n	80038ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800387c:	4013      	ands	r3, r2
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003882:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003884:	4293      	cmp	r3, r2
 8003886:	d111      	bne.n	80038ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003892:	085b      	lsrs	r3, r3, #1
 8003894:	3b01      	subs	r3, #1
 8003896:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003898:	429a      	cmp	r2, r3
 800389a:	d107      	bne.n	80038ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d001      	beq.n	80038b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e000      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3718      	adds	r7, #24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	40023800 	.word	0x40023800

080038c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e0cc      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038d4:	4b68      	ldr	r3, [pc, #416]	@ (8003a78 <HAL_RCC_ClockConfig+0x1b8>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d90c      	bls.n	80038fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e2:	4b65      	ldr	r3, [pc, #404]	@ (8003a78 <HAL_RCC_ClockConfig+0x1b8>)
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	b2d2      	uxtb	r2, r2
 80038e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ea:	4b63      	ldr	r3, [pc, #396]	@ (8003a78 <HAL_RCC_ClockConfig+0x1b8>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d001      	beq.n	80038fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e0b8      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d020      	beq.n	800394a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b00      	cmp	r3, #0
 8003912:	d005      	beq.n	8003920 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003914:	4b59      	ldr	r3, [pc, #356]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	4a58      	ldr	r2, [pc, #352]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 800391a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800391e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0308 	and.w	r3, r3, #8
 8003928:	2b00      	cmp	r3, #0
 800392a:	d005      	beq.n	8003938 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800392c:	4b53      	ldr	r3, [pc, #332]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	4a52      	ldr	r2, [pc, #328]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003932:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003936:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003938:	4b50      	ldr	r3, [pc, #320]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	494d      	ldr	r1, [pc, #308]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003946:	4313      	orrs	r3, r2
 8003948:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d044      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d107      	bne.n	800396e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395e:	4b47      	ldr	r3, [pc, #284]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d119      	bne.n	800399e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e07f      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2b02      	cmp	r3, #2
 8003974:	d003      	beq.n	800397e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800397a:	2b03      	cmp	r3, #3
 800397c:	d107      	bne.n	800398e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800397e:	4b3f      	ldr	r3, [pc, #252]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d109      	bne.n	800399e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e06f      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800398e:	4b3b      	ldr	r3, [pc, #236]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e067      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800399e:	4b37      	ldr	r3, [pc, #220]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f023 0203 	bic.w	r2, r3, #3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	4934      	ldr	r1, [pc, #208]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039b0:	f7fd ffb2 	bl	8001918 <HAL_GetTick>
 80039b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b6:	e00a      	b.n	80039ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039b8:	f7fd ffae 	bl	8001918 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e04f      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ce:	4b2b      	ldr	r3, [pc, #172]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 020c 	and.w	r2, r3, #12
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	429a      	cmp	r2, r3
 80039de:	d1eb      	bne.n	80039b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039e0:	4b25      	ldr	r3, [pc, #148]	@ (8003a78 <HAL_RCC_ClockConfig+0x1b8>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d20c      	bcs.n	8003a08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ee:	4b22      	ldr	r3, [pc, #136]	@ (8003a78 <HAL_RCC_ClockConfig+0x1b8>)
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	b2d2      	uxtb	r2, r2
 80039f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f6:	4b20      	ldr	r3, [pc, #128]	@ (8003a78 <HAL_RCC_ClockConfig+0x1b8>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0307 	and.w	r3, r3, #7
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d001      	beq.n	8003a08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e032      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d008      	beq.n	8003a26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a14:	4b19      	ldr	r3, [pc, #100]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	4916      	ldr	r1, [pc, #88]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0308 	and.w	r3, r3, #8
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d009      	beq.n	8003a46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a32:	4b12      	ldr	r3, [pc, #72]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	490e      	ldr	r1, [pc, #56]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a46:	f000 f821 	bl	8003a8c <HAL_RCC_GetSysClockFreq>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	091b      	lsrs	r3, r3, #4
 8003a52:	f003 030f 	and.w	r3, r3, #15
 8003a56:	490a      	ldr	r1, [pc, #40]	@ (8003a80 <HAL_RCC_ClockConfig+0x1c0>)
 8003a58:	5ccb      	ldrb	r3, [r1, r3]
 8003a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a5e:	4a09      	ldr	r2, [pc, #36]	@ (8003a84 <HAL_RCC_ClockConfig+0x1c4>)
 8003a60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a62:	4b09      	ldr	r3, [pc, #36]	@ (8003a88 <HAL_RCC_ClockConfig+0x1c8>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7fd ff12 	bl	8001890 <HAL_InitTick>

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	40023c00 	.word	0x40023c00
 8003a7c:	40023800 	.word	0x40023800
 8003a80:	080070b0 	.word	0x080070b0
 8003a84:	20000000 	.word	0x20000000
 8003a88:	20000004 	.word	0x20000004

08003a8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a90:	b090      	sub	sp, #64	@ 0x40
 8003a92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a98:	2300      	movs	r3, #0
 8003a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003aa4:	4b59      	ldr	r3, [pc, #356]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f003 030c 	and.w	r3, r3, #12
 8003aac:	2b08      	cmp	r3, #8
 8003aae:	d00d      	beq.n	8003acc <HAL_RCC_GetSysClockFreq+0x40>
 8003ab0:	2b08      	cmp	r3, #8
 8003ab2:	f200 80a1 	bhi.w	8003bf8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d002      	beq.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x34>
 8003aba:	2b04      	cmp	r3, #4
 8003abc:	d003      	beq.n	8003ac6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003abe:	e09b      	b.n	8003bf8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ac0:	4b53      	ldr	r3, [pc, #332]	@ (8003c10 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003ac4:	e09b      	b.n	8003bfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ac6:	4b53      	ldr	r3, [pc, #332]	@ (8003c14 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003aca:	e098      	b.n	8003bfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003acc:	4b4f      	ldr	r3, [pc, #316]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ad4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ad6:	4b4d      	ldr	r3, [pc, #308]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d028      	beq.n	8003b34 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ae2:	4b4a      	ldr	r3, [pc, #296]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	099b      	lsrs	r3, r3, #6
 8003ae8:	2200      	movs	r2, #0
 8003aea:	623b      	str	r3, [r7, #32]
 8003aec:	627a      	str	r2, [r7, #36]	@ 0x24
 8003aee:	6a3b      	ldr	r3, [r7, #32]
 8003af0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003af4:	2100      	movs	r1, #0
 8003af6:	4b47      	ldr	r3, [pc, #284]	@ (8003c14 <HAL_RCC_GetSysClockFreq+0x188>)
 8003af8:	fb03 f201 	mul.w	r2, r3, r1
 8003afc:	2300      	movs	r3, #0
 8003afe:	fb00 f303 	mul.w	r3, r0, r3
 8003b02:	4413      	add	r3, r2
 8003b04:	4a43      	ldr	r2, [pc, #268]	@ (8003c14 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b06:	fba0 1202 	umull	r1, r2, r0, r2
 8003b0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b0c:	460a      	mov	r2, r1
 8003b0e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003b10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b12:	4413      	add	r3, r2
 8003b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b18:	2200      	movs	r2, #0
 8003b1a:	61bb      	str	r3, [r7, #24]
 8003b1c:	61fa      	str	r2, [r7, #28]
 8003b1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b22:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003b26:	f7fc fbab 	bl	8000280 <__aeabi_uldivmod>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	4613      	mov	r3, r2
 8003b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b32:	e053      	b.n	8003bdc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b34:	4b35      	ldr	r3, [pc, #212]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	099b      	lsrs	r3, r3, #6
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	613b      	str	r3, [r7, #16]
 8003b3e:	617a      	str	r2, [r7, #20]
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b46:	f04f 0b00 	mov.w	fp, #0
 8003b4a:	4652      	mov	r2, sl
 8003b4c:	465b      	mov	r3, fp
 8003b4e:	f04f 0000 	mov.w	r0, #0
 8003b52:	f04f 0100 	mov.w	r1, #0
 8003b56:	0159      	lsls	r1, r3, #5
 8003b58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b5c:	0150      	lsls	r0, r2, #5
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	ebb2 080a 	subs.w	r8, r2, sl
 8003b66:	eb63 090b 	sbc.w	r9, r3, fp
 8003b6a:	f04f 0200 	mov.w	r2, #0
 8003b6e:	f04f 0300 	mov.w	r3, #0
 8003b72:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b76:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b7a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b7e:	ebb2 0408 	subs.w	r4, r2, r8
 8003b82:	eb63 0509 	sbc.w	r5, r3, r9
 8003b86:	f04f 0200 	mov.w	r2, #0
 8003b8a:	f04f 0300 	mov.w	r3, #0
 8003b8e:	00eb      	lsls	r3, r5, #3
 8003b90:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b94:	00e2      	lsls	r2, r4, #3
 8003b96:	4614      	mov	r4, r2
 8003b98:	461d      	mov	r5, r3
 8003b9a:	eb14 030a 	adds.w	r3, r4, sl
 8003b9e:	603b      	str	r3, [r7, #0]
 8003ba0:	eb45 030b 	adc.w	r3, r5, fp
 8003ba4:	607b      	str	r3, [r7, #4]
 8003ba6:	f04f 0200 	mov.w	r2, #0
 8003baa:	f04f 0300 	mov.w	r3, #0
 8003bae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bb2:	4629      	mov	r1, r5
 8003bb4:	028b      	lsls	r3, r1, #10
 8003bb6:	4621      	mov	r1, r4
 8003bb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bbc:	4621      	mov	r1, r4
 8003bbe:	028a      	lsls	r2, r1, #10
 8003bc0:	4610      	mov	r0, r2
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	60bb      	str	r3, [r7, #8]
 8003bca:	60fa      	str	r2, [r7, #12]
 8003bcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bd0:	f7fc fb56 	bl	8000280 <__aeabi_uldivmod>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	4613      	mov	r3, r2
 8003bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	0c1b      	lsrs	r3, r3, #16
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	3301      	adds	r3, #1
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003bec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003bf6:	e002      	b.n	8003bfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bf8:	4b05      	ldr	r3, [pc, #20]	@ (8003c10 <HAL_RCC_GetSysClockFreq+0x184>)
 8003bfa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003bfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3740      	adds	r7, #64	@ 0x40
 8003c04:	46bd      	mov	sp, r7
 8003c06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c0a:	bf00      	nop
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	00f42400 	.word	0x00f42400
 8003c14:	017d7840 	.word	0x017d7840

08003c18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c1c:	4b03      	ldr	r3, [pc, #12]	@ (8003c2c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	20000000 	.word	0x20000000

08003c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c34:	f7ff fff0 	bl	8003c18 <HAL_RCC_GetHCLKFreq>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	4b05      	ldr	r3, [pc, #20]	@ (8003c50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	0a9b      	lsrs	r3, r3, #10
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	4903      	ldr	r1, [pc, #12]	@ (8003c54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c46:	5ccb      	ldrb	r3, [r1, r3]
 8003c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40023800 	.word	0x40023800
 8003c54:	080070c0 	.word	0x080070c0

08003c58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c5c:	f7ff ffdc 	bl	8003c18 <HAL_RCC_GetHCLKFreq>
 8003c60:	4602      	mov	r2, r0
 8003c62:	4b05      	ldr	r3, [pc, #20]	@ (8003c78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	0b5b      	lsrs	r3, r3, #13
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	4903      	ldr	r1, [pc, #12]	@ (8003c7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c6e:	5ccb      	ldrb	r3, [r1, r3]
 8003c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	080070c0 	.word	0x080070c0

08003c80 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d105      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d035      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ca8:	4b67      	ldr	r3, [pc, #412]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cae:	f7fd fe33 	bl	8001918 <HAL_GetTick>
 8003cb2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cb4:	e008      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003cb6:	f7fd fe2f 	bl	8001918 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d901      	bls.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e0ba      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cc8:	4b60      	ldr	r3, [pc, #384]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1f0      	bne.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	019a      	lsls	r2, r3, #6
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	071b      	lsls	r3, r3, #28
 8003ce0:	495a      	ldr	r1, [pc, #360]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ce8:	4b57      	ldr	r3, [pc, #348]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003cea:	2201      	movs	r2, #1
 8003cec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cee:	f7fd fe13 	bl	8001918 <HAL_GetTick>
 8003cf2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cf4:	e008      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003cf6:	f7fd fe0f 	bl	8001918 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e09a      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d08:	4b50      	ldr	r3, [pc, #320]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0f0      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 8083 	beq.w	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d22:	2300      	movs	r3, #0
 8003d24:	60fb      	str	r3, [r7, #12]
 8003d26:	4b49      	ldr	r3, [pc, #292]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2a:	4a48      	ldr	r2, [pc, #288]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d30:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d32:	4b46      	ldr	r3, [pc, #280]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d3a:	60fb      	str	r3, [r7, #12]
 8003d3c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003d3e:	4b44      	ldr	r3, [pc, #272]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a43      	ldr	r2, [pc, #268]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d48:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d4a:	f7fd fde5 	bl	8001918 <HAL_GetTick>
 8003d4e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d50:	e008      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003d52:	f7fd fde1 	bl	8001918 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d901      	bls.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e06c      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d64:	4b3a      	ldr	r3, [pc, #232]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0f0      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d70:	4b36      	ldr	r3, [pc, #216]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d78:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d02f      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d028      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d8e:	4b2f      	ldr	r3, [pc, #188]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d96:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d98:	4b2e      	ldr	r3, [pc, #184]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d9e:	4b2d      	ldr	r3, [pc, #180]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003da4:	4a29      	ldr	r2, [pc, #164]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003daa:	4b28      	ldr	r3, [pc, #160]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d114      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003db6:	f7fd fdaf 	bl	8001918 <HAL_GetTick>
 8003dba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dbc:	e00a      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dbe:	f7fd fdab 	bl	8001918 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e034      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003dd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d0ee      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003de8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003dec:	d10d      	bne.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003dee:	4b17      	ldr	r3, [pc, #92]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003dfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e02:	4912      	ldr	r1, [pc, #72]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	608b      	str	r3, [r1, #8]
 8003e08:	e005      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003e0a:	4b10      	ldr	r3, [pc, #64]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	4a0f      	ldr	r2, [pc, #60]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e10:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003e14:	6093      	str	r3, [r2, #8]
 8003e16:	4b0d      	ldr	r3, [pc, #52]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e18:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e22:	490a      	ldr	r1, [pc, #40]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0308 	and.w	r3, r3, #8
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d003      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	7c1a      	ldrb	r2, [r3, #16]
 8003e38:	4b07      	ldr	r3, [pc, #28]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003e3a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3718      	adds	r7, #24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	42470068 	.word	0x42470068
 8003e4c:	40023800 	.word	0x40023800
 8003e50:	40007000 	.word	0x40007000
 8003e54:	42470e40 	.word	0x42470e40
 8003e58:	424711e0 	.word	0x424711e0

08003e5c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e073      	b.n	8003f5a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	7f5b      	ldrb	r3, [r3, #29]
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d105      	bne.n	8003e88 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7fd faae 	bl	80013e4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	f003 0310 	and.w	r3, r3, #16
 8003e98:	2b10      	cmp	r3, #16
 8003e9a:	d055      	beq.n	8003f48 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	22ca      	movs	r2, #202	@ 0xca
 8003ea2:	625a      	str	r2, [r3, #36]	@ 0x24
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2253      	movs	r2, #83	@ 0x53
 8003eaa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 f99d 	bl	80041ec <RTC_EnterInitMode>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003eb6:	7bfb      	ldrb	r3, [r7, #15]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d12c      	bne.n	8003f16 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	6812      	ldr	r2, [r2, #0]
 8003ec6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003eca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ece:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6899      	ldr	r1, [r3, #8]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	68d2      	ldr	r2, [r2, #12]
 8003ef6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6919      	ldr	r1, [r3, #16]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	041a      	lsls	r2, r3, #16
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f9a4 	bl	800425a <RTC_ExitInitMode>
 8003f12:	4603      	mov	r3, r0
 8003f14:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003f16:	7bfb      	ldrb	r3, [r7, #15]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d110      	bne.n	8003f3e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003f2a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699a      	ldr	r2, [r3, #24]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	22ff      	movs	r2, #255	@ 0xff
 8003f44:	625a      	str	r2, [r3, #36]	@ 0x24
 8003f46:	e001      	b.n	8003f4c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003f4c:	7bfb      	ldrb	r3, [r7, #15]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d102      	bne.n	8003f58 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003f62:	b590      	push	{r4, r7, lr}
 8003f64:	b087      	sub	sp, #28
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	60f8      	str	r0, [r7, #12]
 8003f6a:	60b9      	str	r1, [r7, #8]
 8003f6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	7f1b      	ldrb	r3, [r3, #28]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d101      	bne.n	8003f7e <HAL_RTC_SetTime+0x1c>
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	e087      	b.n	800408e <HAL_RTC_SetTime+0x12c>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2201      	movs	r2, #1
 8003f82:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2202      	movs	r2, #2
 8003f88:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d126      	bne.n	8003fde <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d102      	bne.n	8003fa4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f000 f97b 	bl	80042a4 <RTC_ByteToBcd2>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	785b      	ldrb	r3, [r3, #1]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 f974 	bl	80042a4 <RTC_ByteToBcd2>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003fc0:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	789b      	ldrb	r3, [r3, #2]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 f96c 	bl	80042a4 <RTC_ByteToBcd2>
 8003fcc:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003fce:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	78db      	ldrb	r3, [r3, #3]
 8003fd6:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	617b      	str	r3, [r7, #20]
 8003fdc:	e018      	b.n	8004010 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d102      	bne.n	8003ff2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	785b      	ldrb	r3, [r3, #1]
 8003ffc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003ffe:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004004:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	78db      	ldrb	r3, [r3, #3]
 800400a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800400c:	4313      	orrs	r3, r2
 800400e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	22ca      	movs	r2, #202	@ 0xca
 8004016:	625a      	str	r2, [r3, #36]	@ 0x24
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2253      	movs	r2, #83	@ 0x53
 800401e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 f8e3 	bl	80041ec <RTC_EnterInitMode>
 8004026:	4603      	mov	r3, r0
 8004028:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800402a:	7cfb      	ldrb	r3, [r7, #19]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d120      	bne.n	8004072 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800403a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800403e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689a      	ldr	r2, [r3, #8]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800404e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6899      	ldr	r1, [r3, #8]
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	68da      	ldr	r2, [r3, #12]
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	431a      	orrs	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	430a      	orrs	r2, r1
 8004066:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f000 f8f6 	bl	800425a <RTC_ExitInitMode>
 800406e:	4603      	mov	r3, r0
 8004070:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004072:	7cfb      	ldrb	r3, [r7, #19]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d102      	bne.n	800407e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2201      	movs	r2, #1
 800407c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	22ff      	movs	r2, #255	@ 0xff
 8004084:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	771a      	strb	r2, [r3, #28]

  return status;
 800408c:	7cfb      	ldrb	r3, [r7, #19]
}
 800408e:	4618      	mov	r0, r3
 8004090:	371c      	adds	r7, #28
 8004092:	46bd      	mov	sp, r7
 8004094:	bd90      	pop	{r4, r7, pc}

08004096 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004096:	b590      	push	{r4, r7, lr}
 8004098:	b087      	sub	sp, #28
 800409a:	af00      	add	r7, sp, #0
 800409c:	60f8      	str	r0, [r7, #12]
 800409e:	60b9      	str	r1, [r7, #8]
 80040a0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80040a2:	2300      	movs	r3, #0
 80040a4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	7f1b      	ldrb	r3, [r3, #28]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d101      	bne.n	80040b2 <HAL_RTC_SetDate+0x1c>
 80040ae:	2302      	movs	r3, #2
 80040b0:	e071      	b.n	8004196 <HAL_RTC_SetDate+0x100>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2201      	movs	r2, #1
 80040b6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2202      	movs	r2, #2
 80040bc:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10e      	bne.n	80040e2 <HAL_RTC_SetDate+0x4c>
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	785b      	ldrb	r3, [r3, #1]
 80040c8:	f003 0310 	and.w	r3, r3, #16
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d008      	beq.n	80040e2 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	785b      	ldrb	r3, [r3, #1]
 80040d4:	f023 0310 	bic.w	r3, r3, #16
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	330a      	adds	r3, #10
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d11c      	bne.n	8004122 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	78db      	ldrb	r3, [r3, #3]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 f8d9 	bl	80042a4 <RTC_ByteToBcd2>
 80040f2:	4603      	mov	r3, r0
 80040f4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	785b      	ldrb	r3, [r3, #1]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 f8d2 	bl	80042a4 <RTC_ByteToBcd2>
 8004100:	4603      	mov	r3, r0
 8004102:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004104:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	789b      	ldrb	r3, [r3, #2]
 800410a:	4618      	mov	r0, r3
 800410c:	f000 f8ca 	bl	80042a4 <RTC_ByteToBcd2>
 8004110:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004112:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800411c:	4313      	orrs	r3, r2
 800411e:	617b      	str	r3, [r7, #20]
 8004120:	e00e      	b.n	8004140 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	78db      	ldrb	r3, [r3, #3]
 8004126:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	785b      	ldrb	r3, [r3, #1]
 800412c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800412e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004130:	68ba      	ldr	r2, [r7, #8]
 8004132:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004134:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800413c:	4313      	orrs	r3, r2
 800413e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	22ca      	movs	r2, #202	@ 0xca
 8004146:	625a      	str	r2, [r3, #36]	@ 0x24
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2253      	movs	r2, #83	@ 0x53
 800414e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 f84b 	bl	80041ec <RTC_EnterInitMode>
 8004156:	4603      	mov	r3, r0
 8004158:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800415a:	7cfb      	ldrb	r3, [r7, #19]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10c      	bne.n	800417a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800416a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800416e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f000 f872 	bl	800425a <RTC_ExitInitMode>
 8004176:	4603      	mov	r3, r0
 8004178:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800417a:	7cfb      	ldrb	r3, [r7, #19]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d102      	bne.n	8004186 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2201      	movs	r2, #1
 8004184:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	22ff      	movs	r2, #255	@ 0xff
 800418c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	771a      	strb	r2, [r3, #28]

  return status;
 8004194:	7cfb      	ldrb	r3, [r7, #19]
}
 8004196:	4618      	mov	r0, r3
 8004198:	371c      	adds	r7, #28
 800419a:	46bd      	mov	sp, r7
 800419c:	bd90      	pop	{r4, r7, pc}
	...

080041a0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041a8:	2300      	movs	r3, #0
 80041aa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a0d      	ldr	r2, [pc, #52]	@ (80041e8 <HAL_RTC_WaitForSynchro+0x48>)
 80041b2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041b4:	f7fd fbb0 	bl	8001918 <HAL_GetTick>
 80041b8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80041ba:	e009      	b.n	80041d0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80041bc:	f7fd fbac 	bl	8001918 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80041ca:	d901      	bls.n	80041d0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e007      	b.n	80041e0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	f003 0320 	and.w	r3, r3, #32
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d0ee      	beq.n	80041bc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	00013f5f 	.word	0x00013f5f

080041ec <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80041f8:	2300      	movs	r3, #0
 80041fa:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004206:	2b00      	cmp	r3, #0
 8004208:	d122      	bne.n	8004250 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68da      	ldr	r2, [r3, #12]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004218:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800421a:	f7fd fb7d 	bl	8001918 <HAL_GetTick>
 800421e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004220:	e00c      	b.n	800423c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004222:	f7fd fb79 	bl	8001918 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004230:	d904      	bls.n	800423c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2204      	movs	r2, #4
 8004236:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004246:	2b00      	cmp	r3, #0
 8004248:	d102      	bne.n	8004250 <RTC_EnterInitMode+0x64>
 800424a:	7bfb      	ldrb	r3, [r7, #15]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d1e8      	bne.n	8004222 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004250:	7bfb      	ldrb	r3, [r7, #15]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b084      	sub	sp, #16
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004262:	2300      	movs	r3, #0
 8004264:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68da      	ldr	r2, [r3, #12]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004274:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f003 0320 	and.w	r3, r3, #32
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10a      	bne.n	800429a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f7ff ff8b 	bl	80041a0 <HAL_RTC_WaitForSynchro>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d004      	beq.n	800429a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2204      	movs	r2, #4
 8004294:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800429a:	7bfb      	ldrb	r3, [r7, #15]
}
 800429c:	4618      	mov	r0, r3
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	4603      	mov	r3, r0
 80042ac:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80042ae:	2300      	movs	r3, #0
 80042b0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80042b2:	e005      	b.n	80042c0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	3301      	adds	r3, #1
 80042b8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80042ba:	79fb      	ldrb	r3, [r7, #7]
 80042bc:	3b0a      	subs	r3, #10
 80042be:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80042c0:	79fb      	ldrb	r3, [r7, #7]
 80042c2:	2b09      	cmp	r3, #9
 80042c4:	d8f6      	bhi.n	80042b4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	79fb      	ldrb	r3, [r7, #7]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	b2db      	uxtb	r3, r3
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3714      	adds	r7, #20
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e041      	b.n	8004376 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d106      	bne.n	800430c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7fd f898 	bl	800143c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2202      	movs	r2, #2
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3304      	adds	r3, #4
 800431c:	4619      	mov	r1, r3
 800431e:	4610      	mov	r0, r2
 8004320:	f000 fd3c 	bl	8004d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b082      	sub	sp, #8
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d101      	bne.n	8004390 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e041      	b.n	8004414 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004396:	b2db      	uxtb	r3, r3
 8004398:	2b00      	cmp	r3, #0
 800439a:	d106      	bne.n	80043aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f839 	bl	800441c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2202      	movs	r2, #2
 80043ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	3304      	adds	r3, #4
 80043ba:	4619      	mov	r1, r3
 80043bc:	4610      	mov	r0, r2
 80043be:	f000 fced 	bl	8004d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2201      	movs	r2, #1
 80043c6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3708      	adds	r7, #8
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d109      	bne.n	8004454 <HAL_TIM_PWM_Start+0x24>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b01      	cmp	r3, #1
 800444a:	bf14      	ite	ne
 800444c:	2301      	movne	r3, #1
 800444e:	2300      	moveq	r3, #0
 8004450:	b2db      	uxtb	r3, r3
 8004452:	e022      	b.n	800449a <HAL_TIM_PWM_Start+0x6a>
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	2b04      	cmp	r3, #4
 8004458:	d109      	bne.n	800446e <HAL_TIM_PWM_Start+0x3e>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b01      	cmp	r3, #1
 8004464:	bf14      	ite	ne
 8004466:	2301      	movne	r3, #1
 8004468:	2300      	moveq	r3, #0
 800446a:	b2db      	uxtb	r3, r3
 800446c:	e015      	b.n	800449a <HAL_TIM_PWM_Start+0x6a>
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	2b08      	cmp	r3, #8
 8004472:	d109      	bne.n	8004488 <HAL_TIM_PWM_Start+0x58>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b01      	cmp	r3, #1
 800447e:	bf14      	ite	ne
 8004480:	2301      	movne	r3, #1
 8004482:	2300      	moveq	r3, #0
 8004484:	b2db      	uxtb	r3, r3
 8004486:	e008      	b.n	800449a <HAL_TIM_PWM_Start+0x6a>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b01      	cmp	r3, #1
 8004492:	bf14      	ite	ne
 8004494:	2301      	movne	r3, #1
 8004496:	2300      	moveq	r3, #0
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e068      	b.n	8004574 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d104      	bne.n	80044b2 <HAL_TIM_PWM_Start+0x82>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2202      	movs	r2, #2
 80044ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044b0:	e013      	b.n	80044da <HAL_TIM_PWM_Start+0xaa>
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	2b04      	cmp	r3, #4
 80044b6:	d104      	bne.n	80044c2 <HAL_TIM_PWM_Start+0x92>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2202      	movs	r2, #2
 80044bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044c0:	e00b      	b.n	80044da <HAL_TIM_PWM_Start+0xaa>
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	2b08      	cmp	r3, #8
 80044c6:	d104      	bne.n	80044d2 <HAL_TIM_PWM_Start+0xa2>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2202      	movs	r2, #2
 80044cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044d0:	e003      	b.n	80044da <HAL_TIM_PWM_Start+0xaa>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2202      	movs	r2, #2
 80044d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2201      	movs	r2, #1
 80044e0:	6839      	ldr	r1, [r7, #0]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f001 f82a 	bl	800553c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a23      	ldr	r2, [pc, #140]	@ (800457c <HAL_TIM_PWM_Start+0x14c>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d107      	bne.n	8004502 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004500:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a1d      	ldr	r2, [pc, #116]	@ (800457c <HAL_TIM_PWM_Start+0x14c>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d018      	beq.n	800453e <HAL_TIM_PWM_Start+0x10e>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004514:	d013      	beq.n	800453e <HAL_TIM_PWM_Start+0x10e>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a19      	ldr	r2, [pc, #100]	@ (8004580 <HAL_TIM_PWM_Start+0x150>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d00e      	beq.n	800453e <HAL_TIM_PWM_Start+0x10e>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a17      	ldr	r2, [pc, #92]	@ (8004584 <HAL_TIM_PWM_Start+0x154>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d009      	beq.n	800453e <HAL_TIM_PWM_Start+0x10e>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a16      	ldr	r2, [pc, #88]	@ (8004588 <HAL_TIM_PWM_Start+0x158>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d004      	beq.n	800453e <HAL_TIM_PWM_Start+0x10e>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a14      	ldr	r2, [pc, #80]	@ (800458c <HAL_TIM_PWM_Start+0x15c>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d111      	bne.n	8004562 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f003 0307 	and.w	r3, r3, #7
 8004548:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2b06      	cmp	r3, #6
 800454e:	d010      	beq.n	8004572 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f042 0201 	orr.w	r2, r2, #1
 800455e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004560:	e007      	b.n	8004572 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f042 0201 	orr.w	r2, r2, #1
 8004570:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	40010000 	.word	0x40010000
 8004580:	40000400 	.word	0x40000400
 8004584:	40000800 	.word	0x40000800
 8004588:	40000c00 	.word	0x40000c00
 800458c:	40014000 	.word	0x40014000

08004590 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2200      	movs	r2, #0
 80045a0:	6839      	ldr	r1, [r7, #0]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 ffca 	bl	800553c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a29      	ldr	r2, [pc, #164]	@ (8004654 <HAL_TIM_PWM_Stop+0xc4>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d117      	bne.n	80045e2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6a1a      	ldr	r2, [r3, #32]
 80045b8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80045bc:	4013      	ands	r3, r2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10f      	bne.n	80045e2 <HAL_TIM_PWM_Stop+0x52>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6a1a      	ldr	r2, [r3, #32]
 80045c8:	f240 4344 	movw	r3, #1092	@ 0x444
 80045cc:	4013      	ands	r3, r2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d107      	bne.n	80045e2 <HAL_TIM_PWM_Stop+0x52>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80045e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6a1a      	ldr	r2, [r3, #32]
 80045e8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80045ec:	4013      	ands	r3, r2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10f      	bne.n	8004612 <HAL_TIM_PWM_Stop+0x82>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	6a1a      	ldr	r2, [r3, #32]
 80045f8:	f240 4344 	movw	r3, #1092	@ 0x444
 80045fc:	4013      	ands	r3, r2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d107      	bne.n	8004612 <HAL_TIM_PWM_Stop+0x82>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0201 	bic.w	r2, r2, #1
 8004610:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d104      	bne.n	8004622 <HAL_TIM_PWM_Stop+0x92>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004620:	e013      	b.n	800464a <HAL_TIM_PWM_Stop+0xba>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	2b04      	cmp	r3, #4
 8004626:	d104      	bne.n	8004632 <HAL_TIM_PWM_Stop+0xa2>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004630:	e00b      	b.n	800464a <HAL_TIM_PWM_Stop+0xba>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b08      	cmp	r3, #8
 8004636:	d104      	bne.n	8004642 <HAL_TIM_PWM_Stop+0xb2>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004640:	e003      	b.n	800464a <HAL_TIM_PWM_Stop+0xba>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3708      	adds	r7, #8
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	40010000 	.word	0x40010000

08004658 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e041      	b.n	80046ee <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d106      	bne.n	8004684 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f839 	bl	80046f6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2202      	movs	r2, #2
 8004688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	3304      	adds	r3, #4
 8004694:	4619      	mov	r1, r3
 8004696:	4610      	mov	r0, r2
 8004698:	f000 fb80 	bl	8004d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b083      	sub	sp, #12
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80046fe:	bf00      	nop
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800470a:	b580      	push	{r7, lr}
 800470c:	b084      	sub	sp, #16
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d020      	beq.n	800476e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d01b      	beq.n	800476e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f06f 0202 	mvn.w	r2, #2
 800473e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	f003 0303 	and.w	r3, r3, #3
 8004750:	2b00      	cmp	r3, #0
 8004752:	d003      	beq.n	800475c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 fb02 	bl	8004d5e <HAL_TIM_IC_CaptureCallback>
 800475a:	e005      	b.n	8004768 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 faf4 	bl	8004d4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 fb05 	bl	8004d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b00      	cmp	r3, #0
 8004776:	d020      	beq.n	80047ba <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f003 0304 	and.w	r3, r3, #4
 800477e:	2b00      	cmp	r3, #0
 8004780:	d01b      	beq.n	80047ba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f06f 0204 	mvn.w	r2, #4
 800478a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2202      	movs	r2, #2
 8004790:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	699b      	ldr	r3, [r3, #24]
 8004798:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800479c:	2b00      	cmp	r3, #0
 800479e:	d003      	beq.n	80047a8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 fadc 	bl	8004d5e <HAL_TIM_IC_CaptureCallback>
 80047a6:	e005      	b.n	80047b4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 face 	bl	8004d4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 fadf 	bl	8004d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	f003 0308 	and.w	r3, r3, #8
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d020      	beq.n	8004806 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f003 0308 	and.w	r3, r3, #8
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d01b      	beq.n	8004806 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f06f 0208 	mvn.w	r2, #8
 80047d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2204      	movs	r2, #4
 80047dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	69db      	ldr	r3, [r3, #28]
 80047e4:	f003 0303 	and.w	r3, r3, #3
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 fab6 	bl	8004d5e <HAL_TIM_IC_CaptureCallback>
 80047f2:	e005      	b.n	8004800 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 faa8 	bl	8004d4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 fab9 	bl	8004d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	f003 0310 	and.w	r3, r3, #16
 800480c:	2b00      	cmp	r3, #0
 800480e:	d020      	beq.n	8004852 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f003 0310 	and.w	r3, r3, #16
 8004816:	2b00      	cmp	r3, #0
 8004818:	d01b      	beq.n	8004852 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f06f 0210 	mvn.w	r2, #16
 8004822:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2208      	movs	r2, #8
 8004828:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	69db      	ldr	r3, [r3, #28]
 8004830:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004834:	2b00      	cmp	r3, #0
 8004836:	d003      	beq.n	8004840 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 fa90 	bl	8004d5e <HAL_TIM_IC_CaptureCallback>
 800483e:	e005      	b.n	800484c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 fa82 	bl	8004d4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 fa93 	bl	8004d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00c      	beq.n	8004876 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d007      	beq.n	8004876 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f06f 0201 	mvn.w	r2, #1
 800486e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 fa60 	bl	8004d36 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00c      	beq.n	800489a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004886:	2b00      	cmp	r3, #0
 8004888:	d007      	beq.n	800489a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 ff9d 	bl	80057d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00c      	beq.n	80048be <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d007      	beq.n	80048be <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80048b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 fa64 	bl	8004d86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	f003 0320 	and.w	r3, r3, #32
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00c      	beq.n	80048e2 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f003 0320 	and.w	r3, r3, #32
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d007      	beq.n	80048e2 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f06f 0220 	mvn.w	r2, #32
 80048da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 ff6f 	bl	80057c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048e2:	bf00      	nop
 80048e4:	3710      	adds	r7, #16
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b086      	sub	sp, #24
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	60f8      	str	r0, [r7, #12]
 80048f2:	60b9      	str	r1, [r7, #8]
 80048f4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048f6:	2300      	movs	r3, #0
 80048f8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004900:	2b01      	cmp	r3, #1
 8004902:	d101      	bne.n	8004908 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004904:	2302      	movs	r3, #2
 8004906:	e088      	b.n	8004a1a <HAL_TIM_IC_ConfigChannel+0x130>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d11b      	bne.n	800494e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004926:	f000 fc51 	bl	80051cc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	699a      	ldr	r2, [r3, #24]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 020c 	bic.w	r2, r2, #12
 8004938:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6999      	ldr	r1, [r3, #24]
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	689a      	ldr	r2, [r3, #8]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	430a      	orrs	r2, r1
 800494a:	619a      	str	r2, [r3, #24]
 800494c:	e060      	b.n	8004a10 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2b04      	cmp	r3, #4
 8004952:	d11c      	bne.n	800498e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004964:	f000 fcc9 	bl	80052fa <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	699a      	ldr	r2, [r3, #24]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004976:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	6999      	ldr	r1, [r3, #24]
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	021a      	lsls	r2, r3, #8
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	430a      	orrs	r2, r1
 800498a:	619a      	str	r2, [r3, #24]
 800498c:	e040      	b.n	8004a10 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2b08      	cmp	r3, #8
 8004992:	d11b      	bne.n	80049cc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80049a4:	f000 fd16 	bl	80053d4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	69da      	ldr	r2, [r3, #28]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f022 020c 	bic.w	r2, r2, #12
 80049b6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	69d9      	ldr	r1, [r3, #28]
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	689a      	ldr	r2, [r3, #8]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	61da      	str	r2, [r3, #28]
 80049ca:	e021      	b.n	8004a10 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b0c      	cmp	r3, #12
 80049d0:	d11c      	bne.n	8004a0c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80049e2:	f000 fd33 	bl	800544c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	69da      	ldr	r2, [r3, #28]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80049f4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	69d9      	ldr	r1, [r3, #28]
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	021a      	lsls	r2, r3, #8
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	61da      	str	r2, [r3, #28]
 8004a0a:	e001      	b.n	8004a10 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a18:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3718      	adds	r7, #24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
	...

08004a24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a30:	2300      	movs	r3, #0
 8004a32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d101      	bne.n	8004a42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a3e:	2302      	movs	r3, #2
 8004a40:	e0ae      	b.n	8004ba0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b0c      	cmp	r3, #12
 8004a4e:	f200 809f 	bhi.w	8004b90 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a52:	a201      	add	r2, pc, #4	@ (adr r2, 8004a58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a58:	08004a8d 	.word	0x08004a8d
 8004a5c:	08004b91 	.word	0x08004b91
 8004a60:	08004b91 	.word	0x08004b91
 8004a64:	08004b91 	.word	0x08004b91
 8004a68:	08004acd 	.word	0x08004acd
 8004a6c:	08004b91 	.word	0x08004b91
 8004a70:	08004b91 	.word	0x08004b91
 8004a74:	08004b91 	.word	0x08004b91
 8004a78:	08004b0f 	.word	0x08004b0f
 8004a7c:	08004b91 	.word	0x08004b91
 8004a80:	08004b91 	.word	0x08004b91
 8004a84:	08004b91 	.word	0x08004b91
 8004a88:	08004b4f 	.word	0x08004b4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68b9      	ldr	r1, [r7, #8]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 fa0e 	bl	8004eb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	699a      	ldr	r2, [r3, #24]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0208 	orr.w	r2, r2, #8
 8004aa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	699a      	ldr	r2, [r3, #24]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f022 0204 	bic.w	r2, r2, #4
 8004ab6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6999      	ldr	r1, [r3, #24]
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	691a      	ldr	r2, [r3, #16]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	619a      	str	r2, [r3, #24]
      break;
 8004aca:	e064      	b.n	8004b96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68b9      	ldr	r1, [r7, #8]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 fa54 	bl	8004f80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	699a      	ldr	r2, [r3, #24]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ae6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	699a      	ldr	r2, [r3, #24]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004af6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6999      	ldr	r1, [r3, #24]
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	021a      	lsls	r2, r3, #8
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	619a      	str	r2, [r3, #24]
      break;
 8004b0c:	e043      	b.n	8004b96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68b9      	ldr	r1, [r7, #8]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 fa9f 	bl	8005058 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	69da      	ldr	r2, [r3, #28]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f042 0208 	orr.w	r2, r2, #8
 8004b28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	69da      	ldr	r2, [r3, #28]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 0204 	bic.w	r2, r2, #4
 8004b38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	69d9      	ldr	r1, [r3, #28]
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	691a      	ldr	r2, [r3, #16]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	61da      	str	r2, [r3, #28]
      break;
 8004b4c:	e023      	b.n	8004b96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68b9      	ldr	r1, [r7, #8]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f000 fae9 	bl	800512c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	69da      	ldr	r2, [r3, #28]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	69da      	ldr	r2, [r3, #28]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	69d9      	ldr	r1, [r3, #28]
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	021a      	lsls	r2, r3, #8
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	61da      	str	r2, [r3, #28]
      break;
 8004b8e:	e002      	b.n	8004b96 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	75fb      	strb	r3, [r7, #23]
      break;
 8004b94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3718      	adds	r7, #24
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d101      	bne.n	8004bc4 <HAL_TIM_ConfigClockSource+0x1c>
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	e0b4      	b.n	8004d2e <HAL_TIM_ConfigClockSource+0x186>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2202      	movs	r2, #2
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004be2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004bea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bfc:	d03e      	beq.n	8004c7c <HAL_TIM_ConfigClockSource+0xd4>
 8004bfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c02:	f200 8087 	bhi.w	8004d14 <HAL_TIM_ConfigClockSource+0x16c>
 8004c06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c0a:	f000 8086 	beq.w	8004d1a <HAL_TIM_ConfigClockSource+0x172>
 8004c0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c12:	d87f      	bhi.n	8004d14 <HAL_TIM_ConfigClockSource+0x16c>
 8004c14:	2b70      	cmp	r3, #112	@ 0x70
 8004c16:	d01a      	beq.n	8004c4e <HAL_TIM_ConfigClockSource+0xa6>
 8004c18:	2b70      	cmp	r3, #112	@ 0x70
 8004c1a:	d87b      	bhi.n	8004d14 <HAL_TIM_ConfigClockSource+0x16c>
 8004c1c:	2b60      	cmp	r3, #96	@ 0x60
 8004c1e:	d050      	beq.n	8004cc2 <HAL_TIM_ConfigClockSource+0x11a>
 8004c20:	2b60      	cmp	r3, #96	@ 0x60
 8004c22:	d877      	bhi.n	8004d14 <HAL_TIM_ConfigClockSource+0x16c>
 8004c24:	2b50      	cmp	r3, #80	@ 0x50
 8004c26:	d03c      	beq.n	8004ca2 <HAL_TIM_ConfigClockSource+0xfa>
 8004c28:	2b50      	cmp	r3, #80	@ 0x50
 8004c2a:	d873      	bhi.n	8004d14 <HAL_TIM_ConfigClockSource+0x16c>
 8004c2c:	2b40      	cmp	r3, #64	@ 0x40
 8004c2e:	d058      	beq.n	8004ce2 <HAL_TIM_ConfigClockSource+0x13a>
 8004c30:	2b40      	cmp	r3, #64	@ 0x40
 8004c32:	d86f      	bhi.n	8004d14 <HAL_TIM_ConfigClockSource+0x16c>
 8004c34:	2b30      	cmp	r3, #48	@ 0x30
 8004c36:	d064      	beq.n	8004d02 <HAL_TIM_ConfigClockSource+0x15a>
 8004c38:	2b30      	cmp	r3, #48	@ 0x30
 8004c3a:	d86b      	bhi.n	8004d14 <HAL_TIM_ConfigClockSource+0x16c>
 8004c3c:	2b20      	cmp	r3, #32
 8004c3e:	d060      	beq.n	8004d02 <HAL_TIM_ConfigClockSource+0x15a>
 8004c40:	2b20      	cmp	r3, #32
 8004c42:	d867      	bhi.n	8004d14 <HAL_TIM_ConfigClockSource+0x16c>
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d05c      	beq.n	8004d02 <HAL_TIM_ConfigClockSource+0x15a>
 8004c48:	2b10      	cmp	r3, #16
 8004c4a:	d05a      	beq.n	8004d02 <HAL_TIM_ConfigClockSource+0x15a>
 8004c4c:	e062      	b.n	8004d14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c5e:	f000 fc4d 	bl	80054fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004c70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	609a      	str	r2, [r3, #8]
      break;
 8004c7a:	e04f      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c8c:	f000 fc36 	bl	80054fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	689a      	ldr	r2, [r3, #8]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c9e:	609a      	str	r2, [r3, #8]
      break;
 8004ca0:	e03c      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cae:	461a      	mov	r2, r3
 8004cb0:	f000 faf4 	bl	800529c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2150      	movs	r1, #80	@ 0x50
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 fc03 	bl	80054c6 <TIM_ITRx_SetConfig>
      break;
 8004cc0:	e02c      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cce:	461a      	mov	r2, r3
 8004cd0:	f000 fb50 	bl	8005374 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2160      	movs	r1, #96	@ 0x60
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 fbf3 	bl	80054c6 <TIM_ITRx_SetConfig>
      break;
 8004ce0:	e01c      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cee:	461a      	mov	r2, r3
 8004cf0:	f000 fad4 	bl	800529c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2140      	movs	r1, #64	@ 0x40
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 fbe3 	bl	80054c6 <TIM_ITRx_SetConfig>
      break;
 8004d00:	e00c      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	4610      	mov	r0, r2
 8004d0e:	f000 fbda 	bl	80054c6 <TIM_ITRx_SetConfig>
      break;
 8004d12:	e003      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	73fb      	strb	r3, [r7, #15]
      break;
 8004d18:	e000      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d36:	b480      	push	{r7}
 8004d38:	b083      	sub	sp, #12
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d3e:	bf00      	nop
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b083      	sub	sp, #12
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d52:	bf00      	nop
 8004d54:	370c      	adds	r7, #12
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b083      	sub	sp, #12
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d66:	bf00      	nop
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr

08004d72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d72:	b480      	push	{r7}
 8004d74:	b083      	sub	sp, #12
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d7a:	bf00      	nop
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr

08004d86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b083      	sub	sp, #12
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d8e:	bf00      	nop
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
	...

08004d9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a3a      	ldr	r2, [pc, #232]	@ (8004e98 <TIM_Base_SetConfig+0xfc>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d00f      	beq.n	8004dd4 <TIM_Base_SetConfig+0x38>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dba:	d00b      	beq.n	8004dd4 <TIM_Base_SetConfig+0x38>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a37      	ldr	r2, [pc, #220]	@ (8004e9c <TIM_Base_SetConfig+0x100>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d007      	beq.n	8004dd4 <TIM_Base_SetConfig+0x38>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a36      	ldr	r2, [pc, #216]	@ (8004ea0 <TIM_Base_SetConfig+0x104>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d003      	beq.n	8004dd4 <TIM_Base_SetConfig+0x38>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a35      	ldr	r2, [pc, #212]	@ (8004ea4 <TIM_Base_SetConfig+0x108>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d108      	bne.n	8004de6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a2b      	ldr	r2, [pc, #172]	@ (8004e98 <TIM_Base_SetConfig+0xfc>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d01b      	beq.n	8004e26 <TIM_Base_SetConfig+0x8a>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004df4:	d017      	beq.n	8004e26 <TIM_Base_SetConfig+0x8a>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a28      	ldr	r2, [pc, #160]	@ (8004e9c <TIM_Base_SetConfig+0x100>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d013      	beq.n	8004e26 <TIM_Base_SetConfig+0x8a>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a27      	ldr	r2, [pc, #156]	@ (8004ea0 <TIM_Base_SetConfig+0x104>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d00f      	beq.n	8004e26 <TIM_Base_SetConfig+0x8a>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a26      	ldr	r2, [pc, #152]	@ (8004ea4 <TIM_Base_SetConfig+0x108>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d00b      	beq.n	8004e26 <TIM_Base_SetConfig+0x8a>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a25      	ldr	r2, [pc, #148]	@ (8004ea8 <TIM_Base_SetConfig+0x10c>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d007      	beq.n	8004e26 <TIM_Base_SetConfig+0x8a>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a24      	ldr	r2, [pc, #144]	@ (8004eac <TIM_Base_SetConfig+0x110>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d003      	beq.n	8004e26 <TIM_Base_SetConfig+0x8a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a23      	ldr	r2, [pc, #140]	@ (8004eb0 <TIM_Base_SetConfig+0x114>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d108      	bne.n	8004e38 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	689a      	ldr	r2, [r3, #8]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a0e      	ldr	r2, [pc, #56]	@ (8004e98 <TIM_Base_SetConfig+0xfc>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d103      	bne.n	8004e6c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	691a      	ldr	r2, [r3, #16]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d105      	bne.n	8004e8a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	f023 0201 	bic.w	r2, r3, #1
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	611a      	str	r2, [r3, #16]
  }
}
 8004e8a:	bf00      	nop
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	40010000 	.word	0x40010000
 8004e9c:	40000400 	.word	0x40000400
 8004ea0:	40000800 	.word	0x40000800
 8004ea4:	40000c00 	.word	0x40000c00
 8004ea8:	40014000 	.word	0x40014000
 8004eac:	40014400 	.word	0x40014400
 8004eb0:	40014800 	.word	0x40014800

08004eb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b087      	sub	sp, #28
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	f023 0201 	bic.w	r2, r3, #1
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f023 0303 	bic.w	r3, r3, #3
 8004eea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	f023 0302 	bic.w	r3, r3, #2
 8004efc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a1c      	ldr	r2, [pc, #112]	@ (8004f7c <TIM_OC1_SetConfig+0xc8>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d10c      	bne.n	8004f2a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	f023 0308 	bic.w	r3, r3, #8
 8004f16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	697a      	ldr	r2, [r7, #20]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f023 0304 	bic.w	r3, r3, #4
 8004f28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a13      	ldr	r2, [pc, #76]	@ (8004f7c <TIM_OC1_SetConfig+0xc8>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d111      	bne.n	8004f56 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	621a      	str	r2, [r3, #32]
}
 8004f70:	bf00      	nop
 8004f72:	371c      	adds	r7, #28
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	40010000 	.word	0x40010000

08004f80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b087      	sub	sp, #28
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a1b      	ldr	r3, [r3, #32]
 8004f94:	f023 0210 	bic.w	r2, r3, #16
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	021b      	lsls	r3, r3, #8
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f023 0320 	bic.w	r3, r3, #32
 8004fca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	011b      	lsls	r3, r3, #4
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a1e      	ldr	r2, [pc, #120]	@ (8005054 <TIM_OC2_SetConfig+0xd4>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d10d      	bne.n	8004ffc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fe6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	011b      	lsls	r3, r3, #4
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ffa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a15      	ldr	r2, [pc, #84]	@ (8005054 <TIM_OC2_SetConfig+0xd4>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d113      	bne.n	800502c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800500a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005012:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	695b      	ldr	r3, [r3, #20]
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	4313      	orrs	r3, r2
 800501e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	4313      	orrs	r3, r2
 800502a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	621a      	str	r2, [r3, #32]
}
 8005046:	bf00      	nop
 8005048:	371c      	adds	r7, #28
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	40010000 	.word	0x40010000

08005058 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005058:	b480      	push	{r7}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	69db      	ldr	r3, [r3, #28]
 800507e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f023 0303 	bic.w	r3, r3, #3
 800508e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	4313      	orrs	r3, r2
 8005098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80050a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	021b      	lsls	r3, r3, #8
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005128 <TIM_OC3_SetConfig+0xd0>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d10d      	bne.n	80050d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	021b      	lsls	r3, r3, #8
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a14      	ldr	r2, [pc, #80]	@ (8005128 <TIM_OC3_SetConfig+0xd0>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d113      	bne.n	8005102 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80050e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80050e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	011b      	lsls	r3, r3, #4
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	011b      	lsls	r3, r3, #4
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	4313      	orrs	r3, r2
 8005100:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	621a      	str	r2, [r3, #32]
}
 800511c:	bf00      	nop
 800511e:	371c      	adds	r7, #28
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr
 8005128:	40010000 	.word	0x40010000

0800512c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800512c:	b480      	push	{r7}
 800512e:	b087      	sub	sp, #28
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a1b      	ldr	r3, [r3, #32]
 8005140:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800515a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005162:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	021b      	lsls	r3, r3, #8
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	4313      	orrs	r3, r2
 800516e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005176:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	031b      	lsls	r3, r3, #12
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	4313      	orrs	r3, r2
 8005182:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a10      	ldr	r2, [pc, #64]	@ (80051c8 <TIM_OC4_SetConfig+0x9c>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d109      	bne.n	80051a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005192:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	019b      	lsls	r3, r3, #6
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	4313      	orrs	r3, r2
 800519e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	621a      	str	r2, [r3, #32]
}
 80051ba:	bf00      	nop
 80051bc:	371c      	adds	r7, #28
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	40010000 	.word	0x40010000

080051cc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b087      	sub	sp, #28
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
 80051d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6a1b      	ldr	r3, [r3, #32]
 80051e4:	f023 0201 	bic.w	r2, r3, #1
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	4a24      	ldr	r2, [pc, #144]	@ (8005288 <TIM_TI1_SetConfig+0xbc>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d013      	beq.n	8005222 <TIM_TI1_SetConfig+0x56>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005200:	d00f      	beq.n	8005222 <TIM_TI1_SetConfig+0x56>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	4a21      	ldr	r2, [pc, #132]	@ (800528c <TIM_TI1_SetConfig+0xc0>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d00b      	beq.n	8005222 <TIM_TI1_SetConfig+0x56>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	4a20      	ldr	r2, [pc, #128]	@ (8005290 <TIM_TI1_SetConfig+0xc4>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d007      	beq.n	8005222 <TIM_TI1_SetConfig+0x56>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	4a1f      	ldr	r2, [pc, #124]	@ (8005294 <TIM_TI1_SetConfig+0xc8>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d003      	beq.n	8005222 <TIM_TI1_SetConfig+0x56>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	4a1e      	ldr	r2, [pc, #120]	@ (8005298 <TIM_TI1_SetConfig+0xcc>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d101      	bne.n	8005226 <TIM_TI1_SetConfig+0x5a>
 8005222:	2301      	movs	r3, #1
 8005224:	e000      	b.n	8005228 <TIM_TI1_SetConfig+0x5c>
 8005226:	2300      	movs	r3, #0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d008      	beq.n	800523e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	f023 0303 	bic.w	r3, r3, #3
 8005232:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4313      	orrs	r3, r2
 800523a:	617b      	str	r3, [r7, #20]
 800523c:	e003      	b.n	8005246 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	f043 0301 	orr.w	r3, r3, #1
 8005244:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800524c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	011b      	lsls	r3, r3, #4
 8005252:	b2db      	uxtb	r3, r3
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	4313      	orrs	r3, r2
 8005258:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	f023 030a 	bic.w	r3, r3, #10
 8005260:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	f003 030a 	and.w	r3, r3, #10
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	4313      	orrs	r3, r2
 800526c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	621a      	str	r2, [r3, #32]
}
 800527a:	bf00      	nop
 800527c:	371c      	adds	r7, #28
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	40010000 	.word	0x40010000
 800528c:	40000400 	.word	0x40000400
 8005290:	40000800 	.word	0x40000800
 8005294:	40000c00 	.word	0x40000c00
 8005298:	40014000 	.word	0x40014000

0800529c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800529c:	b480      	push	{r7}
 800529e:	b087      	sub	sp, #28
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6a1b      	ldr	r3, [r3, #32]
 80052ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	f023 0201 	bic.w	r2, r3, #1
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80052c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	011b      	lsls	r3, r3, #4
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	f023 030a 	bic.w	r3, r3, #10
 80052d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	4313      	orrs	r3, r2
 80052e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	621a      	str	r2, [r3, #32]
}
 80052ee:	bf00      	nop
 80052f0:	371c      	adds	r7, #28
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr

080052fa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b087      	sub	sp, #28
 80052fe:	af00      	add	r7, sp, #0
 8005300:	60f8      	str	r0, [r7, #12]
 8005302:	60b9      	str	r1, [r7, #8]
 8005304:	607a      	str	r2, [r7, #4]
 8005306:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6a1b      	ldr	r3, [r3, #32]
 800530c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	f023 0210 	bic.w	r2, r3, #16
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005326:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	021b      	lsls	r3, r3, #8
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	4313      	orrs	r3, r2
 8005330:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005338:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	031b      	lsls	r3, r3, #12
 800533e:	b29b      	uxth	r3, r3
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	4313      	orrs	r3, r2
 8005344:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800534c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	011b      	lsls	r3, r3, #4
 8005352:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	4313      	orrs	r3, r2
 800535a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	621a      	str	r2, [r3, #32]
}
 8005368:	bf00      	nop
 800536a:	371c      	adds	r7, #28
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005374:	b480      	push	{r7}
 8005376:	b087      	sub	sp, #28
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6a1b      	ldr	r3, [r3, #32]
 8005384:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	f023 0210 	bic.w	r2, r3, #16
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800539e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	031b      	lsls	r3, r3, #12
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80053b0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	011b      	lsls	r3, r3, #4
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	621a      	str	r2, [r3, #32]
}
 80053c8:	bf00      	nop
 80053ca:	371c      	adds	r7, #28
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b087      	sub	sp, #28
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
 80053e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	69db      	ldr	r3, [r3, #28]
 80053f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	f023 0303 	bic.w	r3, r3, #3
 8005400:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4313      	orrs	r3, r2
 8005408:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005410:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	011b      	lsls	r3, r3, #4
 8005416:	b2db      	uxtb	r3, r3
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	4313      	orrs	r3, r2
 800541c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005424:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	021b      	lsls	r3, r3, #8
 800542a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	4313      	orrs	r3, r2
 8005432:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	693a      	ldr	r2, [r7, #16]
 8005438:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	621a      	str	r2, [r3, #32]
}
 8005440:	bf00      	nop
 8005442:	371c      	adds	r7, #28
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800544c:	b480      	push	{r7}
 800544e:	b087      	sub	sp, #28
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
 8005458:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	69db      	ldr	r3, [r3, #28]
 8005470:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005478:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	021b      	lsls	r3, r3, #8
 800547e:	693a      	ldr	r2, [r7, #16]
 8005480:	4313      	orrs	r3, r2
 8005482:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800548a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	031b      	lsls	r3, r3, #12
 8005490:	b29b      	uxth	r3, r3
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	4313      	orrs	r3, r2
 8005496:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800549e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	031b      	lsls	r3, r3, #12
 80054a4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80054a8:	697a      	ldr	r2, [r7, #20]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	621a      	str	r2, [r3, #32]
}
 80054ba:	bf00      	nop
 80054bc:	371c      	adds	r7, #28
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b085      	sub	sp, #20
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
 80054ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054de:	683a      	ldr	r2, [r7, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	f043 0307 	orr.w	r3, r3, #7
 80054e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	609a      	str	r2, [r3, #8]
}
 80054f0:	bf00      	nop
 80054f2:	3714      	adds	r7, #20
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b087      	sub	sp, #28
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
 8005508:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005516:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	021a      	lsls	r2, r3, #8
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	431a      	orrs	r2, r3
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	4313      	orrs	r3, r2
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	4313      	orrs	r3, r2
 8005528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	609a      	str	r2, [r3, #8]
}
 8005530:	bf00      	nop
 8005532:	371c      	adds	r7, #28
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800553c:	b480      	push	{r7}
 800553e:	b087      	sub	sp, #28
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	f003 031f 	and.w	r3, r3, #31
 800554e:	2201      	movs	r2, #1
 8005550:	fa02 f303 	lsl.w	r3, r2, r3
 8005554:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6a1a      	ldr	r2, [r3, #32]
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	43db      	mvns	r3, r3
 800555e:	401a      	ands	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6a1a      	ldr	r2, [r3, #32]
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	f003 031f 	and.w	r3, r3, #31
 800556e:	6879      	ldr	r1, [r7, #4]
 8005570:	fa01 f303 	lsl.w	r3, r1, r3
 8005574:	431a      	orrs	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	621a      	str	r2, [r3, #32]
}
 800557a:	bf00      	nop
 800557c:	371c      	adds	r7, #28
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b082      	sub	sp, #8
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2200      	movs	r2, #0
 8005596:	6839      	ldr	r1, [r7, #0]
 8005598:	4618      	mov	r0, r3
 800559a:	f000 f925 	bl	80057e8 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	6a1a      	ldr	r2, [r3, #32]
 80055a4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80055a8:	4013      	ands	r3, r2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10f      	bne.n	80055ce <HAL_TIMEx_PWMN_Stop+0x48>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	6a1a      	ldr	r2, [r3, #32]
 80055b4:	f240 4344 	movw	r3, #1092	@ 0x444
 80055b8:	4013      	ands	r3, r2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d107      	bne.n	80055ce <HAL_TIMEx_PWMN_Stop+0x48>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80055cc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	6a1a      	ldr	r2, [r3, #32]
 80055d4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80055d8:	4013      	ands	r3, r2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10f      	bne.n	80055fe <HAL_TIMEx_PWMN_Stop+0x78>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	6a1a      	ldr	r2, [r3, #32]
 80055e4:	f240 4344 	movw	r3, #1092	@ 0x444
 80055e8:	4013      	ands	r3, r2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d107      	bne.n	80055fe <HAL_TIMEx_PWMN_Stop+0x78>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 0201 	bic.w	r2, r2, #1
 80055fc:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d104      	bne.n	800560e <HAL_TIMEx_PWMN_Stop+0x88>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800560c:	e013      	b.n	8005636 <HAL_TIMEx_PWMN_Stop+0xb0>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2b04      	cmp	r3, #4
 8005612:	d104      	bne.n	800561e <HAL_TIMEx_PWMN_Stop+0x98>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800561c:	e00b      	b.n	8005636 <HAL_TIMEx_PWMN_Stop+0xb0>
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	2b08      	cmp	r3, #8
 8005622:	d104      	bne.n	800562e <HAL_TIMEx_PWMN_Stop+0xa8>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800562c:	e003      	b.n	8005636 <HAL_TIMEx_PWMN_Stop+0xb0>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3708      	adds	r7, #8
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005650:	2b01      	cmp	r3, #1
 8005652:	d101      	bne.n	8005658 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005654:	2302      	movs	r3, #2
 8005656:	e050      	b.n	80056fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2202      	movs	r2, #2
 8005664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800567e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	4313      	orrs	r3, r2
 8005688:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a1c      	ldr	r2, [pc, #112]	@ (8005708 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d018      	beq.n	80056ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056a4:	d013      	beq.n	80056ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a18      	ldr	r2, [pc, #96]	@ (800570c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d00e      	beq.n	80056ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a16      	ldr	r2, [pc, #88]	@ (8005710 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d009      	beq.n	80056ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a15      	ldr	r2, [pc, #84]	@ (8005714 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d004      	beq.n	80056ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a13      	ldr	r2, [pc, #76]	@ (8005718 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d10c      	bne.n	80056e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	68ba      	ldr	r2, [r7, #8]
 80056dc:	4313      	orrs	r3, r2
 80056de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	40010000 	.word	0x40010000
 800570c:	40000400 	.word	0x40000400
 8005710:	40000800 	.word	0x40000800
 8005714:	40000c00 	.word	0x40000c00
 8005718:	40014000 	.word	0x40014000

0800571c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005726:	2300      	movs	r3, #0
 8005728:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005730:	2b01      	cmp	r3, #1
 8005732:	d101      	bne.n	8005738 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005734:	2302      	movs	r3, #2
 8005736:	e03d      	b.n	80057b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	4313      	orrs	r3, r2
 800574c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	4313      	orrs	r3, r2
 800575a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	4313      	orrs	r3, r2
 8005768:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4313      	orrs	r3, r2
 8005776:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	4313      	orrs	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	4313      	orrs	r3, r2
 8005792:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	69db      	ldr	r3, [r3, #28]
 800579e:	4313      	orrs	r3, r2
 80057a0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3714      	adds	r7, #20
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057c8:	bf00      	nop
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b087      	sub	sp, #28
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	f003 030f 	and.w	r3, r3, #15
 80057fa:	2204      	movs	r2, #4
 80057fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005800:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6a1a      	ldr	r2, [r3, #32]
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	43db      	mvns	r3, r3
 800580a:	401a      	ands	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6a1a      	ldr	r2, [r3, #32]
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	f003 030f 	and.w	r3, r3, #15
 800581a:	6879      	ldr	r1, [r7, #4]
 800581c:	fa01 f303 	lsl.w	r3, r1, r3
 8005820:	431a      	orrs	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	621a      	str	r2, [r3, #32]
}
 8005826:	bf00      	nop
 8005828:	371c      	adds	r7, #28
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b082      	sub	sp, #8
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d101      	bne.n	8005844 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e042      	b.n	80058ca <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b00      	cmp	r3, #0
 800584e:	d106      	bne.n	800585e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f7fb feeb 	bl	8001634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2224      	movs	r2, #36	@ 0x24
 8005862:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68da      	ldr	r2, [r3, #12]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005874:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 fc86 	bl	8006188 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	691a      	ldr	r2, [r3, #16]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800588a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	695a      	ldr	r2, [r3, #20]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800589a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68da      	ldr	r2, [r3, #12]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80058aa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2220      	movs	r2, #32
 80058b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2220      	movs	r2, #32
 80058be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3708      	adds	r7, #8
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
	...

080058d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b0ba      	sub	sp, #232	@ 0xe8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80058fa:	2300      	movs	r3, #0
 80058fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005900:	2300      	movs	r3, #0
 8005902:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800590a:	f003 030f 	and.w	r3, r3, #15
 800590e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005912:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005916:	2b00      	cmp	r3, #0
 8005918:	d10f      	bne.n	800593a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800591a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800591e:	f003 0320 	and.w	r3, r3, #32
 8005922:	2b00      	cmp	r3, #0
 8005924:	d009      	beq.n	800593a <HAL_UART_IRQHandler+0x66>
 8005926:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800592a:	f003 0320 	and.w	r3, r3, #32
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 fb69 	bl	800600a <UART_Receive_IT>
      return;
 8005938:	e25b      	b.n	8005df2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800593a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800593e:	2b00      	cmp	r3, #0
 8005940:	f000 80de 	beq.w	8005b00 <HAL_UART_IRQHandler+0x22c>
 8005944:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005948:	f003 0301 	and.w	r3, r3, #1
 800594c:	2b00      	cmp	r3, #0
 800594e:	d106      	bne.n	800595e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005954:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 80d1 	beq.w	8005b00 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800595e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00b      	beq.n	8005982 <HAL_UART_IRQHandler+0xae>
 800596a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800596e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005972:	2b00      	cmp	r3, #0
 8005974:	d005      	beq.n	8005982 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800597a:	f043 0201 	orr.w	r2, r3, #1
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005986:	f003 0304 	and.w	r3, r3, #4
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00b      	beq.n	80059a6 <HAL_UART_IRQHandler+0xd2>
 800598e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005992:	f003 0301 	and.w	r3, r3, #1
 8005996:	2b00      	cmp	r3, #0
 8005998:	d005      	beq.n	80059a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800599e:	f043 0202 	orr.w	r2, r3, #2
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059aa:	f003 0302 	and.w	r3, r3, #2
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00b      	beq.n	80059ca <HAL_UART_IRQHandler+0xf6>
 80059b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059b6:	f003 0301 	and.w	r3, r3, #1
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d005      	beq.n	80059ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059c2:	f043 0204 	orr.w	r2, r3, #4
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80059ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059ce:	f003 0308 	and.w	r3, r3, #8
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d011      	beq.n	80059fa <HAL_UART_IRQHandler+0x126>
 80059d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059da:	f003 0320 	and.w	r3, r3, #32
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d105      	bne.n	80059ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80059e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059e6:	f003 0301 	and.w	r3, r3, #1
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d005      	beq.n	80059fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059f2:	f043 0208 	orr.w	r2, r3, #8
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f000 81f2 	beq.w	8005de8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a08:	f003 0320 	and.w	r3, r3, #32
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d008      	beq.n	8005a22 <HAL_UART_IRQHandler+0x14e>
 8005a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a14:	f003 0320 	and.w	r3, r3, #32
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d002      	beq.n	8005a22 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 faf4 	bl	800600a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a2c:	2b40      	cmp	r3, #64	@ 0x40
 8005a2e:	bf0c      	ite	eq
 8005a30:	2301      	moveq	r3, #1
 8005a32:	2300      	movne	r3, #0
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a3e:	f003 0308 	and.w	r3, r3, #8
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d103      	bne.n	8005a4e <HAL_UART_IRQHandler+0x17a>
 8005a46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d04f      	beq.n	8005aee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 f9fc 	bl	8005e4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a5e:	2b40      	cmp	r3, #64	@ 0x40
 8005a60:	d141      	bne.n	8005ae6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	3314      	adds	r3, #20
 8005a68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005a70:	e853 3f00 	ldrex	r3, [r3]
 8005a74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005a78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005a7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	3314      	adds	r3, #20
 8005a8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005a8e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005a92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005a9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005a9e:	e841 2300 	strex	r3, r2, [r1]
 8005aa2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005aa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1d9      	bne.n	8005a62 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d013      	beq.n	8005ade <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aba:	4a7e      	ldr	r2, [pc, #504]	@ (8005cb4 <HAL_UART_IRQHandler+0x3e0>)
 8005abc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fc fcbb 	bl	800243e <HAL_DMA_Abort_IT>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d016      	beq.n	8005afc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ad2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005ad8:	4610      	mov	r0, r2
 8005ada:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005adc:	e00e      	b.n	8005afc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f99e 	bl	8005e20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ae4:	e00a      	b.n	8005afc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f99a 	bl	8005e20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aec:	e006      	b.n	8005afc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f996 	bl	8005e20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005afa:	e175      	b.n	8005de8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005afc:	bf00      	nop
    return;
 8005afe:	e173      	b.n	8005de8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	f040 814f 	bne.w	8005da8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b0e:	f003 0310 	and.w	r3, r3, #16
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f000 8148 	beq.w	8005da8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b1c:	f003 0310 	and.w	r3, r3, #16
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f000 8141 	beq.w	8005da8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b26:	2300      	movs	r3, #0
 8005b28:	60bb      	str	r3, [r7, #8]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	60bb      	str	r3, [r7, #8]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	60bb      	str	r3, [r7, #8]
 8005b3a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b46:	2b40      	cmp	r3, #64	@ 0x40
 8005b48:	f040 80b6 	bne.w	8005cb8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b58:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f000 8145 	beq.w	8005dec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	f080 813e 	bcs.w	8005dec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b76:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b7c:	69db      	ldr	r3, [r3, #28]
 8005b7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b82:	f000 8088 	beq.w	8005c96 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	330c      	adds	r3, #12
 8005b8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b90:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005b94:	e853 3f00 	ldrex	r3, [r3]
 8005b98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005b9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ba0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ba4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	330c      	adds	r3, #12
 8005bae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005bb2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005bb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005bbe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005bc2:	e841 2300 	strex	r3, r2, [r1]
 8005bc6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005bca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1d9      	bne.n	8005b86 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	3314      	adds	r3, #20
 8005bd8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005bdc:	e853 3f00 	ldrex	r3, [r3]
 8005be0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005be2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005be4:	f023 0301 	bic.w	r3, r3, #1
 8005be8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	3314      	adds	r3, #20
 8005bf2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005bf6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005bfa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005bfe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005c02:	e841 2300 	strex	r3, r2, [r1]
 8005c06:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005c08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1e1      	bne.n	8005bd2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	3314      	adds	r3, #20
 8005c14:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c18:	e853 3f00 	ldrex	r3, [r3]
 8005c1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005c1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	3314      	adds	r3, #20
 8005c2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005c32:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005c34:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c36:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005c38:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005c3a:	e841 2300 	strex	r3, r2, [r1]
 8005c3e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005c40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1e3      	bne.n	8005c0e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2220      	movs	r2, #32
 8005c4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	330c      	adds	r3, #12
 8005c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c5e:	e853 3f00 	ldrex	r3, [r3]
 8005c62:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005c64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c66:	f023 0310 	bic.w	r3, r3, #16
 8005c6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	330c      	adds	r3, #12
 8005c74:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005c78:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005c7a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c7e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005c80:	e841 2300 	strex	r3, r2, [r1]
 8005c84:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005c86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1e3      	bne.n	8005c54 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7fc fb64 	bl	800235e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2202      	movs	r2, #2
 8005c9a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	4619      	mov	r1, r3
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 f8c1 	bl	8005e34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005cb2:	e09b      	b.n	8005dec <HAL_UART_IRQHandler+0x518>
 8005cb4:	08005f13 	.word	0x08005f13
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f000 808e 	beq.w	8005df0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005cd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f000 8089 	beq.w	8005df0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	330c      	adds	r3, #12
 8005ce4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ce8:	e853 3f00 	ldrex	r3, [r3]
 8005cec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005cee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cf0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cf4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	330c      	adds	r3, #12
 8005cfe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005d02:	647a      	str	r2, [r7, #68]	@ 0x44
 8005d04:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d06:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d0a:	e841 2300 	strex	r3, r2, [r1]
 8005d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1e3      	bne.n	8005cde <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	3314      	adds	r3, #20
 8005d1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d20:	e853 3f00 	ldrex	r3, [r3]
 8005d24:	623b      	str	r3, [r7, #32]
   return(result);
 8005d26:	6a3b      	ldr	r3, [r7, #32]
 8005d28:	f023 0301 	bic.w	r3, r3, #1
 8005d2c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3314      	adds	r3, #20
 8005d36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005d3a:	633a      	str	r2, [r7, #48]	@ 0x30
 8005d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d42:	e841 2300 	strex	r3, r2, [r1]
 8005d46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1e3      	bne.n	8005d16 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2220      	movs	r2, #32
 8005d52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	330c      	adds	r3, #12
 8005d62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	e853 3f00 	ldrex	r3, [r3]
 8005d6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f023 0310 	bic.w	r3, r3, #16
 8005d72:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	330c      	adds	r3, #12
 8005d7c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005d80:	61fa      	str	r2, [r7, #28]
 8005d82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d84:	69b9      	ldr	r1, [r7, #24]
 8005d86:	69fa      	ldr	r2, [r7, #28]
 8005d88:	e841 2300 	strex	r3, r2, [r1]
 8005d8c:	617b      	str	r3, [r7, #20]
   return(result);
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d1e3      	bne.n	8005d5c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2202      	movs	r2, #2
 8005d98:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d9e:	4619      	mov	r1, r3
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 f847 	bl	8005e34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005da6:	e023      	b.n	8005df0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d009      	beq.n	8005dc8 <HAL_UART_IRQHandler+0x4f4>
 8005db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005db8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d003      	beq.n	8005dc8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 f8ba 	bl	8005f3a <UART_Transmit_IT>
    return;
 8005dc6:	e014      	b.n	8005df2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00e      	beq.n	8005df2 <HAL_UART_IRQHandler+0x51e>
 8005dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d008      	beq.n	8005df2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 f8fa 	bl	8005fda <UART_EndTransmit_IT>
    return;
 8005de6:	e004      	b.n	8005df2 <HAL_UART_IRQHandler+0x51e>
    return;
 8005de8:	bf00      	nop
 8005dea:	e002      	b.n	8005df2 <HAL_UART_IRQHandler+0x51e>
      return;
 8005dec:	bf00      	nop
 8005dee:	e000      	b.n	8005df2 <HAL_UART_IRQHandler+0x51e>
      return;
 8005df0:	bf00      	nop
  }
}
 8005df2:	37e8      	adds	r7, #232	@ 0xe8
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e40:	bf00      	nop
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b095      	sub	sp, #84	@ 0x54
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	330c      	adds	r3, #12
 8005e5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e5e:	e853 3f00 	ldrex	r3, [r3]
 8005e62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	330c      	adds	r3, #12
 8005e72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005e74:	643a      	str	r2, [r7, #64]	@ 0x40
 8005e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e7c:	e841 2300 	strex	r3, r2, [r1]
 8005e80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1e5      	bne.n	8005e54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	3314      	adds	r3, #20
 8005e8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e90:	6a3b      	ldr	r3, [r7, #32]
 8005e92:	e853 3f00 	ldrex	r3, [r3]
 8005e96:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	f023 0301 	bic.w	r3, r3, #1
 8005e9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	3314      	adds	r3, #20
 8005ea6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ea8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005eae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005eb0:	e841 2300 	strex	r3, r2, [r1]
 8005eb4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d1e5      	bne.n	8005e88 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d119      	bne.n	8005ef8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	330c      	adds	r3, #12
 8005eca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	e853 3f00 	ldrex	r3, [r3]
 8005ed2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	f023 0310 	bic.w	r3, r3, #16
 8005eda:	647b      	str	r3, [r7, #68]	@ 0x44
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	330c      	adds	r3, #12
 8005ee2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ee4:	61ba      	str	r2, [r7, #24]
 8005ee6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee8:	6979      	ldr	r1, [r7, #20]
 8005eea:	69ba      	ldr	r2, [r7, #24]
 8005eec:	e841 2300 	strex	r3, r2, [r1]
 8005ef0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1e5      	bne.n	8005ec4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2220      	movs	r2, #32
 8005efc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005f06:	bf00      	nop
 8005f08:	3754      	adds	r7, #84	@ 0x54
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr

08005f12 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b084      	sub	sp, #16
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	f7ff ff77 	bl	8005e20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f32:	bf00      	nop
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b085      	sub	sp, #20
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b21      	cmp	r3, #33	@ 0x21
 8005f4c:	d13e      	bne.n	8005fcc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f56:	d114      	bne.n	8005f82 <UART_Transmit_IT+0x48>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d110      	bne.n	8005f82 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a1b      	ldr	r3, [r3, #32]
 8005f64:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	881b      	ldrh	r3, [r3, #0]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f74:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	1c9a      	adds	r2, r3, #2
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	621a      	str	r2, [r3, #32]
 8005f80:	e008      	b.n	8005f94 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	1c59      	adds	r1, r3, #1
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	6211      	str	r1, [r2, #32]
 8005f8c:	781a      	ldrb	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10f      	bne.n	8005fc8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68da      	ldr	r2, [r3, #12]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005fb6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68da      	ldr	r2, [r3, #12]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005fc6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	e000      	b.n	8005fce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005fcc:	2302      	movs	r3, #2
  }
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3714      	adds	r7, #20
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b082      	sub	sp, #8
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68da      	ldr	r2, [r3, #12]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ff0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2220      	movs	r2, #32
 8005ff6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f7ff fefc 	bl	8005df8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3708      	adds	r7, #8
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800600a:	b580      	push	{r7, lr}
 800600c:	b08c      	sub	sp, #48	@ 0x30
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006018:	b2db      	uxtb	r3, r3
 800601a:	2b22      	cmp	r3, #34	@ 0x22
 800601c:	f040 80ae 	bne.w	800617c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006028:	d117      	bne.n	800605a <UART_Receive_IT+0x50>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d113      	bne.n	800605a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006032:	2300      	movs	r3, #0
 8006034:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800603a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	b29b      	uxth	r3, r3
 8006044:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006048:	b29a      	uxth	r2, r3
 800604a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800604c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006052:	1c9a      	adds	r2, r3, #2
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	629a      	str	r2, [r3, #40]	@ 0x28
 8006058:	e026      	b.n	80060a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800605e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006060:	2300      	movs	r3, #0
 8006062:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800606c:	d007      	beq.n	800607e <UART_Receive_IT+0x74>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10a      	bne.n	800608c <UART_Receive_IT+0x82>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d106      	bne.n	800608c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	b2da      	uxtb	r2, r3
 8006086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006088:	701a      	strb	r2, [r3, #0]
 800608a:	e008      	b.n	800609e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	b2db      	uxtb	r3, r3
 8006094:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006098:	b2da      	uxtb	r2, r3
 800609a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800609c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a2:	1c5a      	adds	r2, r3, #1
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	3b01      	subs	r3, #1
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	4619      	mov	r1, r3
 80060b6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d15d      	bne.n	8006178 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68da      	ldr	r2, [r3, #12]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f022 0220 	bic.w	r2, r2, #32
 80060ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68da      	ldr	r2, [r3, #12]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80060da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	695a      	ldr	r2, [r3, #20]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f022 0201 	bic.w	r2, r2, #1
 80060ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2220      	movs	r2, #32
 80060f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d135      	bne.n	800616e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	330c      	adds	r3, #12
 800610e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	e853 3f00 	ldrex	r3, [r3]
 8006116:	613b      	str	r3, [r7, #16]
   return(result);
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	f023 0310 	bic.w	r3, r3, #16
 800611e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	330c      	adds	r3, #12
 8006126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006128:	623a      	str	r2, [r7, #32]
 800612a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612c:	69f9      	ldr	r1, [r7, #28]
 800612e:	6a3a      	ldr	r2, [r7, #32]
 8006130:	e841 2300 	strex	r3, r2, [r1]
 8006134:	61bb      	str	r3, [r7, #24]
   return(result);
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d1e5      	bne.n	8006108 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0310 	and.w	r3, r3, #16
 8006146:	2b10      	cmp	r3, #16
 8006148:	d10a      	bne.n	8006160 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800614a:	2300      	movs	r3, #0
 800614c:	60fb      	str	r3, [r7, #12]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	60fb      	str	r3, [r7, #12]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	60fb      	str	r3, [r7, #12]
 800615e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006164:	4619      	mov	r1, r3
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f7ff fe64 	bl	8005e34 <HAL_UARTEx_RxEventCallback>
 800616c:	e002      	b.n	8006174 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f7ff fe4c 	bl	8005e0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006174:	2300      	movs	r3, #0
 8006176:	e002      	b.n	800617e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006178:	2300      	movs	r3, #0
 800617a:	e000      	b.n	800617e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800617c:	2302      	movs	r3, #2
  }
}
 800617e:	4618      	mov	r0, r3
 8006180:	3730      	adds	r7, #48	@ 0x30
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
	...

08006188 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800618c:	b0c0      	sub	sp, #256	@ 0x100
 800618e:	af00      	add	r7, sp, #0
 8006190:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80061a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061a4:	68d9      	ldr	r1, [r3, #12]
 80061a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	ea40 0301 	orr.w	r3, r0, r1
 80061b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80061b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061b6:	689a      	ldr	r2, [r3, #8]
 80061b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	431a      	orrs	r2, r3
 80061c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	431a      	orrs	r2, r3
 80061c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061cc:	69db      	ldr	r3, [r3, #28]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80061d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80061e0:	f021 010c 	bic.w	r1, r1, #12
 80061e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80061ee:	430b      	orrs	r3, r1
 80061f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80061fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006202:	6999      	ldr	r1, [r3, #24]
 8006204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	ea40 0301 	orr.w	r3, r0, r1
 800620e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	4b8f      	ldr	r3, [pc, #572]	@ (8006454 <UART_SetConfig+0x2cc>)
 8006218:	429a      	cmp	r2, r3
 800621a:	d005      	beq.n	8006228 <UART_SetConfig+0xa0>
 800621c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	4b8d      	ldr	r3, [pc, #564]	@ (8006458 <UART_SetConfig+0x2d0>)
 8006224:	429a      	cmp	r2, r3
 8006226:	d104      	bne.n	8006232 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006228:	f7fd fd16 	bl	8003c58 <HAL_RCC_GetPCLK2Freq>
 800622c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006230:	e003      	b.n	800623a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006232:	f7fd fcfd 	bl	8003c30 <HAL_RCC_GetPCLK1Freq>
 8006236:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800623a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800623e:	69db      	ldr	r3, [r3, #28]
 8006240:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006244:	f040 810c 	bne.w	8006460 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006248:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800624c:	2200      	movs	r2, #0
 800624e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006252:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006256:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800625a:	4622      	mov	r2, r4
 800625c:	462b      	mov	r3, r5
 800625e:	1891      	adds	r1, r2, r2
 8006260:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006262:	415b      	adcs	r3, r3
 8006264:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006266:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800626a:	4621      	mov	r1, r4
 800626c:	eb12 0801 	adds.w	r8, r2, r1
 8006270:	4629      	mov	r1, r5
 8006272:	eb43 0901 	adc.w	r9, r3, r1
 8006276:	f04f 0200 	mov.w	r2, #0
 800627a:	f04f 0300 	mov.w	r3, #0
 800627e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006282:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006286:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800628a:	4690      	mov	r8, r2
 800628c:	4699      	mov	r9, r3
 800628e:	4623      	mov	r3, r4
 8006290:	eb18 0303 	adds.w	r3, r8, r3
 8006294:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006298:	462b      	mov	r3, r5
 800629a:	eb49 0303 	adc.w	r3, r9, r3
 800629e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80062a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80062ae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80062b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80062b6:	460b      	mov	r3, r1
 80062b8:	18db      	adds	r3, r3, r3
 80062ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80062bc:	4613      	mov	r3, r2
 80062be:	eb42 0303 	adc.w	r3, r2, r3
 80062c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80062c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80062c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80062cc:	f7f9 ffd8 	bl	8000280 <__aeabi_uldivmod>
 80062d0:	4602      	mov	r2, r0
 80062d2:	460b      	mov	r3, r1
 80062d4:	4b61      	ldr	r3, [pc, #388]	@ (800645c <UART_SetConfig+0x2d4>)
 80062d6:	fba3 2302 	umull	r2, r3, r3, r2
 80062da:	095b      	lsrs	r3, r3, #5
 80062dc:	011c      	lsls	r4, r3, #4
 80062de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062e2:	2200      	movs	r2, #0
 80062e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80062e8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80062ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80062f0:	4642      	mov	r2, r8
 80062f2:	464b      	mov	r3, r9
 80062f4:	1891      	adds	r1, r2, r2
 80062f6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80062f8:	415b      	adcs	r3, r3
 80062fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006300:	4641      	mov	r1, r8
 8006302:	eb12 0a01 	adds.w	sl, r2, r1
 8006306:	4649      	mov	r1, r9
 8006308:	eb43 0b01 	adc.w	fp, r3, r1
 800630c:	f04f 0200 	mov.w	r2, #0
 8006310:	f04f 0300 	mov.w	r3, #0
 8006314:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006318:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800631c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006320:	4692      	mov	sl, r2
 8006322:	469b      	mov	fp, r3
 8006324:	4643      	mov	r3, r8
 8006326:	eb1a 0303 	adds.w	r3, sl, r3
 800632a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800632e:	464b      	mov	r3, r9
 8006330:	eb4b 0303 	adc.w	r3, fp, r3
 8006334:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006344:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006348:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800634c:	460b      	mov	r3, r1
 800634e:	18db      	adds	r3, r3, r3
 8006350:	643b      	str	r3, [r7, #64]	@ 0x40
 8006352:	4613      	mov	r3, r2
 8006354:	eb42 0303 	adc.w	r3, r2, r3
 8006358:	647b      	str	r3, [r7, #68]	@ 0x44
 800635a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800635e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006362:	f7f9 ff8d 	bl	8000280 <__aeabi_uldivmod>
 8006366:	4602      	mov	r2, r0
 8006368:	460b      	mov	r3, r1
 800636a:	4611      	mov	r1, r2
 800636c:	4b3b      	ldr	r3, [pc, #236]	@ (800645c <UART_SetConfig+0x2d4>)
 800636e:	fba3 2301 	umull	r2, r3, r3, r1
 8006372:	095b      	lsrs	r3, r3, #5
 8006374:	2264      	movs	r2, #100	@ 0x64
 8006376:	fb02 f303 	mul.w	r3, r2, r3
 800637a:	1acb      	subs	r3, r1, r3
 800637c:	00db      	lsls	r3, r3, #3
 800637e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006382:	4b36      	ldr	r3, [pc, #216]	@ (800645c <UART_SetConfig+0x2d4>)
 8006384:	fba3 2302 	umull	r2, r3, r3, r2
 8006388:	095b      	lsrs	r3, r3, #5
 800638a:	005b      	lsls	r3, r3, #1
 800638c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006390:	441c      	add	r4, r3
 8006392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006396:	2200      	movs	r2, #0
 8006398:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800639c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80063a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80063a4:	4642      	mov	r2, r8
 80063a6:	464b      	mov	r3, r9
 80063a8:	1891      	adds	r1, r2, r2
 80063aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80063ac:	415b      	adcs	r3, r3
 80063ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80063b4:	4641      	mov	r1, r8
 80063b6:	1851      	adds	r1, r2, r1
 80063b8:	6339      	str	r1, [r7, #48]	@ 0x30
 80063ba:	4649      	mov	r1, r9
 80063bc:	414b      	adcs	r3, r1
 80063be:	637b      	str	r3, [r7, #52]	@ 0x34
 80063c0:	f04f 0200 	mov.w	r2, #0
 80063c4:	f04f 0300 	mov.w	r3, #0
 80063c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80063cc:	4659      	mov	r1, fp
 80063ce:	00cb      	lsls	r3, r1, #3
 80063d0:	4651      	mov	r1, sl
 80063d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063d6:	4651      	mov	r1, sl
 80063d8:	00ca      	lsls	r2, r1, #3
 80063da:	4610      	mov	r0, r2
 80063dc:	4619      	mov	r1, r3
 80063de:	4603      	mov	r3, r0
 80063e0:	4642      	mov	r2, r8
 80063e2:	189b      	adds	r3, r3, r2
 80063e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80063e8:	464b      	mov	r3, r9
 80063ea:	460a      	mov	r2, r1
 80063ec:	eb42 0303 	adc.w	r3, r2, r3
 80063f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80063f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006400:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006404:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006408:	460b      	mov	r3, r1
 800640a:	18db      	adds	r3, r3, r3
 800640c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800640e:	4613      	mov	r3, r2
 8006410:	eb42 0303 	adc.w	r3, r2, r3
 8006414:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006416:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800641a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800641e:	f7f9 ff2f 	bl	8000280 <__aeabi_uldivmod>
 8006422:	4602      	mov	r2, r0
 8006424:	460b      	mov	r3, r1
 8006426:	4b0d      	ldr	r3, [pc, #52]	@ (800645c <UART_SetConfig+0x2d4>)
 8006428:	fba3 1302 	umull	r1, r3, r3, r2
 800642c:	095b      	lsrs	r3, r3, #5
 800642e:	2164      	movs	r1, #100	@ 0x64
 8006430:	fb01 f303 	mul.w	r3, r1, r3
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	00db      	lsls	r3, r3, #3
 8006438:	3332      	adds	r3, #50	@ 0x32
 800643a:	4a08      	ldr	r2, [pc, #32]	@ (800645c <UART_SetConfig+0x2d4>)
 800643c:	fba2 2303 	umull	r2, r3, r2, r3
 8006440:	095b      	lsrs	r3, r3, #5
 8006442:	f003 0207 	and.w	r2, r3, #7
 8006446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4422      	add	r2, r4
 800644e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006450:	e106      	b.n	8006660 <UART_SetConfig+0x4d8>
 8006452:	bf00      	nop
 8006454:	40011000 	.word	0x40011000
 8006458:	40011400 	.word	0x40011400
 800645c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006460:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006464:	2200      	movs	r2, #0
 8006466:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800646a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800646e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006472:	4642      	mov	r2, r8
 8006474:	464b      	mov	r3, r9
 8006476:	1891      	adds	r1, r2, r2
 8006478:	6239      	str	r1, [r7, #32]
 800647a:	415b      	adcs	r3, r3
 800647c:	627b      	str	r3, [r7, #36]	@ 0x24
 800647e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006482:	4641      	mov	r1, r8
 8006484:	1854      	adds	r4, r2, r1
 8006486:	4649      	mov	r1, r9
 8006488:	eb43 0501 	adc.w	r5, r3, r1
 800648c:	f04f 0200 	mov.w	r2, #0
 8006490:	f04f 0300 	mov.w	r3, #0
 8006494:	00eb      	lsls	r3, r5, #3
 8006496:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800649a:	00e2      	lsls	r2, r4, #3
 800649c:	4614      	mov	r4, r2
 800649e:	461d      	mov	r5, r3
 80064a0:	4643      	mov	r3, r8
 80064a2:	18e3      	adds	r3, r4, r3
 80064a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80064a8:	464b      	mov	r3, r9
 80064aa:	eb45 0303 	adc.w	r3, r5, r3
 80064ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80064b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80064be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80064c2:	f04f 0200 	mov.w	r2, #0
 80064c6:	f04f 0300 	mov.w	r3, #0
 80064ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80064ce:	4629      	mov	r1, r5
 80064d0:	008b      	lsls	r3, r1, #2
 80064d2:	4621      	mov	r1, r4
 80064d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064d8:	4621      	mov	r1, r4
 80064da:	008a      	lsls	r2, r1, #2
 80064dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80064e0:	f7f9 fece 	bl	8000280 <__aeabi_uldivmod>
 80064e4:	4602      	mov	r2, r0
 80064e6:	460b      	mov	r3, r1
 80064e8:	4b60      	ldr	r3, [pc, #384]	@ (800666c <UART_SetConfig+0x4e4>)
 80064ea:	fba3 2302 	umull	r2, r3, r3, r2
 80064ee:	095b      	lsrs	r3, r3, #5
 80064f0:	011c      	lsls	r4, r3, #4
 80064f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064f6:	2200      	movs	r2, #0
 80064f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80064fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006500:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006504:	4642      	mov	r2, r8
 8006506:	464b      	mov	r3, r9
 8006508:	1891      	adds	r1, r2, r2
 800650a:	61b9      	str	r1, [r7, #24]
 800650c:	415b      	adcs	r3, r3
 800650e:	61fb      	str	r3, [r7, #28]
 8006510:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006514:	4641      	mov	r1, r8
 8006516:	1851      	adds	r1, r2, r1
 8006518:	6139      	str	r1, [r7, #16]
 800651a:	4649      	mov	r1, r9
 800651c:	414b      	adcs	r3, r1
 800651e:	617b      	str	r3, [r7, #20]
 8006520:	f04f 0200 	mov.w	r2, #0
 8006524:	f04f 0300 	mov.w	r3, #0
 8006528:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800652c:	4659      	mov	r1, fp
 800652e:	00cb      	lsls	r3, r1, #3
 8006530:	4651      	mov	r1, sl
 8006532:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006536:	4651      	mov	r1, sl
 8006538:	00ca      	lsls	r2, r1, #3
 800653a:	4610      	mov	r0, r2
 800653c:	4619      	mov	r1, r3
 800653e:	4603      	mov	r3, r0
 8006540:	4642      	mov	r2, r8
 8006542:	189b      	adds	r3, r3, r2
 8006544:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006548:	464b      	mov	r3, r9
 800654a:	460a      	mov	r2, r1
 800654c:	eb42 0303 	adc.w	r3, r2, r3
 8006550:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800655e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006560:	f04f 0200 	mov.w	r2, #0
 8006564:	f04f 0300 	mov.w	r3, #0
 8006568:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800656c:	4649      	mov	r1, r9
 800656e:	008b      	lsls	r3, r1, #2
 8006570:	4641      	mov	r1, r8
 8006572:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006576:	4641      	mov	r1, r8
 8006578:	008a      	lsls	r2, r1, #2
 800657a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800657e:	f7f9 fe7f 	bl	8000280 <__aeabi_uldivmod>
 8006582:	4602      	mov	r2, r0
 8006584:	460b      	mov	r3, r1
 8006586:	4611      	mov	r1, r2
 8006588:	4b38      	ldr	r3, [pc, #224]	@ (800666c <UART_SetConfig+0x4e4>)
 800658a:	fba3 2301 	umull	r2, r3, r3, r1
 800658e:	095b      	lsrs	r3, r3, #5
 8006590:	2264      	movs	r2, #100	@ 0x64
 8006592:	fb02 f303 	mul.w	r3, r2, r3
 8006596:	1acb      	subs	r3, r1, r3
 8006598:	011b      	lsls	r3, r3, #4
 800659a:	3332      	adds	r3, #50	@ 0x32
 800659c:	4a33      	ldr	r2, [pc, #204]	@ (800666c <UART_SetConfig+0x4e4>)
 800659e:	fba2 2303 	umull	r2, r3, r2, r3
 80065a2:	095b      	lsrs	r3, r3, #5
 80065a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80065a8:	441c      	add	r4, r3
 80065aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065ae:	2200      	movs	r2, #0
 80065b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80065b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80065b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80065b8:	4642      	mov	r2, r8
 80065ba:	464b      	mov	r3, r9
 80065bc:	1891      	adds	r1, r2, r2
 80065be:	60b9      	str	r1, [r7, #8]
 80065c0:	415b      	adcs	r3, r3
 80065c2:	60fb      	str	r3, [r7, #12]
 80065c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80065c8:	4641      	mov	r1, r8
 80065ca:	1851      	adds	r1, r2, r1
 80065cc:	6039      	str	r1, [r7, #0]
 80065ce:	4649      	mov	r1, r9
 80065d0:	414b      	adcs	r3, r1
 80065d2:	607b      	str	r3, [r7, #4]
 80065d4:	f04f 0200 	mov.w	r2, #0
 80065d8:	f04f 0300 	mov.w	r3, #0
 80065dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80065e0:	4659      	mov	r1, fp
 80065e2:	00cb      	lsls	r3, r1, #3
 80065e4:	4651      	mov	r1, sl
 80065e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065ea:	4651      	mov	r1, sl
 80065ec:	00ca      	lsls	r2, r1, #3
 80065ee:	4610      	mov	r0, r2
 80065f0:	4619      	mov	r1, r3
 80065f2:	4603      	mov	r3, r0
 80065f4:	4642      	mov	r2, r8
 80065f6:	189b      	adds	r3, r3, r2
 80065f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065fa:	464b      	mov	r3, r9
 80065fc:	460a      	mov	r2, r1
 80065fe:	eb42 0303 	adc.w	r3, r2, r3
 8006602:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	663b      	str	r3, [r7, #96]	@ 0x60
 800660e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006610:	f04f 0200 	mov.w	r2, #0
 8006614:	f04f 0300 	mov.w	r3, #0
 8006618:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800661c:	4649      	mov	r1, r9
 800661e:	008b      	lsls	r3, r1, #2
 8006620:	4641      	mov	r1, r8
 8006622:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006626:	4641      	mov	r1, r8
 8006628:	008a      	lsls	r2, r1, #2
 800662a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800662e:	f7f9 fe27 	bl	8000280 <__aeabi_uldivmod>
 8006632:	4602      	mov	r2, r0
 8006634:	460b      	mov	r3, r1
 8006636:	4b0d      	ldr	r3, [pc, #52]	@ (800666c <UART_SetConfig+0x4e4>)
 8006638:	fba3 1302 	umull	r1, r3, r3, r2
 800663c:	095b      	lsrs	r3, r3, #5
 800663e:	2164      	movs	r1, #100	@ 0x64
 8006640:	fb01 f303 	mul.w	r3, r1, r3
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	011b      	lsls	r3, r3, #4
 8006648:	3332      	adds	r3, #50	@ 0x32
 800664a:	4a08      	ldr	r2, [pc, #32]	@ (800666c <UART_SetConfig+0x4e4>)
 800664c:	fba2 2303 	umull	r2, r3, r2, r3
 8006650:	095b      	lsrs	r3, r3, #5
 8006652:	f003 020f 	and.w	r2, r3, #15
 8006656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4422      	add	r2, r4
 800665e:	609a      	str	r2, [r3, #8]
}
 8006660:	bf00      	nop
 8006662:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006666:	46bd      	mov	sp, r7
 8006668:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800666c:	51eb851f 	.word	0x51eb851f

08006670 <siprintf>:
 8006670:	b40e      	push	{r1, r2, r3}
 8006672:	b500      	push	{lr}
 8006674:	b09c      	sub	sp, #112	@ 0x70
 8006676:	ab1d      	add	r3, sp, #116	@ 0x74
 8006678:	9002      	str	r0, [sp, #8]
 800667a:	9006      	str	r0, [sp, #24]
 800667c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006680:	4809      	ldr	r0, [pc, #36]	@ (80066a8 <siprintf+0x38>)
 8006682:	9107      	str	r1, [sp, #28]
 8006684:	9104      	str	r1, [sp, #16]
 8006686:	4909      	ldr	r1, [pc, #36]	@ (80066ac <siprintf+0x3c>)
 8006688:	f853 2b04 	ldr.w	r2, [r3], #4
 800668c:	9105      	str	r1, [sp, #20]
 800668e:	6800      	ldr	r0, [r0, #0]
 8006690:	9301      	str	r3, [sp, #4]
 8006692:	a902      	add	r1, sp, #8
 8006694:	f000 f994 	bl	80069c0 <_svfiprintf_r>
 8006698:	9b02      	ldr	r3, [sp, #8]
 800669a:	2200      	movs	r2, #0
 800669c:	701a      	strb	r2, [r3, #0]
 800669e:	b01c      	add	sp, #112	@ 0x70
 80066a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80066a4:	b003      	add	sp, #12
 80066a6:	4770      	bx	lr
 80066a8:	2000000c 	.word	0x2000000c
 80066ac:	ffff0208 	.word	0xffff0208

080066b0 <memset>:
 80066b0:	4402      	add	r2, r0
 80066b2:	4603      	mov	r3, r0
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d100      	bne.n	80066ba <memset+0xa>
 80066b8:	4770      	bx	lr
 80066ba:	f803 1b01 	strb.w	r1, [r3], #1
 80066be:	e7f9      	b.n	80066b4 <memset+0x4>

080066c0 <__errno>:
 80066c0:	4b01      	ldr	r3, [pc, #4]	@ (80066c8 <__errno+0x8>)
 80066c2:	6818      	ldr	r0, [r3, #0]
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	2000000c 	.word	0x2000000c

080066cc <__libc_init_array>:
 80066cc:	b570      	push	{r4, r5, r6, lr}
 80066ce:	4d0d      	ldr	r5, [pc, #52]	@ (8006704 <__libc_init_array+0x38>)
 80066d0:	4c0d      	ldr	r4, [pc, #52]	@ (8006708 <__libc_init_array+0x3c>)
 80066d2:	1b64      	subs	r4, r4, r5
 80066d4:	10a4      	asrs	r4, r4, #2
 80066d6:	2600      	movs	r6, #0
 80066d8:	42a6      	cmp	r6, r4
 80066da:	d109      	bne.n	80066f0 <__libc_init_array+0x24>
 80066dc:	4d0b      	ldr	r5, [pc, #44]	@ (800670c <__libc_init_array+0x40>)
 80066de:	4c0c      	ldr	r4, [pc, #48]	@ (8006710 <__libc_init_array+0x44>)
 80066e0:	f000 fc66 	bl	8006fb0 <_init>
 80066e4:	1b64      	subs	r4, r4, r5
 80066e6:	10a4      	asrs	r4, r4, #2
 80066e8:	2600      	movs	r6, #0
 80066ea:	42a6      	cmp	r6, r4
 80066ec:	d105      	bne.n	80066fa <__libc_init_array+0x2e>
 80066ee:	bd70      	pop	{r4, r5, r6, pc}
 80066f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80066f4:	4798      	blx	r3
 80066f6:	3601      	adds	r6, #1
 80066f8:	e7ee      	b.n	80066d8 <__libc_init_array+0xc>
 80066fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80066fe:	4798      	blx	r3
 8006700:	3601      	adds	r6, #1
 8006702:	e7f2      	b.n	80066ea <__libc_init_array+0x1e>
 8006704:	08007104 	.word	0x08007104
 8006708:	08007104 	.word	0x08007104
 800670c:	08007104 	.word	0x08007104
 8006710:	08007108 	.word	0x08007108

08006714 <__retarget_lock_acquire_recursive>:
 8006714:	4770      	bx	lr

08006716 <__retarget_lock_release_recursive>:
 8006716:	4770      	bx	lr

08006718 <_free_r>:
 8006718:	b538      	push	{r3, r4, r5, lr}
 800671a:	4605      	mov	r5, r0
 800671c:	2900      	cmp	r1, #0
 800671e:	d041      	beq.n	80067a4 <_free_r+0x8c>
 8006720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006724:	1f0c      	subs	r4, r1, #4
 8006726:	2b00      	cmp	r3, #0
 8006728:	bfb8      	it	lt
 800672a:	18e4      	addlt	r4, r4, r3
 800672c:	f000 f8e0 	bl	80068f0 <__malloc_lock>
 8006730:	4a1d      	ldr	r2, [pc, #116]	@ (80067a8 <_free_r+0x90>)
 8006732:	6813      	ldr	r3, [r2, #0]
 8006734:	b933      	cbnz	r3, 8006744 <_free_r+0x2c>
 8006736:	6063      	str	r3, [r4, #4]
 8006738:	6014      	str	r4, [r2, #0]
 800673a:	4628      	mov	r0, r5
 800673c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006740:	f000 b8dc 	b.w	80068fc <__malloc_unlock>
 8006744:	42a3      	cmp	r3, r4
 8006746:	d908      	bls.n	800675a <_free_r+0x42>
 8006748:	6820      	ldr	r0, [r4, #0]
 800674a:	1821      	adds	r1, r4, r0
 800674c:	428b      	cmp	r3, r1
 800674e:	bf01      	itttt	eq
 8006750:	6819      	ldreq	r1, [r3, #0]
 8006752:	685b      	ldreq	r3, [r3, #4]
 8006754:	1809      	addeq	r1, r1, r0
 8006756:	6021      	streq	r1, [r4, #0]
 8006758:	e7ed      	b.n	8006736 <_free_r+0x1e>
 800675a:	461a      	mov	r2, r3
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	b10b      	cbz	r3, 8006764 <_free_r+0x4c>
 8006760:	42a3      	cmp	r3, r4
 8006762:	d9fa      	bls.n	800675a <_free_r+0x42>
 8006764:	6811      	ldr	r1, [r2, #0]
 8006766:	1850      	adds	r0, r2, r1
 8006768:	42a0      	cmp	r0, r4
 800676a:	d10b      	bne.n	8006784 <_free_r+0x6c>
 800676c:	6820      	ldr	r0, [r4, #0]
 800676e:	4401      	add	r1, r0
 8006770:	1850      	adds	r0, r2, r1
 8006772:	4283      	cmp	r3, r0
 8006774:	6011      	str	r1, [r2, #0]
 8006776:	d1e0      	bne.n	800673a <_free_r+0x22>
 8006778:	6818      	ldr	r0, [r3, #0]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	6053      	str	r3, [r2, #4]
 800677e:	4408      	add	r0, r1
 8006780:	6010      	str	r0, [r2, #0]
 8006782:	e7da      	b.n	800673a <_free_r+0x22>
 8006784:	d902      	bls.n	800678c <_free_r+0x74>
 8006786:	230c      	movs	r3, #12
 8006788:	602b      	str	r3, [r5, #0]
 800678a:	e7d6      	b.n	800673a <_free_r+0x22>
 800678c:	6820      	ldr	r0, [r4, #0]
 800678e:	1821      	adds	r1, r4, r0
 8006790:	428b      	cmp	r3, r1
 8006792:	bf04      	itt	eq
 8006794:	6819      	ldreq	r1, [r3, #0]
 8006796:	685b      	ldreq	r3, [r3, #4]
 8006798:	6063      	str	r3, [r4, #4]
 800679a:	bf04      	itt	eq
 800679c:	1809      	addeq	r1, r1, r0
 800679e:	6021      	streq	r1, [r4, #0]
 80067a0:	6054      	str	r4, [r2, #4]
 80067a2:	e7ca      	b.n	800673a <_free_r+0x22>
 80067a4:	bd38      	pop	{r3, r4, r5, pc}
 80067a6:	bf00      	nop
 80067a8:	200003dc 	.word	0x200003dc

080067ac <sbrk_aligned>:
 80067ac:	b570      	push	{r4, r5, r6, lr}
 80067ae:	4e0f      	ldr	r6, [pc, #60]	@ (80067ec <sbrk_aligned+0x40>)
 80067b0:	460c      	mov	r4, r1
 80067b2:	6831      	ldr	r1, [r6, #0]
 80067b4:	4605      	mov	r5, r0
 80067b6:	b911      	cbnz	r1, 80067be <sbrk_aligned+0x12>
 80067b8:	f000 fba6 	bl	8006f08 <_sbrk_r>
 80067bc:	6030      	str	r0, [r6, #0]
 80067be:	4621      	mov	r1, r4
 80067c0:	4628      	mov	r0, r5
 80067c2:	f000 fba1 	bl	8006f08 <_sbrk_r>
 80067c6:	1c43      	adds	r3, r0, #1
 80067c8:	d103      	bne.n	80067d2 <sbrk_aligned+0x26>
 80067ca:	f04f 34ff 	mov.w	r4, #4294967295
 80067ce:	4620      	mov	r0, r4
 80067d0:	bd70      	pop	{r4, r5, r6, pc}
 80067d2:	1cc4      	adds	r4, r0, #3
 80067d4:	f024 0403 	bic.w	r4, r4, #3
 80067d8:	42a0      	cmp	r0, r4
 80067da:	d0f8      	beq.n	80067ce <sbrk_aligned+0x22>
 80067dc:	1a21      	subs	r1, r4, r0
 80067de:	4628      	mov	r0, r5
 80067e0:	f000 fb92 	bl	8006f08 <_sbrk_r>
 80067e4:	3001      	adds	r0, #1
 80067e6:	d1f2      	bne.n	80067ce <sbrk_aligned+0x22>
 80067e8:	e7ef      	b.n	80067ca <sbrk_aligned+0x1e>
 80067ea:	bf00      	nop
 80067ec:	200003d8 	.word	0x200003d8

080067f0 <_malloc_r>:
 80067f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067f4:	1ccd      	adds	r5, r1, #3
 80067f6:	f025 0503 	bic.w	r5, r5, #3
 80067fa:	3508      	adds	r5, #8
 80067fc:	2d0c      	cmp	r5, #12
 80067fe:	bf38      	it	cc
 8006800:	250c      	movcc	r5, #12
 8006802:	2d00      	cmp	r5, #0
 8006804:	4606      	mov	r6, r0
 8006806:	db01      	blt.n	800680c <_malloc_r+0x1c>
 8006808:	42a9      	cmp	r1, r5
 800680a:	d904      	bls.n	8006816 <_malloc_r+0x26>
 800680c:	230c      	movs	r3, #12
 800680e:	6033      	str	r3, [r6, #0]
 8006810:	2000      	movs	r0, #0
 8006812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006816:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80068ec <_malloc_r+0xfc>
 800681a:	f000 f869 	bl	80068f0 <__malloc_lock>
 800681e:	f8d8 3000 	ldr.w	r3, [r8]
 8006822:	461c      	mov	r4, r3
 8006824:	bb44      	cbnz	r4, 8006878 <_malloc_r+0x88>
 8006826:	4629      	mov	r1, r5
 8006828:	4630      	mov	r0, r6
 800682a:	f7ff ffbf 	bl	80067ac <sbrk_aligned>
 800682e:	1c43      	adds	r3, r0, #1
 8006830:	4604      	mov	r4, r0
 8006832:	d158      	bne.n	80068e6 <_malloc_r+0xf6>
 8006834:	f8d8 4000 	ldr.w	r4, [r8]
 8006838:	4627      	mov	r7, r4
 800683a:	2f00      	cmp	r7, #0
 800683c:	d143      	bne.n	80068c6 <_malloc_r+0xd6>
 800683e:	2c00      	cmp	r4, #0
 8006840:	d04b      	beq.n	80068da <_malloc_r+0xea>
 8006842:	6823      	ldr	r3, [r4, #0]
 8006844:	4639      	mov	r1, r7
 8006846:	4630      	mov	r0, r6
 8006848:	eb04 0903 	add.w	r9, r4, r3
 800684c:	f000 fb5c 	bl	8006f08 <_sbrk_r>
 8006850:	4581      	cmp	r9, r0
 8006852:	d142      	bne.n	80068da <_malloc_r+0xea>
 8006854:	6821      	ldr	r1, [r4, #0]
 8006856:	1a6d      	subs	r5, r5, r1
 8006858:	4629      	mov	r1, r5
 800685a:	4630      	mov	r0, r6
 800685c:	f7ff ffa6 	bl	80067ac <sbrk_aligned>
 8006860:	3001      	adds	r0, #1
 8006862:	d03a      	beq.n	80068da <_malloc_r+0xea>
 8006864:	6823      	ldr	r3, [r4, #0]
 8006866:	442b      	add	r3, r5
 8006868:	6023      	str	r3, [r4, #0]
 800686a:	f8d8 3000 	ldr.w	r3, [r8]
 800686e:	685a      	ldr	r2, [r3, #4]
 8006870:	bb62      	cbnz	r2, 80068cc <_malloc_r+0xdc>
 8006872:	f8c8 7000 	str.w	r7, [r8]
 8006876:	e00f      	b.n	8006898 <_malloc_r+0xa8>
 8006878:	6822      	ldr	r2, [r4, #0]
 800687a:	1b52      	subs	r2, r2, r5
 800687c:	d420      	bmi.n	80068c0 <_malloc_r+0xd0>
 800687e:	2a0b      	cmp	r2, #11
 8006880:	d917      	bls.n	80068b2 <_malloc_r+0xc2>
 8006882:	1961      	adds	r1, r4, r5
 8006884:	42a3      	cmp	r3, r4
 8006886:	6025      	str	r5, [r4, #0]
 8006888:	bf18      	it	ne
 800688a:	6059      	strne	r1, [r3, #4]
 800688c:	6863      	ldr	r3, [r4, #4]
 800688e:	bf08      	it	eq
 8006890:	f8c8 1000 	streq.w	r1, [r8]
 8006894:	5162      	str	r2, [r4, r5]
 8006896:	604b      	str	r3, [r1, #4]
 8006898:	4630      	mov	r0, r6
 800689a:	f000 f82f 	bl	80068fc <__malloc_unlock>
 800689e:	f104 000b 	add.w	r0, r4, #11
 80068a2:	1d23      	adds	r3, r4, #4
 80068a4:	f020 0007 	bic.w	r0, r0, #7
 80068a8:	1ac2      	subs	r2, r0, r3
 80068aa:	bf1c      	itt	ne
 80068ac:	1a1b      	subne	r3, r3, r0
 80068ae:	50a3      	strne	r3, [r4, r2]
 80068b0:	e7af      	b.n	8006812 <_malloc_r+0x22>
 80068b2:	6862      	ldr	r2, [r4, #4]
 80068b4:	42a3      	cmp	r3, r4
 80068b6:	bf0c      	ite	eq
 80068b8:	f8c8 2000 	streq.w	r2, [r8]
 80068bc:	605a      	strne	r2, [r3, #4]
 80068be:	e7eb      	b.n	8006898 <_malloc_r+0xa8>
 80068c0:	4623      	mov	r3, r4
 80068c2:	6864      	ldr	r4, [r4, #4]
 80068c4:	e7ae      	b.n	8006824 <_malloc_r+0x34>
 80068c6:	463c      	mov	r4, r7
 80068c8:	687f      	ldr	r7, [r7, #4]
 80068ca:	e7b6      	b.n	800683a <_malloc_r+0x4a>
 80068cc:	461a      	mov	r2, r3
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	42a3      	cmp	r3, r4
 80068d2:	d1fb      	bne.n	80068cc <_malloc_r+0xdc>
 80068d4:	2300      	movs	r3, #0
 80068d6:	6053      	str	r3, [r2, #4]
 80068d8:	e7de      	b.n	8006898 <_malloc_r+0xa8>
 80068da:	230c      	movs	r3, #12
 80068dc:	6033      	str	r3, [r6, #0]
 80068de:	4630      	mov	r0, r6
 80068e0:	f000 f80c 	bl	80068fc <__malloc_unlock>
 80068e4:	e794      	b.n	8006810 <_malloc_r+0x20>
 80068e6:	6005      	str	r5, [r0, #0]
 80068e8:	e7d6      	b.n	8006898 <_malloc_r+0xa8>
 80068ea:	bf00      	nop
 80068ec:	200003dc 	.word	0x200003dc

080068f0 <__malloc_lock>:
 80068f0:	4801      	ldr	r0, [pc, #4]	@ (80068f8 <__malloc_lock+0x8>)
 80068f2:	f7ff bf0f 	b.w	8006714 <__retarget_lock_acquire_recursive>
 80068f6:	bf00      	nop
 80068f8:	200003d4 	.word	0x200003d4

080068fc <__malloc_unlock>:
 80068fc:	4801      	ldr	r0, [pc, #4]	@ (8006904 <__malloc_unlock+0x8>)
 80068fe:	f7ff bf0a 	b.w	8006716 <__retarget_lock_release_recursive>
 8006902:	bf00      	nop
 8006904:	200003d4 	.word	0x200003d4

08006908 <__ssputs_r>:
 8006908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800690c:	688e      	ldr	r6, [r1, #8]
 800690e:	461f      	mov	r7, r3
 8006910:	42be      	cmp	r6, r7
 8006912:	680b      	ldr	r3, [r1, #0]
 8006914:	4682      	mov	sl, r0
 8006916:	460c      	mov	r4, r1
 8006918:	4690      	mov	r8, r2
 800691a:	d82d      	bhi.n	8006978 <__ssputs_r+0x70>
 800691c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006920:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006924:	d026      	beq.n	8006974 <__ssputs_r+0x6c>
 8006926:	6965      	ldr	r5, [r4, #20]
 8006928:	6909      	ldr	r1, [r1, #16]
 800692a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800692e:	eba3 0901 	sub.w	r9, r3, r1
 8006932:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006936:	1c7b      	adds	r3, r7, #1
 8006938:	444b      	add	r3, r9
 800693a:	106d      	asrs	r5, r5, #1
 800693c:	429d      	cmp	r5, r3
 800693e:	bf38      	it	cc
 8006940:	461d      	movcc	r5, r3
 8006942:	0553      	lsls	r3, r2, #21
 8006944:	d527      	bpl.n	8006996 <__ssputs_r+0x8e>
 8006946:	4629      	mov	r1, r5
 8006948:	f7ff ff52 	bl	80067f0 <_malloc_r>
 800694c:	4606      	mov	r6, r0
 800694e:	b360      	cbz	r0, 80069aa <__ssputs_r+0xa2>
 8006950:	6921      	ldr	r1, [r4, #16]
 8006952:	464a      	mov	r2, r9
 8006954:	f000 fae8 	bl	8006f28 <memcpy>
 8006958:	89a3      	ldrh	r3, [r4, #12]
 800695a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800695e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006962:	81a3      	strh	r3, [r4, #12]
 8006964:	6126      	str	r6, [r4, #16]
 8006966:	6165      	str	r5, [r4, #20]
 8006968:	444e      	add	r6, r9
 800696a:	eba5 0509 	sub.w	r5, r5, r9
 800696e:	6026      	str	r6, [r4, #0]
 8006970:	60a5      	str	r5, [r4, #8]
 8006972:	463e      	mov	r6, r7
 8006974:	42be      	cmp	r6, r7
 8006976:	d900      	bls.n	800697a <__ssputs_r+0x72>
 8006978:	463e      	mov	r6, r7
 800697a:	6820      	ldr	r0, [r4, #0]
 800697c:	4632      	mov	r2, r6
 800697e:	4641      	mov	r1, r8
 8006980:	f000 faa8 	bl	8006ed4 <memmove>
 8006984:	68a3      	ldr	r3, [r4, #8]
 8006986:	1b9b      	subs	r3, r3, r6
 8006988:	60a3      	str	r3, [r4, #8]
 800698a:	6823      	ldr	r3, [r4, #0]
 800698c:	4433      	add	r3, r6
 800698e:	6023      	str	r3, [r4, #0]
 8006990:	2000      	movs	r0, #0
 8006992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006996:	462a      	mov	r2, r5
 8006998:	f000 fad4 	bl	8006f44 <_realloc_r>
 800699c:	4606      	mov	r6, r0
 800699e:	2800      	cmp	r0, #0
 80069a0:	d1e0      	bne.n	8006964 <__ssputs_r+0x5c>
 80069a2:	6921      	ldr	r1, [r4, #16]
 80069a4:	4650      	mov	r0, sl
 80069a6:	f7ff feb7 	bl	8006718 <_free_r>
 80069aa:	230c      	movs	r3, #12
 80069ac:	f8ca 3000 	str.w	r3, [sl]
 80069b0:	89a3      	ldrh	r3, [r4, #12]
 80069b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069b6:	81a3      	strh	r3, [r4, #12]
 80069b8:	f04f 30ff 	mov.w	r0, #4294967295
 80069bc:	e7e9      	b.n	8006992 <__ssputs_r+0x8a>
	...

080069c0 <_svfiprintf_r>:
 80069c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069c4:	4698      	mov	r8, r3
 80069c6:	898b      	ldrh	r3, [r1, #12]
 80069c8:	061b      	lsls	r3, r3, #24
 80069ca:	b09d      	sub	sp, #116	@ 0x74
 80069cc:	4607      	mov	r7, r0
 80069ce:	460d      	mov	r5, r1
 80069d0:	4614      	mov	r4, r2
 80069d2:	d510      	bpl.n	80069f6 <_svfiprintf_r+0x36>
 80069d4:	690b      	ldr	r3, [r1, #16]
 80069d6:	b973      	cbnz	r3, 80069f6 <_svfiprintf_r+0x36>
 80069d8:	2140      	movs	r1, #64	@ 0x40
 80069da:	f7ff ff09 	bl	80067f0 <_malloc_r>
 80069de:	6028      	str	r0, [r5, #0]
 80069e0:	6128      	str	r0, [r5, #16]
 80069e2:	b930      	cbnz	r0, 80069f2 <_svfiprintf_r+0x32>
 80069e4:	230c      	movs	r3, #12
 80069e6:	603b      	str	r3, [r7, #0]
 80069e8:	f04f 30ff 	mov.w	r0, #4294967295
 80069ec:	b01d      	add	sp, #116	@ 0x74
 80069ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069f2:	2340      	movs	r3, #64	@ 0x40
 80069f4:	616b      	str	r3, [r5, #20]
 80069f6:	2300      	movs	r3, #0
 80069f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80069fa:	2320      	movs	r3, #32
 80069fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006a00:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a04:	2330      	movs	r3, #48	@ 0x30
 8006a06:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006ba4 <_svfiprintf_r+0x1e4>
 8006a0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006a0e:	f04f 0901 	mov.w	r9, #1
 8006a12:	4623      	mov	r3, r4
 8006a14:	469a      	mov	sl, r3
 8006a16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a1a:	b10a      	cbz	r2, 8006a20 <_svfiprintf_r+0x60>
 8006a1c:	2a25      	cmp	r2, #37	@ 0x25
 8006a1e:	d1f9      	bne.n	8006a14 <_svfiprintf_r+0x54>
 8006a20:	ebba 0b04 	subs.w	fp, sl, r4
 8006a24:	d00b      	beq.n	8006a3e <_svfiprintf_r+0x7e>
 8006a26:	465b      	mov	r3, fp
 8006a28:	4622      	mov	r2, r4
 8006a2a:	4629      	mov	r1, r5
 8006a2c:	4638      	mov	r0, r7
 8006a2e:	f7ff ff6b 	bl	8006908 <__ssputs_r>
 8006a32:	3001      	adds	r0, #1
 8006a34:	f000 80a7 	beq.w	8006b86 <_svfiprintf_r+0x1c6>
 8006a38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a3a:	445a      	add	r2, fp
 8006a3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a3e:	f89a 3000 	ldrb.w	r3, [sl]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f000 809f 	beq.w	8006b86 <_svfiprintf_r+0x1c6>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a52:	f10a 0a01 	add.w	sl, sl, #1
 8006a56:	9304      	str	r3, [sp, #16]
 8006a58:	9307      	str	r3, [sp, #28]
 8006a5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006a5e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006a60:	4654      	mov	r4, sl
 8006a62:	2205      	movs	r2, #5
 8006a64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a68:	484e      	ldr	r0, [pc, #312]	@ (8006ba4 <_svfiprintf_r+0x1e4>)
 8006a6a:	f7f9 fbb9 	bl	80001e0 <memchr>
 8006a6e:	9a04      	ldr	r2, [sp, #16]
 8006a70:	b9d8      	cbnz	r0, 8006aaa <_svfiprintf_r+0xea>
 8006a72:	06d0      	lsls	r0, r2, #27
 8006a74:	bf44      	itt	mi
 8006a76:	2320      	movmi	r3, #32
 8006a78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a7c:	0711      	lsls	r1, r2, #28
 8006a7e:	bf44      	itt	mi
 8006a80:	232b      	movmi	r3, #43	@ 0x2b
 8006a82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a86:	f89a 3000 	ldrb.w	r3, [sl]
 8006a8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a8c:	d015      	beq.n	8006aba <_svfiprintf_r+0xfa>
 8006a8e:	9a07      	ldr	r2, [sp, #28]
 8006a90:	4654      	mov	r4, sl
 8006a92:	2000      	movs	r0, #0
 8006a94:	f04f 0c0a 	mov.w	ip, #10
 8006a98:	4621      	mov	r1, r4
 8006a9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a9e:	3b30      	subs	r3, #48	@ 0x30
 8006aa0:	2b09      	cmp	r3, #9
 8006aa2:	d94b      	bls.n	8006b3c <_svfiprintf_r+0x17c>
 8006aa4:	b1b0      	cbz	r0, 8006ad4 <_svfiprintf_r+0x114>
 8006aa6:	9207      	str	r2, [sp, #28]
 8006aa8:	e014      	b.n	8006ad4 <_svfiprintf_r+0x114>
 8006aaa:	eba0 0308 	sub.w	r3, r0, r8
 8006aae:	fa09 f303 	lsl.w	r3, r9, r3
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	9304      	str	r3, [sp, #16]
 8006ab6:	46a2      	mov	sl, r4
 8006ab8:	e7d2      	b.n	8006a60 <_svfiprintf_r+0xa0>
 8006aba:	9b03      	ldr	r3, [sp, #12]
 8006abc:	1d19      	adds	r1, r3, #4
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	9103      	str	r1, [sp, #12]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	bfbb      	ittet	lt
 8006ac6:	425b      	neglt	r3, r3
 8006ac8:	f042 0202 	orrlt.w	r2, r2, #2
 8006acc:	9307      	strge	r3, [sp, #28]
 8006ace:	9307      	strlt	r3, [sp, #28]
 8006ad0:	bfb8      	it	lt
 8006ad2:	9204      	strlt	r2, [sp, #16]
 8006ad4:	7823      	ldrb	r3, [r4, #0]
 8006ad6:	2b2e      	cmp	r3, #46	@ 0x2e
 8006ad8:	d10a      	bne.n	8006af0 <_svfiprintf_r+0x130>
 8006ada:	7863      	ldrb	r3, [r4, #1]
 8006adc:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ade:	d132      	bne.n	8006b46 <_svfiprintf_r+0x186>
 8006ae0:	9b03      	ldr	r3, [sp, #12]
 8006ae2:	1d1a      	adds	r2, r3, #4
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	9203      	str	r2, [sp, #12]
 8006ae8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006aec:	3402      	adds	r4, #2
 8006aee:	9305      	str	r3, [sp, #20]
 8006af0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006bb4 <_svfiprintf_r+0x1f4>
 8006af4:	7821      	ldrb	r1, [r4, #0]
 8006af6:	2203      	movs	r2, #3
 8006af8:	4650      	mov	r0, sl
 8006afa:	f7f9 fb71 	bl	80001e0 <memchr>
 8006afe:	b138      	cbz	r0, 8006b10 <_svfiprintf_r+0x150>
 8006b00:	9b04      	ldr	r3, [sp, #16]
 8006b02:	eba0 000a 	sub.w	r0, r0, sl
 8006b06:	2240      	movs	r2, #64	@ 0x40
 8006b08:	4082      	lsls	r2, r0
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	3401      	adds	r4, #1
 8006b0e:	9304      	str	r3, [sp, #16]
 8006b10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b14:	4824      	ldr	r0, [pc, #144]	@ (8006ba8 <_svfiprintf_r+0x1e8>)
 8006b16:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006b1a:	2206      	movs	r2, #6
 8006b1c:	f7f9 fb60 	bl	80001e0 <memchr>
 8006b20:	2800      	cmp	r0, #0
 8006b22:	d036      	beq.n	8006b92 <_svfiprintf_r+0x1d2>
 8006b24:	4b21      	ldr	r3, [pc, #132]	@ (8006bac <_svfiprintf_r+0x1ec>)
 8006b26:	bb1b      	cbnz	r3, 8006b70 <_svfiprintf_r+0x1b0>
 8006b28:	9b03      	ldr	r3, [sp, #12]
 8006b2a:	3307      	adds	r3, #7
 8006b2c:	f023 0307 	bic.w	r3, r3, #7
 8006b30:	3308      	adds	r3, #8
 8006b32:	9303      	str	r3, [sp, #12]
 8006b34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b36:	4433      	add	r3, r6
 8006b38:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b3a:	e76a      	b.n	8006a12 <_svfiprintf_r+0x52>
 8006b3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b40:	460c      	mov	r4, r1
 8006b42:	2001      	movs	r0, #1
 8006b44:	e7a8      	b.n	8006a98 <_svfiprintf_r+0xd8>
 8006b46:	2300      	movs	r3, #0
 8006b48:	3401      	adds	r4, #1
 8006b4a:	9305      	str	r3, [sp, #20]
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	f04f 0c0a 	mov.w	ip, #10
 8006b52:	4620      	mov	r0, r4
 8006b54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b58:	3a30      	subs	r2, #48	@ 0x30
 8006b5a:	2a09      	cmp	r2, #9
 8006b5c:	d903      	bls.n	8006b66 <_svfiprintf_r+0x1a6>
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d0c6      	beq.n	8006af0 <_svfiprintf_r+0x130>
 8006b62:	9105      	str	r1, [sp, #20]
 8006b64:	e7c4      	b.n	8006af0 <_svfiprintf_r+0x130>
 8006b66:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b6a:	4604      	mov	r4, r0
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e7f0      	b.n	8006b52 <_svfiprintf_r+0x192>
 8006b70:	ab03      	add	r3, sp, #12
 8006b72:	9300      	str	r3, [sp, #0]
 8006b74:	462a      	mov	r2, r5
 8006b76:	4b0e      	ldr	r3, [pc, #56]	@ (8006bb0 <_svfiprintf_r+0x1f0>)
 8006b78:	a904      	add	r1, sp, #16
 8006b7a:	4638      	mov	r0, r7
 8006b7c:	f3af 8000 	nop.w
 8006b80:	1c42      	adds	r2, r0, #1
 8006b82:	4606      	mov	r6, r0
 8006b84:	d1d6      	bne.n	8006b34 <_svfiprintf_r+0x174>
 8006b86:	89ab      	ldrh	r3, [r5, #12]
 8006b88:	065b      	lsls	r3, r3, #25
 8006b8a:	f53f af2d 	bmi.w	80069e8 <_svfiprintf_r+0x28>
 8006b8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006b90:	e72c      	b.n	80069ec <_svfiprintf_r+0x2c>
 8006b92:	ab03      	add	r3, sp, #12
 8006b94:	9300      	str	r3, [sp, #0]
 8006b96:	462a      	mov	r2, r5
 8006b98:	4b05      	ldr	r3, [pc, #20]	@ (8006bb0 <_svfiprintf_r+0x1f0>)
 8006b9a:	a904      	add	r1, sp, #16
 8006b9c:	4638      	mov	r0, r7
 8006b9e:	f000 f879 	bl	8006c94 <_printf_i>
 8006ba2:	e7ed      	b.n	8006b80 <_svfiprintf_r+0x1c0>
 8006ba4:	080070c8 	.word	0x080070c8
 8006ba8:	080070d2 	.word	0x080070d2
 8006bac:	00000000 	.word	0x00000000
 8006bb0:	08006909 	.word	0x08006909
 8006bb4:	080070ce 	.word	0x080070ce

08006bb8 <_printf_common>:
 8006bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bbc:	4616      	mov	r6, r2
 8006bbe:	4698      	mov	r8, r3
 8006bc0:	688a      	ldr	r2, [r1, #8]
 8006bc2:	690b      	ldr	r3, [r1, #16]
 8006bc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	bfb8      	it	lt
 8006bcc:	4613      	movlt	r3, r2
 8006bce:	6033      	str	r3, [r6, #0]
 8006bd0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006bd4:	4607      	mov	r7, r0
 8006bd6:	460c      	mov	r4, r1
 8006bd8:	b10a      	cbz	r2, 8006bde <_printf_common+0x26>
 8006bda:	3301      	adds	r3, #1
 8006bdc:	6033      	str	r3, [r6, #0]
 8006bde:	6823      	ldr	r3, [r4, #0]
 8006be0:	0699      	lsls	r1, r3, #26
 8006be2:	bf42      	ittt	mi
 8006be4:	6833      	ldrmi	r3, [r6, #0]
 8006be6:	3302      	addmi	r3, #2
 8006be8:	6033      	strmi	r3, [r6, #0]
 8006bea:	6825      	ldr	r5, [r4, #0]
 8006bec:	f015 0506 	ands.w	r5, r5, #6
 8006bf0:	d106      	bne.n	8006c00 <_printf_common+0x48>
 8006bf2:	f104 0a19 	add.w	sl, r4, #25
 8006bf6:	68e3      	ldr	r3, [r4, #12]
 8006bf8:	6832      	ldr	r2, [r6, #0]
 8006bfa:	1a9b      	subs	r3, r3, r2
 8006bfc:	42ab      	cmp	r3, r5
 8006bfe:	dc26      	bgt.n	8006c4e <_printf_common+0x96>
 8006c00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006c04:	6822      	ldr	r2, [r4, #0]
 8006c06:	3b00      	subs	r3, #0
 8006c08:	bf18      	it	ne
 8006c0a:	2301      	movne	r3, #1
 8006c0c:	0692      	lsls	r2, r2, #26
 8006c0e:	d42b      	bmi.n	8006c68 <_printf_common+0xb0>
 8006c10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006c14:	4641      	mov	r1, r8
 8006c16:	4638      	mov	r0, r7
 8006c18:	47c8      	blx	r9
 8006c1a:	3001      	adds	r0, #1
 8006c1c:	d01e      	beq.n	8006c5c <_printf_common+0xa4>
 8006c1e:	6823      	ldr	r3, [r4, #0]
 8006c20:	6922      	ldr	r2, [r4, #16]
 8006c22:	f003 0306 	and.w	r3, r3, #6
 8006c26:	2b04      	cmp	r3, #4
 8006c28:	bf02      	ittt	eq
 8006c2a:	68e5      	ldreq	r5, [r4, #12]
 8006c2c:	6833      	ldreq	r3, [r6, #0]
 8006c2e:	1aed      	subeq	r5, r5, r3
 8006c30:	68a3      	ldr	r3, [r4, #8]
 8006c32:	bf0c      	ite	eq
 8006c34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c38:	2500      	movne	r5, #0
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	bfc4      	itt	gt
 8006c3e:	1a9b      	subgt	r3, r3, r2
 8006c40:	18ed      	addgt	r5, r5, r3
 8006c42:	2600      	movs	r6, #0
 8006c44:	341a      	adds	r4, #26
 8006c46:	42b5      	cmp	r5, r6
 8006c48:	d11a      	bne.n	8006c80 <_printf_common+0xc8>
 8006c4a:	2000      	movs	r0, #0
 8006c4c:	e008      	b.n	8006c60 <_printf_common+0xa8>
 8006c4e:	2301      	movs	r3, #1
 8006c50:	4652      	mov	r2, sl
 8006c52:	4641      	mov	r1, r8
 8006c54:	4638      	mov	r0, r7
 8006c56:	47c8      	blx	r9
 8006c58:	3001      	adds	r0, #1
 8006c5a:	d103      	bne.n	8006c64 <_printf_common+0xac>
 8006c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c64:	3501      	adds	r5, #1
 8006c66:	e7c6      	b.n	8006bf6 <_printf_common+0x3e>
 8006c68:	18e1      	adds	r1, r4, r3
 8006c6a:	1c5a      	adds	r2, r3, #1
 8006c6c:	2030      	movs	r0, #48	@ 0x30
 8006c6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006c72:	4422      	add	r2, r4
 8006c74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006c78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006c7c:	3302      	adds	r3, #2
 8006c7e:	e7c7      	b.n	8006c10 <_printf_common+0x58>
 8006c80:	2301      	movs	r3, #1
 8006c82:	4622      	mov	r2, r4
 8006c84:	4641      	mov	r1, r8
 8006c86:	4638      	mov	r0, r7
 8006c88:	47c8      	blx	r9
 8006c8a:	3001      	adds	r0, #1
 8006c8c:	d0e6      	beq.n	8006c5c <_printf_common+0xa4>
 8006c8e:	3601      	adds	r6, #1
 8006c90:	e7d9      	b.n	8006c46 <_printf_common+0x8e>
	...

08006c94 <_printf_i>:
 8006c94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c98:	7e0f      	ldrb	r7, [r1, #24]
 8006c9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006c9c:	2f78      	cmp	r7, #120	@ 0x78
 8006c9e:	4691      	mov	r9, r2
 8006ca0:	4680      	mov	r8, r0
 8006ca2:	460c      	mov	r4, r1
 8006ca4:	469a      	mov	sl, r3
 8006ca6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006caa:	d807      	bhi.n	8006cbc <_printf_i+0x28>
 8006cac:	2f62      	cmp	r7, #98	@ 0x62
 8006cae:	d80a      	bhi.n	8006cc6 <_printf_i+0x32>
 8006cb0:	2f00      	cmp	r7, #0
 8006cb2:	f000 80d2 	beq.w	8006e5a <_printf_i+0x1c6>
 8006cb6:	2f58      	cmp	r7, #88	@ 0x58
 8006cb8:	f000 80b9 	beq.w	8006e2e <_printf_i+0x19a>
 8006cbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006cc0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006cc4:	e03a      	b.n	8006d3c <_printf_i+0xa8>
 8006cc6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006cca:	2b15      	cmp	r3, #21
 8006ccc:	d8f6      	bhi.n	8006cbc <_printf_i+0x28>
 8006cce:	a101      	add	r1, pc, #4	@ (adr r1, 8006cd4 <_printf_i+0x40>)
 8006cd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006cd4:	08006d2d 	.word	0x08006d2d
 8006cd8:	08006d41 	.word	0x08006d41
 8006cdc:	08006cbd 	.word	0x08006cbd
 8006ce0:	08006cbd 	.word	0x08006cbd
 8006ce4:	08006cbd 	.word	0x08006cbd
 8006ce8:	08006cbd 	.word	0x08006cbd
 8006cec:	08006d41 	.word	0x08006d41
 8006cf0:	08006cbd 	.word	0x08006cbd
 8006cf4:	08006cbd 	.word	0x08006cbd
 8006cf8:	08006cbd 	.word	0x08006cbd
 8006cfc:	08006cbd 	.word	0x08006cbd
 8006d00:	08006e41 	.word	0x08006e41
 8006d04:	08006d6b 	.word	0x08006d6b
 8006d08:	08006dfb 	.word	0x08006dfb
 8006d0c:	08006cbd 	.word	0x08006cbd
 8006d10:	08006cbd 	.word	0x08006cbd
 8006d14:	08006e63 	.word	0x08006e63
 8006d18:	08006cbd 	.word	0x08006cbd
 8006d1c:	08006d6b 	.word	0x08006d6b
 8006d20:	08006cbd 	.word	0x08006cbd
 8006d24:	08006cbd 	.word	0x08006cbd
 8006d28:	08006e03 	.word	0x08006e03
 8006d2c:	6833      	ldr	r3, [r6, #0]
 8006d2e:	1d1a      	adds	r2, r3, #4
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	6032      	str	r2, [r6, #0]
 8006d34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e09d      	b.n	8006e7c <_printf_i+0x1e8>
 8006d40:	6833      	ldr	r3, [r6, #0]
 8006d42:	6820      	ldr	r0, [r4, #0]
 8006d44:	1d19      	adds	r1, r3, #4
 8006d46:	6031      	str	r1, [r6, #0]
 8006d48:	0606      	lsls	r6, r0, #24
 8006d4a:	d501      	bpl.n	8006d50 <_printf_i+0xbc>
 8006d4c:	681d      	ldr	r5, [r3, #0]
 8006d4e:	e003      	b.n	8006d58 <_printf_i+0xc4>
 8006d50:	0645      	lsls	r5, r0, #25
 8006d52:	d5fb      	bpl.n	8006d4c <_printf_i+0xb8>
 8006d54:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006d58:	2d00      	cmp	r5, #0
 8006d5a:	da03      	bge.n	8006d64 <_printf_i+0xd0>
 8006d5c:	232d      	movs	r3, #45	@ 0x2d
 8006d5e:	426d      	negs	r5, r5
 8006d60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d64:	4859      	ldr	r0, [pc, #356]	@ (8006ecc <_printf_i+0x238>)
 8006d66:	230a      	movs	r3, #10
 8006d68:	e011      	b.n	8006d8e <_printf_i+0xfa>
 8006d6a:	6821      	ldr	r1, [r4, #0]
 8006d6c:	6833      	ldr	r3, [r6, #0]
 8006d6e:	0608      	lsls	r0, r1, #24
 8006d70:	f853 5b04 	ldr.w	r5, [r3], #4
 8006d74:	d402      	bmi.n	8006d7c <_printf_i+0xe8>
 8006d76:	0649      	lsls	r1, r1, #25
 8006d78:	bf48      	it	mi
 8006d7a:	b2ad      	uxthmi	r5, r5
 8006d7c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006d7e:	4853      	ldr	r0, [pc, #332]	@ (8006ecc <_printf_i+0x238>)
 8006d80:	6033      	str	r3, [r6, #0]
 8006d82:	bf14      	ite	ne
 8006d84:	230a      	movne	r3, #10
 8006d86:	2308      	moveq	r3, #8
 8006d88:	2100      	movs	r1, #0
 8006d8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006d8e:	6866      	ldr	r6, [r4, #4]
 8006d90:	60a6      	str	r6, [r4, #8]
 8006d92:	2e00      	cmp	r6, #0
 8006d94:	bfa2      	ittt	ge
 8006d96:	6821      	ldrge	r1, [r4, #0]
 8006d98:	f021 0104 	bicge.w	r1, r1, #4
 8006d9c:	6021      	strge	r1, [r4, #0]
 8006d9e:	b90d      	cbnz	r5, 8006da4 <_printf_i+0x110>
 8006da0:	2e00      	cmp	r6, #0
 8006da2:	d04b      	beq.n	8006e3c <_printf_i+0x1a8>
 8006da4:	4616      	mov	r6, r2
 8006da6:	fbb5 f1f3 	udiv	r1, r5, r3
 8006daa:	fb03 5711 	mls	r7, r3, r1, r5
 8006dae:	5dc7      	ldrb	r7, [r0, r7]
 8006db0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006db4:	462f      	mov	r7, r5
 8006db6:	42bb      	cmp	r3, r7
 8006db8:	460d      	mov	r5, r1
 8006dba:	d9f4      	bls.n	8006da6 <_printf_i+0x112>
 8006dbc:	2b08      	cmp	r3, #8
 8006dbe:	d10b      	bne.n	8006dd8 <_printf_i+0x144>
 8006dc0:	6823      	ldr	r3, [r4, #0]
 8006dc2:	07df      	lsls	r7, r3, #31
 8006dc4:	d508      	bpl.n	8006dd8 <_printf_i+0x144>
 8006dc6:	6923      	ldr	r3, [r4, #16]
 8006dc8:	6861      	ldr	r1, [r4, #4]
 8006dca:	4299      	cmp	r1, r3
 8006dcc:	bfde      	ittt	le
 8006dce:	2330      	movle	r3, #48	@ 0x30
 8006dd0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006dd4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006dd8:	1b92      	subs	r2, r2, r6
 8006dda:	6122      	str	r2, [r4, #16]
 8006ddc:	f8cd a000 	str.w	sl, [sp]
 8006de0:	464b      	mov	r3, r9
 8006de2:	aa03      	add	r2, sp, #12
 8006de4:	4621      	mov	r1, r4
 8006de6:	4640      	mov	r0, r8
 8006de8:	f7ff fee6 	bl	8006bb8 <_printf_common>
 8006dec:	3001      	adds	r0, #1
 8006dee:	d14a      	bne.n	8006e86 <_printf_i+0x1f2>
 8006df0:	f04f 30ff 	mov.w	r0, #4294967295
 8006df4:	b004      	add	sp, #16
 8006df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dfa:	6823      	ldr	r3, [r4, #0]
 8006dfc:	f043 0320 	orr.w	r3, r3, #32
 8006e00:	6023      	str	r3, [r4, #0]
 8006e02:	4833      	ldr	r0, [pc, #204]	@ (8006ed0 <_printf_i+0x23c>)
 8006e04:	2778      	movs	r7, #120	@ 0x78
 8006e06:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	6831      	ldr	r1, [r6, #0]
 8006e0e:	061f      	lsls	r7, r3, #24
 8006e10:	f851 5b04 	ldr.w	r5, [r1], #4
 8006e14:	d402      	bmi.n	8006e1c <_printf_i+0x188>
 8006e16:	065f      	lsls	r7, r3, #25
 8006e18:	bf48      	it	mi
 8006e1a:	b2ad      	uxthmi	r5, r5
 8006e1c:	6031      	str	r1, [r6, #0]
 8006e1e:	07d9      	lsls	r1, r3, #31
 8006e20:	bf44      	itt	mi
 8006e22:	f043 0320 	orrmi.w	r3, r3, #32
 8006e26:	6023      	strmi	r3, [r4, #0]
 8006e28:	b11d      	cbz	r5, 8006e32 <_printf_i+0x19e>
 8006e2a:	2310      	movs	r3, #16
 8006e2c:	e7ac      	b.n	8006d88 <_printf_i+0xf4>
 8006e2e:	4827      	ldr	r0, [pc, #156]	@ (8006ecc <_printf_i+0x238>)
 8006e30:	e7e9      	b.n	8006e06 <_printf_i+0x172>
 8006e32:	6823      	ldr	r3, [r4, #0]
 8006e34:	f023 0320 	bic.w	r3, r3, #32
 8006e38:	6023      	str	r3, [r4, #0]
 8006e3a:	e7f6      	b.n	8006e2a <_printf_i+0x196>
 8006e3c:	4616      	mov	r6, r2
 8006e3e:	e7bd      	b.n	8006dbc <_printf_i+0x128>
 8006e40:	6833      	ldr	r3, [r6, #0]
 8006e42:	6825      	ldr	r5, [r4, #0]
 8006e44:	6961      	ldr	r1, [r4, #20]
 8006e46:	1d18      	adds	r0, r3, #4
 8006e48:	6030      	str	r0, [r6, #0]
 8006e4a:	062e      	lsls	r6, r5, #24
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	d501      	bpl.n	8006e54 <_printf_i+0x1c0>
 8006e50:	6019      	str	r1, [r3, #0]
 8006e52:	e002      	b.n	8006e5a <_printf_i+0x1c6>
 8006e54:	0668      	lsls	r0, r5, #25
 8006e56:	d5fb      	bpl.n	8006e50 <_printf_i+0x1bc>
 8006e58:	8019      	strh	r1, [r3, #0]
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	6123      	str	r3, [r4, #16]
 8006e5e:	4616      	mov	r6, r2
 8006e60:	e7bc      	b.n	8006ddc <_printf_i+0x148>
 8006e62:	6833      	ldr	r3, [r6, #0]
 8006e64:	1d1a      	adds	r2, r3, #4
 8006e66:	6032      	str	r2, [r6, #0]
 8006e68:	681e      	ldr	r6, [r3, #0]
 8006e6a:	6862      	ldr	r2, [r4, #4]
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	4630      	mov	r0, r6
 8006e70:	f7f9 f9b6 	bl	80001e0 <memchr>
 8006e74:	b108      	cbz	r0, 8006e7a <_printf_i+0x1e6>
 8006e76:	1b80      	subs	r0, r0, r6
 8006e78:	6060      	str	r0, [r4, #4]
 8006e7a:	6863      	ldr	r3, [r4, #4]
 8006e7c:	6123      	str	r3, [r4, #16]
 8006e7e:	2300      	movs	r3, #0
 8006e80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e84:	e7aa      	b.n	8006ddc <_printf_i+0x148>
 8006e86:	6923      	ldr	r3, [r4, #16]
 8006e88:	4632      	mov	r2, r6
 8006e8a:	4649      	mov	r1, r9
 8006e8c:	4640      	mov	r0, r8
 8006e8e:	47d0      	blx	sl
 8006e90:	3001      	adds	r0, #1
 8006e92:	d0ad      	beq.n	8006df0 <_printf_i+0x15c>
 8006e94:	6823      	ldr	r3, [r4, #0]
 8006e96:	079b      	lsls	r3, r3, #30
 8006e98:	d413      	bmi.n	8006ec2 <_printf_i+0x22e>
 8006e9a:	68e0      	ldr	r0, [r4, #12]
 8006e9c:	9b03      	ldr	r3, [sp, #12]
 8006e9e:	4298      	cmp	r0, r3
 8006ea0:	bfb8      	it	lt
 8006ea2:	4618      	movlt	r0, r3
 8006ea4:	e7a6      	b.n	8006df4 <_printf_i+0x160>
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	4632      	mov	r2, r6
 8006eaa:	4649      	mov	r1, r9
 8006eac:	4640      	mov	r0, r8
 8006eae:	47d0      	blx	sl
 8006eb0:	3001      	adds	r0, #1
 8006eb2:	d09d      	beq.n	8006df0 <_printf_i+0x15c>
 8006eb4:	3501      	adds	r5, #1
 8006eb6:	68e3      	ldr	r3, [r4, #12]
 8006eb8:	9903      	ldr	r1, [sp, #12]
 8006eba:	1a5b      	subs	r3, r3, r1
 8006ebc:	42ab      	cmp	r3, r5
 8006ebe:	dcf2      	bgt.n	8006ea6 <_printf_i+0x212>
 8006ec0:	e7eb      	b.n	8006e9a <_printf_i+0x206>
 8006ec2:	2500      	movs	r5, #0
 8006ec4:	f104 0619 	add.w	r6, r4, #25
 8006ec8:	e7f5      	b.n	8006eb6 <_printf_i+0x222>
 8006eca:	bf00      	nop
 8006ecc:	080070d9 	.word	0x080070d9
 8006ed0:	080070ea 	.word	0x080070ea

08006ed4 <memmove>:
 8006ed4:	4288      	cmp	r0, r1
 8006ed6:	b510      	push	{r4, lr}
 8006ed8:	eb01 0402 	add.w	r4, r1, r2
 8006edc:	d902      	bls.n	8006ee4 <memmove+0x10>
 8006ede:	4284      	cmp	r4, r0
 8006ee0:	4623      	mov	r3, r4
 8006ee2:	d807      	bhi.n	8006ef4 <memmove+0x20>
 8006ee4:	1e43      	subs	r3, r0, #1
 8006ee6:	42a1      	cmp	r1, r4
 8006ee8:	d008      	beq.n	8006efc <memmove+0x28>
 8006eea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006eee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ef2:	e7f8      	b.n	8006ee6 <memmove+0x12>
 8006ef4:	4402      	add	r2, r0
 8006ef6:	4601      	mov	r1, r0
 8006ef8:	428a      	cmp	r2, r1
 8006efa:	d100      	bne.n	8006efe <memmove+0x2a>
 8006efc:	bd10      	pop	{r4, pc}
 8006efe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f06:	e7f7      	b.n	8006ef8 <memmove+0x24>

08006f08 <_sbrk_r>:
 8006f08:	b538      	push	{r3, r4, r5, lr}
 8006f0a:	4d06      	ldr	r5, [pc, #24]	@ (8006f24 <_sbrk_r+0x1c>)
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	4604      	mov	r4, r0
 8006f10:	4608      	mov	r0, r1
 8006f12:	602b      	str	r3, [r5, #0]
 8006f14:	f7fa fc28 	bl	8001768 <_sbrk>
 8006f18:	1c43      	adds	r3, r0, #1
 8006f1a:	d102      	bne.n	8006f22 <_sbrk_r+0x1a>
 8006f1c:	682b      	ldr	r3, [r5, #0]
 8006f1e:	b103      	cbz	r3, 8006f22 <_sbrk_r+0x1a>
 8006f20:	6023      	str	r3, [r4, #0]
 8006f22:	bd38      	pop	{r3, r4, r5, pc}
 8006f24:	200003d0 	.word	0x200003d0

08006f28 <memcpy>:
 8006f28:	440a      	add	r2, r1
 8006f2a:	4291      	cmp	r1, r2
 8006f2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f30:	d100      	bne.n	8006f34 <memcpy+0xc>
 8006f32:	4770      	bx	lr
 8006f34:	b510      	push	{r4, lr}
 8006f36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f3e:	4291      	cmp	r1, r2
 8006f40:	d1f9      	bne.n	8006f36 <memcpy+0xe>
 8006f42:	bd10      	pop	{r4, pc}

08006f44 <_realloc_r>:
 8006f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f48:	4680      	mov	r8, r0
 8006f4a:	4615      	mov	r5, r2
 8006f4c:	460c      	mov	r4, r1
 8006f4e:	b921      	cbnz	r1, 8006f5a <_realloc_r+0x16>
 8006f50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f54:	4611      	mov	r1, r2
 8006f56:	f7ff bc4b 	b.w	80067f0 <_malloc_r>
 8006f5a:	b92a      	cbnz	r2, 8006f68 <_realloc_r+0x24>
 8006f5c:	f7ff fbdc 	bl	8006718 <_free_r>
 8006f60:	2400      	movs	r4, #0
 8006f62:	4620      	mov	r0, r4
 8006f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f68:	f000 f81a 	bl	8006fa0 <_malloc_usable_size_r>
 8006f6c:	4285      	cmp	r5, r0
 8006f6e:	4606      	mov	r6, r0
 8006f70:	d802      	bhi.n	8006f78 <_realloc_r+0x34>
 8006f72:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006f76:	d8f4      	bhi.n	8006f62 <_realloc_r+0x1e>
 8006f78:	4629      	mov	r1, r5
 8006f7a:	4640      	mov	r0, r8
 8006f7c:	f7ff fc38 	bl	80067f0 <_malloc_r>
 8006f80:	4607      	mov	r7, r0
 8006f82:	2800      	cmp	r0, #0
 8006f84:	d0ec      	beq.n	8006f60 <_realloc_r+0x1c>
 8006f86:	42b5      	cmp	r5, r6
 8006f88:	462a      	mov	r2, r5
 8006f8a:	4621      	mov	r1, r4
 8006f8c:	bf28      	it	cs
 8006f8e:	4632      	movcs	r2, r6
 8006f90:	f7ff ffca 	bl	8006f28 <memcpy>
 8006f94:	4621      	mov	r1, r4
 8006f96:	4640      	mov	r0, r8
 8006f98:	f7ff fbbe 	bl	8006718 <_free_r>
 8006f9c:	463c      	mov	r4, r7
 8006f9e:	e7e0      	b.n	8006f62 <_realloc_r+0x1e>

08006fa0 <_malloc_usable_size_r>:
 8006fa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fa4:	1f18      	subs	r0, r3, #4
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	bfbc      	itt	lt
 8006faa:	580b      	ldrlt	r3, [r1, r0]
 8006fac:	18c0      	addlt	r0, r0, r3
 8006fae:	4770      	bx	lr

08006fb0 <_init>:
 8006fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fb2:	bf00      	nop
 8006fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fb6:	bc08      	pop	{r3}
 8006fb8:	469e      	mov	lr, r3
 8006fba:	4770      	bx	lr

08006fbc <_fini>:
 8006fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fbe:	bf00      	nop
 8006fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fc2:	bc08      	pop	{r3}
 8006fc4:	469e      	mov	lr, r3
 8006fc6:	4770      	bx	lr
